/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 63219.0, "series": [{"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 28.0], [1.0, 28.0], [1.1, 28.0], [1.2, 28.0], [1.3, 28.0], [1.4, 28.0], [1.5, 28.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 29.0], [2.6, 29.0], [2.7, 29.0], [2.8, 29.0], [2.9, 29.0], [3.0, 29.0], [3.1, 29.0], [3.2, 29.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 30.0], [4.1, 30.0], [4.2, 30.0], [4.3, 30.0], [4.4, 30.0], [4.5, 30.0], [4.6, 30.0], [4.7, 30.0], [4.8, 30.0], [4.9, 30.0], [5.0, 31.0], [5.1, 31.0], [5.2, 31.0], [5.3, 31.0], [5.4, 31.0], [5.5, 31.0], [5.6, 31.0], [5.7, 31.0], [5.8, 31.0], [5.9, 31.0], [6.0, 31.0], [6.1, 32.0], [6.2, 32.0], [6.3, 32.0], [6.4, 32.0], [6.5, 32.0], [6.6, 32.0], [6.7, 32.0], [6.8, 32.0], [6.9, 32.0], [7.0, 32.0], [7.1, 32.0], [7.2, 32.0], [7.3, 32.0], [7.4, 32.0], [7.5, 32.0], [7.6, 33.0], [7.7, 33.0], [7.8, 33.0], [7.9, 33.0], [8.0, 33.0], [8.1, 33.0], [8.2, 33.0], [8.3, 33.0], [8.4, 33.0], [8.5, 33.0], [8.6, 33.0], [8.7, 33.0], [8.8, 33.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 33.0], [9.5, 33.0], [9.6, 34.0], [9.7, 34.0], [9.8, 34.0], [9.9, 34.0], [10.0, 34.0], [10.1, 34.0], [10.2, 34.0], [10.3, 34.0], [10.4, 34.0], [10.5, 34.0], [10.6, 34.0], [10.7, 34.0], [10.8, 34.0], [10.9, 34.0], [11.0, 34.0], [11.1, 34.0], [11.2, 34.0], [11.3, 34.0], [11.4, 34.0], [11.5, 34.0], [11.6, 34.0], [11.7, 34.0], [11.8, 34.0], [11.9, 34.0], [12.0, 34.0], [12.1, 34.0], [12.2, 34.0], [12.3, 34.0], [12.4, 35.0], [12.5, 35.0], [12.6, 35.0], [12.7, 35.0], [12.8, 35.0], [12.9, 35.0], [13.0, 35.0], [13.1, 35.0], [13.2, 35.0], [13.3, 35.0], [13.4, 35.0], [13.5, 35.0], [13.6, 35.0], [13.7, 35.0], [13.8, 35.0], [13.9, 35.0], [14.0, 35.0], [14.1, 35.0], [14.2, 35.0], [14.3, 35.0], [14.4, 35.0], [14.5, 35.0], [14.6, 35.0], [14.7, 35.0], [14.8, 35.0], [14.9, 35.0], [15.0, 35.0], [15.1, 35.0], [15.2, 36.0], [15.3, 36.0], [15.4, 36.0], [15.5, 36.0], [15.6, 36.0], [15.7, 36.0], [15.8, 36.0], [15.9, 36.0], [16.0, 36.0], [16.1, 36.0], [16.2, 36.0], [16.3, 36.0], [16.4, 36.0], [16.5, 36.0], [16.6, 36.0], [16.7, 36.0], [16.8, 36.0], [16.9, 36.0], [17.0, 36.0], [17.1, 36.0], [17.2, 36.0], [17.3, 36.0], [17.4, 36.0], [17.5, 36.0], [17.6, 36.0], [17.7, 36.0], [17.8, 36.0], [17.9, 36.0], [18.0, 36.0], [18.1, 36.0], [18.2, 36.0], [18.3, 36.0], [18.4, 36.0], [18.5, 36.0], [18.6, 36.0], [18.7, 36.0], [18.8, 36.0], [18.9, 37.0], [19.0, 37.0], [19.1, 37.0], [19.2, 37.0], [19.3, 37.0], [19.4, 37.0], [19.5, 37.0], [19.6, 37.0], [19.7, 37.0], [19.8, 37.0], [19.9, 37.0], [20.0, 37.0], [20.1, 37.0], [20.2, 37.0], [20.3, 37.0], [20.4, 37.0], [20.5, 37.0], [20.6, 37.0], [20.7, 37.0], [20.8, 37.0], [20.9, 37.0], [21.0, 37.0], [21.1, 37.0], [21.2, 37.0], [21.3, 37.0], [21.4, 37.0], [21.5, 37.0], [21.6, 37.0], [21.7, 37.0], [21.8, 37.0], [21.9, 37.0], [22.0, 37.0], [22.1, 37.0], [22.2, 37.0], [22.3, 37.0], [22.4, 37.0], [22.5, 37.0], [22.6, 37.0], [22.7, 37.0], [22.8, 37.0], [22.9, 37.0], [23.0, 37.0], [23.1, 38.0], [23.2, 38.0], [23.3, 38.0], [23.4, 38.0], [23.5, 38.0], [23.6, 38.0], [23.7, 38.0], [23.8, 38.0], [23.9, 38.0], [24.0, 38.0], [24.1, 38.0], [24.2, 38.0], [24.3, 38.0], [24.4, 38.0], [24.5, 38.0], [24.6, 38.0], [24.7, 38.0], [24.8, 38.0], [24.9, 38.0], [25.0, 38.0], [25.1, 38.0], [25.2, 38.0], [25.3, 38.0], [25.4, 38.0], [25.5, 38.0], [25.6, 38.0], [25.7, 38.0], [25.8, 38.0], [25.9, 38.0], [26.0, 38.0], [26.1, 38.0], [26.2, 38.0], [26.3, 38.0], [26.4, 38.0], [26.5, 38.0], [26.6, 38.0], [26.7, 38.0], [26.8, 38.0], [26.9, 38.0], [27.0, 38.0], [27.1, 38.0], [27.2, 38.0], [27.3, 38.0], [27.4, 39.0], [27.5, 39.0], [27.6, 39.0], [27.7, 39.0], [27.8, 39.0], [27.9, 39.0], [28.0, 39.0], [28.1, 39.0], [28.2, 39.0], [28.3, 39.0], [28.4, 39.0], [28.5, 39.0], [28.6, 39.0], [28.7, 39.0], [28.8, 39.0], [28.9, 39.0], [29.0, 39.0], [29.1, 39.0], [29.2, 39.0], [29.3, 39.0], [29.4, 39.0], [29.5, 39.0], [29.6, 39.0], [29.7, 39.0], [29.8, 39.0], [29.9, 39.0], [30.0, 39.0], [30.1, 39.0], [30.2, 39.0], [30.3, 39.0], [30.4, 39.0], [30.5, 39.0], [30.6, 39.0], [30.7, 39.0], [30.8, 39.0], [30.9, 39.0], [31.0, 39.0], [31.1, 39.0], [31.2, 39.0], [31.3, 39.0], [31.4, 40.0], [31.5, 40.0], [31.6, 40.0], [31.7, 40.0], [31.8, 40.0], [31.9, 40.0], [32.0, 40.0], [32.1, 40.0], [32.2, 40.0], [32.3, 40.0], [32.4, 40.0], [32.5, 40.0], [32.6, 40.0], [32.7, 40.0], [32.8, 40.0], [32.9, 40.0], [33.0, 40.0], [33.1, 40.0], [33.2, 40.0], [33.3, 40.0], [33.4, 40.0], [33.5, 40.0], [33.6, 40.0], [33.7, 40.0], [33.8, 40.0], [33.9, 40.0], [34.0, 40.0], [34.1, 40.0], [34.2, 40.0], [34.3, 40.0], [34.4, 40.0], [34.5, 40.0], [34.6, 40.0], [34.7, 40.0], [34.8, 40.0], [34.9, 40.0], [35.0, 40.0], [35.1, 40.0], [35.2, 40.0], [35.3, 40.0], [35.4, 40.0], [35.5, 40.0], [35.6, 40.0], [35.7, 40.0], [35.8, 40.0], [35.9, 41.0], [36.0, 41.0], [36.1, 41.0], [36.2, 41.0], [36.3, 41.0], [36.4, 41.0], [36.5, 41.0], [36.6, 41.0], [36.7, 41.0], [36.8, 41.0], [36.9, 41.0], [37.0, 41.0], [37.1, 41.0], [37.2, 41.0], [37.3, 41.0], [37.4, 41.0], [37.5, 41.0], [37.6, 41.0], [37.7, 41.0], [37.8, 41.0], [37.9, 41.0], [38.0, 41.0], [38.1, 41.0], [38.2, 41.0], [38.3, 41.0], [38.4, 41.0], [38.5, 41.0], [38.6, 41.0], [38.7, 41.0], [38.8, 41.0], [38.9, 41.0], [39.0, 41.0], [39.1, 41.0], [39.2, 41.0], [39.3, 41.0], [39.4, 41.0], [39.5, 41.0], [39.6, 41.0], [39.7, 41.0], [39.8, 41.0], [39.9, 42.0], [40.0, 42.0], [40.1, 42.0], [40.2, 42.0], [40.3, 42.0], [40.4, 42.0], [40.5, 42.0], [40.6, 42.0], [40.7, 42.0], [40.8, 42.0], [40.9, 42.0], [41.0, 42.0], [41.1, 42.0], [41.2, 42.0], [41.3, 42.0], [41.4, 42.0], [41.5, 42.0], [41.6, 42.0], [41.7, 42.0], [41.8, 42.0], [41.9, 42.0], [42.0, 42.0], [42.1, 42.0], [42.2, 42.0], [42.3, 42.0], [42.4, 42.0], [42.5, 42.0], [42.6, 42.0], [42.7, 42.0], [42.8, 42.0], [42.9, 42.0], [43.0, 42.0], [43.1, 42.0], [43.2, 42.0], [43.3, 42.0], [43.4, 42.0], [43.5, 42.0], [43.6, 42.0], [43.7, 42.0], [43.8, 42.0], [43.9, 43.0], [44.0, 43.0], [44.1, 43.0], [44.2, 43.0], [44.3, 43.0], [44.4, 43.0], [44.5, 43.0], [44.6, 43.0], [44.7, 43.0], [44.8, 43.0], [44.9, 43.0], [45.0, 43.0], [45.1, 43.0], [45.2, 43.0], [45.3, 43.0], [45.4, 43.0], [45.5, 43.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 43.0], [46.8, 43.0], [46.9, 43.0], [47.0, 43.0], [47.1, 43.0], [47.2, 43.0], [47.3, 43.0], [47.4, 43.0], [47.5, 43.0], [47.6, 43.0], [47.7, 43.0], [47.8, 43.0], [47.9, 43.0], [48.0, 43.0], [48.1, 43.0], [48.2, 43.0], [48.3, 44.0], [48.4, 44.0], [48.5, 44.0], [48.6, 44.0], [48.7, 44.0], [48.8, 44.0], [48.9, 44.0], [49.0, 44.0], [49.1, 44.0], [49.2, 44.0], [49.3, 44.0], [49.4, 44.0], [49.5, 44.0], [49.6, 44.0], [49.7, 44.0], [49.8, 44.0], [49.9, 44.0], [50.0, 44.0], [50.1, 44.0], [50.2, 44.0], [50.3, 44.0], [50.4, 44.0], [50.5, 44.0], [50.6, 44.0], [50.7, 44.0], [50.8, 44.0], [50.9, 44.0], [51.0, 44.0], [51.1, 44.0], [51.2, 44.0], [51.3, 44.0], [51.4, 44.0], [51.5, 44.0], [51.6, 44.0], [51.7, 44.0], [51.8, 44.0], [51.9, 44.0], [52.0, 44.0], [52.1, 44.0], [52.2, 44.0], [52.3, 44.0], [52.4, 44.0], [52.5, 44.0], [52.6, 45.0], [52.7, 45.0], [52.8, 45.0], [52.9, 45.0], [53.0, 45.0], [53.1, 45.0], [53.2, 45.0], [53.3, 45.0], [53.4, 45.0], [53.5, 45.0], [53.6, 45.0], [53.7, 45.0], [53.8, 45.0], [53.9, 45.0], [54.0, 45.0], [54.1, 45.0], [54.2, 45.0], [54.3, 45.0], [54.4, 45.0], [54.5, 45.0], [54.6, 45.0], [54.7, 45.0], [54.8, 45.0], [54.9, 45.0], [55.0, 45.0], [55.1, 45.0], [55.2, 45.0], [55.3, 45.0], [55.4, 45.0], [55.5, 45.0], [55.6, 45.0], [55.7, 45.0], [55.8, 45.0], [55.9, 45.0], [56.0, 45.0], [56.1, 45.0], [56.2, 45.0], [56.3, 45.0], [56.4, 46.0], [56.5, 46.0], [56.6, 46.0], [56.7, 46.0], [56.8, 46.0], [56.9, 46.0], [57.0, 46.0], [57.1, 46.0], [57.2, 46.0], [57.3, 46.0], [57.4, 46.0], [57.5, 46.0], [57.6, 46.0], [57.7, 46.0], [57.8, 46.0], [57.9, 46.0], [58.0, 46.0], [58.1, 46.0], [58.2, 46.0], [58.3, 46.0], [58.4, 46.0], [58.5, 46.0], [58.6, 46.0], [58.7, 46.0], [58.8, 46.0], [58.9, 46.0], [59.0, 46.0], [59.1, 46.0], [59.2, 46.0], [59.3, 46.0], [59.4, 46.0], [59.5, 46.0], [59.6, 46.0], [59.7, 46.0], [59.8, 46.0], [59.9, 46.0], [60.0, 46.0], [60.1, 46.0], [60.2, 46.0], [60.3, 46.0], [60.4, 47.0], [60.5, 47.0], [60.6, 47.0], [60.7, 47.0], [60.8, 47.0], [60.9, 47.0], [61.0, 47.0], [61.1, 47.0], [61.2, 47.0], [61.3, 47.0], [61.4, 47.0], [61.5, 47.0], [61.6, 47.0], [61.7, 47.0], [61.8, 47.0], [61.9, 47.0], [62.0, 47.0], [62.1, 47.0], [62.2, 47.0], [62.3, 47.0], [62.4, 47.0], [62.5, 47.0], [62.6, 47.0], [62.7, 47.0], [62.8, 47.0], [62.9, 47.0], [63.0, 47.0], [63.1, 47.0], [63.2, 47.0], [63.3, 47.0], [63.4, 47.0], [63.5, 47.0], [63.6, 47.0], [63.7, 47.0], [63.8, 47.0], [63.9, 47.0], [64.0, 48.0], [64.1, 48.0], [64.2, 48.0], [64.3, 48.0], [64.4, 48.0], [64.5, 48.0], [64.6, 48.0], [64.7, 48.0], [64.8, 48.0], [64.9, 48.0], [65.0, 48.0], [65.1, 48.0], [65.2, 48.0], [65.3, 48.0], [65.4, 48.0], [65.5, 48.0], [65.6, 48.0], [65.7, 48.0], [65.8, 48.0], [65.9, 48.0], [66.0, 48.0], [66.1, 48.0], [66.2, 48.0], [66.3, 48.0], [66.4, 48.0], [66.5, 48.0], [66.6, 48.0], [66.7, 48.0], [66.8, 48.0], [66.9, 48.0], [67.0, 48.0], [67.1, 48.0], [67.2, 48.0], [67.3, 48.0], [67.4, 49.0], [67.5, 49.0], [67.6, 49.0], [67.7, 49.0], [67.8, 49.0], [67.9, 49.0], [68.0, 49.0], [68.1, 49.0], [68.2, 49.0], [68.3, 49.0], [68.4, 49.0], [68.5, 49.0], [68.6, 49.0], [68.7, 49.0], [68.8, 49.0], [68.9, 49.0], [69.0, 49.0], [69.1, 49.0], [69.2, 49.0], [69.3, 49.0], [69.4, 49.0], [69.5, 49.0], [69.6, 49.0], [69.7, 49.0], [69.8, 49.0], [69.9, 49.0], [70.0, 49.0], [70.1, 49.0], [70.2, 49.0], [70.3, 49.0], [70.4, 49.0], [70.5, 49.0], [70.6, 49.0], [70.7, 50.0], [70.8, 50.0], [70.9, 50.0], [71.0, 50.0], [71.1, 50.0], [71.2, 50.0], [71.3, 50.0], [71.4, 50.0], [71.5, 50.0], [71.6, 50.0], [71.7, 50.0], [71.8, 50.0], [71.9, 50.0], [72.0, 50.0], [72.1, 50.0], [72.2, 50.0], [72.3, 50.0], [72.4, 50.0], [72.5, 50.0], [72.6, 50.0], [72.7, 50.0], [72.8, 50.0], [72.9, 50.0], [73.0, 50.0], [73.1, 50.0], [73.2, 50.0], [73.3, 50.0], [73.4, 50.0], [73.5, 50.0], [73.6, 50.0], [73.7, 50.0], [73.8, 50.0], [73.9, 51.0], [74.0, 51.0], [74.1, 51.0], [74.2, 51.0], [74.3, 51.0], [74.4, 51.0], [74.5, 51.0], [74.6, 51.0], [74.7, 51.0], [74.8, 51.0], [74.9, 51.0], [75.0, 51.0], [75.1, 51.0], [75.2, 51.0], [75.3, 51.0], [75.4, 51.0], [75.5, 51.0], [75.6, 51.0], [75.7, 51.0], [75.8, 51.0], [75.9, 51.0], [76.0, 51.0], [76.1, 51.0], [76.2, 51.0], [76.3, 51.0], [76.4, 51.0], [76.5, 51.0], [76.6, 51.0], [76.7, 52.0], [76.8, 52.0], [76.9, 52.0], [77.0, 52.0], [77.1, 52.0], [77.2, 52.0], [77.3, 52.0], [77.4, 52.0], [77.5, 52.0], [77.6, 52.0], [77.7, 52.0], [77.8, 52.0], [77.9, 52.0], [78.0, 52.0], [78.1, 52.0], [78.2, 52.0], [78.3, 52.0], [78.4, 52.0], [78.5, 52.0], [78.6, 52.0], [78.7, 52.0], [78.8, 52.0], [78.9, 52.0], [79.0, 53.0], [79.1, 53.0], [79.2, 53.0], [79.3, 53.0], [79.4, 53.0], [79.5, 53.0], [79.6, 53.0], [79.7, 53.0], [79.8, 53.0], [79.9, 53.0], [80.0, 53.0], [80.1, 53.0], [80.2, 53.0], [80.3, 53.0], [80.4, 53.0], [80.5, 53.0], [80.6, 53.0], [80.7, 53.0], [80.8, 53.0], [80.9, 54.0], [81.0, 54.0], [81.1, 54.0], [81.2, 54.0], [81.3, 54.0], [81.4, 54.0], [81.5, 54.0], [81.6, 54.0], [81.7, 54.0], [81.8, 54.0], [81.9, 54.0], [82.0, 54.0], [82.1, 54.0], [82.2, 54.0], [82.3, 54.0], [82.4, 54.0], [82.5, 54.0], [82.6, 55.0], [82.7, 55.0], [82.8, 55.0], [82.9, 55.0], [83.0, 55.0], [83.1, 55.0], [83.2, 55.0], [83.3, 55.0], [83.4, 55.0], [83.5, 55.0], [83.6, 55.0], [83.7, 55.0], [83.8, 56.0], [83.9, 56.0], [84.0, 56.0], [84.1, 56.0], [84.2, 56.0], [84.3, 56.0], [84.4, 56.0], [84.5, 56.0], [84.6, 56.0], [84.7, 56.0], [84.8, 56.0], [84.9, 56.0], [85.0, 57.0], [85.1, 57.0], [85.2, 57.0], [85.3, 57.0], [85.4, 57.0], [85.5, 57.0], [85.6, 57.0], [85.7, 57.0], [85.8, 57.0], [85.9, 57.0], [86.0, 57.0], [86.1, 58.0], [86.2, 58.0], [86.3, 58.0], [86.4, 58.0], [86.5, 58.0], [86.6, 58.0], [86.7, 58.0], [86.8, 58.0], [86.9, 59.0], [87.0, 59.0], [87.1, 59.0], [87.2, 59.0], [87.3, 59.0], [87.4, 59.0], [87.5, 59.0], [87.6, 59.0], [87.7, 60.0], [87.8, 60.0], [87.9, 60.0], [88.0, 60.0], [88.1, 60.0], [88.2, 60.0], [88.3, 60.0], [88.4, 60.0], [88.5, 61.0], [88.6, 61.0], [88.7, 61.0], [88.8, 61.0], [88.9, 61.0], [89.0, 61.0], [89.1, 61.0], [89.2, 61.0], [89.3, 61.0], [89.4, 61.0], [89.5, 62.0], [89.6, 62.0], [89.7, 62.0], [89.8, 62.0], [89.9, 62.0], [90.0, 62.0], [90.1, 63.0], [90.2, 63.0], [90.3, 63.0], [90.4, 63.0], [90.5, 63.0], [90.6, 63.0], [90.7, 64.0], [90.8, 64.0], [90.9, 64.0], [91.0, 64.0], [91.1, 64.0], [91.2, 65.0], [91.3, 65.0], [91.4, 65.0], [91.5, 65.0], [91.6, 65.0], [91.7, 66.0], [91.8, 66.0], [91.9, 66.0], [92.0, 66.0], [92.1, 66.0], [92.2, 67.0], [92.3, 67.0], [92.4, 67.0], [92.5, 67.0], [92.6, 68.0], [92.7, 68.0], [92.8, 68.0], [92.9, 69.0], [93.0, 69.0], [93.1, 69.0], [93.2, 70.0], [93.3, 70.0], [93.4, 71.0], [93.5, 71.0], [93.6, 72.0], [93.7, 72.0], [93.8, 73.0], [93.9, 74.0], [94.0, 74.0], [94.1, 74.0], [94.2, 75.0], [94.3, 75.0], [94.4, 76.0], [94.5, 77.0], [94.6, 78.0], [94.7, 79.0], [94.8, 80.0], [94.9, 82.0], [95.0, 83.0], [95.1, 85.0], [95.2, 89.0], [95.3, 91.0], [95.4, 102.0], [95.5, 110.0], [95.6, 122.0], [95.7, 128.0], [95.8, 142.0], [95.9, 153.0], [96.0, 178.0], [96.1, 199.0], [96.2, 210.0], [96.3, 229.0], [96.4, 231.0], [96.5, 248.0], [96.6, 255.0], [96.7, 257.0], [96.8, 266.0], [96.9, 276.0], [97.0, 302.0], [97.1, 329.0], [97.2, 340.0], [97.3, 341.0], [97.4, 358.0], [97.5, 370.0], [97.6, 410.0], [97.7, 461.0], [97.8, 1032.0], [97.9, 1037.0], [98.0, 1040.0], [98.1, 1044.0], [98.2, 1047.0], [98.3, 1052.0], [98.4, 1058.0], [98.5, 3036.0], [98.6, 3042.0], [98.7, 3048.0], [98.8, 7045.0], [98.9, 7052.0], [99.0, 7057.0], [99.1, 7073.0], [99.2, 7215.0], [99.3, 7220.0], [99.4, 15048.0], [99.5, 15053.0], [99.6, 15057.0], [99.7, 15059.0], [99.8, 15062.0], [99.9, 15071.0], [100.0, 21045.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 17084.0], [0.1, 17084.0], [0.2, 17094.0], [0.3, 17094.0], [0.4, 17133.0], [0.5, 17133.0], [0.6, 17133.0], [0.7, 17158.0], [0.8, 17162.0], [0.9, 17162.0], [1.0, 17164.0], [1.1, 17164.0], [1.2, 17164.0], [1.3, 17164.0], [1.4, 17164.0], [1.5, 17164.0], [1.6, 17167.0], [1.7, 17167.0], [1.8, 17168.0], [1.9, 17168.0], [2.0, 17171.0], [2.1, 17171.0], [2.2, 17177.0], [2.3, 17177.0], [2.4, 17177.0], [2.5, 17179.0], [2.6, 17179.0], [2.7, 17181.0], [2.8, 17181.0], [2.9, 17183.0], [3.0, 17183.0], [3.1, 17184.0], [3.2, 17184.0], [3.3, 17192.0], [3.4, 17192.0], [3.5, 17196.0], [3.6, 17196.0], [3.7, 17197.0], [3.8, 17197.0], [3.9, 17198.0], [4.0, 17198.0], [4.1, 17199.0], [4.2, 17199.0], [4.3, 17199.0], [4.4, 17199.0], [4.5, 17201.0], [4.6, 17201.0], [4.7, 17201.0], [4.8, 17201.0], [4.9, 17203.0], [5.0, 17203.0], [5.1, 17204.0], [5.2, 17204.0], [5.3, 17204.0], [5.4, 17204.0], [5.5, 17205.0], [5.6, 17205.0], [5.7, 17206.0], [5.8, 17206.0], [5.9, 17207.0], [6.0, 17207.0], [6.1, 17208.0], [6.2, 17208.0], [6.3, 17209.0], [6.4, 17209.0], [6.5, 17209.0], [6.6, 17209.0], [6.7, 17209.0], [6.8, 17209.0], [6.9, 17210.0], [7.0, 17210.0], [7.1, 17216.0], [7.2, 17216.0], [7.3, 17216.0], [7.4, 17216.0], [7.5, 17217.0], [7.6, 17217.0], [7.7, 17217.0], [7.8, 17217.0], [7.9, 17217.0], [8.0, 17217.0], [8.1, 17217.0], [8.2, 17217.0], [8.3, 17218.0], [8.4, 17218.0], [8.5, 17218.0], [8.6, 17218.0], [8.7, 17218.0], [8.8, 17218.0], [8.9, 17218.0], [9.0, 17218.0], [9.1, 17219.0], [9.2, 17219.0], [9.3, 17219.0], [9.4, 17219.0], [9.5, 17220.0], [9.6, 17220.0], [9.7, 17220.0], [9.8, 17220.0], [9.9, 17221.0], [10.0, 17221.0], [10.1, 17222.0], [10.2, 17222.0], [10.3, 17222.0], [10.4, 17222.0], [10.5, 17222.0], [10.6, 17222.0], [10.7, 17223.0], [10.8, 17223.0], [10.9, 17224.0], [11.0, 17224.0], [11.1, 17224.0], [11.2, 17224.0], [11.3, 17224.0], [11.4, 17224.0], [11.5, 17224.0], [11.6, 17224.0], [11.7, 17227.0], [11.8, 17227.0], [11.9, 17227.0], [12.0, 17227.0], [12.1, 17227.0], [12.2, 17227.0], [12.3, 17228.0], [12.4, 17228.0], [12.5, 17234.0], [12.6, 17234.0], [12.7, 17241.0], [12.8, 17241.0], [12.9, 17242.0], [13.0, 17242.0], [13.1, 17248.0], [13.2, 17248.0], [13.3, 17248.0], [13.4, 17248.0], [13.5, 17249.0], [13.6, 17249.0], [13.7, 17251.0], [13.8, 17253.0], [13.9, 17253.0], [14.0, 17257.0], [14.1, 17257.0], [14.2, 17257.0], [14.3, 17257.0], [14.4, 17257.0], [14.5, 17257.0], [14.6, 17258.0], [14.7, 17258.0], [14.8, 17259.0], [14.9, 17259.0], [15.0, 17266.0], [15.1, 17266.0], [15.2, 17268.0], [15.3, 17268.0], [15.4, 17270.0], [15.5, 17270.0], [15.6, 17272.0], [15.7, 17272.0], [15.8, 17277.0], [15.9, 17277.0], [16.0, 17280.0], [16.1, 17280.0], [16.2, 17280.0], [16.3, 17280.0], [16.4, 17283.0], [16.5, 17283.0], [16.6, 17284.0], [16.7, 17284.0], [16.8, 17288.0], [16.9, 17288.0], [17.0, 17290.0], [17.1, 17290.0], [17.2, 17290.0], [17.3, 17290.0], [17.4, 17291.0], [17.5, 17291.0], [17.6, 17293.0], [17.7, 17293.0], [17.8, 17295.0], [17.9, 17295.0], [18.0, 17300.0], [18.1, 17300.0], [18.2, 17300.0], [18.3, 17300.0], [18.4, 17302.0], [18.5, 17302.0], [18.6, 17305.0], [18.7, 17305.0], [18.8, 17307.0], [18.9, 17307.0], [19.0, 17308.0], [19.1, 17308.0], [19.2, 17308.0], [19.3, 17308.0], [19.4, 17311.0], [19.5, 17311.0], [19.6, 17312.0], [19.7, 17312.0], [19.8, 17313.0], [19.9, 17313.0], [20.0, 17314.0], [20.1, 17314.0], [20.2, 17314.0], [20.3, 17314.0], [20.4, 17314.0], [20.5, 17314.0], [20.6, 17315.0], [20.7, 17315.0], [20.8, 17315.0], [20.9, 17315.0], [21.0, 17327.0], [21.1, 17327.0], [21.2, 17329.0], [21.3, 17329.0], [21.4, 17333.0], [21.5, 17333.0], [21.6, 17339.0], [21.7, 17339.0], [21.8, 17341.0], [21.9, 17341.0], [22.0, 17349.0], [22.1, 17349.0], [22.2, 17352.0], [22.3, 17352.0], [22.4, 17358.0], [22.5, 17358.0], [22.6, 17358.0], [22.7, 17358.0], [22.8, 17367.0], [22.9, 17367.0], [23.0, 17368.0], [23.1, 17368.0], [23.2, 17370.0], [23.3, 17370.0], [23.4, 17371.0], [23.5, 17371.0], [23.6, 17373.0], [23.7, 17373.0], [23.8, 17374.0], [23.9, 17374.0], [24.0, 17375.0], [24.1, 17375.0], [24.2, 17375.0], [24.3, 17375.0], [24.4, 17392.0], [24.5, 17392.0], [24.6, 17392.0], [24.7, 17392.0], [24.8, 17394.0], [24.9, 17394.0], [25.0, 17394.0], [25.1, 17394.0], [25.2, 17395.0], [25.3, 17395.0], [25.4, 17395.0], [25.5, 17395.0], [25.6, 17395.0], [25.7, 17395.0], [25.8, 17395.0], [25.9, 17395.0], [26.0, 17397.0], [26.1, 17397.0], [26.2, 17398.0], [26.3, 17398.0], [26.4, 17401.0], [26.5, 17401.0], [26.6, 17403.0], [26.7, 17403.0], [26.8, 17407.0], [26.9, 17407.0], [27.0, 17409.0], [27.1, 17409.0], [27.2, 17409.0], [27.3, 17409.0], [27.4, 17410.0], [27.5, 17410.0], [27.6, 17413.0], [27.7, 17413.0], [27.8, 17415.0], [27.9, 17415.0], [28.0, 17417.0], [28.1, 17417.0], [28.2, 17418.0], [28.3, 17418.0], [28.4, 17419.0], [28.5, 17419.0], [28.6, 17420.0], [28.7, 17420.0], [28.8, 17420.0], [28.9, 17420.0], [29.0, 17421.0], [29.1, 17421.0], [29.2, 17421.0], [29.3, 17421.0], [29.4, 17422.0], [29.5, 17422.0], [29.6, 17422.0], [29.7, 17422.0], [29.8, 17422.0], [29.9, 17422.0], [30.0, 17423.0], [30.1, 17423.0], [30.2, 17424.0], [30.3, 17424.0], [30.4, 17424.0], [30.5, 17424.0], [30.6, 17426.0], [30.7, 17426.0], [30.8, 17427.0], [30.9, 17427.0], [31.0, 17428.0], [31.1, 17428.0], [31.2, 17429.0], [31.3, 17429.0], [31.4, 17432.0], [31.5, 17432.0], [31.6, 17433.0], [31.7, 17433.0], [31.8, 17434.0], [31.9, 17434.0], [32.0, 17435.0], [32.1, 17435.0], [32.2, 17436.0], [32.3, 17436.0], [32.4, 17436.0], [32.5, 17436.0], [32.6, 17437.0], [32.7, 17437.0], [32.8, 17437.0], [32.9, 17437.0], [33.0, 17438.0], [33.1, 17438.0], [33.2, 17440.0], [33.3, 17440.0], [33.4, 17440.0], [33.5, 17440.0], [33.6, 17442.0], [33.7, 17442.0], [33.8, 17443.0], [33.9, 17443.0], [34.0, 17443.0], [34.1, 17443.0], [34.2, 17443.0], [34.3, 17443.0], [34.4, 17443.0], [34.5, 17443.0], [34.6, 17443.0], [34.7, 17443.0], [34.8, 17444.0], [34.9, 17444.0], [35.0, 17446.0], [35.1, 17446.0], [35.2, 17451.0], [35.3, 17451.0], [35.4, 17455.0], [35.5, 17455.0], [35.6, 17456.0], [35.7, 17456.0], [35.8, 17457.0], [35.9, 17457.0], [36.0, 17457.0], [36.1, 17457.0], [36.2, 17459.0], [36.3, 17459.0], [36.4, 17459.0], [36.5, 17459.0], [36.6, 17467.0], [36.7, 17467.0], [36.8, 17468.0], [36.9, 17468.0], [37.0, 17469.0], [37.1, 17469.0], [37.2, 17470.0], [37.3, 17470.0], [37.4, 17470.0], [37.5, 17470.0], [37.6, 17470.0], [37.7, 17470.0], [37.8, 17470.0], [37.9, 17470.0], [38.0, 17470.0], [38.1, 17470.0], [38.2, 17470.0], [38.3, 17470.0], [38.4, 17471.0], [38.5, 17471.0], [38.6, 17471.0], [38.7, 17471.0], [38.8, 17471.0], [38.9, 17471.0], [39.0, 17471.0], [39.1, 17471.0], [39.2, 17473.0], [39.3, 17473.0], [39.4, 17473.0], [39.5, 17473.0], [39.6, 17473.0], [39.7, 17473.0], [39.8, 17473.0], [39.9, 17473.0], [40.0, 17474.0], [40.1, 17474.0], [40.2, 17474.0], [40.3, 17474.0], [40.4, 17474.0], [40.5, 17474.0], [40.6, 17474.0], [40.7, 17474.0], [40.8, 17475.0], [40.9, 17475.0], [41.0, 17477.0], [41.1, 17477.0], [41.2, 17478.0], [41.3, 17478.0], [41.4, 17481.0], [41.5, 17481.0], [41.6, 17483.0], [41.7, 17483.0], [41.8, 17483.0], [41.9, 17483.0], [42.0, 17485.0], [42.1, 17485.0], [42.2, 17486.0], [42.3, 17486.0], [42.4, 17487.0], [42.5, 17487.0], [42.6, 17487.0], [42.7, 17487.0], [42.8, 17487.0], [42.9, 17487.0], [43.0, 17487.0], [43.1, 17487.0], [43.2, 17487.0], [43.3, 17487.0], [43.4, 17488.0], [43.5, 17488.0], [43.6, 17488.0], [43.7, 17488.0], [43.8, 17488.0], [43.9, 17488.0], [44.0, 17489.0], [44.1, 17489.0], [44.2, 17489.0], [44.3, 17489.0], [44.4, 17495.0], [44.5, 17495.0], [44.6, 17501.0], [44.7, 17501.0], [44.8, 17512.0], [44.9, 17512.0], [45.0, 17513.0], [45.1, 17513.0], [45.2, 17515.0], [45.3, 17515.0], [45.4, 17517.0], [45.5, 17517.0], [45.6, 17517.0], [45.7, 17517.0], [45.8, 17523.0], [45.9, 17523.0], [46.0, 17523.0], [46.1, 17523.0], [46.2, 17526.0], [46.3, 17526.0], [46.4, 17535.0], [46.5, 17535.0], [46.6, 17536.0], [46.7, 17536.0], [46.8, 17536.0], [46.9, 17537.0], [47.0, 17537.0], [47.1, 17541.0], [47.2, 17541.0], [47.3, 17542.0], [47.4, 17542.0], [47.5, 17545.0], [47.6, 17545.0], [47.7, 17546.0], [47.8, 17546.0], [47.9, 17546.0], [48.0, 17546.0], [48.1, 17546.0], [48.2, 17546.0], [48.3, 17547.0], [48.4, 17547.0], [48.5, 17553.0], [48.6, 17553.0], [48.7, 17563.0], [48.8, 17563.0], [48.9, 17569.0], [49.0, 17569.0], [49.1, 17570.0], [49.2, 17570.0], [49.3, 17577.0], [49.4, 17577.0], [49.5, 17583.0], [49.6, 17583.0], [49.7, 17592.0], [49.8, 17592.0], [49.9, 17593.0], [50.0, 17593.0], [50.1, 17593.0], [50.2, 17593.0], [50.3, 17594.0], [50.4, 17594.0], [50.5, 17594.0], [50.6, 17594.0], [50.7, 17600.0], [50.8, 17600.0], [50.9, 17600.0], [51.0, 17600.0], [51.1, 17604.0], [51.2, 17604.0], [51.3, 17605.0], [51.4, 17605.0], [51.5, 17609.0], [51.6, 17609.0], [51.7, 17609.0], [51.8, 17609.0], [51.9, 17611.0], [52.0, 17611.0], [52.1, 17615.0], [52.2, 17615.0], [52.3, 17615.0], [52.4, 17615.0], [52.5, 17617.0], [52.6, 17617.0], [52.7, 17617.0], [52.8, 17617.0], [52.9, 17618.0], [53.0, 17618.0], [53.1, 17618.0], [53.2, 17618.0], [53.3, 17619.0], [53.4, 17619.0], [53.5, 17621.0], [53.6, 17621.0], [53.7, 17621.0], [53.8, 17621.0], [53.9, 17621.0], [54.0, 17621.0], [54.1, 17628.0], [54.2, 17628.0], [54.3, 17630.0], [54.4, 17630.0], [54.5, 17631.0], [54.6, 17631.0], [54.7, 17631.0], [54.8, 17631.0], [54.9, 17632.0], [55.0, 17632.0], [55.1, 17635.0], [55.2, 17635.0], [55.3, 17637.0], [55.4, 17637.0], [55.5, 17637.0], [55.6, 17637.0], [55.7, 17638.0], [55.8, 17638.0], [55.9, 17642.0], [56.0, 17642.0], [56.1, 17642.0], [56.2, 17642.0], [56.3, 17643.0], [56.4, 17643.0], [56.5, 17643.0], [56.6, 17643.0], [56.7, 17643.0], [56.8, 17643.0], [56.9, 17646.0], [57.0, 17646.0], [57.1, 17651.0], [57.2, 17651.0], [57.3, 17651.0], [57.4, 17651.0], [57.5, 17652.0], [57.6, 17652.0], [57.7, 17657.0], [57.8, 17657.0], [57.9, 17657.0], [58.0, 17657.0], [58.1, 17658.0], [58.2, 17658.0], [58.3, 17660.0], [58.4, 17660.0], [58.5, 17661.0], [58.6, 17661.0], [58.7, 17661.0], [58.8, 17661.0], [58.9, 17662.0], [59.0, 17662.0], [59.1, 17662.0], [59.2, 17662.0], [59.3, 17663.0], [59.4, 17663.0], [59.5, 17664.0], [59.6, 17664.0], [59.7, 17664.0], [59.8, 17664.0], [59.9, 17666.0], [60.0, 17666.0], [60.1, 17667.0], [60.2, 17667.0], [60.3, 17667.0], [60.4, 17667.0], [60.5, 17667.0], [60.6, 17667.0], [60.7, 17671.0], [60.8, 17671.0], [60.9, 17672.0], [61.0, 17672.0], [61.1, 17672.0], [61.2, 17672.0], [61.3, 17678.0], [61.4, 17678.0], [61.5, 17678.0], [61.6, 17678.0], [61.7, 17678.0], [61.8, 17678.0], [61.9, 17679.0], [62.0, 17679.0], [62.1, 17680.0], [62.2, 17680.0], [62.3, 17680.0], [62.4, 17680.0], [62.5, 17681.0], [62.6, 17681.0], [62.7, 17688.0], [62.8, 17688.0], [62.9, 17690.0], [63.0, 17690.0], [63.1, 17692.0], [63.2, 17692.0], [63.3, 17695.0], [63.4, 17695.0], [63.5, 17695.0], [63.6, 17695.0], [63.7, 17695.0], [63.8, 17695.0], [63.9, 17707.0], [64.0, 17707.0], [64.1, 17707.0], [64.2, 17707.0], [64.3, 17708.0], [64.4, 17708.0], [64.5, 17709.0], [64.6, 17709.0], [64.7, 17710.0], [64.8, 17710.0], [64.9, 17715.0], [65.0, 17715.0], [65.1, 17722.0], [65.2, 17722.0], [65.3, 17742.0], [65.4, 17742.0], [65.5, 17744.0], [65.6, 17744.0], [65.7, 17751.0], [65.8, 17751.0], [65.9, 17757.0], [66.0, 17757.0], [66.1, 17765.0], [66.2, 17765.0], [66.3, 17766.0], [66.4, 17766.0], [66.5, 17776.0], [66.6, 17776.0], [66.7, 17778.0], [66.8, 17778.0], [66.9, 17781.0], [67.0, 17781.0], [67.1, 17782.0], [67.2, 17782.0], [67.3, 17785.0], [67.4, 17785.0], [67.5, 17785.0], [67.6, 17785.0], [67.7, 17785.0], [67.8, 17785.0], [67.9, 17792.0], [68.0, 17792.0], [68.1, 17794.0], [68.2, 17794.0], [68.3, 17798.0], [68.4, 17798.0], [68.5, 17799.0], [68.6, 17799.0], [68.7, 17801.0], [68.8, 17801.0], [68.9, 17802.0], [69.0, 17802.0], [69.1, 17811.0], [69.2, 17811.0], [69.3, 17812.0], [69.4, 17812.0], [69.5, 17813.0], [69.6, 17813.0], [69.7, 17813.0], [69.8, 17813.0], [69.9, 17815.0], [70.0, 17815.0], [70.1, 17816.0], [70.2, 17816.0], [70.3, 17816.0], [70.4, 17816.0], [70.5, 17816.0], [70.6, 17816.0], [70.7, 17819.0], [70.8, 17819.0], [70.9, 17820.0], [71.0, 17820.0], [71.1, 17821.0], [71.2, 17821.0], [71.3, 17821.0], [71.4, 17821.0], [71.5, 17837.0], [71.6, 17837.0], [71.7, 17840.0], [71.8, 17840.0], [71.9, 17851.0], [72.0, 17851.0], [72.1, 17851.0], [72.2, 17851.0], [72.3, 17852.0], [72.4, 17852.0], [72.5, 17860.0], [72.6, 17860.0], [72.7, 17862.0], [72.8, 17862.0], [72.9, 17863.0], [73.0, 17863.0], [73.1, 17865.0], [73.2, 17865.0], [73.3, 17865.0], [73.4, 17865.0], [73.5, 17866.0], [73.6, 17866.0], [73.7, 17866.0], [73.8, 17866.0], [73.9, 17867.0], [74.0, 17867.0], [74.1, 17868.0], [74.2, 17868.0], [74.3, 17868.0], [74.4, 17868.0], [74.5, 17868.0], [74.6, 17868.0], [74.7, 17869.0], [74.8, 17869.0], [74.9, 17870.0], [75.0, 17870.0], [75.1, 17870.0], [75.2, 17870.0], [75.3, 17880.0], [75.4, 17880.0], [75.5, 17882.0], [75.6, 17882.0], [75.7, 17884.0], [75.8, 17884.0], [75.9, 17891.0], [76.0, 17891.0], [76.1, 17893.0], [76.2, 17893.0], [76.3, 17898.0], [76.4, 17898.0], [76.5, 17899.0], [76.6, 17899.0], [76.7, 17901.0], [76.8, 17901.0], [76.9, 17902.0], [77.0, 17902.0], [77.1, 17902.0], [77.2, 17902.0], [77.3, 17902.0], [77.4, 17902.0], [77.5, 17904.0], [77.6, 17904.0], [77.7, 17904.0], [77.8, 17904.0], [77.9, 17904.0], [78.0, 17904.0], [78.1, 17905.0], [78.2, 17905.0], [78.3, 17907.0], [78.4, 17907.0], [78.5, 17907.0], [78.6, 17907.0], [78.7, 17909.0], [78.8, 17909.0], [78.9, 17909.0], [79.0, 17909.0], [79.1, 17912.0], [79.2, 17912.0], [79.3, 17913.0], [79.4, 17913.0], [79.5, 17917.0], [79.6, 17917.0], [79.7, 17918.0], [79.8, 17918.0], [79.9, 17926.0], [80.0, 17926.0], [80.1, 17928.0], [80.2, 17928.0], [80.3, 17929.0], [80.4, 17929.0], [80.5, 17930.0], [80.6, 17930.0], [80.7, 17932.0], [80.8, 17932.0], [80.9, 17933.0], [81.0, 17933.0], [81.1, 17935.0], [81.2, 17935.0], [81.3, 17943.0], [81.4, 17943.0], [81.5, 17943.0], [81.6, 17943.0], [81.7, 17948.0], [81.8, 17948.0], [81.9, 17956.0], [82.0, 17956.0], [82.1, 17956.0], [82.2, 17956.0], [82.3, 17957.0], [82.4, 17957.0], [82.5, 17962.0], [82.6, 17962.0], [82.7, 17963.0], [82.8, 17963.0], [82.9, 17964.0], [83.0, 17964.0], [83.1, 17967.0], [83.2, 17967.0], [83.3, 17969.0], [83.4, 17969.0], [83.5, 17972.0], [83.6, 17972.0], [83.7, 17975.0], [83.8, 17975.0], [83.9, 17978.0], [84.0, 17978.0], [84.1, 17984.0], [84.2, 17984.0], [84.3, 17985.0], [84.4, 17985.0], [84.5, 17987.0], [84.6, 17987.0], [84.7, 17991.0], [84.8, 17991.0], [84.9, 17994.0], [85.0, 17994.0], [85.1, 17996.0], [85.2, 17996.0], [85.3, 17996.0], [85.4, 17996.0], [85.5, 17998.0], [85.6, 17998.0], [85.7, 17998.0], [85.8, 17998.0], [85.9, 18006.0], [86.0, 18006.0], [86.1, 18006.0], [86.2, 18006.0], [86.3, 18008.0], [86.4, 18008.0], [86.5, 18010.0], [86.6, 18010.0], [86.7, 18014.0], [86.8, 18014.0], [86.9, 18016.0], [87.0, 18016.0], [87.1, 18019.0], [87.2, 18019.0], [87.3, 18021.0], [87.4, 18021.0], [87.5, 18022.0], [87.6, 18022.0], [87.7, 18026.0], [87.8, 18026.0], [87.9, 18027.0], [88.0, 18027.0], [88.1, 18028.0], [88.2, 18028.0], [88.3, 18029.0], [88.4, 18029.0], [88.5, 18029.0], [88.6, 18029.0], [88.7, 18029.0], [88.8, 18029.0], [88.9, 18030.0], [89.0, 18030.0], [89.1, 18031.0], [89.2, 18031.0], [89.3, 18032.0], [89.4, 18032.0], [89.5, 18032.0], [89.6, 18032.0], [89.7, 18033.0], [89.8, 18033.0], [89.9, 18042.0], [90.0, 18042.0], [90.1, 18053.0], [90.2, 18053.0], [90.3, 18055.0], [90.4, 18055.0], [90.5, 18055.0], [90.6, 18055.0], [90.7, 18056.0], [90.8, 18056.0], [90.9, 18059.0], [91.0, 18059.0], [91.1, 18062.0], [91.2, 18062.0], [91.3, 18063.0], [91.4, 18063.0], [91.5, 18066.0], [91.6, 18066.0], [91.7, 18067.0], [91.8, 18067.0], [91.9, 18070.0], [92.0, 18070.0], [92.1, 18070.0], [92.2, 18070.0], [92.3, 18072.0], [92.4, 18072.0], [92.5, 18073.0], [92.6, 18073.0], [92.7, 18075.0], [92.8, 18075.0], [92.9, 18078.0], [93.0, 18078.0], [93.1, 18080.0], [93.2, 18080.0], [93.3, 18082.0], [93.4, 18082.0], [93.5, 18084.0], [93.6, 18084.0], [93.7, 18088.0], [93.8, 18088.0], [93.9, 18091.0], [94.0, 18091.0], [94.1, 18091.0], [94.2, 18091.0], [94.3, 18093.0], [94.4, 18093.0], [94.5, 18096.0], [94.6, 18096.0], [94.7, 18098.0], [94.8, 18098.0], [94.9, 18100.0], [95.0, 18100.0], [95.1, 18100.0], [95.2, 18100.0], [95.3, 18106.0], [95.4, 18106.0], [95.5, 18107.0], [95.6, 18107.0], [95.7, 18109.0], [95.8, 18109.0], [95.9, 18110.0], [96.0, 18110.0], [96.1, 18111.0], [96.2, 18111.0], [96.3, 18111.0], [96.4, 18111.0], [96.5, 18114.0], [96.6, 18114.0], [96.7, 18114.0], [96.8, 18114.0], [96.9, 18116.0], [97.0, 18116.0], [97.1, 18119.0], [97.2, 18119.0], [97.3, 18124.0], [97.4, 18124.0], [97.5, 18124.0], [97.6, 18124.0], [97.7, 18128.0], [97.8, 18128.0], [97.9, 18132.0], [98.0, 18132.0], [98.1, 18132.0], [98.2, 18132.0], [98.3, 18135.0], [98.4, 18135.0], [98.5, 18139.0], [98.6, 18139.0], [98.7, 18139.0], [98.8, 18139.0], [98.9, 18141.0], [99.0, 18141.0], [99.1, 18145.0], [99.2, 18145.0], [99.3, 18152.0], [99.4, 18152.0], [99.5, 18154.0], [99.6, 18154.0], [99.7, 18155.0], [99.8, 18155.0], [99.9, 18159.0], [100.0, 18159.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 62097.0], [0.1, 62097.0], [0.2, 62099.0], [0.3, 62099.0], [0.4, 62101.0], [0.5, 62101.0], [0.6, 62101.0], [0.7, 62102.0], [0.8, 62102.0], [0.9, 62102.0], [1.0, 62103.0], [1.1, 62103.0], [1.2, 62109.0], [1.3, 62109.0], [1.4, 62111.0], [1.5, 62111.0], [1.6, 62113.0], [1.7, 62113.0], [1.8, 62115.0], [1.9, 62115.0], [2.0, 62117.0], [2.1, 62117.0], [2.2, 62119.0], [2.3, 62119.0], [2.4, 62121.0], [2.5, 62121.0], [2.6, 62145.0], [2.7, 62145.0], [2.8, 62145.0], [2.9, 62147.0], [3.0, 62147.0], [3.1, 62149.0], [3.2, 62149.0], [3.3, 62151.0], [3.4, 62151.0], [3.5, 62153.0], [3.6, 62153.0], [3.7, 62154.0], [3.8, 62154.0], [3.9, 62155.0], [4.0, 62155.0], [4.1, 62163.0], [4.2, 62163.0], [4.3, 62165.0], [4.4, 62165.0], [4.5, 62169.0], [4.6, 62169.0], [4.7, 62171.0], [4.8, 62171.0], [4.9, 62172.0], [5.0, 62172.0], [5.1, 62174.0], [5.2, 62174.0], [5.3, 62176.0], [5.4, 62176.0], [5.5, 62181.0], [5.6, 62181.0], [5.7, 62182.0], [5.8, 62182.0], [5.9, 62185.0], [6.0, 62185.0], [6.1, 62187.0], [6.2, 62187.0], [6.3, 62188.0], [6.4, 62188.0], [6.5, 62189.0], [6.6, 62189.0], [6.7, 62190.0], [6.8, 62190.0], [6.9, 62191.0], [7.0, 62191.0], [7.1, 62192.0], [7.2, 62192.0], [7.3, 62193.0], [7.4, 62193.0], [7.5, 62194.0], [7.6, 62194.0], [7.7, 62195.0], [7.8, 62195.0], [7.9, 62198.0], [8.0, 62198.0], [8.1, 62199.0], [8.2, 62199.0], [8.3, 62205.0], [8.4, 62205.0], [8.5, 62212.0], [8.6, 62212.0], [8.7, 62215.0], [8.8, 62216.0], [8.9, 62216.0], [9.0, 62218.0], [9.1, 62218.0], [9.2, 62222.0], [9.3, 62222.0], [9.4, 62224.0], [9.5, 62224.0], [9.6, 62226.0], [9.7, 62226.0], [9.8, 62230.0], [9.9, 62230.0], [10.0, 62236.0], [10.1, 62236.0], [10.2, 62237.0], [10.3, 62237.0], [10.4, 62240.0], [10.5, 62240.0], [10.6, 62240.0], [10.7, 62240.0], [10.8, 62242.0], [10.9, 62242.0], [11.0, 62243.0], [11.1, 62243.0], [11.2, 62244.0], [11.3, 62244.0], [11.4, 62247.0], [11.5, 62247.0], [11.6, 62247.0], [11.7, 62247.0], [11.8, 62248.0], [11.9, 62248.0], [12.0, 62249.0], [12.1, 62249.0], [12.2, 62250.0], [12.3, 62250.0], [12.4, 62251.0], [12.5, 62251.0], [12.6, 62253.0], [12.7, 62253.0], [12.8, 62254.0], [12.9, 62254.0], [13.0, 62256.0], [13.1, 62256.0], [13.2, 62258.0], [13.3, 62258.0], [13.4, 62259.0], [13.5, 62259.0], [13.6, 62260.0], [13.7, 62260.0], [13.8, 62261.0], [13.9, 62261.0], [14.0, 62262.0], [14.1, 62262.0], [14.2, 62265.0], [14.3, 62265.0], [14.4, 62273.0], [14.5, 62273.0], [14.6, 62281.0], [14.7, 62281.0], [14.8, 62283.0], [14.9, 62283.0], [15.0, 62287.0], [15.1, 62287.0], [15.2, 62293.0], [15.3, 62293.0], [15.4, 62294.0], [15.5, 62294.0], [15.6, 62295.0], [15.7, 62295.0], [15.8, 62297.0], [15.9, 62297.0], [16.0, 62298.0], [16.1, 62298.0], [16.2, 62299.0], [16.3, 62299.0], [16.4, 62300.0], [16.5, 62300.0], [16.6, 62301.0], [16.7, 62301.0], [16.8, 62303.0], [16.9, 62303.0], [17.0, 62304.0], [17.1, 62304.0], [17.2, 62305.0], [17.3, 62305.0], [17.4, 62306.0], [17.5, 62306.0], [17.6, 62309.0], [17.7, 62309.0], [17.8, 62311.0], [17.9, 62311.0], [18.0, 62313.0], [18.1, 62313.0], [18.2, 62315.0], [18.3, 62315.0], [18.4, 62322.0], [18.5, 62322.0], [18.6, 62323.0], [18.7, 62323.0], [18.8, 62327.0], [18.9, 62327.0], [19.0, 62330.0], [19.1, 62330.0], [19.2, 62331.0], [19.3, 62331.0], [19.4, 62332.0], [19.5, 62332.0], [19.6, 62333.0], [19.7, 62333.0], [19.8, 62334.0], [19.9, 62334.0], [20.0, 62334.0], [20.1, 62334.0], [20.2, 62335.0], [20.3, 62335.0], [20.4, 62336.0], [20.5, 62336.0], [20.6, 62337.0], [20.7, 62337.0], [20.8, 62337.0], [20.9, 62337.0], [21.0, 62339.0], [21.1, 62339.0], [21.2, 62340.0], [21.3, 62340.0], [21.4, 62340.0], [21.5, 62340.0], [21.6, 62341.0], [21.7, 62341.0], [21.8, 62343.0], [21.9, 62343.0], [22.0, 62344.0], [22.1, 62344.0], [22.2, 62347.0], [22.3, 62347.0], [22.4, 62353.0], [22.5, 62353.0], [22.6, 62388.0], [22.7, 62388.0], [22.8, 62390.0], [22.9, 62390.0], [23.0, 62390.0], [23.1, 62390.0], [23.2, 62392.0], [23.3, 62392.0], [23.4, 62392.0], [23.5, 62392.0], [23.6, 62394.0], [23.7, 62394.0], [23.8, 62395.0], [23.9, 62395.0], [24.0, 62396.0], [24.1, 62396.0], [24.2, 62397.0], [24.3, 62397.0], [24.4, 62398.0], [24.5, 62398.0], [24.6, 62399.0], [24.7, 62399.0], [24.8, 62400.0], [24.9, 62400.0], [25.0, 62402.0], [25.1, 62402.0], [25.2, 62404.0], [25.3, 62404.0], [25.4, 62407.0], [25.5, 62407.0], [25.6, 62409.0], [25.7, 62409.0], [25.8, 62411.0], [25.9, 62411.0], [26.0, 62413.0], [26.1, 62413.0], [26.2, 62413.0], [26.3, 62413.0], [26.4, 62413.0], [26.5, 62413.0], [26.6, 62413.0], [26.7, 62413.0], [26.8, 62413.0], [26.9, 62413.0], [27.0, 62413.0], [27.1, 62413.0], [27.2, 62413.0], [27.3, 62413.0], [27.4, 62413.0], [27.5, 62413.0], [27.6, 62413.0], [27.7, 62413.0], [27.8, 62413.0], [27.9, 62413.0], [28.0, 62413.0], [28.1, 62413.0], [28.2, 62413.0], [28.3, 62413.0], [28.4, 62413.0], [28.5, 62413.0], [28.6, 62413.0], [28.7, 62413.0], [28.8, 62413.0], [28.9, 62413.0], [29.0, 62413.0], [29.1, 62413.0], [29.2, 62413.0], [29.3, 62413.0], [29.4, 62416.0], [29.5, 62416.0], [29.6, 62418.0], [29.7, 62418.0], [29.8, 62420.0], [29.9, 62420.0], [30.0, 62446.0], [30.1, 62446.0], [30.2, 62448.0], [30.3, 62448.0], [30.4, 62451.0], [30.5, 62451.0], [30.6, 62452.0], [30.7, 62452.0], [30.8, 62454.0], [30.9, 62454.0], [31.0, 62458.0], [31.1, 62458.0], [31.2, 62460.0], [31.3, 62460.0], [31.4, 62462.0], [31.5, 62462.0], [31.6, 62466.0], [31.7, 62466.0], [31.8, 62468.0], [31.9, 62468.0], [32.0, 62470.0], [32.1, 62470.0], [32.2, 62472.0], [32.3, 62472.0], [32.4, 62472.0], [32.5, 62472.0], [32.6, 62474.0], [32.7, 62474.0], [32.8, 62475.0], [32.9, 62475.0], [33.0, 62476.0], [33.1, 62476.0], [33.2, 62480.0], [33.3, 62480.0], [33.4, 62482.0], [33.5, 62482.0], [33.6, 62484.0], [33.7, 62484.0], [33.8, 62486.0], [33.9, 62486.0], [34.0, 62495.0], [34.1, 62495.0], [34.2, 62509.0], [34.3, 62509.0], [34.4, 62523.0], [34.5, 62523.0], [34.6, 62527.0], [34.7, 62527.0], [34.8, 62529.0], [34.9, 62529.0], [35.0, 62531.0], [35.1, 62531.0], [35.2, 62533.0], [35.3, 62533.0], [35.4, 62534.0], [35.5, 62534.0], [35.6, 62535.0], [35.7, 62535.0], [35.8, 62537.0], [35.9, 62537.0], [36.0, 62538.0], [36.1, 62538.0], [36.2, 62539.0], [36.3, 62539.0], [36.4, 62540.0], [36.5, 62540.0], [36.6, 62540.0], [36.7, 62540.0], [36.8, 62541.0], [36.9, 62541.0], [37.0, 62544.0], [37.1, 62544.0], [37.2, 62545.0], [37.3, 62545.0], [37.4, 62546.0], [37.5, 62546.0], [37.6, 62547.0], [37.7, 62547.0], [37.8, 62547.0], [37.9, 62547.0], [38.0, 62548.0], [38.1, 62548.0], [38.2, 62550.0], [38.3, 62550.0], [38.4, 62551.0], [38.5, 62551.0], [38.6, 62558.0], [38.7, 62558.0], [38.8, 62558.0], [38.9, 62562.0], [39.0, 62562.0], [39.1, 62568.0], [39.2, 62568.0], [39.3, 62572.0], [39.4, 62572.0], [39.5, 62573.0], [39.6, 62573.0], [39.7, 62574.0], [39.8, 62574.0], [39.9, 62576.0], [40.0, 62576.0], [40.1, 62578.0], [40.2, 62578.0], [40.3, 62582.0], [40.4, 62582.0], [40.5, 62586.0], [40.6, 62586.0], [40.7, 62587.0], [40.8, 62587.0], [40.9, 62588.0], [41.0, 62588.0], [41.1, 62592.0], [41.2, 62592.0], [41.3, 62595.0], [41.4, 62595.0], [41.5, 62597.0], [41.6, 62597.0], [41.7, 62599.0], [41.8, 62599.0], [41.9, 62601.0], [42.0, 62601.0], [42.1, 62604.0], [42.2, 62604.0], [42.3, 62618.0], [42.4, 62618.0], [42.5, 62619.0], [42.6, 62619.0], [42.7, 62621.0], [42.8, 62621.0], [42.9, 62621.0], [43.0, 62621.0], [43.1, 62624.0], [43.2, 62624.0], [43.3, 62625.0], [43.4, 62625.0], [43.5, 62626.0], [43.6, 62626.0], [43.7, 62627.0], [43.8, 62627.0], [43.9, 62628.0], [44.0, 62628.0], [44.1, 62631.0], [44.2, 62631.0], [44.3, 62631.0], [44.4, 62631.0], [44.5, 62633.0], [44.6, 62633.0], [44.7, 62634.0], [44.8, 62634.0], [44.9, 62636.0], [45.0, 62636.0], [45.1, 62638.0], [45.2, 62638.0], [45.3, 62641.0], [45.4, 62641.0], [45.5, 62643.0], [45.6, 62643.0], [45.7, 62644.0], [45.8, 62644.0], [45.9, 62645.0], [46.0, 62645.0], [46.1, 62647.0], [46.2, 62647.0], [46.3, 62647.0], [46.4, 62647.0], [46.5, 62649.0], [46.6, 62649.0], [46.7, 62649.0], [46.8, 62649.0], [46.9, 62651.0], [47.0, 62651.0], [47.1, 62653.0], [47.2, 62653.0], [47.3, 62655.0], [47.4, 62655.0], [47.5, 62655.0], [47.6, 62655.0], [47.7, 62657.0], [47.8, 62657.0], [47.9, 62659.0], [48.0, 62659.0], [48.1, 62663.0], [48.2, 62663.0], [48.3, 62665.0], [48.4, 62665.0], [48.5, 62665.0], [48.6, 62665.0], [48.7, 62667.0], [48.8, 62667.0], [48.9, 62669.0], [49.0, 62669.0], [49.1, 62669.0], [49.2, 62669.0], [49.3, 62670.0], [49.4, 62670.0], [49.5, 62671.0], [49.6, 62671.0], [49.7, 62672.0], [49.8, 62672.0], [49.9, 62672.0], [50.0, 62672.0], [50.1, 62673.0], [50.2, 62673.0], [50.3, 62673.0], [50.4, 62673.0], [50.5, 62674.0], [50.6, 62674.0], [50.7, 62675.0], [50.8, 62675.0], [50.9, 62675.0], [51.0, 62675.0], [51.1, 62676.0], [51.2, 62676.0], [51.3, 62677.0], [51.4, 62677.0], [51.5, 62678.0], [51.6, 62678.0], [51.7, 62679.0], [51.8, 62679.0], [51.9, 62679.0], [52.0, 62679.0], [52.1, 62680.0], [52.2, 62680.0], [52.3, 62681.0], [52.4, 62681.0], [52.5, 62682.0], [52.6, 62682.0], [52.7, 62684.0], [52.8, 62684.0], [52.9, 62686.0], [53.0, 62686.0], [53.1, 62688.0], [53.2, 62688.0], [53.3, 62690.0], [53.4, 62690.0], [53.5, 62692.0], [53.6, 62692.0], [53.7, 62692.0], [53.8, 62692.0], [53.9, 62698.0], [54.0, 62698.0], [54.1, 62712.0], [54.2, 62712.0], [54.3, 62712.0], [54.4, 62712.0], [54.5, 62718.0], [54.6, 62718.0], [54.7, 62718.0], [54.8, 62718.0], [54.9, 62719.0], [55.0, 62719.0], [55.1, 62720.0], [55.2, 62720.0], [55.3, 62721.0], [55.4, 62721.0], [55.5, 62723.0], [55.6, 62723.0], [55.7, 62725.0], [55.8, 62725.0], [55.9, 62725.0], [56.0, 62725.0], [56.1, 62727.0], [56.2, 62727.0], [56.3, 62729.0], [56.4, 62729.0], [56.5, 62730.0], [56.6, 62730.0], [56.7, 62731.0], [56.8, 62731.0], [56.9, 62732.0], [57.0, 62732.0], [57.1, 62732.0], [57.2, 62732.0], [57.3, 62734.0], [57.4, 62734.0], [57.5, 62736.0], [57.6, 62736.0], [57.7, 62738.0], [57.8, 62738.0], [57.9, 62738.0], [58.0, 62738.0], [58.1, 62742.0], [58.2, 62742.0], [58.3, 62744.0], [58.4, 62744.0], [58.5, 62744.0], [58.6, 62744.0], [58.7, 62746.0], [58.8, 62746.0], [58.9, 62746.0], [59.0, 62746.0], [59.1, 62751.0], [59.2, 62751.0], [59.3, 62753.0], [59.4, 62753.0], [59.5, 62755.0], [59.6, 62755.0], [59.7, 62759.0], [59.8, 62759.0], [59.9, 62761.0], [60.0, 62761.0], [60.1, 62763.0], [60.2, 62763.0], [60.3, 62763.0], [60.4, 62763.0], [60.5, 62765.0], [60.6, 62765.0], [60.7, 62766.0], [60.8, 62766.0], [60.9, 62768.0], [61.0, 62768.0], [61.1, 62768.0], [61.2, 62768.0], [61.3, 62770.0], [61.4, 62770.0], [61.5, 62770.0], [61.6, 62770.0], [61.7, 62772.0], [61.8, 62772.0], [61.9, 62773.0], [62.0, 62773.0], [62.1, 62775.0], [62.2, 62775.0], [62.3, 62776.0], [62.4, 62776.0], [62.5, 62777.0], [62.6, 62777.0], [62.7, 62778.0], [62.8, 62778.0], [62.9, 62779.0], [63.0, 62779.0], [63.1, 62779.0], [63.2, 62779.0], [63.3, 62780.0], [63.4, 62780.0], [63.5, 62781.0], [63.6, 62781.0], [63.7, 62784.0], [63.8, 62784.0], [63.9, 62786.0], [64.0, 62786.0], [64.1, 62787.0], [64.2, 62787.0], [64.3, 62791.0], [64.4, 62791.0], [64.5, 62794.0], [64.6, 62794.0], [64.7, 62796.0], [64.8, 62796.0], [64.9, 62798.0], [65.0, 62798.0], [65.1, 62800.0], [65.2, 62800.0], [65.3, 62801.0], [65.4, 62801.0], [65.5, 62802.0], [65.6, 62802.0], [65.7, 62803.0], [65.8, 62803.0], [65.9, 62804.0], [66.0, 62804.0], [66.1, 62805.0], [66.2, 62805.0], [66.3, 62807.0], [66.4, 62807.0], [66.5, 62807.0], [66.6, 62807.0], [66.7, 62811.0], [66.8, 62811.0], [66.9, 62812.0], [67.0, 62812.0], [67.1, 62813.0], [67.2, 62813.0], [67.3, 62814.0], [67.4, 62814.0], [67.5, 62814.0], [67.6, 62814.0], [67.7, 62816.0], [67.8, 62816.0], [67.9, 62816.0], [68.0, 62816.0], [68.1, 62819.0], [68.2, 62819.0], [68.3, 62820.0], [68.4, 62820.0], [68.5, 62821.0], [68.6, 62821.0], [68.7, 62821.0], [68.8, 62821.0], [68.9, 62823.0], [69.0, 62823.0], [69.1, 62825.0], [69.2, 62825.0], [69.3, 62825.0], [69.4, 62825.0], [69.5, 62829.0], [69.6, 62829.0], [69.7, 62831.0], [69.8, 62831.0], [69.9, 62833.0], [70.0, 62833.0], [70.1, 62833.0], [70.2, 62833.0], [70.3, 62836.0], [70.4, 62836.0], [70.5, 62838.0], [70.6, 62838.0], [70.7, 62839.0], [70.8, 62839.0], [70.9, 62841.0], [71.0, 62841.0], [71.1, 62843.0], [71.2, 62843.0], [71.3, 62844.0], [71.4, 62844.0], [71.5, 62846.0], [71.6, 62846.0], [71.7, 62847.0], [71.8, 62847.0], [71.9, 62849.0], [72.0, 62849.0], [72.1, 62851.0], [72.2, 62851.0], [72.3, 62854.0], [72.4, 62854.0], [72.5, 62855.0], [72.6, 62855.0], [72.7, 62857.0], [72.8, 62857.0], [72.9, 62859.0], [73.0, 62859.0], [73.1, 62861.0], [73.2, 62861.0], [73.3, 62863.0], [73.4, 62863.0], [73.5, 62865.0], [73.6, 62865.0], [73.7, 62867.0], [73.8, 62867.0], [73.9, 62869.0], [74.0, 62869.0], [74.1, 62871.0], [74.2, 62871.0], [74.3, 62873.0], [74.4, 62873.0], [74.5, 62873.0], [74.6, 62873.0], [74.7, 62893.0], [74.8, 62893.0], [74.9, 62896.0], [75.0, 62896.0], [75.1, 62897.0], [75.2, 62897.0], [75.3, 62898.0], [75.4, 62898.0], [75.5, 62901.0], [75.6, 62901.0], [75.7, 62903.0], [75.8, 62903.0], [75.9, 62908.0], [76.0, 62908.0], [76.1, 62912.0], [76.2, 62912.0], [76.3, 62915.0], [76.4, 62915.0], [76.5, 62917.0], [76.6, 62917.0], [76.7, 62919.0], [76.8, 62919.0], [76.9, 62921.0], [77.0, 62921.0], [77.1, 62923.0], [77.2, 62923.0], [77.3, 62925.0], [77.4, 62925.0], [77.5, 62928.0], [77.6, 62928.0], [77.7, 62929.0], [77.8, 62929.0], [77.9, 62932.0], [78.0, 62932.0], [78.1, 62936.0], [78.2, 62936.0], [78.3, 62938.0], [78.4, 62938.0], [78.5, 62939.0], [78.6, 62939.0], [78.7, 62941.0], [78.8, 62941.0], [78.9, 62943.0], [79.0, 62943.0], [79.1, 62945.0], [79.2, 62945.0], [79.3, 62947.0], [79.4, 62947.0], [79.5, 62949.0], [79.6, 62949.0], [79.7, 62949.0], [79.8, 62949.0], [79.9, 62950.0], [80.0, 62950.0], [80.1, 62953.0], [80.2, 62953.0], [80.3, 62955.0], [80.4, 62955.0], [80.5, 62958.0], [80.6, 62958.0], [80.7, 62959.0], [80.8, 62959.0], [80.9, 62960.0], [81.0, 62960.0], [81.1, 62960.0], [81.2, 62960.0], [81.3, 62962.0], [81.4, 62962.0], [81.5, 62964.0], [81.6, 62964.0], [81.7, 62966.0], [81.8, 62966.0], [81.9, 62967.0], [82.0, 62967.0], [82.1, 62968.0], [82.2, 62968.0], [82.3, 62970.0], [82.4, 62970.0], [82.5, 62985.0], [82.6, 62985.0], [82.7, 63013.0], [82.8, 63013.0], [82.9, 63015.0], [83.0, 63015.0], [83.1, 63017.0], [83.2, 63017.0], [83.3, 63018.0], [83.4, 63018.0], [83.5, 63019.0], [83.6, 63019.0], [83.7, 63021.0], [83.8, 63021.0], [83.9, 63022.0], [84.0, 63022.0], [84.1, 63024.0], [84.2, 63024.0], [84.3, 63024.0], [84.4, 63024.0], [84.5, 63026.0], [84.6, 63026.0], [84.7, 63026.0], [84.8, 63026.0], [84.9, 63027.0], [85.0, 63027.0], [85.1, 63028.0], [85.2, 63028.0], [85.3, 63029.0], [85.4, 63029.0], [85.5, 63029.0], [85.6, 63029.0], [85.7, 63030.0], [85.8, 63030.0], [85.9, 63031.0], [86.0, 63031.0], [86.1, 63032.0], [86.2, 63032.0], [86.3, 63033.0], [86.4, 63033.0], [86.5, 63034.0], [86.6, 63034.0], [86.7, 63034.0], [86.8, 63034.0], [86.9, 63035.0], [87.0, 63035.0], [87.1, 63035.0], [87.2, 63035.0], [87.3, 63035.0], [87.4, 63035.0], [87.5, 63036.0], [87.6, 63036.0], [87.7, 63036.0], [87.8, 63036.0], [87.9, 63038.0], [88.0, 63038.0], [88.1, 63038.0], [88.2, 63038.0], [88.3, 63039.0], [88.4, 63039.0], [88.5, 63040.0], [88.6, 63040.0], [88.7, 63042.0], [88.8, 63042.0], [88.9, 63045.0], [89.0, 63045.0], [89.1, 63054.0], [89.2, 63054.0], [89.3, 63056.0], [89.4, 63056.0], [89.5, 63058.0], [89.6, 63058.0], [89.7, 63060.0], [89.8, 63060.0], [89.9, 63061.0], [90.0, 63061.0], [90.1, 63061.0], [90.2, 63061.0], [90.3, 63069.0], [90.4, 63069.0], [90.5, 63079.0], [90.6, 63079.0], [90.7, 63080.0], [90.8, 63080.0], [90.9, 63082.0], [91.0, 63082.0], [91.1, 63085.0], [91.2, 63085.0], [91.3, 63085.0], [91.4, 63085.0], [91.5, 63086.0], [91.6, 63086.0], [91.7, 63086.0], [91.8, 63086.0], [91.9, 63086.0], [92.0, 63086.0], [92.1, 63086.0], [92.2, 63086.0], [92.3, 63086.0], [92.4, 63086.0], [92.5, 63086.0], [92.6, 63086.0], [92.7, 63086.0], [92.8, 63086.0], [92.9, 63086.0], [93.0, 63086.0], [93.1, 63086.0], [93.2, 63086.0], [93.3, 63088.0], [93.4, 63088.0], [93.5, 63095.0], [93.6, 63095.0], [93.7, 63097.0], [93.8, 63097.0], [93.9, 63101.0], [94.0, 63101.0], [94.1, 63101.0], [94.2, 63101.0], [94.3, 63101.0], [94.4, 63101.0], [94.5, 63108.0], [94.6, 63108.0], [94.7, 63109.0], [94.8, 63109.0], [94.9, 63124.0], [95.0, 63124.0], [95.1, 63124.0], [95.2, 63124.0], [95.3, 63127.0], [95.4, 63127.0], [95.5, 63129.0], [95.6, 63129.0], [95.7, 63129.0], [95.8, 63129.0], [95.9, 63131.0], [96.0, 63131.0], [96.1, 63132.0], [96.2, 63132.0], [96.3, 63133.0], [96.4, 63133.0], [96.5, 63133.0], [96.6, 63133.0], [96.7, 63150.0], [96.8, 63150.0], [96.9, 63152.0], [97.0, 63152.0], [97.1, 63156.0], [97.2, 63156.0], [97.3, 63158.0], [97.4, 63158.0], [97.5, 63159.0], [97.6, 63159.0], [97.7, 63169.0], [97.8, 63169.0], [97.9, 63176.0], [98.0, 63176.0], [98.1, 63178.0], [98.2, 63178.0], [98.3, 63182.0], [98.4, 63182.0], [98.5, 63183.0], [98.6, 63183.0], [98.7, 63196.0], [98.8, 63196.0], [98.9, 63201.0], [99.0, 63201.0], [99.1, 63204.0], [99.2, 63204.0], [99.3, 63207.0], [99.4, 63207.0], [99.5, 63214.0], [99.6, 63214.0], [99.7, 63216.0], [99.8, 63216.0], [99.9, 63219.0], [100.0, 63219.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 15553.0, "series": [{"data": [[0.0, 15553.0], [3000.0, 50.0], [200.0, 143.0], [15000.0, 96.0], [1000.0, 108.0], [1100.0, 8.0], [300.0, 98.0], [21000.0, 5.0], [100.0, 119.0], [400.0, 22.0], [7000.0, 50.0], [7200.0, 45.0], [500.0, 10.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[17200.0, 68.0], [17300.0, 42.0], [17400.0, 91.0], [17000.0, 2.0], [17100.0, 20.0], [17900.0, 46.0], [17600.0, 66.0], [17500.0, 30.0], [18000.0, 45.0], [17700.0, 24.0], [17800.0, 40.0], [18100.0, 26.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[63000.0, 56.0], [63100.0, 25.0], [63200.0, 6.0], [62600.0, 61.0], [62500.0, 38.0], [62200.0, 41.0], [62000.0, 2.0], [62300.0, 42.0], [62100.0, 39.0], [62700.0, 55.0], [62800.0, 52.0], [62900.0, 36.0], [62400.0, 47.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 63200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 15554.0, "series": [{"data": [[0.0, 15554.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 391.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1357.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.86525321543385, "minX": 1.61759952E12, "maxY": 289.69600000000014, "series": [{"data": [[1.61759952E12, 286.6259999999997]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61759952E12, 48.86525321543385], [1.61759958E12, 49.808654602675055]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.61759958E12, 289.69600000000014]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759958E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.5, "minX": 1.0, "maxY": 63207.0, "series": [{"data": [[2.0, 15074.0], [3.0, 15081.0], [4.0, 15071.0], [5.0, 15075.0], [6.0, 15080.0], [8.0, 15070.0], [9.0, 15075.5], [10.0, 15050.0], [11.0, 15049.0], [12.0, 15061.0], [13.0, 15053.0], [15.0, 15049.0], [17.0, 15067.0], [18.0, 15066.0], [20.0, 15063.0], [21.0, 15077.0], [22.0, 15055.0], [23.0, 15055.0], [24.0, 15060.0], [26.0, 15061.5], [27.0, 15055.0], [28.0, 15055.0], [29.0, 15062.0], [30.0, 15051.0], [31.0, 15064.0], [33.0, 15055.0], [32.0, 15064.0], [34.0, 15059.0], [37.0, 15059.0], [36.0, 15067.0], [39.0, 15058.0], [41.0, 15069.0], [40.0, 15062.0], [43.0, 15054.0], [42.0, 15059.0], [45.0, 15059.0], [44.0, 15059.0], [47.0, 15064.0], [46.0, 15054.0], [48.0, 15058.0], [50.0, 15053.5], [550.0, 201.56357228971626], [627.0, 48.0], [663.0, 46.142857142857146], [701.0, 47.0], [698.0, 44.0], [695.0, 47.0], [735.0, 54.0], [732.0, 49.0], [707.0, 47.0], [762.0, 41.0], [760.0, 67.0], [757.0, 66.0], [755.0, 67.0], [750.0, 65.0], [748.0, 63.0], [738.0, 62.0], [736.0, 53.0], [809.0, 44.285714285714285], [850.0, 52.0], [848.0, 50.0], [847.0, 52.0], [885.0, 53.0], [879.0, 54.0], [868.0, 54.0], [864.0, 54.0], [916.0, 51.5], [959.0, 53.95], [978.0, 48.0], [974.0, 53.0], [963.0, 58.0], [1008.0, 27.5], [1005.0, 55.5], [1006.0, 30.0], [1007.0, 34.5], [999.0, 52.57894736842106], [1016.0, 28.499999999999996], [1017.0, 28.22222222222222], [1018.0, 32.63636363636363], [1019.0, 29.583333333333332], [1020.0, 29.875], [1021.0, 28.599999999999998], [1022.0, 31.2], [1023.0, 30.07142857142857], [1009.0, 40.4], [1010.0, 32.24999999999999], [1011.0, 28.833333333333332], [1012.0, 30.142857142857142], [1013.0, 29.545454545454547], [1014.0, 28.57142857142857], [1015.0, 28.900000000000002], [1027.0, 34.307692307692314], [1024.0, 29.599999999999998], [1050.0, 71.88326684862496], [1048.0, 40.962962962962955], [1049.0, 43.66666666666666], [1046.0, 49.0], [1047.0, 42.0], [1044.0, 43.04545454545454], [1045.0, 41.6], [1042.0, 41.33333333333333], [1043.0, 42.77777777777777], [1040.0, 39.0], [1041.0, 40.5909090909091], [1025.0, 30.647058823529406], [1026.0, 30.75], [1028.0, 33.650000000000006], [1029.0, 33.30769230769231], [1030.0, 35.625], [1031.0, 38.76923076923077], [1032.0, 45.84615384615385], [1033.0, 47.84615384615385], [1034.0, 42.85714285714285], [1035.0, 38.4375], [1036.0, 38.64285714285715], [1037.0, 42.5], [1038.0, 45.904761904761905], [1039.0, 43.117647058823536], [1.0, 15069.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[714.6067946280734, 202.18544183479545]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[639.0, 17776.5], [637.0, 17525.6], [636.0, 17204.0], [660.0, 17846.0], [663.0, 17602.238095238095], [662.0, 17629.545454545456], [661.0, 17569.333333333332], [659.0, 17591.363636363636], [657.0, 17488.0], [655.0, 17479.333333333336], [641.0, 17474.0], [640.0, 18124.0], [643.0, 17515.666666666668], [642.0, 17497.75], [647.0, 17666.75], [646.0, 17707.0], [645.0, 17609.0], [653.0, 17703.23076923077], [652.0, 17546.0], [651.0, 17615.75], [650.0, 17757.0], [649.0, 17610.0], [648.0, 17371.0], [767.0, 17766.0], [766.0, 17498.0], [764.0, 17521.333333333332], [796.0, 17217.0], [799.0, 17663.333333333332], [785.0, 17411.666666666668], [784.0, 17579.666666666668], [787.0, 17585.75], [786.0, 17789.0], [789.0, 17717.666666666668], [788.0, 18066.0], [797.0, 17238.0], [798.0, 17222.0], [795.0, 17474.0], [794.0, 17776.0], [793.0, 17956.5], [792.0, 17336.0], [783.0, 17435.0], [769.0, 17686.0], [771.0, 17688.285714285714], [770.0, 17571.833333333332], [773.0, 17490.666666666668], [772.0, 17701.0], [775.0, 17393.1], [774.0, 17628.714285714283], [782.0, 17510.0], [780.0, 17518.222222222226], [781.0, 17862.0], [779.0, 17485.666666666668], [778.0, 17683.5], [777.0, 17678.0], [776.0, 17447.6], [791.0, 17426.85714285714], [790.0, 17866.0], [809.0, 17669.0], [808.0, 17802.0], [807.0, 17536.0], [806.0, 17705.5], [804.0, 17627.333333333332], [802.0, 17631.333333333332], [801.0, 17265.0], [800.0, 17253.0], [892.0, 17978.0], [895.0, 18110.0], [885.0, 17562.0], [894.0, 17638.0], [893.0, 17598.75], [891.0, 17824.5], [890.0, 17776.899999999998], [889.0, 17618.5], [888.0, 17770.0], [887.0, 17561.5], [886.0, 17482.0], [912.0, 17692.375], [916.0, 17587.76923076923], [915.0, 17833.4], [914.0, 17551.5], [913.0, 17669.0], [910.0, 17759.0], [896.0, 17367.0], [898.0, 17643.25], [897.0, 17208.0], [902.0, 17830.666666666668], [901.0, 17471.0], [900.0, 17477.0], [909.0, 17813.8], [908.0, 17729.0], [907.0, 17621.333333333332], [905.0, 17891.333333333332], [904.0, 17364.0], [947.0, 17284.0], [958.0, 17615.333333333332], [959.0, 17622.210526315786], [944.0, 17872.5], [946.0, 17503.0], [945.0, 17902.0], [955.0, 17534.666666666668], [953.0, 17255.0], [952.0, 17442.0], [951.0, 17443.0], [949.0, 17751.0], [948.0, 17837.0], [974.0, 17620.399999999998], [1011.0, 17905.0], [1022.0, 17747.0], [1021.0, 17216.0], [1017.0, 18014.0], [1015.0, 17084.0], [1013.0, 17741.5], [1012.0, 17218.0], [1010.0, 17311.0], [999.0, 17578.777777777777], [998.0, 17932.0], [997.0, 17884.5], [996.0, 17652.333333333332], [995.0, 17228.0], [1034.0, 17785.0], [1050.0, 17607.846153846152], [1024.0, 17884.0], [1028.0, 17978.0], [1026.0, 17307.0], [1049.0, 17589.166666666664], [1048.0, 17590.0], [1041.0, 17912.0], [1043.0, 17870.0], [1039.0, 17821.0], [1038.0, 18016.0], [1036.0, 17624.5], [1033.0, 17517.0], [1032.0, 17358.0], [1031.0, 17625.5], [1029.0, 17715.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[836.6159999999995, 17613.838000000007]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[550.0, 62451.20000000002], [549.0, 62397.03225806453], [153.0, 62875.44444444444], [185.0, 62797.625], [57.0, 62757.0], [238.0, 62798.06896551724], [237.0, 62727.333333333336], [358.0, 62634.98780487806], [357.0, 62669.28947368421], [99.0, 62803.75], [100.0, 62791.38461538461], [459.0, 62597.380000000005], [458.0, 62562.68181818182], [457.0, 62309.0], [456.0, 62364.66666666667], [126.0, 62882.48000000001], [125.0, 63207.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[339.6939999999999, 62652.82800000004]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1050.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61759952E12, "maxY": 4.9E-324, "series": [{"data": [[1.61759952E12, 0.0], [1.61759958E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61759952E12, 0.0], [1.61759958E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759958E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 62.77873794212239, "minX": 1.61759952E12, "maxY": 62652.82800000004, "series": [{"data": [[1.61759952E12, 62.77873794212239], [1.61759958E12, 420.4978756884357]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61759952E12, 17613.838000000007]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61759958E12, 62652.82800000004]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759958E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61759952E12, "maxY": 4.9E-324, "series": [{"data": [[1.61759952E12, 0.0], [1.61759958E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61759952E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61759958E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759958E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61759952E12, "maxY": 4.9E-324, "series": [{"data": [[1.61759952E12, 0.0], [1.61759958E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61759952E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61759958E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759958E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61759952E12, "maxY": 63219.0, "series": [{"data": [[1.61759952E12, 18159.0], [1.61759958E12, 63219.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61759952E12, 76.0], [1.61759958E12, 7048.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61759952E12, 17912.47], [1.61759958E12, 63033.49]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61759952E12, 1054.0], [1.61759958E12, 62463.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61759952E12, 26.0], [1.61759958E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61759952E12, 46.0], [1.61759958E12, 44.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759958E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 12.0, "maxY": 62672.5, "series": [{"data": [[533.0, 37.0], [688.0, 44.0], [682.0, 43.0], [753.0, 41.0], [750.0, 48.0], [747.0, 42.0], [780.0, 58.0], [50.0, 15059.5], [863.0, 36.0], [869.0, 55.0], [895.0, 45.0], [58.0, 3042.0], [1009.0, 334.0], [1000.0, 49.0], [993.0, 42.0], [1114.0, 44.0], [1091.0, 45.0], [1329.0, 37.0], [118.0, 28.0], [139.0, 28.0], [191.0, 41.0], [12.0, 28.5], [194.0, 47.0], [239.0, 51.0], [479.0, 39.0], [487.0, 50.0], [505.0, 59.0], [500.0, 62672.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[191.0, 21045.0], [118.0, 21029.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1329.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 12.0, "maxY": 4.9E-324, "series": [{"data": [[533.0, 0.0], [688.0, 0.0], [682.0, 0.0], [753.0, 0.0], [750.0, 0.0], [747.0, 0.0], [780.0, 0.0], [50.0, 0.0], [863.0, 0.0], [869.0, 0.0], [895.0, 0.0], [58.0, 0.0], [1009.0, 0.0], [1000.0, 0.0], [993.0, 0.0], [1114.0, 0.0], [1091.0, 0.0], [1329.0, 0.0], [118.0, 0.0], [139.0, 0.0], [191.0, 0.0], [12.0, 0.0], [194.0, 0.0], [239.0, 0.0], [479.0, 0.0], [487.0, 0.0], [505.0, 0.0], [500.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[191.0, 0.0], [118.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1329.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 105.08333333333333, "minX": 1.61759952E12, "maxY": 183.36666666666667, "series": [{"data": [[1.61759952E12, 183.36666666666667], [1.61759958E12, 105.08333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759958E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61759952E12, "maxY": 174.2, "series": [{"data": [[1.61759952E12, 174.2], [1.61759958E12, 114.16666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61759958E12, 0.08333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759958E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61759952E12, "maxY": 165.86666666666667, "series": [{"data": [[1.61759958E12, 8.333333333333334]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.61759952E12, 8.333333333333334]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61759952E12, 165.86666666666667], [1.61759958E12, 105.83333333333333]], "isOverall": false, "label": "JoinRoom-success", "isController": false}, {"data": [[1.61759958E12, 0.08333333333333333]], "isOverall": false, "label": "JoinRoom-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759958E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.61759952E12, "maxY": 174.2, "series": [{"data": [[1.61759952E12, 174.2], [1.61759958E12, 114.16666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61759958E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759958E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

