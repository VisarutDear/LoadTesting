/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 61802.0, "series": [{"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 28.0], [0.8, 28.0], [0.9, 28.0], [1.0, 28.0], [1.1, 28.0], [1.2, 28.0], [1.3, 28.0], [1.4, 28.0], [1.5, 28.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 28.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 29.0], [4.6, 29.0], [4.7, 29.0], [4.8, 29.0], [4.9, 29.0], [5.0, 29.0], [5.1, 29.0], [5.2, 29.0], [5.3, 29.0], [5.4, 29.0], [5.5, 29.0], [5.6, 29.0], [5.7, 29.0], [5.8, 29.0], [5.9, 29.0], [6.0, 29.0], [6.1, 29.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 30.0], [6.7, 30.0], [6.8, 30.0], [6.9, 30.0], [7.0, 30.0], [7.1, 30.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 30.0], [8.2, 30.0], [8.3, 30.0], [8.4, 30.0], [8.5, 30.0], [8.6, 30.0], [8.7, 31.0], [8.8, 31.0], [8.9, 31.0], [9.0, 31.0], [9.1, 31.0], [9.2, 31.0], [9.3, 31.0], [9.4, 31.0], [9.5, 31.0], [9.6, 31.0], [9.7, 31.0], [9.8, 31.0], [9.9, 31.0], [10.0, 31.0], [10.1, 31.0], [10.2, 31.0], [10.3, 31.0], [10.4, 31.0], [10.5, 31.0], [10.6, 31.0], [10.7, 31.0], [10.8, 31.0], [10.9, 31.0], [11.0, 31.0], [11.1, 31.0], [11.2, 32.0], [11.3, 32.0], [11.4, 32.0], [11.5, 32.0], [11.6, 32.0], [11.7, 32.0], [11.8, 32.0], [11.9, 32.0], [12.0, 32.0], [12.1, 32.0], [12.2, 32.0], [12.3, 32.0], [12.4, 32.0], [12.5, 32.0], [12.6, 32.0], [12.7, 32.0], [12.8, 32.0], [12.9, 32.0], [13.0, 32.0], [13.1, 32.0], [13.2, 32.0], [13.3, 32.0], [13.4, 32.0], [13.5, 32.0], [13.6, 32.0], [13.7, 32.0], [13.8, 32.0], [13.9, 32.0], [14.0, 32.0], [14.1, 32.0], [14.2, 32.0], [14.3, 33.0], [14.4, 33.0], [14.5, 33.0], [14.6, 33.0], [14.7, 33.0], [14.8, 33.0], [14.9, 33.0], [15.0, 33.0], [15.1, 33.0], [15.2, 33.0], [15.3, 33.0], [15.4, 33.0], [15.5, 33.0], [15.6, 33.0], [15.7, 33.0], [15.8, 33.0], [15.9, 33.0], [16.0, 33.0], [16.1, 33.0], [16.2, 33.0], [16.3, 33.0], [16.4, 33.0], [16.5, 33.0], [16.6, 33.0], [16.7, 33.0], [16.8, 33.0], [16.9, 33.0], [17.0, 33.0], [17.1, 33.0], [17.2, 33.0], [17.3, 33.0], [17.4, 33.0], [17.5, 33.0], [17.6, 33.0], [17.7, 33.0], [17.8, 33.0], [17.9, 34.0], [18.0, 34.0], [18.1, 34.0], [18.2, 34.0], [18.3, 34.0], [18.4, 34.0], [18.5, 34.0], [18.6, 34.0], [18.7, 34.0], [18.8, 34.0], [18.9, 34.0], [19.0, 34.0], [19.1, 34.0], [19.2, 34.0], [19.3, 34.0], [19.4, 34.0], [19.5, 34.0], [19.6, 34.0], [19.7, 34.0], [19.8, 34.0], [19.9, 34.0], [20.0, 34.0], [20.1, 34.0], [20.2, 34.0], [20.3, 34.0], [20.4, 34.0], [20.5, 34.0], [20.6, 34.0], [20.7, 34.0], [20.8, 34.0], [20.9, 34.0], [21.0, 34.0], [21.1, 34.0], [21.2, 34.0], [21.3, 34.0], [21.4, 34.0], [21.5, 34.0], [21.6, 34.0], [21.7, 34.0], [21.8, 34.0], [21.9, 34.0], [22.0, 34.0], [22.1, 34.0], [22.2, 34.0], [22.3, 34.0], [22.4, 34.0], [22.5, 34.0], [22.6, 34.0], [22.7, 34.0], [22.8, 34.0], [22.9, 34.0], [23.0, 34.0], [23.1, 34.0], [23.2, 34.0], [23.3, 34.0], [23.4, 34.0], [23.5, 35.0], [23.6, 35.0], [23.7, 35.0], [23.8, 35.0], [23.9, 35.0], [24.0, 35.0], [24.1, 35.0], [24.2, 35.0], [24.3, 35.0], [24.4, 35.0], [24.5, 35.0], [24.6, 35.0], [24.7, 35.0], [24.8, 35.0], [24.9, 35.0], [25.0, 35.0], [25.1, 35.0], [25.2, 35.0], [25.3, 35.0], [25.4, 35.0], [25.5, 35.0], [25.6, 35.0], [25.7, 35.0], [25.8, 35.0], [25.9, 35.0], [26.0, 35.0], [26.1, 35.0], [26.2, 35.0], [26.3, 35.0], [26.4, 35.0], [26.5, 35.0], [26.6, 35.0], [26.7, 35.0], [26.8, 35.0], [26.9, 35.0], [27.0, 35.0], [27.1, 35.0], [27.2, 35.0], [27.3, 35.0], [27.4, 35.0], [27.5, 35.0], [27.6, 35.0], [27.7, 35.0], [27.8, 35.0], [27.9, 35.0], [28.0, 35.0], [28.1, 35.0], [28.2, 35.0], [28.3, 35.0], [28.4, 35.0], [28.5, 35.0], [28.6, 35.0], [28.7, 35.0], [28.8, 35.0], [28.9, 35.0], [29.0, 35.0], [29.1, 35.0], [29.2, 35.0], [29.3, 35.0], [29.4, 35.0], [29.5, 35.0], [29.6, 35.0], [29.7, 35.0], [29.8, 35.0], [29.9, 35.0], [30.0, 35.0], [30.1, 36.0], [30.2, 36.0], [30.3, 36.0], [30.4, 36.0], [30.5, 36.0], [30.6, 36.0], [30.7, 36.0], [30.8, 36.0], [30.9, 36.0], [31.0, 36.0], [31.1, 36.0], [31.2, 36.0], [31.3, 36.0], [31.4, 36.0], [31.5, 36.0], [31.6, 36.0], [31.7, 36.0], [31.8, 36.0], [31.9, 36.0], [32.0, 36.0], [32.1, 36.0], [32.2, 36.0], [32.3, 36.0], [32.4, 36.0], [32.5, 36.0], [32.6, 36.0], [32.7, 36.0], [32.8, 36.0], [32.9, 36.0], [33.0, 36.0], [33.1, 36.0], [33.2, 36.0], [33.3, 36.0], [33.4, 36.0], [33.5, 36.0], [33.6, 36.0], [33.7, 36.0], [33.8, 36.0], [33.9, 36.0], [34.0, 36.0], [34.1, 36.0], [34.2, 36.0], [34.3, 36.0], [34.4, 36.0], [34.5, 36.0], [34.6, 36.0], [34.7, 36.0], [34.8, 36.0], [34.9, 36.0], [35.0, 36.0], [35.1, 36.0], [35.2, 36.0], [35.3, 36.0], [35.4, 36.0], [35.5, 36.0], [35.6, 36.0], [35.7, 36.0], [35.8, 36.0], [35.9, 36.0], [36.0, 36.0], [36.1, 36.0], [36.2, 36.0], [36.3, 36.0], [36.4, 36.0], [36.5, 36.0], [36.6, 36.0], [36.7, 36.0], [36.8, 37.0], [36.9, 37.0], [37.0, 37.0], [37.1, 37.0], [37.2, 37.0], [37.3, 37.0], [37.4, 37.0], [37.5, 37.0], [37.6, 37.0], [37.7, 37.0], [37.8, 37.0], [37.9, 37.0], [38.0, 37.0], [38.1, 37.0], [38.2, 37.0], [38.3, 37.0], [38.4, 37.0], [38.5, 37.0], [38.6, 37.0], [38.7, 37.0], [38.8, 37.0], [38.9, 37.0], [39.0, 37.0], [39.1, 37.0], [39.2, 37.0], [39.3, 37.0], [39.4, 37.0], [39.5, 37.0], [39.6, 37.0], [39.7, 37.0], [39.8, 37.0], [39.9, 37.0], [40.0, 37.0], [40.1, 37.0], [40.2, 37.0], [40.3, 37.0], [40.4, 37.0], [40.5, 37.0], [40.6, 37.0], [40.7, 37.0], [40.8, 37.0], [40.9, 37.0], [41.0, 37.0], [41.1, 37.0], [41.2, 37.0], [41.3, 37.0], [41.4, 37.0], [41.5, 37.0], [41.6, 37.0], [41.7, 37.0], [41.8, 37.0], [41.9, 37.0], [42.0, 37.0], [42.1, 37.0], [42.2, 37.0], [42.3, 37.0], [42.4, 37.0], [42.5, 37.0], [42.6, 37.0], [42.7, 37.0], [42.8, 37.0], [42.9, 37.0], [43.0, 37.0], [43.1, 37.0], [43.2, 37.0], [43.3, 37.0], [43.4, 37.0], [43.5, 37.0], [43.6, 37.0], [43.7, 37.0], [43.8, 37.0], [43.9, 37.0], [44.0, 37.0], [44.1, 37.0], [44.2, 37.0], [44.3, 37.0], [44.4, 37.0], [44.5, 37.0], [44.6, 37.0], [44.7, 37.0], [44.8, 38.0], [44.9, 38.0], [45.0, 38.0], [45.1, 38.0], [45.2, 38.0], [45.3, 38.0], [45.4, 38.0], [45.5, 38.0], [45.6, 38.0], [45.7, 38.0], [45.8, 38.0], [45.9, 38.0], [46.0, 38.0], [46.1, 38.0], [46.2, 38.0], [46.3, 38.0], [46.4, 38.0], [46.5, 38.0], [46.6, 38.0], [46.7, 38.0], [46.8, 38.0], [46.9, 38.0], [47.0, 38.0], [47.1, 38.0], [47.2, 38.0], [47.3, 38.0], [47.4, 38.0], [47.5, 38.0], [47.6, 38.0], [47.7, 38.0], [47.8, 38.0], [47.9, 38.0], [48.0, 38.0], [48.1, 38.0], [48.2, 38.0], [48.3, 38.0], [48.4, 38.0], [48.5, 38.0], [48.6, 38.0], [48.7, 38.0], [48.8, 38.0], [48.9, 38.0], [49.0, 38.0], [49.1, 38.0], [49.2, 38.0], [49.3, 38.0], [49.4, 38.0], [49.5, 38.0], [49.6, 38.0], [49.7, 38.0], [49.8, 38.0], [49.9, 38.0], [50.0, 38.0], [50.1, 38.0], [50.2, 38.0], [50.3, 38.0], [50.4, 38.0], [50.5, 38.0], [50.6, 38.0], [50.7, 38.0], [50.8, 38.0], [50.9, 38.0], [51.0, 38.0], [51.1, 38.0], [51.2, 38.0], [51.3, 38.0], [51.4, 38.0], [51.5, 38.0], [51.6, 38.0], [51.7, 38.0], [51.8, 38.0], [51.9, 38.0], [52.0, 38.0], [52.1, 38.0], [52.2, 39.0], [52.3, 39.0], [52.4, 39.0], [52.5, 39.0], [52.6, 39.0], [52.7, 39.0], [52.8, 39.0], [52.9, 39.0], [53.0, 39.0], [53.1, 39.0], [53.2, 39.0], [53.3, 39.0], [53.4, 39.0], [53.5, 39.0], [53.6, 39.0], [53.7, 39.0], [53.8, 39.0], [53.9, 39.0], [54.0, 39.0], [54.1, 39.0], [54.2, 39.0], [54.3, 39.0], [54.4, 39.0], [54.5, 39.0], [54.6, 39.0], [54.7, 39.0], [54.8, 39.0], [54.9, 39.0], [55.0, 39.0], [55.1, 39.0], [55.2, 39.0], [55.3, 39.0], [55.4, 39.0], [55.5, 39.0], [55.6, 39.0], [55.7, 39.0], [55.8, 39.0], [55.9, 39.0], [56.0, 39.0], [56.1, 39.0], [56.2, 39.0], [56.3, 39.0], [56.4, 39.0], [56.5, 39.0], [56.6, 39.0], [56.7, 39.0], [56.8, 39.0], [56.9, 39.0], [57.0, 39.0], [57.1, 39.0], [57.2, 39.0], [57.3, 39.0], [57.4, 39.0], [57.5, 39.0], [57.6, 39.0], [57.7, 39.0], [57.8, 39.0], [57.9, 39.0], [58.0, 39.0], [58.1, 39.0], [58.2, 39.0], [58.3, 39.0], [58.4, 39.0], [58.5, 39.0], [58.6, 39.0], [58.7, 40.0], [58.8, 40.0], [58.9, 40.0], [59.0, 40.0], [59.1, 40.0], [59.2, 40.0], [59.3, 40.0], [59.4, 40.0], [59.5, 40.0], [59.6, 40.0], [59.7, 40.0], [59.8, 40.0], [59.9, 40.0], [60.0, 40.0], [60.1, 40.0], [60.2, 40.0], [60.3, 40.0], [60.4, 40.0], [60.5, 40.0], [60.6, 40.0], [60.7, 40.0], [60.8, 40.0], [60.9, 40.0], [61.0, 40.0], [61.1, 40.0], [61.2, 40.0], [61.3, 40.0], [61.4, 40.0], [61.5, 40.0], [61.6, 40.0], [61.7, 40.0], [61.8, 40.0], [61.9, 40.0], [62.0, 40.0], [62.1, 40.0], [62.2, 40.0], [62.3, 40.0], [62.4, 40.0], [62.5, 40.0], [62.6, 40.0], [62.7, 40.0], [62.8, 40.0], [62.9, 40.0], [63.0, 40.0], [63.1, 40.0], [63.2, 40.0], [63.3, 40.0], [63.4, 40.0], [63.5, 40.0], [63.6, 40.0], [63.7, 40.0], [63.8, 40.0], [63.9, 40.0], [64.0, 40.0], [64.1, 40.0], [64.2, 40.0], [64.3, 41.0], [64.4, 41.0], [64.5, 41.0], [64.6, 41.0], [64.7, 41.0], [64.8, 41.0], [64.9, 41.0], [65.0, 41.0], [65.1, 41.0], [65.2, 41.0], [65.3, 41.0], [65.4, 41.0], [65.5, 41.0], [65.6, 41.0], [65.7, 41.0], [65.8, 41.0], [65.9, 41.0], [66.0, 41.0], [66.1, 41.0], [66.2, 41.0], [66.3, 41.0], [66.4, 41.0], [66.5, 41.0], [66.6, 41.0], [66.7, 41.0], [66.8, 41.0], [66.9, 41.0], [67.0, 41.0], [67.1, 41.0], [67.2, 41.0], [67.3, 41.0], [67.4, 41.0], [67.5, 41.0], [67.6, 41.0], [67.7, 41.0], [67.8, 41.0], [67.9, 41.0], [68.0, 41.0], [68.1, 41.0], [68.2, 41.0], [68.3, 41.0], [68.4, 41.0], [68.5, 41.0], [68.6, 41.0], [68.7, 41.0], [68.8, 41.0], [68.9, 41.0], [69.0, 41.0], [69.1, 42.0], [69.2, 42.0], [69.3, 42.0], [69.4, 42.0], [69.5, 42.0], [69.6, 42.0], [69.7, 42.0], [69.8, 42.0], [69.9, 42.0], [70.0, 42.0], [70.1, 42.0], [70.2, 42.0], [70.3, 42.0], [70.4, 42.0], [70.5, 42.0], [70.6, 42.0], [70.7, 42.0], [70.8, 42.0], [70.9, 42.0], [71.0, 42.0], [71.1, 42.0], [71.2, 42.0], [71.3, 42.0], [71.4, 42.0], [71.5, 42.0], [71.6, 42.0], [71.7, 42.0], [71.8, 42.0], [71.9, 42.0], [72.0, 42.0], [72.1, 42.0], [72.2, 42.0], [72.3, 42.0], [72.4, 42.0], [72.5, 42.0], [72.6, 42.0], [72.7, 42.0], [72.8, 42.0], [72.9, 42.0], [73.0, 42.0], [73.1, 42.0], [73.2, 42.0], [73.3, 43.0], [73.4, 43.0], [73.5, 43.0], [73.6, 43.0], [73.7, 43.0], [73.8, 43.0], [73.9, 43.0], [74.0, 43.0], [74.1, 43.0], [74.2, 43.0], [74.3, 43.0], [74.4, 43.0], [74.5, 43.0], [74.6, 43.0], [74.7, 43.0], [74.8, 43.0], [74.9, 43.0], [75.0, 43.0], [75.1, 43.0], [75.2, 43.0], [75.3, 43.0], [75.4, 43.0], [75.5, 43.0], [75.6, 43.0], [75.7, 43.0], [75.8, 43.0], [75.9, 43.0], [76.0, 43.0], [76.1, 43.0], [76.2, 43.0], [76.3, 43.0], [76.4, 43.0], [76.5, 43.0], [76.6, 43.0], [76.7, 43.0], [76.8, 43.0], [76.9, 43.0], [77.0, 43.0], [77.1, 44.0], [77.2, 44.0], [77.3, 44.0], [77.4, 44.0], [77.5, 44.0], [77.6, 44.0], [77.7, 44.0], [77.8, 44.0], [77.9, 44.0], [78.0, 44.0], [78.1, 44.0], [78.2, 44.0], [78.3, 44.0], [78.4, 44.0], [78.5, 44.0], [78.6, 44.0], [78.7, 44.0], [78.8, 44.0], [78.9, 44.0], [79.0, 44.0], [79.1, 44.0], [79.2, 44.0], [79.3, 44.0], [79.4, 44.0], [79.5, 44.0], [79.6, 44.0], [79.7, 44.0], [79.8, 44.0], [79.9, 44.0], [80.0, 44.0], [80.1, 44.0], [80.2, 44.0], [80.3, 44.0], [80.4, 44.0], [80.5, 44.0], [80.6, 44.0], [80.7, 44.0], [80.8, 45.0], [80.9, 45.0], [81.0, 45.0], [81.1, 45.0], [81.2, 45.0], [81.3, 45.0], [81.4, 45.0], [81.5, 45.0], [81.6, 45.0], [81.7, 45.0], [81.8, 45.0], [81.9, 45.0], [82.0, 45.0], [82.1, 45.0], [82.2, 45.0], [82.3, 45.0], [82.4, 45.0], [82.5, 45.0], [82.6, 45.0], [82.7, 45.0], [82.8, 45.0], [82.9, 45.0], [83.0, 45.0], [83.1, 45.0], [83.2, 45.0], [83.3, 45.0], [83.4, 45.0], [83.5, 45.0], [83.6, 45.0], [83.7, 45.0], [83.8, 46.0], [83.9, 46.0], [84.0, 46.0], [84.1, 46.0], [84.2, 46.0], [84.3, 46.0], [84.4, 46.0], [84.5, 46.0], [84.6, 46.0], [84.7, 46.0], [84.8, 46.0], [84.9, 46.0], [85.0, 46.0], [85.1, 46.0], [85.2, 46.0], [85.3, 46.0], [85.4, 46.0], [85.5, 46.0], [85.6, 46.0], [85.7, 46.0], [85.8, 46.0], [85.9, 46.0], [86.0, 47.0], [86.1, 47.0], [86.2, 47.0], [86.3, 47.0], [86.4, 47.0], [86.5, 47.0], [86.6, 47.0], [86.7, 47.0], [86.8, 47.0], [86.9, 47.0], [87.0, 47.0], [87.1, 47.0], [87.2, 47.0], [87.3, 47.0], [87.4, 47.0], [87.5, 47.0], [87.6, 48.0], [87.7, 48.0], [87.8, 48.0], [87.9, 48.0], [88.0, 48.0], [88.1, 48.0], [88.2, 48.0], [88.3, 48.0], [88.4, 48.0], [88.5, 48.0], [88.6, 48.0], [88.7, 49.0], [88.8, 49.0], [88.9, 49.0], [89.0, 49.0], [89.1, 49.0], [89.2, 49.0], [89.3, 49.0], [89.4, 49.0], [89.5, 49.0], [89.6, 49.0], [89.7, 50.0], [89.8, 50.0], [89.9, 50.0], [90.0, 50.0], [90.1, 50.0], [90.2, 50.0], [90.3, 50.0], [90.4, 51.0], [90.5, 51.0], [90.6, 51.0], [90.7, 51.0], [90.8, 51.0], [90.9, 51.0], [91.0, 51.0], [91.1, 52.0], [91.2, 52.0], [91.3, 52.0], [91.4, 52.0], [91.5, 52.0], [91.6, 53.0], [91.7, 53.0], [91.8, 53.0], [91.9, 53.0], [92.0, 54.0], [92.1, 54.0], [92.2, 54.0], [92.3, 54.0], [92.4, 55.0], [92.5, 55.0], [92.6, 55.0], [92.7, 55.0], [92.8, 56.0], [92.9, 56.0], [93.0, 57.0], [93.1, 57.0], [93.2, 57.0], [93.3, 58.0], [93.4, 58.0], [93.5, 59.0], [93.6, 59.0], [93.7, 60.0], [93.8, 61.0], [93.9, 62.0], [94.0, 63.0], [94.1, 65.0], [94.2, 66.0], [94.3, 68.0], [94.4, 69.0], [94.5, 72.0], [94.6, 75.0], [94.7, 79.0], [94.8, 85.0], [94.9, 90.0], [95.0, 102.0], [95.1, 115.0], [95.2, 135.0], [95.3, 148.0], [95.4, 166.0], [95.5, 175.0], [95.6, 177.0], [95.7, 190.0], [95.8, 207.0], [95.9, 222.0], [96.0, 226.0], [96.1, 239.0], [96.2, 266.0], [96.3, 295.0], [96.4, 312.0], [96.5, 326.0], [96.6, 327.0], [96.7, 329.0], [96.8, 335.0], [96.9, 349.0], [97.0, 378.0], [97.1, 398.0], [97.2, 457.0], [97.3, 564.0], [97.4, 1033.0], [97.5, 1037.0], [97.6, 1040.0], [97.7, 1042.0], [97.8, 1044.0], [97.9, 1048.0], [98.0, 1051.0], [98.1, 1069.0], [98.2, 3115.0], [98.3, 3125.0], [98.4, 7035.0], [98.5, 7038.0], [98.6, 7040.0], [98.7, 7042.0], [98.8, 7044.0], [98.9, 7045.0], [99.0, 7046.0], [99.1, 7047.0], [99.2, 7049.0], [99.3, 7051.0], [99.4, 7053.0], [99.5, 7055.0], [99.6, 7057.0], [99.7, 7059.0], [99.8, 7061.0], [99.9, 7064.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 15614.0], [0.1, 15614.0], [0.2, 15614.0], [0.3, 15614.0], [0.4, 15614.0], [0.5, 15615.0], [0.6, 15615.0], [0.7, 15615.0], [0.8, 15617.0], [0.9, 15617.0], [1.0, 15617.0], [1.1, 15617.0], [1.2, 15617.0], [1.3, 15626.0], [1.4, 15626.0], [1.5, 15628.0], [1.6, 15628.0], [1.7, 15628.0], [1.8, 15631.0], [1.9, 15631.0], [2.0, 15640.0], [2.1, 15640.0], [2.2, 15640.0], [2.3, 15643.0], [2.4, 15643.0], [2.5, 15644.0], [2.6, 15644.0], [2.7, 15644.0], [2.8, 15651.0], [2.9, 15651.0], [3.0, 15654.0], [3.1, 15654.0], [3.2, 15654.0], [3.3, 15671.0], [3.4, 15671.0], [3.5, 15671.0], [3.6, 15671.0], [3.7, 15671.0], [3.8, 15674.0], [3.9, 15674.0], [4.0, 15676.0], [4.1, 15676.0], [4.2, 15676.0], [4.3, 15692.0], [4.4, 15692.0], [4.5, 15693.0], [4.6, 15693.0], [4.7, 15693.0], [4.8, 15700.0], [4.9, 15700.0], [5.0, 15703.0], [5.1, 15703.0], [5.2, 15703.0], [5.3, 15708.0], [5.4, 15708.0], [5.5, 15709.0], [5.6, 15709.0], [5.7, 15709.0], [5.8, 15709.0], [5.9, 15709.0], [6.0, 15710.0], [6.1, 15710.0], [6.2, 15710.0], [6.3, 15716.0], [6.4, 15716.0], [6.5, 15718.0], [6.6, 15718.0], [6.7, 15718.0], [6.8, 15722.0], [6.9, 15722.0], [7.0, 15723.0], [7.1, 15723.0], [7.2, 15723.0], [7.3, 15741.0], [7.4, 15741.0], [7.5, 15742.0], [7.6, 15742.0], [7.7, 15742.0], [7.8, 15746.0], [7.9, 15746.0], [8.0, 15747.0], [8.1, 15747.0], [8.2, 15747.0], [8.3, 15755.0], [8.4, 15755.0], [8.5, 15756.0], [8.6, 15756.0], [8.7, 15756.0], [8.8, 15757.0], [8.9, 15757.0], [9.0, 15758.0], [9.1, 15758.0], [9.2, 15758.0], [9.3, 15758.0], [9.4, 15758.0], [9.5, 15760.0], [9.6, 15760.0], [9.7, 15760.0], [9.8, 15763.0], [9.9, 15763.0], [10.0, 15764.0], [10.1, 15764.0], [10.2, 15764.0], [10.3, 15766.0], [10.4, 15766.0], [10.5, 15770.0], [10.6, 15770.0], [10.7, 15770.0], [10.8, 15770.0], [10.9, 15770.0], [11.0, 15774.0], [11.1, 15774.0], [11.2, 15774.0], [11.3, 15781.0], [11.4, 15781.0], [11.5, 15785.0], [11.6, 15785.0], [11.7, 15785.0], [11.8, 15785.0], [11.9, 15785.0], [12.0, 15788.0], [12.1, 15788.0], [12.2, 15788.0], [12.3, 15788.0], [12.4, 15788.0], [12.5, 15788.0], [12.6, 15788.0], [12.7, 15788.0], [12.8, 15789.0], [12.9, 15789.0], [13.0, 15792.0], [13.1, 15792.0], [13.2, 15792.0], [13.3, 15794.0], [13.4, 15794.0], [13.5, 15797.0], [13.6, 15797.0], [13.7, 15797.0], [13.8, 15797.0], [13.9, 15797.0], [14.0, 15799.0], [14.1, 15799.0], [14.2, 15799.0], [14.3, 15801.0], [14.4, 15801.0], [14.5, 15804.0], [14.6, 15804.0], [14.7, 15804.0], [14.8, 15805.0], [14.9, 15805.0], [15.0, 15805.0], [15.1, 15805.0], [15.2, 15805.0], [15.3, 15805.0], [15.4, 15805.0], [15.5, 15806.0], [15.6, 15806.0], [15.7, 15806.0], [15.8, 15806.0], [15.9, 15806.0], [16.0, 15807.0], [16.1, 15807.0], [16.2, 15807.0], [16.3, 15808.0], [16.4, 15808.0], [16.5, 15810.0], [16.6, 15810.0], [16.7, 15810.0], [16.8, 15819.0], [16.9, 15819.0], [17.0, 15820.0], [17.1, 15820.0], [17.2, 15820.0], [17.3, 15820.0], [17.4, 15820.0], [17.5, 15820.0], [17.6, 15820.0], [17.7, 15820.0], [17.8, 15822.0], [17.9, 15822.0], [18.0, 15823.0], [18.1, 15823.0], [18.2, 15823.0], [18.3, 15827.0], [18.4, 15827.0], [18.5, 15828.0], [18.6, 15828.0], [18.7, 15828.0], [18.8, 15833.0], [18.9, 15833.0], [19.0, 15834.0], [19.1, 15834.0], [19.2, 15834.0], [19.3, 15834.0], [19.4, 15834.0], [19.5, 15835.0], [19.6, 15835.0], [19.7, 15835.0], [19.8, 15835.0], [19.9, 15835.0], [20.0, 15837.0], [20.1, 15837.0], [20.2, 15837.0], [20.3, 15837.0], [20.4, 15837.0], [20.5, 15845.0], [20.6, 15845.0], [20.7, 15845.0], [20.8, 15845.0], [20.9, 15845.0], [21.0, 15846.0], [21.1, 15846.0], [21.2, 15846.0], [21.3, 15849.0], [21.4, 15849.0], [21.5, 15853.0], [21.6, 15853.0], [21.7, 15853.0], [21.8, 15860.0], [21.9, 15860.0], [22.0, 15864.0], [22.1, 15864.0], [22.2, 15864.0], [22.3, 15867.0], [22.4, 15867.0], [22.5, 15880.0], [22.6, 15880.0], [22.7, 15880.0], [22.8, 15881.0], [22.9, 15881.0], [23.0, 15900.0], [23.1, 15900.0], [23.2, 15900.0], [23.3, 15908.0], [23.4, 15908.0], [23.5, 15912.0], [23.6, 15912.0], [23.7, 15912.0], [23.8, 15914.0], [23.9, 15914.0], [24.0, 15924.0], [24.1, 15924.0], [24.2, 15924.0], [24.3, 15927.0], [24.4, 15927.0], [24.5, 15928.0], [24.6, 15928.0], [24.7, 15928.0], [24.8, 15928.0], [24.9, 15928.0], [25.0, 15933.0], [25.1, 15933.0], [25.2, 15933.0], [25.3, 15951.0], [25.4, 15951.0], [25.5, 15952.0], [25.6, 15952.0], [25.7, 15952.0], [25.8, 15956.0], [25.9, 15956.0], [26.0, 15957.0], [26.1, 15957.0], [26.2, 15957.0], [26.3, 15958.0], [26.4, 15958.0], [26.5, 15963.0], [26.6, 15963.0], [26.7, 15963.0], [26.8, 15963.0], [26.9, 15963.0], [27.0, 15967.0], [27.1, 15967.0], [27.2, 15967.0], [27.3, 15969.0], [27.4, 15969.0], [27.5, 15969.0], [27.6, 15969.0], [27.7, 15969.0], [27.8, 15976.0], [27.9, 15976.0], [28.0, 15984.0], [28.1, 15984.0], [28.2, 15984.0], [28.3, 15985.0], [28.4, 15985.0], [28.5, 15986.0], [28.6, 15986.0], [28.7, 15986.0], [28.8, 15988.0], [28.9, 15988.0], [29.0, 15988.0], [29.1, 15988.0], [29.2, 15988.0], [29.3, 15990.0], [29.4, 15990.0], [29.5, 15993.0], [29.6, 15993.0], [29.7, 15993.0], [29.8, 15993.0], [29.9, 15993.0], [30.0, 15994.0], [30.1, 15994.0], [30.2, 15994.0], [30.3, 15998.0], [30.4, 15998.0], [30.5, 15999.0], [30.6, 15999.0], [30.7, 15999.0], [30.8, 16000.0], [30.9, 16000.0], [31.0, 16000.0], [31.1, 16000.0], [31.2, 16000.0], [31.3, 16003.0], [31.4, 16003.0], [31.5, 16004.0], [31.6, 16004.0], [31.7, 16004.0], [31.8, 16008.0], [31.9, 16008.0], [32.0, 16009.0], [32.1, 16009.0], [32.2, 16009.0], [32.3, 16019.0], [32.4, 16019.0], [32.5, 16021.0], [32.6, 16021.0], [32.7, 16021.0], [32.8, 16024.0], [32.9, 16024.0], [33.0, 16032.0], [33.1, 16032.0], [33.2, 16032.0], [33.3, 16035.0], [33.4, 16035.0], [33.5, 16038.0], [33.6, 16038.0], [33.7, 16038.0], [33.8, 16039.0], [33.9, 16039.0], [34.0, 16040.0], [34.1, 16040.0], [34.2, 16040.0], [34.3, 16042.0], [34.4, 16042.0], [34.5, 16042.0], [34.6, 16042.0], [34.7, 16042.0], [34.8, 16042.0], [34.9, 16042.0], [35.0, 16043.0], [35.1, 16043.0], [35.2, 16043.0], [35.3, 16045.0], [35.4, 16045.0], [35.5, 16046.0], [35.6, 16046.0], [35.7, 16046.0], [35.8, 16048.0], [35.9, 16048.0], [36.0, 16049.0], [36.1, 16049.0], [36.2, 16049.0], [36.3, 16050.0], [36.4, 16050.0], [36.5, 16054.0], [36.6, 16054.0], [36.7, 16054.0], [36.8, 16054.0], [36.9, 16054.0], [37.0, 16056.0], [37.1, 16056.0], [37.2, 16056.0], [37.3, 16056.0], [37.4, 16056.0], [37.5, 16058.0], [37.6, 16058.0], [37.7, 16058.0], [37.8, 16060.0], [37.9, 16060.0], [38.0, 16061.0], [38.1, 16061.0], [38.2, 16061.0], [38.3, 16061.0], [38.4, 16061.0], [38.5, 16062.0], [38.6, 16062.0], [38.7, 16062.0], [38.8, 16068.0], [38.9, 16068.0], [39.0, 16069.0], [39.1, 16069.0], [39.2, 16069.0], [39.3, 16073.0], [39.4, 16073.0], [39.5, 16074.0], [39.6, 16074.0], [39.7, 16074.0], [39.8, 16076.0], [39.9, 16076.0], [40.0, 16077.0], [40.1, 16077.0], [40.2, 16077.0], [40.3, 16084.0], [40.4, 16084.0], [40.5, 16101.0], [40.6, 16101.0], [40.7, 16101.0], [40.8, 16101.0], [40.9, 16101.0], [41.0, 16102.0], [41.1, 16102.0], [41.2, 16102.0], [41.3, 16102.0], [41.4, 16102.0], [41.5, 16116.0], [41.6, 16116.0], [41.7, 16116.0], [41.8, 16122.0], [41.9, 16122.0], [42.0, 16135.0], [42.1, 16135.0], [42.2, 16135.0], [42.3, 16141.0], [42.4, 16141.0], [42.5, 16141.0], [42.6, 16141.0], [42.7, 16141.0], [42.8, 16142.0], [42.9, 16142.0], [43.0, 16145.0], [43.1, 16145.0], [43.2, 16145.0], [43.3, 16149.0], [43.4, 16149.0], [43.5, 16149.0], [43.6, 16149.0], [43.7, 16149.0], [43.8, 16150.0], [43.9, 16150.0], [44.0, 16155.0], [44.1, 16155.0], [44.2, 16155.0], [44.3, 16156.0], [44.4, 16156.0], [44.5, 16156.0], [44.6, 16156.0], [44.7, 16156.0], [44.8, 16157.0], [44.9, 16157.0], [45.0, 16160.0], [45.1, 16160.0], [45.2, 16160.0], [45.3, 16160.0], [45.4, 16160.0], [45.5, 16163.0], [45.6, 16163.0], [45.7, 16163.0], [45.8, 16163.0], [45.9, 16163.0], [46.0, 16170.0], [46.1, 16170.0], [46.2, 16170.0], [46.3, 16171.0], [46.4, 16171.0], [46.5, 16172.0], [46.6, 16172.0], [46.7, 16172.0], [46.8, 16173.0], [46.9, 16173.0], [47.0, 16173.0], [47.1, 16173.0], [47.2, 16173.0], [47.3, 16181.0], [47.4, 16181.0], [47.5, 16186.0], [47.6, 16186.0], [47.7, 16186.0], [47.8, 16187.0], [47.9, 16187.0], [48.0, 16189.0], [48.1, 16189.0], [48.2, 16189.0], [48.3, 16190.0], [48.4, 16190.0], [48.5, 16193.0], [48.6, 16193.0], [48.7, 16193.0], [48.8, 16195.0], [48.9, 16195.0], [49.0, 16197.0], [49.1, 16197.0], [49.2, 16197.0], [49.3, 16204.0], [49.4, 16204.0], [49.5, 16214.0], [49.6, 16214.0], [49.7, 16214.0], [49.8, 16216.0], [49.9, 16216.0], [50.0, 16231.0], [50.1, 16231.0], [50.2, 16231.0], [50.3, 16231.0], [50.4, 16231.0], [50.5, 16233.0], [50.6, 16233.0], [50.7, 16233.0], [50.8, 16234.0], [50.9, 16234.0], [51.0, 16235.0], [51.1, 16235.0], [51.2, 16235.0], [51.3, 16237.0], [51.4, 16237.0], [51.5, 16245.0], [51.6, 16245.0], [51.7, 16245.0], [51.8, 16246.0], [51.9, 16246.0], [52.0, 16246.0], [52.1, 16246.0], [52.2, 16246.0], [52.3, 16265.0], [52.4, 16265.0], [52.5, 16265.0], [52.6, 16265.0], [52.7, 16265.0], [52.8, 16270.0], [52.9, 16270.0], [53.0, 16271.0], [53.1, 16271.0], [53.2, 16271.0], [53.3, 16273.0], [53.4, 16273.0], [53.5, 16279.0], [53.6, 16279.0], [53.7, 16279.0], [53.8, 16279.0], [53.9, 16279.0], [54.0, 16280.0], [54.1, 16280.0], [54.2, 16280.0], [54.3, 16286.0], [54.4, 16286.0], [54.5, 16293.0], [54.6, 16293.0], [54.7, 16293.0], [54.8, 16299.0], [54.9, 16299.0], [55.0, 16301.0], [55.1, 16301.0], [55.2, 16301.0], [55.3, 16301.0], [55.4, 16301.0], [55.5, 16303.0], [55.6, 16303.0], [55.7, 16303.0], [55.8, 16308.0], [55.9, 16308.0], [56.0, 16308.0], [56.1, 16308.0], [56.2, 16308.0], [56.3, 16308.0], [56.4, 16308.0], [56.5, 16309.0], [56.6, 16309.0], [56.7, 16309.0], [56.8, 16312.0], [56.9, 16312.0], [57.0, 16312.0], [57.1, 16312.0], [57.2, 16312.0], [57.3, 16312.0], [57.4, 16312.0], [57.5, 16312.0], [57.6, 16312.0], [57.7, 16312.0], [57.8, 16313.0], [57.9, 16313.0], [58.0, 16313.0], [58.1, 16313.0], [58.2, 16313.0], [58.3, 16323.0], [58.4, 16323.0], [58.5, 16323.0], [58.6, 16323.0], [58.7, 16323.0], [58.8, 16323.0], [58.9, 16323.0], [59.0, 16324.0], [59.1, 16324.0], [59.2, 16324.0], [59.3, 16326.0], [59.4, 16326.0], [59.5, 16326.0], [59.6, 16326.0], [59.7, 16326.0], [59.8, 16328.0], [59.9, 16328.0], [60.0, 16328.0], [60.1, 16328.0], [60.2, 16328.0], [60.3, 16331.0], [60.4, 16331.0], [60.5, 16332.0], [60.6, 16332.0], [60.7, 16332.0], [60.8, 16335.0], [60.9, 16335.0], [61.0, 16337.0], [61.1, 16337.0], [61.2, 16337.0], [61.3, 16341.0], [61.4, 16341.0], [61.5, 16341.0], [61.6, 16341.0], [61.7, 16341.0], [61.8, 16342.0], [61.9, 16342.0], [62.0, 16343.0], [62.1, 16343.0], [62.2, 16343.0], [62.3, 16344.0], [62.4, 16344.0], [62.5, 16345.0], [62.6, 16345.0], [62.7, 16345.0], [62.8, 16347.0], [62.9, 16347.0], [63.0, 16347.0], [63.1, 16347.0], [63.2, 16347.0], [63.3, 16347.0], [63.4, 16347.0], [63.5, 16350.0], [63.6, 16350.0], [63.7, 16350.0], [63.8, 16358.0], [63.9, 16358.0], [64.0, 16359.0], [64.1, 16359.0], [64.2, 16359.0], [64.3, 16362.0], [64.4, 16362.0], [64.5, 16362.0], [64.6, 16362.0], [64.7, 16362.0], [64.8, 16363.0], [64.9, 16363.0], [65.0, 16365.0], [65.1, 16365.0], [65.2, 16365.0], [65.3, 16370.0], [65.4, 16370.0], [65.5, 16371.0], [65.6, 16371.0], [65.7, 16371.0], [65.8, 16371.0], [65.9, 16371.0], [66.0, 16373.0], [66.1, 16373.0], [66.2, 16373.0], [66.3, 16375.0], [66.4, 16375.0], [66.5, 16391.0], [66.6, 16391.0], [66.7, 16391.0], [66.8, 16399.0], [66.9, 16399.0], [67.0, 16401.0], [67.1, 16401.0], [67.2, 16401.0], [67.3, 16408.0], [67.4, 16408.0], [67.5, 16415.0], [67.6, 16415.0], [67.7, 16415.0], [67.8, 16416.0], [67.9, 16416.0], [68.0, 16418.0], [68.1, 16418.0], [68.2, 16418.0], [68.3, 16452.0], [68.4, 16452.0], [68.5, 16458.0], [68.6, 16458.0], [68.7, 16458.0], [68.8, 16459.0], [68.9, 16459.0], [69.0, 16465.0], [69.1, 16465.0], [69.2, 16465.0], [69.3, 16471.0], [69.4, 16471.0], [69.5, 16472.0], [69.6, 16472.0], [69.7, 16472.0], [69.8, 16472.0], [69.9, 16472.0], [70.0, 16472.0], [70.1, 16472.0], [70.2, 16472.0], [70.3, 16472.0], [70.4, 16472.0], [70.5, 16474.0], [70.6, 16474.0], [70.7, 16474.0], [70.8, 16475.0], [70.9, 16475.0], [71.0, 16475.0], [71.1, 16475.0], [71.2, 16475.0], [71.3, 16475.0], [71.4, 16475.0], [71.5, 16475.0], [71.6, 16475.0], [71.7, 16475.0], [71.8, 16476.0], [71.9, 16476.0], [72.0, 16476.0], [72.1, 16476.0], [72.2, 16476.0], [72.3, 16476.0], [72.4, 16476.0], [72.5, 16477.0], [72.6, 16477.0], [72.7, 16477.0], [72.8, 16480.0], [72.9, 16480.0], [73.0, 16482.0], [73.1, 16482.0], [73.2, 16482.0], [73.3, 16487.0], [73.4, 16487.0], [73.5, 16490.0], [73.6, 16490.0], [73.7, 16490.0], [73.8, 16490.0], [73.9, 16490.0], [74.0, 16490.0], [74.1, 16490.0], [74.2, 16490.0], [74.3, 16506.0], [74.4, 16506.0], [74.5, 16510.0], [74.6, 16510.0], [74.7, 16510.0], [74.8, 16511.0], [74.9, 16511.0], [75.0, 16512.0], [75.1, 16512.0], [75.2, 16512.0], [75.3, 16525.0], [75.4, 16525.0], [75.5, 16526.0], [75.6, 16526.0], [75.7, 16526.0], [75.8, 16527.0], [75.9, 16527.0], [76.0, 16527.0], [76.1, 16527.0], [76.2, 16527.0], [76.3, 16539.0], [76.4, 16539.0], [76.5, 16540.0], [76.6, 16540.0], [76.7, 16540.0], [76.8, 16541.0], [76.9, 16541.0], [77.0, 16542.0], [77.1, 16542.0], [77.2, 16542.0], [77.3, 16542.0], [77.4, 16542.0], [77.5, 16543.0], [77.6, 16543.0], [77.7, 16543.0], [77.8, 16544.0], [77.9, 16544.0], [78.0, 16544.0], [78.1, 16544.0], [78.2, 16544.0], [78.3, 16545.0], [78.4, 16545.0], [78.5, 16554.0], [78.6, 16554.0], [78.7, 16554.0], [78.8, 16555.0], [78.9, 16555.0], [79.0, 16557.0], [79.1, 16557.0], [79.2, 16557.0], [79.3, 16564.0], [79.4, 16564.0], [79.5, 16570.0], [79.6, 16570.0], [79.7, 16570.0], [79.8, 16576.0], [79.9, 16576.0], [80.0, 16593.0], [80.1, 16593.0], [80.2, 16593.0], [80.3, 16593.0], [80.4, 16593.0], [80.5, 16594.0], [80.6, 16594.0], [80.7, 16594.0], [80.8, 16604.0], [80.9, 16604.0], [81.0, 16605.0], [81.1, 16605.0], [81.2, 16605.0], [81.3, 16613.0], [81.4, 16613.0], [81.5, 16617.0], [81.6, 16617.0], [81.7, 16617.0], [81.8, 16623.0], [81.9, 16623.0], [82.0, 16625.0], [82.1, 16625.0], [82.2, 16625.0], [82.3, 16632.0], [82.4, 16632.0], [82.5, 16632.0], [82.6, 16632.0], [82.7, 16632.0], [82.8, 16635.0], [82.9, 16635.0], [83.0, 16639.0], [83.1, 16639.0], [83.2, 16639.0], [83.3, 16639.0], [83.4, 16639.0], [83.5, 16645.0], [83.6, 16645.0], [83.7, 16645.0], [83.8, 16646.0], [83.9, 16646.0], [84.0, 16648.0], [84.1, 16648.0], [84.2, 16648.0], [84.3, 16656.0], [84.4, 16656.0], [84.5, 16656.0], [84.6, 16656.0], [84.7, 16656.0], [84.8, 16659.0], [84.9, 16659.0], [85.0, 16661.0], [85.1, 16661.0], [85.2, 16661.0], [85.3, 16668.0], [85.4, 16668.0], [85.5, 16668.0], [85.6, 16668.0], [85.7, 16668.0], [85.8, 16675.0], [85.9, 16675.0], [86.0, 16677.0], [86.1, 16677.0], [86.2, 16677.0], [86.3, 16679.0], [86.4, 16679.0], [86.5, 16682.0], [86.6, 16682.0], [86.7, 16682.0], [86.8, 16690.0], [86.9, 16690.0], [87.0, 16691.0], [87.1, 16691.0], [87.2, 16691.0], [87.3, 16693.0], [87.4, 16693.0], [87.5, 16700.0], [87.6, 16700.0], [87.7, 16700.0], [87.8, 16700.0], [87.9, 16700.0], [88.0, 16700.0], [88.1, 16700.0], [88.2, 16700.0], [88.3, 16702.0], [88.4, 16702.0], [88.5, 16703.0], [88.6, 16703.0], [88.7, 16703.0], [88.8, 16711.0], [88.9, 16711.0], [89.0, 16713.0], [89.1, 16713.0], [89.2, 16713.0], [89.3, 16715.0], [89.4, 16715.0], [89.5, 16717.0], [89.6, 16717.0], [89.7, 16717.0], [89.8, 16722.0], [89.9, 16722.0], [90.0, 16722.0], [90.1, 16722.0], [90.2, 16722.0], [90.3, 16724.0], [90.4, 16724.0], [90.5, 16732.0], [90.6, 16732.0], [90.7, 16732.0], [90.8, 16735.0], [90.9, 16735.0], [91.0, 16740.0], [91.1, 16740.0], [91.2, 16740.0], [91.3, 16744.0], [91.4, 16744.0], [91.5, 16744.0], [91.6, 16744.0], [91.7, 16744.0], [91.8, 16750.0], [91.9, 16750.0], [92.0, 16752.0], [92.1, 16752.0], [92.2, 16752.0], [92.3, 16753.0], [92.4, 16753.0], [92.5, 16758.0], [92.6, 16758.0], [92.7, 16758.0], [92.8, 16760.0], [92.9, 16760.0], [93.0, 16765.0], [93.1, 16765.0], [93.2, 16765.0], [93.3, 16771.0], [93.4, 16771.0], [93.5, 16772.0], [93.6, 16772.0], [93.7, 16772.0], [93.8, 16776.0], [93.9, 16776.0], [94.0, 16781.0], [94.1, 16781.0], [94.2, 16781.0], [94.3, 16784.0], [94.4, 16784.0], [94.5, 16784.0], [94.6, 16784.0], [94.7, 16784.0], [94.8, 16790.0], [94.9, 16790.0], [95.0, 16790.0], [95.1, 16790.0], [95.2, 16790.0], [95.3, 16793.0], [95.4, 16793.0], [95.5, 16793.0], [95.6, 16793.0], [95.7, 16793.0], [95.8, 16796.0], [95.9, 16796.0], [96.0, 16797.0], [96.1, 16797.0], [96.2, 16797.0], [96.3, 16798.0], [96.4, 16798.0], [96.5, 16801.0], [96.6, 16801.0], [96.7, 16801.0], [96.8, 16805.0], [96.9, 16805.0], [97.0, 16807.0], [97.1, 16807.0], [97.2, 16807.0], [97.3, 16815.0], [97.4, 16815.0], [97.5, 16819.0], [97.6, 16819.0], [97.7, 16819.0], [97.8, 16820.0], [97.9, 16820.0], [98.0, 16825.0], [98.1, 16825.0], [98.2, 16825.0], [98.3, 16827.0], [98.4, 16827.0], [98.5, 16830.0], [98.6, 16830.0], [98.7, 16830.0], [98.8, 16836.0], [98.9, 16836.0], [99.0, 16845.0], [99.1, 16845.0], [99.2, 16845.0], [99.3, 16847.0], [99.4, 16847.0], [99.5, 16848.0], [99.6, 16848.0], [99.7, 16848.0], [99.8, 16858.0], [99.9, 16858.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 60588.0], [0.1, 60588.0], [0.2, 60588.0], [0.3, 60591.0], [0.4, 60591.0], [0.5, 60598.0], [0.6, 60598.0], [0.7, 60598.0], [0.8, 60603.0], [0.9, 60603.0], [1.0, 60607.0], [1.1, 60607.0], [1.2, 60607.0], [1.3, 60610.0], [1.4, 60610.0], [1.5, 60610.0], [1.6, 60610.0], [1.7, 60610.0], [1.8, 60627.0], [1.9, 60627.0], [2.0, 60628.0], [2.1, 60628.0], [2.2, 60628.0], [2.3, 60631.0], [2.4, 60631.0], [2.5, 60634.0], [2.6, 60634.0], [2.7, 60634.0], [2.8, 60634.0], [2.9, 60634.0], [3.0, 60643.0], [3.1, 60643.0], [3.2, 60643.0], [3.3, 60646.0], [3.4, 60646.0], [3.5, 60646.0], [3.6, 60646.0], [3.7, 60646.0], [3.8, 60653.0], [3.9, 60653.0], [4.0, 60653.0], [4.1, 60653.0], [4.2, 60653.0], [4.3, 60655.0], [4.4, 60655.0], [4.5, 60659.0], [4.6, 60659.0], [4.7, 60659.0], [4.8, 60661.0], [4.9, 60661.0], [5.0, 60664.0], [5.1, 60664.0], [5.2, 60664.0], [5.3, 60667.0], [5.4, 60667.0], [5.5, 60668.0], [5.6, 60668.0], [5.7, 60668.0], [5.8, 60668.0], [5.9, 60668.0], [6.0, 60673.0], [6.1, 60673.0], [6.2, 60673.0], [6.3, 60674.0], [6.4, 60674.0], [6.5, 60677.0], [6.6, 60677.0], [6.7, 60677.0], [6.8, 60677.0], [6.9, 60677.0], [7.0, 60679.0], [7.1, 60679.0], [7.2, 60679.0], [7.3, 60681.0], [7.4, 60681.0], [7.5, 60685.0], [7.6, 60685.0], [7.7, 60685.0], [7.8, 60685.0], [7.9, 60685.0], [8.0, 60686.0], [8.1, 60686.0], [8.2, 60686.0], [8.3, 60686.0], [8.4, 60686.0], [8.5, 60694.0], [8.6, 60694.0], [8.7, 60694.0], [8.8, 60697.0], [8.9, 60697.0], [9.0, 60704.0], [9.1, 60704.0], [9.2, 60704.0], [9.3, 60704.0], [9.4, 60704.0], [9.5, 60706.0], [9.6, 60706.0], [9.7, 60706.0], [9.8, 60709.0], [9.9, 60709.0], [10.0, 60711.0], [10.1, 60711.0], [10.2, 60711.0], [10.3, 60712.0], [10.4, 60712.0], [10.5, 60713.0], [10.6, 60713.0], [10.7, 60713.0], [10.8, 60715.0], [10.9, 60715.0], [11.0, 60716.0], [11.1, 60716.0], [11.2, 60716.0], [11.3, 60720.0], [11.4, 60720.0], [11.5, 60722.0], [11.6, 60722.0], [11.7, 60722.0], [11.8, 60722.0], [11.9, 60722.0], [12.0, 60724.0], [12.1, 60724.0], [12.2, 60724.0], [12.3, 60727.0], [12.4, 60727.0], [12.5, 60730.0], [12.6, 60730.0], [12.7, 60730.0], [12.8, 60733.0], [12.9, 60733.0], [13.0, 60739.0], [13.1, 60739.0], [13.2, 60739.0], [13.3, 60742.0], [13.4, 60742.0], [13.5, 60742.0], [13.6, 60742.0], [13.7, 60742.0], [13.8, 60745.0], [13.9, 60745.0], [14.0, 60751.0], [14.1, 60751.0], [14.2, 60751.0], [14.3, 60760.0], [14.4, 60760.0], [14.5, 60764.0], [14.6, 60764.0], [14.7, 60764.0], [14.8, 60766.0], [14.9, 60766.0], [15.0, 60769.0], [15.1, 60769.0], [15.2, 60769.0], [15.3, 60770.0], [15.4, 60770.0], [15.5, 60778.0], [15.6, 60778.0], [15.7, 60778.0], [15.8, 60781.0], [15.9, 60781.0], [16.0, 60781.0], [16.1, 60781.0], [16.2, 60781.0], [16.3, 60786.0], [16.4, 60786.0], [16.5, 60791.0], [16.6, 60791.0], [16.7, 60791.0], [16.8, 60791.0], [16.9, 60791.0], [17.0, 60793.0], [17.1, 60793.0], [17.2, 60793.0], [17.3, 60797.0], [17.4, 60797.0], [17.5, 60799.0], [17.6, 60799.0], [17.7, 60799.0], [17.8, 60800.0], [17.9, 60800.0], [18.0, 60800.0], [18.1, 60800.0], [18.2, 60800.0], [18.3, 60803.0], [18.4, 60803.0], [18.5, 60805.0], [18.6, 60805.0], [18.7, 60805.0], [18.8, 60808.0], [18.9, 60808.0], [19.0, 60808.0], [19.1, 60808.0], [19.2, 60808.0], [19.3, 60808.0], [19.4, 60808.0], [19.5, 60817.0], [19.6, 60817.0], [19.7, 60817.0], [19.8, 60821.0], [19.9, 60821.0], [20.0, 60827.0], [20.1, 60827.0], [20.2, 60827.0], [20.3, 60827.0], [20.4, 60827.0], [20.5, 60829.0], [20.6, 60829.0], [20.7, 60829.0], [20.8, 60834.0], [20.9, 60834.0], [21.0, 60838.0], [21.1, 60838.0], [21.2, 60838.0], [21.3, 60841.0], [21.4, 60841.0], [21.5, 60844.0], [21.6, 60844.0], [21.7, 60844.0], [21.8, 60847.0], [21.9, 60847.0], [22.0, 60847.0], [22.1, 60847.0], [22.2, 60847.0], [22.3, 60850.0], [22.4, 60850.0], [22.5, 60853.0], [22.6, 60853.0], [22.7, 60853.0], [22.8, 60856.0], [22.9, 60856.0], [23.0, 60860.0], [23.1, 60860.0], [23.2, 60860.0], [23.3, 60863.0], [23.4, 60863.0], [23.5, 60864.0], [23.6, 60864.0], [23.7, 60864.0], [23.8, 60871.0], [23.9, 60871.0], [24.0, 60875.0], [24.1, 60875.0], [24.2, 60875.0], [24.3, 60878.0], [24.4, 60878.0], [24.5, 60879.0], [24.6, 60879.0], [24.7, 60879.0], [24.8, 60883.0], [24.9, 60883.0], [25.0, 60899.0], [25.1, 60899.0], [25.2, 60899.0], [25.3, 60899.0], [25.4, 60899.0], [25.5, 60910.0], [25.6, 60910.0], [25.7, 60910.0], [25.8, 60916.0], [25.9, 60916.0], [26.0, 60919.0], [26.1, 60919.0], [26.2, 60919.0], [26.3, 60919.0], [26.4, 60919.0], [26.5, 60922.0], [26.6, 60922.0], [26.7, 60922.0], [26.8, 60923.0], [26.9, 60923.0], [27.0, 60926.0], [27.1, 60926.0], [27.2, 60926.0], [27.3, 60926.0], [27.4, 60926.0], [27.5, 60928.0], [27.6, 60928.0], [27.7, 60928.0], [27.8, 60928.0], [27.9, 60928.0], [28.0, 60931.0], [28.1, 60931.0], [28.2, 60931.0], [28.3, 60931.0], [28.4, 60931.0], [28.5, 60932.0], [28.6, 60932.0], [28.7, 60932.0], [28.8, 60934.0], [28.9, 60934.0], [29.0, 60934.0], [29.1, 60934.0], [29.2, 60934.0], [29.3, 60937.0], [29.4, 60937.0], [29.5, 60937.0], [29.6, 60937.0], [29.7, 60937.0], [29.8, 60940.0], [29.9, 60940.0], [30.0, 60959.0], [30.1, 60959.0], [30.2, 60959.0], [30.3, 60961.0], [30.4, 60961.0], [30.5, 60968.0], [30.6, 60968.0], [30.7, 60968.0], [30.8, 60970.0], [30.9, 60970.0], [31.0, 60973.0], [31.1, 60973.0], [31.2, 60973.0], [31.3, 60976.0], [31.4, 60976.0], [31.5, 60979.0], [31.6, 60979.0], [31.7, 60979.0], [31.8, 60983.0], [31.9, 60983.0], [32.0, 60985.0], [32.1, 60985.0], [32.2, 60985.0], [32.3, 60996.0], [32.4, 60996.0], [32.5, 60999.0], [32.6, 60999.0], [32.7, 60999.0], [32.8, 61002.0], [32.9, 61002.0], [33.0, 61003.0], [33.1, 61003.0], [33.2, 61003.0], [33.3, 61006.0], [33.4, 61006.0], [33.5, 61006.0], [33.6, 61006.0], [33.7, 61006.0], [33.8, 61006.0], [33.9, 61006.0], [34.0, 61009.0], [34.1, 61009.0], [34.2, 61009.0], [34.3, 61009.0], [34.4, 61009.0], [34.5, 61010.0], [34.6, 61010.0], [34.7, 61010.0], [34.8, 61015.0], [34.9, 61015.0], [35.0, 61019.0], [35.1, 61019.0], [35.2, 61019.0], [35.3, 61025.0], [35.4, 61025.0], [35.5, 61025.0], [35.6, 61025.0], [35.7, 61025.0], [35.8, 61027.0], [35.9, 61027.0], [36.0, 61036.0], [36.1, 61036.0], [36.2, 61036.0], [36.3, 61042.0], [36.4, 61042.0], [36.5, 61046.0], [36.6, 61046.0], [36.7, 61046.0], [36.8, 61048.0], [36.9, 61048.0], [37.0, 61057.0], [37.1, 61057.0], [37.2, 61057.0], [37.3, 61060.0], [37.4, 61060.0], [37.5, 61061.0], [37.6, 61061.0], [37.7, 61061.0], [37.8, 61063.0], [37.9, 61063.0], [38.0, 61067.0], [38.1, 61067.0], [38.2, 61067.0], [38.3, 61072.0], [38.4, 61072.0], [38.5, 61075.0], [38.6, 61075.0], [38.7, 61075.0], [38.8, 61075.0], [38.9, 61075.0], [39.0, 61075.0], [39.1, 61075.0], [39.2, 61075.0], [39.3, 61078.0], [39.4, 61078.0], [39.5, 61079.0], [39.6, 61079.0], [39.7, 61079.0], [39.8, 61084.0], [39.9, 61084.0], [40.0, 61085.0], [40.1, 61085.0], [40.2, 61085.0], [40.3, 61090.0], [40.4, 61090.0], [40.5, 61090.0], [40.6, 61090.0], [40.7, 61090.0], [40.8, 61090.0], [40.9, 61090.0], [41.0, 61090.0], [41.1, 61090.0], [41.2, 61090.0], [41.3, 61101.0], [41.4, 61101.0], [41.5, 61103.0], [41.6, 61103.0], [41.7, 61103.0], [41.8, 61111.0], [41.9, 61111.0], [42.0, 61117.0], [42.1, 61117.0], [42.2, 61117.0], [42.3, 61120.0], [42.4, 61120.0], [42.5, 61121.0], [42.6, 61121.0], [42.7, 61121.0], [42.8, 61126.0], [42.9, 61126.0], [43.0, 61127.0], [43.1, 61127.0], [43.2, 61127.0], [43.3, 61127.0], [43.4, 61127.0], [43.5, 61129.0], [43.6, 61129.0], [43.7, 61129.0], [43.8, 61132.0], [43.9, 61132.0], [44.0, 61135.0], [44.1, 61135.0], [44.2, 61135.0], [44.3, 61137.0], [44.4, 61137.0], [44.5, 61140.0], [44.6, 61140.0], [44.7, 61140.0], [44.8, 61144.0], [44.9, 61144.0], [45.0, 61145.0], [45.1, 61145.0], [45.2, 61145.0], [45.3, 61145.0], [45.4, 61145.0], [45.5, 61147.0], [45.6, 61147.0], [45.7, 61147.0], [45.8, 61153.0], [45.9, 61153.0], [46.0, 61153.0], [46.1, 61153.0], [46.2, 61153.0], [46.3, 61156.0], [46.4, 61156.0], [46.5, 61159.0], [46.6, 61159.0], [46.7, 61159.0], [46.8, 61162.0], [46.9, 61162.0], [47.0, 61166.0], [47.1, 61166.0], [47.2, 61166.0], [47.3, 61166.0], [47.4, 61166.0], [47.5, 61168.0], [47.6, 61168.0], [47.7, 61168.0], [47.8, 61172.0], [47.9, 61172.0], [48.0, 61172.0], [48.1, 61172.0], [48.2, 61172.0], [48.3, 61172.0], [48.4, 61172.0], [48.5, 61175.0], [48.6, 61175.0], [48.7, 61175.0], [48.8, 61178.0], [48.9, 61178.0], [49.0, 61181.0], [49.1, 61181.0], [49.2, 61181.0], [49.3, 61191.0], [49.4, 61191.0], [49.5, 61196.0], [49.6, 61196.0], [49.7, 61196.0], [49.8, 61198.0], [49.9, 61198.0], [50.0, 61202.0], [50.1, 61202.0], [50.2, 61202.0], [50.3, 61204.0], [50.4, 61204.0], [50.5, 61209.0], [50.6, 61209.0], [50.7, 61209.0], [50.8, 61213.0], [50.9, 61213.0], [51.0, 61215.0], [51.1, 61215.0], [51.2, 61215.0], [51.3, 61226.0], [51.4, 61226.0], [51.5, 61229.0], [51.6, 61229.0], [51.7, 61229.0], [51.8, 61232.0], [51.9, 61232.0], [52.0, 61235.0], [52.1, 61235.0], [52.2, 61235.0], [52.3, 61238.0], [52.4, 61238.0], [52.5, 61239.0], [52.6, 61239.0], [52.7, 61239.0], [52.8, 61242.0], [52.9, 61242.0], [53.0, 61247.0], [53.1, 61247.0], [53.2, 61247.0], [53.3, 61248.0], [53.4, 61248.0], [53.5, 61250.0], [53.6, 61250.0], [53.7, 61250.0], [53.8, 61252.0], [53.9, 61252.0], [54.0, 61252.0], [54.1, 61252.0], [54.2, 61252.0], [54.3, 61255.0], [54.4, 61255.0], [54.5, 61256.0], [54.6, 61256.0], [54.7, 61256.0], [54.8, 61256.0], [54.9, 61256.0], [55.0, 61259.0], [55.1, 61259.0], [55.2, 61259.0], [55.3, 61259.0], [55.4, 61259.0], [55.5, 61264.0], [55.6, 61264.0], [55.7, 61264.0], [55.8, 61266.0], [55.9, 61266.0], [56.0, 61268.0], [56.1, 61268.0], [56.2, 61268.0], [56.3, 61270.0], [56.4, 61270.0], [56.5, 61271.0], [56.6, 61271.0], [56.7, 61271.0], [56.8, 61277.0], [56.9, 61277.0], [57.0, 61279.0], [57.1, 61279.0], [57.2, 61279.0], [57.3, 61283.0], [57.4, 61283.0], [57.5, 61283.0], [57.6, 61283.0], [57.7, 61283.0], [57.8, 61288.0], [57.9, 61288.0], [58.0, 61289.0], [58.1, 61289.0], [58.2, 61289.0], [58.3, 61292.0], [58.4, 61292.0], [58.5, 61306.0], [58.6, 61306.0], [58.7, 61306.0], [58.8, 61309.0], [58.9, 61309.0], [59.0, 61313.0], [59.1, 61313.0], [59.2, 61313.0], [59.3, 61315.0], [59.4, 61315.0], [59.5, 61317.0], [59.6, 61317.0], [59.7, 61317.0], [59.8, 61318.0], [59.9, 61318.0], [60.0, 61319.0], [60.1, 61319.0], [60.2, 61319.0], [60.3, 61321.0], [60.4, 61321.0], [60.5, 61322.0], [60.6, 61322.0], [60.7, 61322.0], [60.8, 61325.0], [60.9, 61325.0], [61.0, 61327.0], [61.1, 61327.0], [61.2, 61327.0], [61.3, 61330.0], [61.4, 61330.0], [61.5, 61337.0], [61.6, 61337.0], [61.7, 61337.0], [61.8, 61341.0], [61.9, 61341.0], [62.0, 61343.0], [62.1, 61343.0], [62.2, 61343.0], [62.3, 61346.0], [62.4, 61346.0], [62.5, 61346.0], [62.6, 61346.0], [62.7, 61346.0], [62.8, 61348.0], [62.9, 61348.0], [63.0, 61351.0], [63.1, 61351.0], [63.2, 61351.0], [63.3, 61354.0], [63.4, 61354.0], [63.5, 61355.0], [63.6, 61355.0], [63.7, 61355.0], [63.8, 61365.0], [63.9, 61365.0], [64.0, 61367.0], [64.1, 61367.0], [64.2, 61367.0], [64.3, 61372.0], [64.4, 61372.0], [64.5, 61373.0], [64.6, 61373.0], [64.7, 61373.0], [64.8, 61375.0], [64.9, 61375.0], [65.0, 61379.0], [65.1, 61379.0], [65.2, 61379.0], [65.3, 61385.0], [65.4, 61385.0], [65.5, 61388.0], [65.6, 61388.0], [65.7, 61388.0], [65.8, 61390.0], [65.9, 61390.0], [66.0, 61391.0], [66.1, 61391.0], [66.2, 61391.0], [66.3, 61394.0], [66.4, 61394.0], [66.5, 61396.0], [66.6, 61396.0], [66.7, 61396.0], [66.8, 61399.0], [66.9, 61399.0], [67.0, 61405.0], [67.1, 61405.0], [67.2, 61405.0], [67.3, 61408.0], [67.4, 61408.0], [67.5, 61409.0], [67.6, 61409.0], [67.7, 61409.0], [67.8, 61411.0], [67.9, 61411.0], [68.0, 61411.0], [68.1, 61411.0], [68.2, 61411.0], [68.3, 61414.0], [68.4, 61414.0], [68.5, 61414.0], [68.6, 61414.0], [68.7, 61414.0], [68.8, 61415.0], [68.9, 61415.0], [69.0, 61417.0], [69.1, 61417.0], [69.2, 61417.0], [69.3, 61417.0], [69.4, 61417.0], [69.5, 61418.0], [69.6, 61418.0], [69.7, 61418.0], [69.8, 61420.0], [69.9, 61420.0], [70.0, 61424.0], [70.1, 61424.0], [70.2, 61424.0], [70.3, 61424.0], [70.4, 61424.0], [70.5, 61434.0], [70.6, 61434.0], [70.7, 61434.0], [70.8, 61436.0], [70.9, 61436.0], [71.0, 61438.0], [71.1, 61438.0], [71.2, 61438.0], [71.3, 61454.0], [71.4, 61454.0], [71.5, 61457.0], [71.6, 61457.0], [71.7, 61457.0], [71.8, 61459.0], [71.9, 61459.0], [72.0, 61460.0], [72.1, 61460.0], [72.2, 61460.0], [72.3, 61471.0], [72.4, 61471.0], [72.5, 61472.0], [72.6, 61472.0], [72.7, 61472.0], [72.8, 61474.0], [72.9, 61474.0], [73.0, 61476.0], [73.1, 61476.0], [73.2, 61476.0], [73.3, 61479.0], [73.4, 61479.0], [73.5, 61486.0], [73.6, 61486.0], [73.7, 61486.0], [73.8, 61487.0], [73.9, 61487.0], [74.0, 61492.0], [74.1, 61492.0], [74.2, 61492.0], [74.3, 61492.0], [74.4, 61492.0], [74.5, 61496.0], [74.6, 61496.0], [74.7, 61496.0], [74.8, 61496.0], [74.9, 61496.0], [75.0, 61496.0], [75.1, 61496.0], [75.2, 61496.0], [75.3, 61498.0], [75.4, 61498.0], [75.5, 61499.0], [75.6, 61499.0], [75.7, 61499.0], [75.8, 61503.0], [75.9, 61503.0], [76.0, 61504.0], [76.1, 61504.0], [76.2, 61504.0], [76.3, 61508.0], [76.4, 61508.0], [76.5, 61514.0], [76.6, 61514.0], [76.7, 61514.0], [76.8, 61523.0], [76.9, 61523.0], [77.0, 61525.0], [77.1, 61525.0], [77.2, 61525.0], [77.3, 61528.0], [77.4, 61528.0], [77.5, 61531.0], [77.6, 61531.0], [77.7, 61531.0], [77.8, 61535.0], [77.9, 61535.0], [78.0, 61537.0], [78.1, 61537.0], [78.2, 61537.0], [78.3, 61541.0], [78.4, 61541.0], [78.5, 61542.0], [78.6, 61542.0], [78.7, 61542.0], [78.8, 61543.0], [78.9, 61543.0], [79.0, 61546.0], [79.1, 61546.0], [79.2, 61546.0], [79.3, 61547.0], [79.4, 61547.0], [79.5, 61550.0], [79.6, 61550.0], [79.7, 61550.0], [79.8, 61551.0], [79.9, 61551.0], [80.0, 61555.0], [80.1, 61555.0], [80.2, 61555.0], [80.3, 61557.0], [80.4, 61557.0], [80.5, 61564.0], [80.6, 61564.0], [80.7, 61564.0], [80.8, 61565.0], [80.9, 61565.0], [81.0, 61570.0], [81.1, 61570.0], [81.2, 61570.0], [81.3, 61580.0], [81.4, 61580.0], [81.5, 61586.0], [81.6, 61586.0], [81.7, 61586.0], [81.8, 61586.0], [81.9, 61586.0], [82.0, 61588.0], [82.1, 61588.0], [82.2, 61588.0], [82.3, 61589.0], [82.4, 61589.0], [82.5, 61593.0], [82.6, 61593.0], [82.7, 61593.0], [82.8, 61597.0], [82.9, 61597.0], [83.0, 61598.0], [83.1, 61598.0], [83.2, 61598.0], [83.3, 61600.0], [83.4, 61600.0], [83.5, 61605.0], [83.6, 61605.0], [83.7, 61605.0], [83.8, 61608.0], [83.9, 61608.0], [84.0, 61609.0], [84.1, 61609.0], [84.2, 61609.0], [84.3, 61612.0], [84.4, 61612.0], [84.5, 61613.0], [84.6, 61613.0], [84.7, 61613.0], [84.8, 61613.0], [84.9, 61613.0], [85.0, 61615.0], [85.1, 61615.0], [85.2, 61615.0], [85.3, 61618.0], [85.4, 61618.0], [85.5, 61622.0], [85.6, 61622.0], [85.7, 61622.0], [85.8, 61623.0], [85.9, 61623.0], [86.0, 61624.0], [86.1, 61624.0], [86.2, 61624.0], [86.3, 61625.0], [86.4, 61625.0], [86.5, 61625.0], [86.6, 61625.0], [86.7, 61625.0], [86.8, 61627.0], [86.9, 61627.0], [87.0, 61633.0], [87.1, 61633.0], [87.2, 61633.0], [87.3, 61636.0], [87.4, 61636.0], [87.5, 61637.0], [87.6, 61637.0], [87.7, 61637.0], [87.8, 61645.0], [87.9, 61645.0], [88.0, 61649.0], [88.1, 61649.0], [88.2, 61649.0], [88.3, 61651.0], [88.4, 61651.0], [88.5, 61657.0], [88.6, 61657.0], [88.7, 61657.0], [88.8, 61657.0], [88.9, 61657.0], [89.0, 61659.0], [89.1, 61659.0], [89.2, 61659.0], [89.3, 61670.0], [89.4, 61670.0], [89.5, 61675.0], [89.6, 61675.0], [89.7, 61675.0], [89.8, 61678.0], [89.9, 61678.0], [90.0, 61684.0], [90.1, 61684.0], [90.2, 61684.0], [90.3, 61690.0], [90.4, 61690.0], [90.5, 61691.0], [90.6, 61691.0], [90.7, 61691.0], [90.8, 61694.0], [90.9, 61694.0], [91.0, 61696.0], [91.1, 61696.0], [91.2, 61696.0], [91.3, 61697.0], [91.4, 61697.0], [91.5, 61702.0], [91.6, 61702.0], [91.7, 61702.0], [91.8, 61702.0], [91.9, 61702.0], [92.0, 61704.0], [92.1, 61704.0], [92.2, 61704.0], [92.3, 61704.0], [92.4, 61704.0], [92.5, 61705.0], [92.6, 61705.0], [92.7, 61705.0], [92.8, 61705.0], [92.9, 61705.0], [93.0, 61705.0], [93.1, 61705.0], [93.2, 61705.0], [93.3, 61708.0], [93.4, 61708.0], [93.5, 61714.0], [93.6, 61714.0], [93.7, 61714.0], [93.8, 61717.0], [93.9, 61717.0], [94.0, 61718.0], [94.1, 61718.0], [94.2, 61718.0], [94.3, 61719.0], [94.4, 61719.0], [94.5, 61721.0], [94.6, 61721.0], [94.7, 61721.0], [94.8, 61730.0], [94.9, 61730.0], [95.0, 61730.0], [95.1, 61730.0], [95.2, 61730.0], [95.3, 61741.0], [95.4, 61741.0], [95.5, 61741.0], [95.6, 61741.0], [95.7, 61741.0], [95.8, 61741.0], [95.9, 61741.0], [96.0, 61752.0], [96.1, 61752.0], [96.2, 61752.0], [96.3, 61753.0], [96.4, 61753.0], [96.5, 61754.0], [96.6, 61754.0], [96.7, 61754.0], [96.8, 61760.0], [96.9, 61760.0], [97.0, 61763.0], [97.1, 61763.0], [97.2, 61763.0], [97.3, 61765.0], [97.4, 61765.0], [97.5, 61774.0], [97.6, 61774.0], [97.7, 61774.0], [97.8, 61778.0], [97.9, 61778.0], [98.0, 61779.0], [98.1, 61779.0], [98.2, 61779.0], [98.3, 61789.0], [98.4, 61789.0], [98.5, 61790.0], [98.6, 61790.0], [98.7, 61790.0], [98.8, 61794.0], [98.9, 61794.0], [99.0, 61796.0], [99.1, 61796.0], [99.2, 61796.0], [99.3, 61796.0], [99.4, 61796.0], [99.5, 61799.0], [99.6, 61799.0], [99.7, 61799.0], [99.8, 61802.0], [99.9, 61802.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 17257.0, "series": [{"data": [[0.0, 17257.0], [1100.0, 2.0], [300.0, 143.0], [3100.0, 46.0], [100.0, 141.0], [200.0, 103.0], [400.0, 29.0], [7000.0, 290.0], [15000.0, 6.0], [15100.0, 1.0], [1000.0, 142.0], [500.0, 9.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[15800.0, 35.0], [15700.0, 38.0], [15600.0, 19.0], [16100.0, 35.0], [16000.0, 39.0], [16300.0, 48.0], [15900.0, 31.0], [16200.0, 23.0], [16700.0, 36.0], [16500.0, 26.0], [16400.0, 29.0], [16600.0, 27.0], [16800.0, 14.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[60700.0, 35.0], [61400.0, 35.0], [60800.0, 31.0], [61000.0, 34.0], [61200.0, 34.0], [60500.0, 3.0], [61300.0, 34.0], [60600.0, 33.0], [60900.0, 29.0], [61100.0, 35.0], [61600.0, 33.0], [61700.0, 33.0], [61500.0, 30.0], [61800.0, 1.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 61800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 424.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 17258.0, "series": [{"data": [[0.0, 17258.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 424.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1287.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.97405741957794, "minX": 1.61759928E12, "maxY": 248.22999999999968, "series": [{"data": [[1.61759928E12, 239.59750000000017]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61759928E12, 49.17980102107593], [1.61759934E12, 48.97405741957794]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.61759934E12, 248.22999999999968]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759934E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 61655.5, "series": [{"data": [[2.0, 15063.0], [3.0, 15067.0], [4.0, 15062.0], [5.0, 15171.0], [6.0, 15057.0], [7.0, 15050.0], [8.0, 7046.0], [9.0, 7046.0], [10.0, 7047.0], [11.0, 7038.0], [12.0, 7042.0], [14.0, 7036.0], [15.0, 7037.5], [16.0, 7054.0], [18.0, 7057.5], [19.0, 7055.0], [20.0, 7058.0], [21.0, 7059.0], [22.0, 7056.0], [23.0, 7059.0], [24.0, 7057.0], [25.0, 7053.0], [26.0, 7058.0], [27.0, 7051.0], [28.0, 7054.0], [29.0, 7061.0], [31.0, 7055.0], [33.0, 7045.0], [32.0, 7047.5], [35.0, 7054.0], [34.0, 7056.0], [37.0, 7059.0], [39.0, 7053.0], [38.0, 7051.0], [41.0, 7055.0], [43.0, 7047.0], [45.0, 7045.0], [44.0, 7047.0], [47.0, 170.6474358974359], [49.0, 112.1340782122905], [48.0, 59.577464788732385], [50.0, 33.0], [69.0, 33.0], [95.0, 36.666666666666664], [100.0, 39.0], [204.0, 36.0], [215.0, 39.0], [214.0, 38.0], [211.0, 38.0], [210.0, 39.0], [208.0, 39.0], [217.0, 39.0], [216.0, 39.0], [228.0, 40.07142857142857], [307.0, 41.23076923076923], [332.0, 43.0], [351.0, 44.0], [349.0, 44.0], [353.0, 43.0], [399.0, 41.0], [401.0, 41.0], [427.0, 39.526315789473685], [452.0, 30.8], [450.0, 192.9515995358861], [449.0, 224.00132978723445], [490.0, 33.0], [486.0, 29.0], [482.0, 29.0], [527.0, 28.0], [526.0, 315.8571428571429], [606.0, 28.0], [603.0, 30.0], [598.0, 30.0], [597.0, 36.0], [608.0, 31.0], [662.0, 32.0], [732.0, 30.0], [730.0, 1032.0], [727.0, 30.0], [722.0, 31.0], [720.0, 29.0], [714.0, 33.0], [736.0, 1032.0], [797.0, 129.0], [805.0, 35.0], [811.0, 28.666666666666668], [804.0, 53.0], [806.0, 30.5], [807.0, 28.333333333333336], [816.0, 29.0], [830.0, 29.0625], [831.0, 29.799999999999997], [828.0, 30.8125], [829.0, 30.083333333333336], [826.0, 30.61111111111111], [827.0, 34.26666666666667], [824.0, 29.22222222222222], [825.0, 35.89473684210527], [817.0, 28.27272727272727], [818.0, 28.33333333333333], [819.0, 29.384615384615383], [820.0, 28.384615384615383], [821.0, 28.866666666666664], [822.0, 30.76923076923077], [823.0, 29.428571428571427], [808.0, 29.0], [809.0, 29.0], [810.0, 28.857142857142858], [812.0, 31.75], [813.0, 28.571428571428573], [814.0, 29.333333333333336], [815.0, 29.1], [835.0, 30.5], [832.0, 29.454545454545453], [846.0, 44.0], [847.0, 68.66666666666669], [844.0, 36.5], [845.0, 32.733333333333334], [842.0, 36.00000000000001], [843.0, 36.0], [833.0, 29.34782608695652], [834.0, 29.09523809523809], [836.0, 30.81818181818182], [837.0, 31.85], [838.0, 33.434782608695656], [839.0, 34.86363636363636], [848.0, 29.666666666666668], [849.0, 35.72413793103449], [850.0, 66.64597815292947], [840.0, 35.24999999999999], [841.0, 35.81818181818182], [1.0, 15071.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[540.8963068963643, 177.53998568991162]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[452.0, 15959.5], [495.0, 16542.0], [493.0, 15927.0], [494.0, 16069.0], [492.0, 16101.0], [509.0, 16280.0], [510.0, 16199.0], [508.0, 16335.0], [499.0, 16074.0], [498.0, 16346.5], [497.0, 15991.0], [496.0, 16256.666666666666], [507.0, 16833.0], [506.0, 16268.999999999998], [505.0, 16092.0], [504.0, 16555.0], [503.0, 16740.0], [502.0, 15671.0], [524.0, 16479.5], [526.0, 16138.733333333334], [514.0, 16248.25], [512.0, 16557.0], [523.0, 15879.0], [522.0, 16187.0], [521.0, 15914.0], [520.0, 16072.333333333332], [519.0, 16266.5], [518.0, 16473.0], [516.0, 15833.0], [515.0, 16401.0], [636.0, 16503.714285714286], [639.0, 16227.666666666666], [624.0, 16195.0], [627.0, 16798.0], [629.0, 16490.0], [638.0, 16230.285714285716], [637.0, 16173.090909090908], [635.0, 16401.666666666668], [634.0, 16024.5], [633.0, 16209.5], [632.0, 16076.1], [621.0, 16452.0], [615.0, 16796.0], [614.0, 15951.0], [611.0, 15758.0], [619.0, 16675.0], [617.0, 16845.0], [616.0, 16691.0], [631.0, 16471.0], [630.0, 16403.5], [658.0, 15785.0], [662.0, 16310.863636363638], [661.0, 16061.0], [659.0, 16132.666666666666], [657.0, 15738.5], [655.0, 15766.0], [641.0, 15963.0], [640.0, 16281.5], [644.0, 16482.8], [643.0, 15828.0], [646.0, 16190.25], [645.0, 16048.833333333332], [656.0, 16054.0], [654.0, 16362.0], [653.0, 16198.25], [652.0, 15640.0], [651.0, 16117.0], [650.0, 16203.4], [649.0, 16722.0], [648.0, 16082.333333333334], [765.0, 16220.0], [766.0, 16506.0], [762.0, 16729.333333333332], [763.0, 15644.0], [760.0, 16656.0], [742.0, 16204.0], [741.0, 16135.5], [739.0, 16162.333333333334], [743.0, 16328.0], [750.0, 16045.0], [748.0, 15712.5], [744.0, 16639.0], [758.0, 15867.0], [757.0, 16512.0], [756.0, 16475.0], [753.0, 15691.0], [793.0, 16166.291666666668], [786.0, 16617.0], [797.0, 16085.380952380952], [799.0, 15878.0], [784.0, 16825.0], [795.0, 16299.875], [794.0, 16195.666666666666], [792.0, 16212.142857142857], [775.0, 16150.0], [773.0, 16499.0], [772.0, 15993.666666666666], [771.0, 16807.0], [770.0, 15614.0], [769.0, 16511.0], [783.0, 16338.5], [782.0, 16281.0], [781.0, 16333.8], [780.0, 16362.0], [779.0, 15939.0], [778.0, 16350.666666666666], [777.0, 16261.333333333334], [776.0, 16190.75], [790.0, 15676.0], [789.0, 16080.333333333334], [788.0, 16675.666666666668], [826.0, 16477.0], [831.0, 16266.333333333334], [824.0, 16337.333333333334], [802.0, 16566.0], [823.0, 16635.0], [822.0, 16548.0], [818.0, 16432.0], [816.0, 16273.0], [813.0, 16004.0], [812.0, 15804.0], [809.0, 16135.0], [850.0, 16221.466666666667], [838.0, 16355.5], [837.0, 16293.0], [836.0, 16242.0], [835.0, 16011.0], [833.0, 16046.0], [832.0, 16328.25]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[689.5724999999996, 16224.477499999999]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[95.0, 61121.239130434784], [215.0, 61458.799999999996], [223.0, 61588.5], [222.0, 61236.75], [221.0, 61267.33333333333], [219.0, 61519.07142857143], [218.0, 61631.0], [217.0, 61337.81250000001], [216.0, 61358.833333333336], [228.0, 61235.217391304344], [227.0, 61278.85714285715], [226.0, 61211.529411764706], [225.0, 61250.0], [224.0, 61655.5], [301.0, 61130.4], [300.0, 61028.57142857143], [299.0, 60772.5], [307.0, 61127.18518518519], [305.0, 61102.0], [304.0, 61137.75862068965], [427.0, 61128.87878787879], [426.0, 61134.53571428571], [425.0, 61177.52380952381], [424.0, 61076.25], [423.0, 61591.25], [422.0, 61478.5], [449.0, 61060.590909090904]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[297.22499999999945, 61195.865]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 850.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61759928E12, "maxY": 4.9E-324, "series": [{"data": [[1.61759928E12, 0.0], [1.61759934E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61759928E12, 0.0], [1.61759934E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759934E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 145.00314177248316, "minX": 1.61759928E12, "maxY": 61195.865, "series": [{"data": [[1.61759928E12, 145.00314177248316], [1.61759934E12, 349.48668280871703]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61759928E12, 16224.477499999999]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61759934E12, 61195.865]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759934E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61759928E12, "maxY": 4.9E-324, "series": [{"data": [[1.61759928E12, 0.0], [1.61759934E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61759928E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61759934E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759934E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61759928E12, "maxY": 4.9E-324, "series": [{"data": [[1.61759928E12, 0.0], [1.61759934E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61759928E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61759934E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759934E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61759928E12, "maxY": 61802.0, "series": [{"data": [[1.61759928E12, 16858.0], [1.61759934E12, 61802.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61759928E12, 53.0], [1.61759934E12, 60799.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61759928E12, 16335.419999999998], [1.61759934E12, 61702.16]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61759928E12, 378.0], [1.61759934E12, 61310.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61759928E12, 26.0], [1.61759934E12, 27.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61759928E12, 39.0], [1.61759934E12, 37.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759934E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 3.0, "maxY": 15065.0, "series": [{"data": [[582.0, 38.0], [632.0, 32.0], [611.0, 43.0], [608.0, 44.0], [40.0, 7052.0], [691.0, 42.0], [722.0, 38.0], [721.0, 40.0], [789.0, 32.0], [3.0, 15057.0], [805.0, 38.0], [859.0, 36.0], [840.0, 37.0], [867.0, 34.0], [922.0, 37.0], [986.0, 45.0], [4.0, 15065.0], [1133.0, 44.0], [1097.0, 36.0], [1162.0, 43.0], [1210.0, 50.0], [1314.0, 38.0], [181.0, 41.0], [208.0, 29.0], [219.0, 38.0], [226.0, 29.0], [301.0, 32.0], [333.0, 36.0], [22.0, 28.0], [374.0, 39.0], [507.0, 38.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1314.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 4.9E-324, "series": [{"data": [[582.0, 0.0], [632.0, 0.0], [611.0, 0.0], [608.0, 0.0], [40.0, 0.0], [691.0, 0.0], [722.0, 0.0], [721.0, 0.0], [789.0, 0.0], [3.0, 0.0], [805.0, 0.0], [859.0, 0.0], [840.0, 0.0], [867.0, 0.0], [922.0, 0.0], [986.0, 0.0], [4.0, 0.0], [1133.0, 0.0], [1097.0, 0.0], [1162.0, 0.0], [1210.0, 0.0], [1314.0, 0.0], [181.0, 0.0], [208.0, 0.0], [219.0, 0.0], [226.0, 0.0], [301.0, 0.0], [333.0, 0.0], [22.0, 0.0], [374.0, 0.0], [507.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1314.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 47.35, "minX": 1.61759928E12, "maxY": 268.8, "series": [{"data": [[1.61759928E12, 268.8], [1.61759934E12, 47.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759934E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 54.85, "minX": 1.61759928E12, "maxY": 261.3, "series": [{"data": [[1.61759928E12, 261.3], [1.61759934E12, 54.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61759934E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.61759928E12, "maxY": 254.63333333333333, "series": [{"data": [[1.61759934E12, 6.666666666666667]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.61759928E12, 6.666666666666667]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61759928E12, 254.63333333333333], [1.61759934E12, 48.18333333333333]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759934E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 54.85, "minX": 1.61759928E12, "maxY": 261.3, "series": [{"data": [[1.61759928E12, 261.3], [1.61759934E12, 54.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61759934E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

