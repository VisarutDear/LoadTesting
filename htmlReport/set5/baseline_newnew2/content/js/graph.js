/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 31603.0, "series": [{"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 28.0], [1.3, 28.0], [1.4, 28.0], [1.5, 28.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 29.0], [2.9, 29.0], [3.0, 29.0], [3.1, 29.0], [3.2, 29.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 30.0], [4.0, 30.0], [4.1, 30.0], [4.2, 30.0], [4.3, 30.0], [4.4, 30.0], [4.5, 30.0], [4.6, 30.0], [4.7, 31.0], [4.8, 31.0], [4.9, 31.0], [5.0, 31.0], [5.1, 32.0], [5.2, 32.0], [5.3, 32.0], [5.4, 32.0], [5.5, 33.0], [5.6, 33.0], [5.7, 33.0], [5.8, 34.0], [5.9, 34.0], [6.0, 34.0], [6.1, 35.0], [6.2, 35.0], [6.3, 35.0], [6.4, 36.0], [6.5, 36.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 38.0], [7.1, 38.0], [7.2, 38.0], [7.3, 39.0], [7.4, 39.0], [7.5, 39.0], [7.6, 39.0], [7.7, 40.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 41.0], [8.2, 41.0], [8.3, 41.0], [8.4, 41.0], [8.5, 42.0], [8.6, 42.0], [8.7, 42.0], [8.8, 43.0], [8.9, 43.0], [9.0, 43.0], [9.1, 43.0], [9.2, 43.0], [9.3, 43.0], [9.4, 43.0], [9.5, 43.0], [9.6, 44.0], [9.7, 44.0], [9.8, 44.0], [9.9, 44.0], [10.0, 44.0], [10.1, 44.0], [10.2, 44.0], [10.3, 44.0], [10.4, 44.0], [10.5, 45.0], [10.6, 45.0], [10.7, 45.0], [10.8, 45.0], [10.9, 46.0], [11.0, 46.0], [11.1, 46.0], [11.2, 46.0], [11.3, 47.0], [11.4, 47.0], [11.5, 47.0], [11.6, 47.0], [11.7, 48.0], [11.8, 48.0], [11.9, 48.0], [12.0, 48.0], [12.1, 49.0], [12.2, 49.0], [12.3, 49.0], [12.4, 49.0], [12.5, 50.0], [12.6, 50.0], [12.7, 51.0], [12.8, 51.0], [12.9, 52.0], [13.0, 52.0], [13.1, 53.0], [13.2, 54.0], [13.3, 55.0], [13.4, 56.0], [13.5, 56.0], [13.6, 57.0], [13.7, 58.0], [13.8, 58.0], [13.9, 59.0], [14.0, 60.0], [14.1, 60.0], [14.2, 61.0], [14.3, 62.0], [14.4, 63.0], [14.5, 64.0], [14.6, 65.0], [14.7, 66.0], [14.8, 66.0], [14.9, 68.0], [15.0, 70.0], [15.1, 71.0], [15.2, 71.0], [15.3, 73.0], [15.4, 75.0], [15.5, 75.0], [15.6, 76.0], [15.7, 77.0], [15.8, 78.0], [15.9, 79.0], [16.0, 79.0], [16.1, 80.0], [16.2, 81.0], [16.3, 82.0], [16.4, 83.0], [16.5, 84.0], [16.6, 86.0], [16.7, 87.0], [16.8, 89.0], [16.9, 90.0], [17.0, 91.0], [17.1, 92.0], [17.2, 93.0], [17.3, 93.0], [17.4, 94.0], [17.5, 94.0], [17.6, 95.0], [17.7, 95.0], [17.8, 96.0], [17.9, 96.0], [18.0, 97.0], [18.1, 97.0], [18.2, 98.0], [18.3, 98.0], [18.4, 99.0], [18.5, 99.0], [18.6, 99.0], [18.7, 100.0], [18.8, 100.0], [18.9, 100.0], [19.0, 101.0], [19.1, 101.0], [19.2, 101.0], [19.3, 102.0], [19.4, 102.0], [19.5, 102.0], [19.6, 102.0], [19.7, 103.0], [19.8, 104.0], [19.9, 104.0], [20.0, 104.0], [20.1, 105.0], [20.2, 105.0], [20.3, 106.0], [20.4, 106.0], [20.5, 106.0], [20.6, 107.0], [20.7, 107.0], [20.8, 108.0], [20.9, 108.0], [21.0, 109.0], [21.1, 109.0], [21.2, 110.0], [21.3, 110.0], [21.4, 110.0], [21.5, 111.0], [21.6, 111.0], [21.7, 111.0], [21.8, 112.0], [21.9, 113.0], [22.0, 113.0], [22.1, 114.0], [22.2, 114.0], [22.3, 114.0], [22.4, 115.0], [22.5, 115.0], [22.6, 115.0], [22.7, 116.0], [22.8, 116.0], [22.9, 117.0], [23.0, 117.0], [23.1, 118.0], [23.2, 118.0], [23.3, 118.0], [23.4, 119.0], [23.5, 119.0], [23.6, 120.0], [23.7, 120.0], [23.8, 120.0], [23.9, 121.0], [24.0, 121.0], [24.1, 121.0], [24.2, 122.0], [24.3, 122.0], [24.4, 122.0], [24.5, 122.0], [24.6, 123.0], [24.7, 123.0], [24.8, 123.0], [24.9, 123.0], [25.0, 124.0], [25.1, 124.0], [25.2, 124.0], [25.3, 124.0], [25.4, 125.0], [25.5, 125.0], [25.6, 125.0], [25.7, 125.0], [25.8, 125.0], [25.9, 126.0], [26.0, 126.0], [26.1, 126.0], [26.2, 126.0], [26.3, 126.0], [26.4, 127.0], [26.5, 127.0], [26.6, 127.0], [26.7, 128.0], [26.8, 128.0], [26.9, 128.0], [27.0, 128.0], [27.1, 128.0], [27.2, 129.0], [27.3, 129.0], [27.4, 129.0], [27.5, 129.0], [27.6, 129.0], [27.7, 129.0], [27.8, 130.0], [27.9, 130.0], [28.0, 130.0], [28.1, 131.0], [28.2, 131.0], [28.3, 132.0], [28.4, 132.0], [28.5, 132.0], [28.6, 132.0], [28.7, 133.0], [28.8, 133.0], [28.9, 133.0], [29.0, 134.0], [29.1, 134.0], [29.2, 135.0], [29.3, 135.0], [29.4, 136.0], [29.5, 136.0], [29.6, 137.0], [29.7, 137.0], [29.8, 137.0], [29.9, 137.0], [30.0, 138.0], [30.1, 139.0], [30.2, 139.0], [30.3, 140.0], [30.4, 140.0], [30.5, 141.0], [30.6, 141.0], [30.7, 142.0], [30.8, 142.0], [30.9, 142.0], [31.0, 143.0], [31.1, 143.0], [31.2, 143.0], [31.3, 144.0], [31.4, 144.0], [31.5, 145.0], [31.6, 145.0], [31.7, 146.0], [31.8, 146.0], [31.9, 147.0], [32.0, 147.0], [32.1, 147.0], [32.2, 148.0], [32.3, 148.0], [32.4, 149.0], [32.5, 149.0], [32.6, 150.0], [32.7, 151.0], [32.8, 152.0], [32.9, 153.0], [33.0, 153.0], [33.1, 154.0], [33.2, 154.0], [33.3, 154.0], [33.4, 155.0], [33.5, 155.0], [33.6, 156.0], [33.7, 156.0], [33.8, 157.0], [33.9, 157.0], [34.0, 157.0], [34.1, 158.0], [34.2, 159.0], [34.3, 159.0], [34.4, 160.0], [34.5, 160.0], [34.6, 160.0], [34.7, 161.0], [34.8, 161.0], [34.9, 162.0], [35.0, 162.0], [35.1, 163.0], [35.2, 163.0], [35.3, 164.0], [35.4, 164.0], [35.5, 165.0], [35.6, 165.0], [35.7, 166.0], [35.8, 166.0], [35.9, 167.0], [36.0, 167.0], [36.1, 167.0], [36.2, 167.0], [36.3, 168.0], [36.4, 168.0], [36.5, 168.0], [36.6, 169.0], [36.7, 169.0], [36.8, 169.0], [36.9, 170.0], [37.0, 170.0], [37.1, 171.0], [37.2, 171.0], [37.3, 172.0], [37.4, 172.0], [37.5, 173.0], [37.6, 173.0], [37.7, 173.0], [37.8, 173.0], [37.9, 174.0], [38.0, 174.0], [38.1, 175.0], [38.2, 175.0], [38.3, 176.0], [38.4, 176.0], [38.5, 177.0], [38.6, 177.0], [38.7, 178.0], [38.8, 178.0], [38.9, 178.0], [39.0, 178.0], [39.1, 179.0], [39.2, 179.0], [39.3, 179.0], [39.4, 180.0], [39.5, 180.0], [39.6, 180.0], [39.7, 180.0], [39.8, 181.0], [39.9, 181.0], [40.0, 181.0], [40.1, 182.0], [40.2, 182.0], [40.3, 182.0], [40.4, 183.0], [40.5, 183.0], [40.6, 184.0], [40.7, 184.0], [40.8, 184.0], [40.9, 185.0], [41.0, 185.0], [41.1, 185.0], [41.2, 186.0], [41.3, 186.0], [41.4, 187.0], [41.5, 187.0], [41.6, 187.0], [41.7, 188.0], [41.8, 188.0], [41.9, 188.0], [42.0, 189.0], [42.1, 189.0], [42.2, 190.0], [42.3, 190.0], [42.4, 191.0], [42.5, 191.0], [42.6, 191.0], [42.7, 192.0], [42.8, 192.0], [42.9, 193.0], [43.0, 193.0], [43.1, 194.0], [43.2, 194.0], [43.3, 195.0], [43.4, 195.0], [43.5, 196.0], [43.6, 196.0], [43.7, 196.0], [43.8, 197.0], [43.9, 197.0], [44.0, 197.0], [44.1, 198.0], [44.2, 198.0], [44.3, 198.0], [44.4, 199.0], [44.5, 199.0], [44.6, 200.0], [44.7, 200.0], [44.8, 200.0], [44.9, 200.0], [45.0, 200.0], [45.1, 201.0], [45.2, 201.0], [45.3, 201.0], [45.4, 201.0], [45.5, 202.0], [45.6, 202.0], [45.7, 202.0], [45.8, 203.0], [45.9, 203.0], [46.0, 203.0], [46.1, 203.0], [46.2, 204.0], [46.3, 204.0], [46.4, 204.0], [46.5, 205.0], [46.6, 205.0], [46.7, 205.0], [46.8, 206.0], [46.9, 206.0], [47.0, 206.0], [47.1, 207.0], [47.2, 207.0], [47.3, 208.0], [47.4, 208.0], [47.5, 208.0], [47.6, 209.0], [47.7, 209.0], [47.8, 209.0], [47.9, 210.0], [48.0, 210.0], [48.1, 210.0], [48.2, 211.0], [48.3, 211.0], [48.4, 211.0], [48.5, 212.0], [48.6, 212.0], [48.7, 212.0], [48.8, 212.0], [48.9, 213.0], [49.0, 213.0], [49.1, 213.0], [49.2, 213.0], [49.3, 214.0], [49.4, 214.0], [49.5, 214.0], [49.6, 214.0], [49.7, 215.0], [49.8, 215.0], [49.9, 215.0], [50.0, 216.0], [50.1, 216.0], [50.2, 216.0], [50.3, 217.0], [50.4, 217.0], [50.5, 217.0], [50.6, 218.0], [50.7, 218.0], [50.8, 219.0], [50.9, 219.0], [51.0, 220.0], [51.1, 220.0], [51.2, 221.0], [51.3, 222.0], [51.4, 222.0], [51.5, 223.0], [51.6, 224.0], [51.7, 225.0], [51.8, 226.0], [51.9, 227.0], [52.0, 228.0], [52.1, 229.0], [52.2, 230.0], [52.3, 231.0], [52.4, 232.0], [52.5, 232.0], [52.6, 233.0], [52.7, 233.0], [52.8, 234.0], [52.9, 234.0], [53.0, 235.0], [53.1, 235.0], [53.2, 235.0], [53.3, 236.0], [53.4, 236.0], [53.5, 236.0], [53.6, 236.0], [53.7, 236.0], [53.8, 237.0], [53.9, 237.0], [54.0, 237.0], [54.1, 237.0], [54.2, 238.0], [54.3, 238.0], [54.4, 238.0], [54.5, 238.0], [54.6, 238.0], [54.7, 238.0], [54.8, 239.0], [54.9, 239.0], [55.0, 239.0], [55.1, 239.0], [55.2, 239.0], [55.3, 239.0], [55.4, 239.0], [55.5, 239.0], [55.6, 239.0], [55.7, 239.0], [55.8, 240.0], [55.9, 240.0], [56.0, 240.0], [56.1, 240.0], [56.2, 240.0], [56.3, 240.0], [56.4, 240.0], [56.5, 240.0], [56.6, 240.0], [56.7, 241.0], [56.8, 241.0], [56.9, 241.0], [57.0, 241.0], [57.1, 241.0], [57.2, 241.0], [57.3, 241.0], [57.4, 241.0], [57.5, 241.0], [57.6, 241.0], [57.7, 242.0], [57.8, 242.0], [57.9, 242.0], [58.0, 242.0], [58.1, 242.0], [58.2, 242.0], [58.3, 242.0], [58.4, 242.0], [58.5, 242.0], [58.6, 242.0], [58.7, 242.0], [58.8, 242.0], [58.9, 243.0], [59.0, 243.0], [59.1, 243.0], [59.2, 243.0], [59.3, 243.0], [59.4, 243.0], [59.5, 243.0], [59.6, 243.0], [59.7, 243.0], [59.8, 243.0], [59.9, 244.0], [60.0, 244.0], [60.1, 244.0], [60.2, 244.0], [60.3, 244.0], [60.4, 244.0], [60.5, 244.0], [60.6, 244.0], [60.7, 244.0], [60.8, 244.0], [60.9, 245.0], [61.0, 245.0], [61.1, 245.0], [61.2, 245.0], [61.3, 245.0], [61.4, 245.0], [61.5, 245.0], [61.6, 245.0], [61.7, 245.0], [61.8, 245.0], [61.9, 246.0], [62.0, 246.0], [62.1, 246.0], [62.2, 246.0], [62.3, 246.0], [62.4, 246.0], [62.5, 246.0], [62.6, 246.0], [62.7, 247.0], [62.8, 247.0], [62.9, 247.0], [63.0, 247.0], [63.1, 247.0], [63.2, 247.0], [63.3, 247.0], [63.4, 247.0], [63.5, 247.0], [63.6, 248.0], [63.7, 248.0], [63.8, 248.0], [63.9, 248.0], [64.0, 248.0], [64.1, 248.0], [64.2, 248.0], [64.3, 249.0], [64.4, 249.0], [64.5, 249.0], [64.6, 249.0], [64.7, 249.0], [64.8, 249.0], [64.9, 249.0], [65.0, 250.0], [65.1, 250.0], [65.2, 250.0], [65.3, 250.0], [65.4, 250.0], [65.5, 250.0], [65.6, 251.0], [65.7, 251.0], [65.8, 251.0], [65.9, 251.0], [66.0, 251.0], [66.1, 251.0], [66.2, 252.0], [66.3, 252.0], [66.4, 252.0], [66.5, 252.0], [66.6, 252.0], [66.7, 252.0], [66.8, 252.0], [66.9, 253.0], [67.0, 253.0], [67.1, 253.0], [67.2, 253.0], [67.3, 254.0], [67.4, 254.0], [67.5, 254.0], [67.6, 254.0], [67.7, 254.0], [67.8, 255.0], [67.9, 255.0], [68.0, 255.0], [68.1, 256.0], [68.2, 256.0], [68.3, 256.0], [68.4, 256.0], [68.5, 257.0], [68.6, 257.0], [68.7, 257.0], [68.8, 257.0], [68.9, 258.0], [69.0, 258.0], [69.1, 258.0], [69.2, 259.0], [69.3, 259.0], [69.4, 259.0], [69.5, 260.0], [69.6, 260.0], [69.7, 260.0], [69.8, 261.0], [69.9, 261.0], [70.0, 261.0], [70.1, 261.0], [70.2, 261.0], [70.3, 261.0], [70.4, 262.0], [70.5, 262.0], [70.6, 262.0], [70.7, 262.0], [70.8, 262.0], [70.9, 263.0], [71.0, 263.0], [71.1, 263.0], [71.2, 263.0], [71.3, 264.0], [71.4, 264.0], [71.5, 264.0], [71.6, 264.0], [71.7, 264.0], [71.8, 264.0], [71.9, 264.0], [72.0, 265.0], [72.1, 265.0], [72.2, 265.0], [72.3, 265.0], [72.4, 265.0], [72.5, 265.0], [72.6, 265.0], [72.7, 265.0], [72.8, 265.0], [72.9, 266.0], [73.0, 266.0], [73.1, 266.0], [73.2, 266.0], [73.3, 266.0], [73.4, 266.0], [73.5, 266.0], [73.6, 266.0], [73.7, 267.0], [73.8, 267.0], [73.9, 267.0], [74.0, 267.0], [74.1, 268.0], [74.2, 268.0], [74.3, 268.0], [74.4, 268.0], [74.5, 268.0], [74.6, 268.0], [74.7, 269.0], [74.8, 269.0], [74.9, 269.0], [75.0, 269.0], [75.1, 269.0], [75.2, 269.0], [75.3, 270.0], [75.4, 270.0], [75.5, 270.0], [75.6, 270.0], [75.7, 270.0], [75.8, 270.0], [75.9, 271.0], [76.0, 271.0], [76.1, 271.0], [76.2, 271.0], [76.3, 271.0], [76.4, 272.0], [76.5, 272.0], [76.6, 272.0], [76.7, 272.0], [76.8, 272.0], [76.9, 273.0], [77.0, 273.0], [77.1, 273.0], [77.2, 273.0], [77.3, 273.0], [77.4, 273.0], [77.5, 274.0], [77.6, 274.0], [77.7, 274.0], [77.8, 274.0], [77.9, 275.0], [78.0, 275.0], [78.1, 275.0], [78.2, 275.0], [78.3, 276.0], [78.4, 276.0], [78.5, 276.0], [78.6, 276.0], [78.7, 277.0], [78.8, 277.0], [78.9, 278.0], [79.0, 278.0], [79.1, 278.0], [79.2, 279.0], [79.3, 279.0], [79.4, 280.0], [79.5, 280.0], [79.6, 280.0], [79.7, 281.0], [79.8, 282.0], [79.9, 282.0], [80.0, 283.0], [80.1, 283.0], [80.2, 283.0], [80.3, 283.0], [80.4, 284.0], [80.5, 284.0], [80.6, 285.0], [80.7, 285.0], [80.8, 285.0], [80.9, 286.0], [81.0, 286.0], [81.1, 286.0], [81.2, 287.0], [81.3, 287.0], [81.4, 287.0], [81.5, 288.0], [81.6, 288.0], [81.7, 288.0], [81.8, 289.0], [81.9, 289.0], [82.0, 290.0], [82.1, 290.0], [82.2, 291.0], [82.3, 292.0], [82.4, 292.0], [82.5, 294.0], [82.6, 296.0], [82.7, 297.0], [82.8, 298.0], [82.9, 300.0], [83.0, 301.0], [83.1, 302.0], [83.2, 303.0], [83.3, 306.0], [83.4, 308.0], [83.5, 309.0], [83.6, 312.0], [83.7, 317.0], [83.8, 319.0], [83.9, 323.0], [84.0, 324.0], [84.1, 326.0], [84.2, 327.0], [84.3, 329.0], [84.4, 330.0], [84.5, 332.0], [84.6, 336.0], [84.7, 339.0], [84.8, 341.0], [84.9, 342.0], [85.0, 343.0], [85.1, 345.0], [85.2, 346.0], [85.3, 348.0], [85.4, 350.0], [85.5, 353.0], [85.6, 359.0], [85.7, 364.0], [85.8, 371.0], [85.9, 377.0], [86.0, 383.0], [86.1, 396.0], [86.2, 409.0], [86.3, 418.0], [86.4, 422.0], [86.5, 425.0], [86.6, 429.0], [86.7, 433.0], [86.8, 449.0], [86.9, 452.0], [87.0, 453.0], [87.1, 455.0], [87.2, 457.0], [87.3, 459.0], [87.4, 461.0], [87.5, 464.0], [87.6, 466.0], [87.7, 468.0], [87.8, 469.0], [87.9, 472.0], [88.0, 474.0], [88.1, 477.0], [88.2, 483.0], [88.3, 488.0], [88.4, 492.0], [88.5, 493.0], [88.6, 494.0], [88.7, 495.0], [88.8, 495.0], [88.9, 496.0], [89.0, 497.0], [89.1, 499.0], [89.2, 500.0], [89.3, 502.0], [89.4, 504.0], [89.5, 506.0], [89.6, 508.0], [89.7, 510.0], [89.8, 1034.0], [89.9, 1041.0], [90.0, 1076.0], [90.1, 1104.0], [90.2, 1107.0], [90.3, 1109.0], [90.4, 1111.0], [90.5, 1113.0], [90.6, 1115.0], [90.7, 1119.0], [90.8, 1133.0], [90.9, 1137.0], [91.0, 1140.0], [91.1, 1144.0], [91.2, 1147.0], [91.3, 1151.0], [91.4, 1153.0], [91.5, 1157.0], [91.6, 1159.0], [91.7, 1165.0], [91.8, 1179.0], [91.9, 1188.0], [92.0, 1194.0], [92.1, 1198.0], [92.2, 1203.0], [92.3, 1211.0], [92.4, 1215.0], [92.5, 1218.0], [92.6, 1220.0], [92.7, 1223.0], [92.8, 1225.0], [92.9, 1228.0], [93.0, 1230.0], [93.1, 1233.0], [93.2, 1236.0], [93.3, 1250.0], [93.4, 1257.0], [93.5, 1276.0], [93.6, 1289.0], [93.7, 1295.0], [93.8, 1299.0], [93.9, 1304.0], [94.0, 1312.0], [94.1, 1320.0], [94.2, 1324.0], [94.3, 1328.0], [94.4, 1334.0], [94.5, 1340.0], [94.6, 1346.0], [94.7, 1358.0], [94.8, 1398.0], [94.9, 2159.0], [95.0, 3044.0], [95.1, 3048.0], [95.2, 3203.0], [95.3, 7035.0], [95.4, 7037.0], [95.5, 7041.0], [95.6, 7043.0], [95.7, 7045.0], [95.8, 7047.0], [95.9, 7049.0], [96.0, 7052.0], [96.1, 7054.0], [96.2, 7057.0], [96.3, 7064.0], [96.4, 7070.0], [96.5, 7075.0], [96.6, 7078.0], [96.7, 7089.0], [96.8, 7094.0], [96.9, 7099.0], [97.0, 7104.0], [97.1, 7110.0], [97.2, 7112.0], [97.3, 7114.0], [97.4, 7117.0], [97.5, 7120.0], [97.6, 7125.0], [97.7, 7133.0], [97.8, 7160.0], [97.9, 7163.0], [98.0, 7166.0], [98.1, 7169.0], [98.2, 7178.0], [98.3, 15055.0], [98.4, 15061.0], [98.5, 15064.0], [98.6, 15067.0], [98.7, 15072.0], [98.8, 15075.0], [98.9, 15082.0], [99.0, 15102.0], [99.1, 15107.0], [99.2, 15116.0], [99.3, 15142.0], [99.4, 15147.0], [99.5, 15154.0], [99.6, 21027.0], [99.7, 21035.0], [99.8, 21039.0], [99.9, 21044.0], [100.0, 21054.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 15471.0], [0.1, 15471.0], [0.2, 15471.0], [0.3, 15477.0], [0.4, 15477.0], [0.5, 15486.0], [0.6, 15486.0], [0.7, 15486.0], [0.8, 15488.0], [0.9, 15488.0], [1.0, 15491.0], [1.1, 15491.0], [1.2, 15491.0], [1.3, 15502.0], [1.4, 15502.0], [1.5, 15512.0], [1.6, 15512.0], [1.7, 15512.0], [1.8, 15517.0], [1.9, 15517.0], [2.0, 15518.0], [2.1, 15518.0], [2.2, 15518.0], [2.3, 15518.0], [2.4, 15518.0], [2.5, 15518.0], [2.6, 15518.0], [2.7, 15518.0], [2.8, 15521.0], [2.9, 15521.0], [3.0, 15522.0], [3.1, 15522.0], [3.2, 15522.0], [3.3, 15524.0], [3.4, 15524.0], [3.5, 15524.0], [3.6, 15524.0], [3.7, 15524.0], [3.8, 15529.0], [3.9, 15529.0], [4.0, 15533.0], [4.1, 15533.0], [4.2, 15533.0], [4.3, 15536.0], [4.4, 15536.0], [4.5, 15537.0], [4.6, 15537.0], [4.7, 15537.0], [4.8, 15540.0], [4.9, 15540.0], [5.0, 15542.0], [5.1, 15542.0], [5.2, 15542.0], [5.3, 15543.0], [5.4, 15543.0], [5.5, 15546.0], [5.6, 15546.0], [5.7, 15546.0], [5.8, 15547.0], [5.9, 15547.0], [6.0, 15550.0], [6.1, 15550.0], [6.2, 15550.0], [6.3, 15551.0], [6.4, 15551.0], [6.5, 15552.0], [6.6, 15552.0], [6.7, 15552.0], [6.8, 15554.0], [6.9, 15554.0], [7.0, 15554.0], [7.1, 15554.0], [7.2, 15554.0], [7.3, 15554.0], [7.4, 15554.0], [7.5, 15557.0], [7.6, 15557.0], [7.7, 15557.0], [7.8, 15562.0], [7.9, 15562.0], [8.0, 15571.0], [8.1, 15571.0], [8.2, 15571.0], [8.3, 15582.0], [8.4, 15582.0], [8.5, 15585.0], [8.6, 15585.0], [8.7, 15585.0], [8.8, 15585.0], [8.9, 15585.0], [9.0, 15585.0], [9.1, 15585.0], [9.2, 15585.0], [9.3, 15586.0], [9.4, 15586.0], [9.5, 15596.0], [9.6, 15596.0], [9.7, 15596.0], [9.8, 15600.0], [9.9, 15600.0], [10.0, 15605.0], [10.1, 15605.0], [10.2, 15605.0], [10.3, 15609.0], [10.4, 15609.0], [10.5, 15611.0], [10.6, 15611.0], [10.7, 15611.0], [10.8, 15617.0], [10.9, 15617.0], [11.0, 15621.0], [11.1, 15621.0], [11.2, 15621.0], [11.3, 15625.0], [11.4, 15625.0], [11.5, 15626.0], [11.6, 15626.0], [11.7, 15626.0], [11.8, 15628.0], [11.9, 15628.0], [12.0, 15629.0], [12.1, 15629.0], [12.2, 15629.0], [12.3, 15640.0], [12.4, 15640.0], [12.5, 15643.0], [12.6, 15643.0], [12.7, 15643.0], [12.8, 15650.0], [12.9, 15650.0], [13.0, 15651.0], [13.1, 15651.0], [13.2, 15651.0], [13.3, 15654.0], [13.4, 15654.0], [13.5, 15658.0], [13.6, 15658.0], [13.7, 15658.0], [13.8, 15659.0], [13.9, 15659.0], [14.0, 15662.0], [14.1, 15662.0], [14.2, 15662.0], [14.3, 15663.0], [14.4, 15663.0], [14.5, 15663.0], [14.6, 15663.0], [14.7, 15663.0], [14.8, 15664.0], [14.9, 15664.0], [15.0, 15667.0], [15.1, 15667.0], [15.2, 15667.0], [15.3, 15668.0], [15.4, 15668.0], [15.5, 15670.0], [15.6, 15670.0], [15.7, 15670.0], [15.8, 15679.0], [15.9, 15679.0], [16.0, 15682.0], [16.1, 15682.0], [16.2, 15682.0], [16.3, 15686.0], [16.4, 15686.0], [16.5, 15688.0], [16.6, 15688.0], [16.7, 15688.0], [16.8, 15691.0], [16.9, 15691.0], [17.0, 15693.0], [17.1, 15693.0], [17.2, 15693.0], [17.3, 15698.0], [17.4, 15698.0], [17.5, 15699.0], [17.6, 15699.0], [17.7, 15699.0], [17.8, 15699.0], [17.9, 15699.0], [18.0, 15700.0], [18.1, 15700.0], [18.2, 15700.0], [18.3, 15700.0], [18.4, 15700.0], [18.5, 15700.0], [18.6, 15700.0], [18.7, 15700.0], [18.8, 15701.0], [18.9, 15701.0], [19.0, 15702.0], [19.1, 15702.0], [19.2, 15702.0], [19.3, 15702.0], [19.4, 15702.0], [19.5, 15704.0], [19.6, 15704.0], [19.7, 15704.0], [19.8, 15705.0], [19.9, 15705.0], [20.0, 15708.0], [20.1, 15708.0], [20.2, 15708.0], [20.3, 15710.0], [20.4, 15710.0], [20.5, 15710.0], [20.6, 15710.0], [20.7, 15710.0], [20.8, 15716.0], [20.9, 15716.0], [21.0, 15729.0], [21.1, 15729.0], [21.2, 15729.0], [21.3, 15736.0], [21.4, 15736.0], [21.5, 15741.0], [21.6, 15741.0], [21.7, 15741.0], [21.8, 15743.0], [21.9, 15743.0], [22.0, 15747.0], [22.1, 15747.0], [22.2, 15747.0], [22.3, 15749.0], [22.4, 15749.0], [22.5, 15756.0], [22.6, 15756.0], [22.7, 15756.0], [22.8, 15757.0], [22.9, 15757.0], [23.0, 15757.0], [23.1, 15757.0], [23.2, 15757.0], [23.3, 15760.0], [23.4, 15760.0], [23.5, 15762.0], [23.6, 15762.0], [23.7, 15762.0], [23.8, 15762.0], [23.9, 15762.0], [24.0, 15765.0], [24.1, 15765.0], [24.2, 15765.0], [24.3, 15766.0], [24.4, 15766.0], [24.5, 15768.0], [24.6, 15768.0], [24.7, 15768.0], [24.8, 15777.0], [24.9, 15777.0], [25.0, 15779.0], [25.1, 15779.0], [25.2, 15779.0], [25.3, 15780.0], [25.4, 15780.0], [25.5, 15782.0], [25.6, 15782.0], [25.7, 15782.0], [25.8, 15785.0], [25.9, 15785.0], [26.0, 15788.0], [26.1, 15788.0], [26.2, 15788.0], [26.3, 15789.0], [26.4, 15789.0], [26.5, 15794.0], [26.6, 15794.0], [26.7, 15794.0], [26.8, 15797.0], [26.9, 15797.0], [27.0, 15799.0], [27.1, 15799.0], [27.2, 15799.0], [27.3, 15809.0], [27.4, 15809.0], [27.5, 15809.0], [27.6, 15809.0], [27.7, 15809.0], [27.8, 15824.0], [27.9, 15824.0], [28.0, 15825.0], [28.1, 15825.0], [28.2, 15825.0], [28.3, 15826.0], [28.4, 15826.0], [28.5, 15832.0], [28.6, 15832.0], [28.7, 15832.0], [28.8, 15837.0], [28.9, 15837.0], [29.0, 15837.0], [29.1, 15837.0], [29.2, 15837.0], [29.3, 15837.0], [29.4, 15837.0], [29.5, 15838.0], [29.6, 15838.0], [29.7, 15838.0], [29.8, 15841.0], [29.9, 15841.0], [30.0, 15847.0], [30.1, 15847.0], [30.2, 15847.0], [30.3, 15852.0], [30.4, 15852.0], [30.5, 15852.0], [30.6, 15852.0], [30.7, 15852.0], [30.8, 15853.0], [30.9, 15853.0], [31.0, 15853.0], [31.1, 15853.0], [31.2, 15853.0], [31.3, 15854.0], [31.4, 15854.0], [31.5, 15856.0], [31.6, 15856.0], [31.7, 15856.0], [31.8, 15856.0], [31.9, 15856.0], [32.0, 15858.0], [32.1, 15858.0], [32.2, 15858.0], [32.3, 15859.0], [32.4, 15859.0], [32.5, 15868.0], [32.6, 15868.0], [32.7, 15868.0], [32.8, 15868.0], [32.9, 15868.0], [33.0, 15872.0], [33.1, 15872.0], [33.2, 15872.0], [33.3, 15873.0], [33.4, 15873.0], [33.5, 15879.0], [33.6, 15879.0], [33.7, 15879.0], [33.8, 15879.0], [33.9, 15879.0], [34.0, 15883.0], [34.1, 15883.0], [34.2, 15883.0], [34.3, 15883.0], [34.4, 15883.0], [34.5, 15885.0], [34.6, 15885.0], [34.7, 15885.0], [34.8, 15897.0], [34.9, 15897.0], [35.0, 15898.0], [35.1, 15898.0], [35.2, 15898.0], [35.3, 15902.0], [35.4, 15902.0], [35.5, 15902.0], [35.6, 15902.0], [35.7, 15902.0], [35.8, 15904.0], [35.9, 15904.0], [36.0, 15906.0], [36.1, 15906.0], [36.2, 15906.0], [36.3, 15910.0], [36.4, 15910.0], [36.5, 15912.0], [36.6, 15912.0], [36.7, 15912.0], [36.8, 15913.0], [36.9, 15913.0], [37.0, 15913.0], [37.1, 15913.0], [37.2, 15913.0], [37.3, 15914.0], [37.4, 15914.0], [37.5, 15915.0], [37.6, 15915.0], [37.7, 15915.0], [37.8, 15915.0], [37.9, 15915.0], [38.0, 15918.0], [38.1, 15918.0], [38.2, 15918.0], [38.3, 15920.0], [38.4, 15920.0], [38.5, 15928.0], [38.6, 15928.0], [38.7, 15928.0], [38.8, 15934.0], [38.9, 15934.0], [39.0, 15936.0], [39.1, 15936.0], [39.2, 15936.0], [39.3, 15937.0], [39.4, 15937.0], [39.5, 15937.0], [39.6, 15937.0], [39.7, 15937.0], [39.8, 15939.0], [39.9, 15939.0], [40.0, 15942.0], [40.1, 15942.0], [40.2, 15942.0], [40.3, 15945.0], [40.4, 15945.0], [40.5, 15945.0], [40.6, 15945.0], [40.7, 15945.0], [40.8, 15945.0], [40.9, 15945.0], [41.0, 15948.0], [41.1, 15948.0], [41.2, 15948.0], [41.3, 15949.0], [41.4, 15949.0], [41.5, 15955.0], [41.6, 15955.0], [41.7, 15955.0], [41.8, 15957.0], [41.9, 15957.0], [42.0, 15958.0], [42.1, 15958.0], [42.2, 15958.0], [42.3, 15960.0], [42.4, 15960.0], [42.5, 15962.0], [42.6, 15962.0], [42.7, 15962.0], [42.8, 15963.0], [42.9, 15963.0], [43.0, 15966.0], [43.1, 15966.0], [43.2, 15966.0], [43.3, 15966.0], [43.4, 15966.0], [43.5, 15970.0], [43.6, 15970.0], [43.7, 15970.0], [43.8, 15972.0], [43.9, 15972.0], [44.0, 15973.0], [44.1, 15973.0], [44.2, 15973.0], [44.3, 15976.0], [44.4, 15976.0], [44.5, 15977.0], [44.6, 15977.0], [44.7, 15977.0], [44.8, 15977.0], [44.9, 15977.0], [45.0, 15978.0], [45.1, 15978.0], [45.2, 15978.0], [45.3, 15978.0], [45.4, 15978.0], [45.5, 15982.0], [45.6, 15982.0], [45.7, 15982.0], [45.8, 15982.0], [45.9, 15982.0], [46.0, 15982.0], [46.1, 15982.0], [46.2, 15982.0], [46.3, 15983.0], [46.4, 15983.0], [46.5, 15984.0], [46.6, 15984.0], [46.7, 15984.0], [46.8, 15985.0], [46.9, 15985.0], [47.0, 15985.0], [47.1, 15985.0], [47.2, 15985.0], [47.3, 15986.0], [47.4, 15986.0], [47.5, 15995.0], [47.6, 15995.0], [47.7, 15995.0], [47.8, 15997.0], [47.9, 15997.0], [48.0, 15997.0], [48.1, 15997.0], [48.2, 15997.0], [48.3, 15998.0], [48.4, 15998.0], [48.5, 16005.0], [48.6, 16005.0], [48.7, 16005.0], [48.8, 16006.0], [48.9, 16006.0], [49.0, 16007.0], [49.1, 16007.0], [49.2, 16007.0], [49.3, 16010.0], [49.4, 16010.0], [49.5, 16012.0], [49.6, 16012.0], [49.7, 16012.0], [49.8, 16012.0], [49.9, 16012.0], [50.0, 16012.0], [50.1, 16012.0], [50.2, 16012.0], [50.3, 16013.0], [50.4, 16013.0], [50.5, 16014.0], [50.6, 16014.0], [50.7, 16014.0], [50.8, 16014.0], [50.9, 16014.0], [51.0, 16015.0], [51.1, 16015.0], [51.2, 16015.0], [51.3, 16023.0], [51.4, 16023.0], [51.5, 16027.0], [51.6, 16027.0], [51.7, 16027.0], [51.8, 16028.0], [51.9, 16028.0], [52.0, 16032.0], [52.1, 16032.0], [52.2, 16032.0], [52.3, 16036.0], [52.4, 16036.0], [52.5, 16038.0], [52.6, 16038.0], [52.7, 16038.0], [52.8, 16043.0], [52.9, 16043.0], [53.0, 16045.0], [53.1, 16045.0], [53.2, 16045.0], [53.3, 16046.0], [53.4, 16046.0], [53.5, 16046.0], [53.6, 16046.0], [53.7, 16046.0], [53.8, 16051.0], [53.9, 16051.0], [54.0, 16058.0], [54.1, 16058.0], [54.2, 16058.0], [54.3, 16063.0], [54.4, 16063.0], [54.5, 16064.0], [54.6, 16064.0], [54.7, 16064.0], [54.8, 16071.0], [54.9, 16071.0], [55.0, 16072.0], [55.1, 16072.0], [55.2, 16072.0], [55.3, 16072.0], [55.4, 16072.0], [55.5, 16073.0], [55.6, 16073.0], [55.7, 16073.0], [55.8, 16074.0], [55.9, 16074.0], [56.0, 16075.0], [56.1, 16075.0], [56.2, 16075.0], [56.3, 16076.0], [56.4, 16076.0], [56.5, 16078.0], [56.6, 16078.0], [56.7, 16078.0], [56.8, 16084.0], [56.9, 16084.0], [57.0, 16085.0], [57.1, 16085.0], [57.2, 16085.0], [57.3, 16086.0], [57.4, 16086.0], [57.5, 16095.0], [57.6, 16095.0], [57.7, 16095.0], [57.8, 16096.0], [57.9, 16096.0], [58.0, 16100.0], [58.1, 16100.0], [58.2, 16100.0], [58.3, 16101.0], [58.4, 16101.0], [58.5, 16103.0], [58.6, 16103.0], [58.7, 16103.0], [58.8, 16106.0], [58.9, 16106.0], [59.0, 16107.0], [59.1, 16107.0], [59.2, 16107.0], [59.3, 16108.0], [59.4, 16108.0], [59.5, 16108.0], [59.6, 16108.0], [59.7, 16108.0], [59.8, 16109.0], [59.9, 16109.0], [60.0, 16109.0], [60.1, 16109.0], [60.2, 16109.0], [60.3, 16116.0], [60.4, 16116.0], [60.5, 16120.0], [60.6, 16120.0], [60.7, 16120.0], [60.8, 16131.0], [60.9, 16131.0], [61.0, 16133.0], [61.1, 16133.0], [61.2, 16133.0], [61.3, 16136.0], [61.4, 16136.0], [61.5, 16136.0], [61.6, 16136.0], [61.7, 16136.0], [61.8, 16144.0], [61.9, 16144.0], [62.0, 16147.0], [62.1, 16147.0], [62.2, 16147.0], [62.3, 16148.0], [62.4, 16148.0], [62.5, 16148.0], [62.6, 16148.0], [62.7, 16148.0], [62.8, 16152.0], [62.9, 16152.0], [63.0, 16155.0], [63.1, 16155.0], [63.2, 16155.0], [63.3, 16155.0], [63.4, 16155.0], [63.5, 16158.0], [63.6, 16158.0], [63.7, 16158.0], [63.8, 16161.0], [63.9, 16161.0], [64.0, 16167.0], [64.1, 16167.0], [64.2, 16167.0], [64.3, 16167.0], [64.4, 16167.0], [64.5, 16167.0], [64.6, 16167.0], [64.7, 16167.0], [64.8, 16168.0], [64.9, 16168.0], [65.0, 16175.0], [65.1, 16175.0], [65.2, 16175.0], [65.3, 16176.0], [65.4, 16176.0], [65.5, 16176.0], [65.6, 16176.0], [65.7, 16176.0], [65.8, 16180.0], [65.9, 16180.0], [66.0, 16184.0], [66.1, 16184.0], [66.2, 16184.0], [66.3, 16192.0], [66.4, 16192.0], [66.5, 16192.0], [66.6, 16192.0], [66.7, 16192.0], [66.8, 16192.0], [66.9, 16192.0], [67.0, 16193.0], [67.1, 16193.0], [67.2, 16193.0], [67.3, 16194.0], [67.4, 16194.0], [67.5, 16194.0], [67.6, 16194.0], [67.7, 16194.0], [67.8, 16198.0], [67.9, 16198.0], [68.0, 16199.0], [68.1, 16199.0], [68.2, 16199.0], [68.3, 16203.0], [68.4, 16203.0], [68.5, 16226.0], [68.6, 16226.0], [68.7, 16226.0], [68.8, 16229.0], [68.9, 16229.0], [69.0, 16239.0], [69.1, 16239.0], [69.2, 16239.0], [69.3, 16242.0], [69.4, 16242.0], [69.5, 16253.0], [69.6, 16253.0], [69.7, 16253.0], [69.8, 16253.0], [69.9, 16253.0], [70.0, 16258.0], [70.1, 16258.0], [70.2, 16258.0], [70.3, 16290.0], [70.4, 16290.0], [70.5, 16294.0], [70.6, 16294.0], [70.7, 16294.0], [70.8, 16303.0], [70.9, 16303.0], [71.0, 16305.0], [71.1, 16305.0], [71.2, 16305.0], [71.3, 16307.0], [71.4, 16307.0], [71.5, 16307.0], [71.6, 16307.0], [71.7, 16307.0], [71.8, 16314.0], [71.9, 16314.0], [72.0, 16321.0], [72.1, 16321.0], [72.2, 16321.0], [72.3, 16322.0], [72.4, 16322.0], [72.5, 16323.0], [72.6, 16323.0], [72.7, 16323.0], [72.8, 16323.0], [72.9, 16323.0], [73.0, 16323.0], [73.1, 16323.0], [73.2, 16323.0], [73.3, 16323.0], [73.4, 16323.0], [73.5, 16332.0], [73.6, 16332.0], [73.7, 16332.0], [73.8, 16334.0], [73.9, 16334.0], [74.0, 16346.0], [74.1, 16346.0], [74.2, 16346.0], [74.3, 16346.0], [74.4, 16346.0], [74.5, 16347.0], [74.6, 16347.0], [74.7, 16347.0], [74.8, 16348.0], [74.9, 16348.0], [75.0, 16351.0], [75.1, 16351.0], [75.2, 16351.0], [75.3, 16352.0], [75.4, 16352.0], [75.5, 16361.0], [75.6, 16361.0], [75.7, 16361.0], [75.8, 16362.0], [75.9, 16362.0], [76.0, 16368.0], [76.1, 16368.0], [76.2, 16368.0], [76.3, 16379.0], [76.4, 16379.0], [76.5, 16380.0], [76.6, 16380.0], [76.7, 16380.0], [76.8, 16383.0], [76.9, 16383.0], [77.0, 16387.0], [77.1, 16387.0], [77.2, 16387.0], [77.3, 16401.0], [77.4, 16401.0], [77.5, 16401.0], [77.6, 16401.0], [77.7, 16401.0], [77.8, 16405.0], [77.9, 16405.0], [78.0, 16406.0], [78.1, 16406.0], [78.2, 16406.0], [78.3, 16407.0], [78.4, 16407.0], [78.5, 16407.0], [78.6, 16407.0], [78.7, 16407.0], [78.8, 16415.0], [78.9, 16415.0], [79.0, 16415.0], [79.1, 16415.0], [79.2, 16415.0], [79.3, 16426.0], [79.4, 16426.0], [79.5, 16427.0], [79.6, 16427.0], [79.7, 16427.0], [79.8, 16430.0], [79.9, 16430.0], [80.0, 16435.0], [80.1, 16435.0], [80.2, 16435.0], [80.3, 16444.0], [80.4, 16444.0], [80.5, 16455.0], [80.6, 16455.0], [80.7, 16455.0], [80.8, 16463.0], [80.9, 16463.0], [81.0, 16464.0], [81.1, 16464.0], [81.2, 16464.0], [81.3, 16468.0], [81.4, 16468.0], [81.5, 16470.0], [81.6, 16470.0], [81.7, 16470.0], [81.8, 16481.0], [81.9, 16481.0], [82.0, 16483.0], [82.1, 16483.0], [82.2, 16483.0], [82.3, 16484.0], [82.4, 16484.0], [82.5, 16490.0], [82.6, 16490.0], [82.7, 16490.0], [82.8, 16494.0], [82.9, 16494.0], [83.0, 16502.0], [83.1, 16502.0], [83.2, 16502.0], [83.3, 16505.0], [83.4, 16505.0], [83.5, 16506.0], [83.6, 16506.0], [83.7, 16506.0], [83.8, 16508.0], [83.9, 16508.0], [84.0, 16511.0], [84.1, 16511.0], [84.2, 16511.0], [84.3, 16514.0], [84.4, 16514.0], [84.5, 16514.0], [84.6, 16514.0], [84.7, 16514.0], [84.8, 16517.0], [84.9, 16517.0], [85.0, 16519.0], [85.1, 16519.0], [85.2, 16519.0], [85.3, 16520.0], [85.4, 16520.0], [85.5, 16522.0], [85.6, 16522.0], [85.7, 16522.0], [85.8, 16531.0], [85.9, 16531.0], [86.0, 16532.0], [86.1, 16532.0], [86.2, 16532.0], [86.3, 16539.0], [86.4, 16539.0], [86.5, 16540.0], [86.6, 16540.0], [86.7, 16540.0], [86.8, 16547.0], [86.9, 16547.0], [87.0, 16550.0], [87.1, 16550.0], [87.2, 16550.0], [87.3, 16550.0], [87.4, 16550.0], [87.5, 16552.0], [87.6, 16552.0], [87.7, 16552.0], [87.8, 16556.0], [87.9, 16556.0], [88.0, 16558.0], [88.1, 16558.0], [88.2, 16558.0], [88.3, 16559.0], [88.4, 16559.0], [88.5, 16561.0], [88.6, 16561.0], [88.7, 16561.0], [88.8, 16562.0], [88.9, 16562.0], [89.0, 16568.0], [89.1, 16568.0], [89.2, 16568.0], [89.3, 16568.0], [89.4, 16568.0], [89.5, 16569.0], [89.6, 16569.0], [89.7, 16569.0], [89.8, 16576.0], [89.9, 16576.0], [90.0, 16580.0], [90.1, 16580.0], [90.2, 16580.0], [90.3, 16583.0], [90.4, 16583.0], [90.5, 16585.0], [90.6, 16585.0], [90.7, 16585.0], [90.8, 16585.0], [90.9, 16585.0], [91.0, 16588.0], [91.1, 16588.0], [91.2, 16588.0], [91.3, 16591.0], [91.4, 16591.0], [91.5, 16592.0], [91.6, 16592.0], [91.7, 16592.0], [91.8, 16593.0], [91.9, 16593.0], [92.0, 16594.0], [92.1, 16594.0], [92.2, 16594.0], [92.3, 16594.0], [92.4, 16594.0], [92.5, 16594.0], [92.6, 16594.0], [92.7, 16594.0], [92.8, 16599.0], [92.9, 16599.0], [93.0, 16601.0], [93.1, 16601.0], [93.2, 16601.0], [93.3, 16603.0], [93.4, 16603.0], [93.5, 16610.0], [93.6, 16610.0], [93.7, 16610.0], [93.8, 16616.0], [93.9, 16616.0], [94.0, 16618.0], [94.1, 16618.0], [94.2, 16618.0], [94.3, 16625.0], [94.4, 16625.0], [94.5, 16627.0], [94.6, 16627.0], [94.7, 16627.0], [94.8, 16630.0], [94.9, 16630.0], [95.0, 16633.0], [95.1, 16633.0], [95.2, 16633.0], [95.3, 16635.0], [95.4, 16635.0], [95.5, 16644.0], [95.6, 16644.0], [95.7, 16644.0], [95.8, 16652.0], [95.9, 16652.0], [96.0, 16657.0], [96.1, 16657.0], [96.2, 16657.0], [96.3, 16658.0], [96.4, 16658.0], [96.5, 16660.0], [96.6, 16660.0], [96.7, 16660.0], [96.8, 16661.0], [96.9, 16661.0], [97.0, 16664.0], [97.1, 16664.0], [97.2, 16664.0], [97.3, 16667.0], [97.4, 16667.0], [97.5, 16669.0], [97.6, 16669.0], [97.7, 16669.0], [97.8, 16672.0], [97.9, 16672.0], [98.0, 16674.0], [98.1, 16674.0], [98.2, 16674.0], [98.3, 16683.0], [98.4, 16683.0], [98.5, 16695.0], [98.6, 16695.0], [98.7, 16695.0], [98.8, 16704.0], [98.9, 16704.0], [99.0, 16725.0], [99.1, 16725.0], [99.2, 16725.0], [99.3, 16737.0], [99.4, 16737.0], [99.5, 16740.0], [99.6, 16740.0], [99.7, 16740.0], [99.8, 16756.0], [99.9, 16756.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 30418.0], [0.1, 30418.0], [0.2, 30418.0], [0.3, 30423.0], [0.4, 30423.0], [0.5, 30429.0], [0.6, 30429.0], [0.7, 30429.0], [0.8, 30434.0], [0.9, 30434.0], [1.0, 30445.0], [1.1, 30445.0], [1.2, 30445.0], [1.3, 30446.0], [1.4, 30446.0], [1.5, 30448.0], [1.6, 30448.0], [1.7, 30448.0], [1.8, 30449.0], [1.9, 30449.0], [2.0, 30449.0], [2.1, 30449.0], [2.2, 30449.0], [2.3, 30457.0], [2.4, 30457.0], [2.5, 30466.0], [2.6, 30466.0], [2.7, 30466.0], [2.8, 30469.0], [2.9, 30469.0], [3.0, 30477.0], [3.1, 30477.0], [3.2, 30477.0], [3.3, 30484.0], [3.4, 30484.0], [3.5, 30484.0], [3.6, 30484.0], [3.7, 30484.0], [3.8, 30485.0], [3.9, 30485.0], [4.0, 30486.0], [4.1, 30486.0], [4.2, 30486.0], [4.3, 30487.0], [4.4, 30487.0], [4.5, 30487.0], [4.6, 30487.0], [4.7, 30487.0], [4.8, 30489.0], [4.9, 30489.0], [5.0, 30490.0], [5.1, 30490.0], [5.2, 30490.0], [5.3, 30492.0], [5.4, 30492.0], [5.5, 30496.0], [5.6, 30496.0], [5.7, 30496.0], [5.8, 30499.0], [5.9, 30499.0], [6.0, 30502.0], [6.1, 30502.0], [6.2, 30502.0], [6.3, 30502.0], [6.4, 30502.0], [6.5, 30502.0], [6.6, 30502.0], [6.7, 30502.0], [6.8, 30514.0], [6.9, 30514.0], [7.0, 30515.0], [7.1, 30515.0], [7.2, 30515.0], [7.3, 30519.0], [7.4, 30519.0], [7.5, 30519.0], [7.6, 30519.0], [7.7, 30519.0], [7.8, 30520.0], [7.9, 30520.0], [8.0, 30522.0], [8.1, 30522.0], [8.2, 30522.0], [8.3, 30522.0], [8.4, 30522.0], [8.5, 30524.0], [8.6, 30524.0], [8.7, 30524.0], [8.8, 30539.0], [8.9, 30539.0], [9.0, 30540.0], [9.1, 30540.0], [9.2, 30540.0], [9.3, 30541.0], [9.4, 30541.0], [9.5, 30550.0], [9.6, 30550.0], [9.7, 30550.0], [9.8, 30554.0], [9.9, 30554.0], [10.0, 30555.0], [10.1, 30555.0], [10.2, 30555.0], [10.3, 30558.0], [10.4, 30558.0], [10.5, 30561.0], [10.6, 30561.0], [10.7, 30561.0], [10.8, 30567.0], [10.9, 30567.0], [11.0, 30567.0], [11.1, 30567.0], [11.2, 30567.0], [11.3, 30569.0], [11.4, 30569.0], [11.5, 30569.0], [11.6, 30569.0], [11.7, 30569.0], [11.8, 30569.0], [11.9, 30569.0], [12.0, 30569.0], [12.1, 30569.0], [12.2, 30569.0], [12.3, 30569.0], [12.4, 30569.0], [12.5, 30575.0], [12.6, 30575.0], [12.7, 30575.0], [12.8, 30575.0], [12.9, 30575.0], [13.0, 30579.0], [13.1, 30579.0], [13.2, 30579.0], [13.3, 30581.0], [13.4, 30581.0], [13.5, 30586.0], [13.6, 30586.0], [13.7, 30586.0], [13.8, 30588.0], [13.9, 30588.0], [14.0, 30590.0], [14.1, 30590.0], [14.2, 30590.0], [14.3, 30591.0], [14.4, 30591.0], [14.5, 30596.0], [14.6, 30596.0], [14.7, 30596.0], [14.8, 30597.0], [14.9, 30597.0], [15.0, 30600.0], [15.1, 30600.0], [15.2, 30600.0], [15.3, 30600.0], [15.4, 30600.0], [15.5, 30603.0], [15.6, 30603.0], [15.7, 30603.0], [15.8, 30607.0], [15.9, 30607.0], [16.0, 30615.0], [16.1, 30615.0], [16.2, 30615.0], [16.3, 30617.0], [16.4, 30617.0], [16.5, 30618.0], [16.6, 30618.0], [16.7, 30618.0], [16.8, 30619.0], [16.9, 30619.0], [17.0, 30622.0], [17.1, 30622.0], [17.2, 30622.0], [17.3, 30622.0], [17.4, 30622.0], [17.5, 30623.0], [17.6, 30623.0], [17.7, 30623.0], [17.8, 30634.0], [17.9, 30634.0], [18.0, 30639.0], [18.1, 30639.0], [18.2, 30639.0], [18.3, 30642.0], [18.4, 30642.0], [18.5, 30642.0], [18.6, 30642.0], [18.7, 30642.0], [18.8, 30643.0], [18.9, 30643.0], [19.0, 30646.0], [19.1, 30646.0], [19.2, 30646.0], [19.3, 30649.0], [19.4, 30649.0], [19.5, 30652.0], [19.6, 30652.0], [19.7, 30652.0], [19.8, 30652.0], [19.9, 30652.0], [20.0, 30654.0], [20.1, 30654.0], [20.2, 30654.0], [20.3, 30655.0], [20.4, 30655.0], [20.5, 30655.0], [20.6, 30655.0], [20.7, 30655.0], [20.8, 30658.0], [20.9, 30658.0], [21.0, 30677.0], [21.1, 30677.0], [21.2, 30677.0], [21.3, 30682.0], [21.4, 30682.0], [21.5, 30688.0], [21.6, 30688.0], [21.7, 30688.0], [21.8, 30688.0], [21.9, 30688.0], [22.0, 30688.0], [22.1, 30688.0], [22.2, 30688.0], [22.3, 30701.0], [22.4, 30701.0], [22.5, 30703.0], [22.6, 30703.0], [22.7, 30703.0], [22.8, 30705.0], [22.9, 30705.0], [23.0, 30705.0], [23.1, 30705.0], [23.2, 30705.0], [23.3, 30709.0], [23.4, 30709.0], [23.5, 30711.0], [23.6, 30711.0], [23.7, 30711.0], [23.8, 30714.0], [23.9, 30714.0], [24.0, 30720.0], [24.1, 30720.0], [24.2, 30720.0], [24.3, 30720.0], [24.4, 30720.0], [24.5, 30721.0], [24.6, 30721.0], [24.7, 30721.0], [24.8, 30726.0], [24.9, 30726.0], [25.0, 30729.0], [25.1, 30729.0], [25.2, 30729.0], [25.3, 30732.0], [25.4, 30732.0], [25.5, 30739.0], [25.6, 30739.0], [25.7, 30739.0], [25.8, 30748.0], [25.9, 30748.0], [26.0, 30753.0], [26.1, 30753.0], [26.2, 30753.0], [26.3, 30756.0], [26.4, 30756.0], [26.5, 30760.0], [26.6, 30760.0], [26.7, 30760.0], [26.8, 30763.0], [26.9, 30763.0], [27.0, 30763.0], [27.1, 30763.0], [27.2, 30763.0], [27.3, 30765.0], [27.4, 30765.0], [27.5, 30768.0], [27.6, 30768.0], [27.7, 30768.0], [27.8, 30771.0], [27.9, 30771.0], [28.0, 30774.0], [28.1, 30774.0], [28.2, 30774.0], [28.3, 30777.0], [28.4, 30777.0], [28.5, 30777.0], [28.6, 30777.0], [28.7, 30777.0], [28.8, 30782.0], [28.9, 30782.0], [29.0, 30783.0], [29.1, 30783.0], [29.2, 30783.0], [29.3, 30786.0], [29.4, 30786.0], [29.5, 30789.0], [29.6, 30789.0], [29.7, 30789.0], [29.8, 30789.0], [29.9, 30789.0], [30.0, 30793.0], [30.1, 30793.0], [30.2, 30793.0], [30.3, 30798.0], [30.4, 30798.0], [30.5, 30800.0], [30.6, 30800.0], [30.7, 30800.0], [30.8, 30800.0], [30.9, 30800.0], [31.0, 30802.0], [31.1, 30802.0], [31.2, 30802.0], [31.3, 30804.0], [31.4, 30804.0], [31.5, 30804.0], [31.6, 30804.0], [31.7, 30804.0], [31.8, 30804.0], [31.9, 30804.0], [32.0, 30810.0], [32.1, 30810.0], [32.2, 30810.0], [32.3, 30811.0], [32.4, 30811.0], [32.5, 30815.0], [32.6, 30815.0], [32.7, 30815.0], [32.8, 30816.0], [32.9, 30816.0], [33.0, 30822.0], [33.1, 30822.0], [33.2, 30822.0], [33.3, 30828.0], [33.4, 30828.0], [33.5, 30837.0], [33.6, 30837.0], [33.7, 30837.0], [33.8, 30840.0], [33.9, 30840.0], [34.0, 30847.0], [34.1, 30847.0], [34.2, 30847.0], [34.3, 30849.0], [34.4, 30849.0], [34.5, 30849.0], [34.6, 30849.0], [34.7, 30849.0], [34.8, 30852.0], [34.9, 30852.0], [35.0, 30858.0], [35.1, 30858.0], [35.2, 30858.0], [35.3, 30861.0], [35.4, 30861.0], [35.5, 30861.0], [35.6, 30861.0], [35.7, 30861.0], [35.8, 30863.0], [35.9, 30863.0], [36.0, 30863.0], [36.1, 30863.0], [36.2, 30863.0], [36.3, 30864.0], [36.4, 30864.0], [36.5, 30867.0], [36.6, 30867.0], [36.7, 30867.0], [36.8, 30867.0], [36.9, 30867.0], [37.0, 30868.0], [37.1, 30868.0], [37.2, 30868.0], [37.3, 30870.0], [37.4, 30870.0], [37.5, 30873.0], [37.6, 30873.0], [37.7, 30873.0], [37.8, 30877.0], [37.9, 30877.0], [38.0, 30878.0], [38.1, 30878.0], [38.2, 30878.0], [38.3, 30882.0], [38.4, 30882.0], [38.5, 30890.0], [38.6, 30890.0], [38.7, 30890.0], [38.8, 30893.0], [38.9, 30893.0], [39.0, 30894.0], [39.1, 30894.0], [39.2, 30894.0], [39.3, 30900.0], [39.4, 30900.0], [39.5, 30900.0], [39.6, 30900.0], [39.7, 30900.0], [39.8, 30902.0], [39.9, 30902.0], [40.0, 30903.0], [40.1, 30903.0], [40.2, 30903.0], [40.3, 30906.0], [40.4, 30906.0], [40.5, 30909.0], [40.6, 30909.0], [40.7, 30909.0], [40.8, 30909.0], [40.9, 30909.0], [41.0, 30909.0], [41.1, 30909.0], [41.2, 30909.0], [41.3, 30912.0], [41.4, 30912.0], [41.5, 30918.0], [41.6, 30918.0], [41.7, 30918.0], [41.8, 30922.0], [41.9, 30922.0], [42.0, 30924.0], [42.1, 30924.0], [42.2, 30924.0], [42.3, 30936.0], [42.4, 30936.0], [42.5, 30939.0], [42.6, 30939.0], [42.7, 30939.0], [42.8, 30940.0], [42.9, 30940.0], [43.0, 30940.0], [43.1, 30940.0], [43.2, 30940.0], [43.3, 30940.0], [43.4, 30940.0], [43.5, 30940.0], [43.6, 30940.0], [43.7, 30940.0], [43.8, 30946.0], [43.9, 30946.0], [44.0, 30949.0], [44.1, 30949.0], [44.2, 30949.0], [44.3, 30952.0], [44.4, 30952.0], [44.5, 30952.0], [44.6, 30952.0], [44.7, 30952.0], [44.8, 30955.0], [44.9, 30955.0], [45.0, 30955.0], [45.1, 30955.0], [45.2, 30955.0], [45.3, 30958.0], [45.4, 30958.0], [45.5, 30961.0], [45.6, 30961.0], [45.7, 30961.0], [45.8, 30964.0], [45.9, 30964.0], [46.0, 30967.0], [46.1, 30967.0], [46.2, 30967.0], [46.3, 30967.0], [46.4, 30967.0], [46.5, 30970.0], [46.6, 30970.0], [46.7, 30970.0], [46.8, 30973.0], [46.9, 30973.0], [47.0, 30976.0], [47.1, 30976.0], [47.2, 30976.0], [47.3, 30979.0], [47.4, 30979.0], [47.5, 30981.0], [47.6, 30981.0], [47.7, 30981.0], [47.8, 30985.0], [47.9, 30985.0], [48.0, 30985.0], [48.1, 30985.0], [48.2, 30985.0], [48.3, 30985.0], [48.4, 30985.0], [48.5, 30988.0], [48.6, 30988.0], [48.7, 30988.0], [48.8, 30988.0], [48.9, 30988.0], [49.0, 30991.0], [49.1, 30991.0], [49.2, 30991.0], [49.3, 30996.0], [49.4, 30996.0], [49.5, 31000.0], [49.6, 31000.0], [49.7, 31000.0], [49.8, 31002.0], [49.9, 31002.0], [50.0, 31009.0], [50.1, 31009.0], [50.2, 31009.0], [50.3, 31030.0], [50.4, 31030.0], [50.5, 31030.0], [50.6, 31030.0], [50.7, 31030.0], [50.8, 31030.0], [50.9, 31030.0], [51.0, 31033.0], [51.1, 31033.0], [51.2, 31033.0], [51.3, 31039.0], [51.4, 31039.0], [51.5, 31039.0], [51.6, 31039.0], [51.7, 31039.0], [51.8, 31045.0], [51.9, 31045.0], [52.0, 31045.0], [52.1, 31045.0], [52.2, 31045.0], [52.3, 31051.0], [52.4, 31051.0], [52.5, 31053.0], [52.6, 31053.0], [52.7, 31053.0], [52.8, 31060.0], [52.9, 31060.0], [53.0, 31067.0], [53.1, 31067.0], [53.2, 31067.0], [53.3, 31067.0], [53.4, 31067.0], [53.5, 31068.0], [53.6, 31068.0], [53.7, 31068.0], [53.8, 31069.0], [53.9, 31069.0], [54.0, 31072.0], [54.1, 31072.0], [54.2, 31072.0], [54.3, 31078.0], [54.4, 31078.0], [54.5, 31078.0], [54.6, 31078.0], [54.7, 31078.0], [54.8, 31085.0], [54.9, 31085.0], [55.0, 31090.0], [55.1, 31090.0], [55.2, 31090.0], [55.3, 31093.0], [55.4, 31093.0], [55.5, 31099.0], [55.6, 31099.0], [55.7, 31099.0], [55.8, 31102.0], [55.9, 31102.0], [56.0, 31102.0], [56.1, 31102.0], [56.2, 31102.0], [56.3, 31102.0], [56.4, 31102.0], [56.5, 31105.0], [56.6, 31105.0], [56.7, 31105.0], [56.8, 31105.0], [56.9, 31105.0], [57.0, 31107.0], [57.1, 31107.0], [57.2, 31107.0], [57.3, 31108.0], [57.4, 31108.0], [57.5, 31108.0], [57.6, 31108.0], [57.7, 31108.0], [57.8, 31111.0], [57.9, 31111.0], [58.0, 31111.0], [58.1, 31111.0], [58.2, 31111.0], [58.3, 31114.0], [58.4, 31114.0], [58.5, 31114.0], [58.6, 31114.0], [58.7, 31114.0], [58.8, 31116.0], [58.9, 31116.0], [59.0, 31117.0], [59.1, 31117.0], [59.2, 31117.0], [59.3, 31120.0], [59.4, 31120.0], [59.5, 31126.0], [59.6, 31126.0], [59.7, 31126.0], [59.8, 31132.0], [59.9, 31132.0], [60.0, 31135.0], [60.1, 31135.0], [60.2, 31135.0], [60.3, 31136.0], [60.4, 31136.0], [60.5, 31141.0], [60.6, 31141.0], [60.7, 31141.0], [60.8, 31143.0], [60.9, 31143.0], [61.0, 31144.0], [61.1, 31144.0], [61.2, 31144.0], [61.3, 31144.0], [61.4, 31144.0], [61.5, 31156.0], [61.6, 31156.0], [61.7, 31156.0], [61.8, 31168.0], [61.9, 31168.0], [62.0, 31175.0], [62.1, 31175.0], [62.2, 31175.0], [62.3, 31175.0], [62.4, 31175.0], [62.5, 31177.0], [62.6, 31177.0], [62.7, 31177.0], [62.8, 31183.0], [62.9, 31183.0], [63.0, 31183.0], [63.1, 31183.0], [63.2, 31183.0], [63.3, 31186.0], [63.4, 31186.0], [63.5, 31186.0], [63.6, 31186.0], [63.7, 31186.0], [63.8, 31186.0], [63.9, 31186.0], [64.0, 31189.0], [64.1, 31189.0], [64.2, 31189.0], [64.3, 31189.0], [64.4, 31189.0], [64.5, 31195.0], [64.6, 31195.0], [64.7, 31195.0], [64.8, 31195.0], [64.9, 31195.0], [65.0, 31196.0], [65.1, 31196.0], [65.2, 31196.0], [65.3, 31198.0], [65.4, 31198.0], [65.5, 31207.0], [65.6, 31207.0], [65.7, 31207.0], [65.8, 31207.0], [65.9, 31207.0], [66.0, 31208.0], [66.1, 31208.0], [66.2, 31208.0], [66.3, 31211.0], [66.4, 31211.0], [66.5, 31213.0], [66.6, 31213.0], [66.7, 31213.0], [66.8, 31215.0], [66.9, 31215.0], [67.0, 31216.0], [67.1, 31216.0], [67.2, 31216.0], [67.3, 31219.0], [67.4, 31219.0], [67.5, 31224.0], [67.6, 31224.0], [67.7, 31224.0], [67.8, 31225.0], [67.9, 31225.0], [68.0, 31228.0], [68.1, 31228.0], [68.2, 31228.0], [68.3, 31231.0], [68.4, 31231.0], [68.5, 31231.0], [68.6, 31231.0], [68.7, 31231.0], [68.8, 31237.0], [68.9, 31237.0], [69.0, 31237.0], [69.1, 31237.0], [69.2, 31237.0], [69.3, 31239.0], [69.4, 31239.0], [69.5, 31243.0], [69.6, 31243.0], [69.7, 31243.0], [69.8, 31243.0], [69.9, 31243.0], [70.0, 31246.0], [70.1, 31246.0], [70.2, 31246.0], [70.3, 31249.0], [70.4, 31249.0], [70.5, 31249.0], [70.6, 31249.0], [70.7, 31249.0], [70.8, 31257.0], [70.9, 31257.0], [71.0, 31261.0], [71.1, 31261.0], [71.2, 31261.0], [71.3, 31261.0], [71.4, 31261.0], [71.5, 31264.0], [71.6, 31264.0], [71.7, 31264.0], [71.8, 31267.0], [71.9, 31267.0], [72.0, 31270.0], [72.1, 31270.0], [72.2, 31270.0], [72.3, 31270.0], [72.4, 31270.0], [72.5, 31273.0], [72.6, 31273.0], [72.7, 31273.0], [72.8, 31277.0], [72.9, 31277.0], [73.0, 31279.0], [73.1, 31279.0], [73.2, 31279.0], [73.3, 31280.0], [73.4, 31280.0], [73.5, 31283.0], [73.6, 31283.0], [73.7, 31283.0], [73.8, 31283.0], [73.9, 31283.0], [74.0, 31289.0], [74.1, 31289.0], [74.2, 31289.0], [74.3, 31297.0], [74.4, 31297.0], [74.5, 31297.0], [74.6, 31297.0], [74.7, 31297.0], [74.8, 31298.0], [74.9, 31298.0], [75.0, 31300.0], [75.1, 31300.0], [75.2, 31300.0], [75.3, 31303.0], [75.4, 31303.0], [75.5, 31306.0], [75.6, 31306.0], [75.7, 31306.0], [75.8, 31313.0], [75.9, 31313.0], [76.0, 31313.0], [76.1, 31313.0], [76.2, 31313.0], [76.3, 31314.0], [76.4, 31314.0], [76.5, 31315.0], [76.6, 31315.0], [76.7, 31315.0], [76.8, 31316.0], [76.9, 31316.0], [77.0, 31321.0], [77.1, 31321.0], [77.2, 31321.0], [77.3, 31324.0], [77.4, 31324.0], [77.5, 31324.0], [77.6, 31324.0], [77.7, 31324.0], [77.8, 31329.0], [77.9, 31329.0], [78.0, 31342.0], [78.1, 31342.0], [78.2, 31342.0], [78.3, 31342.0], [78.4, 31342.0], [78.5, 31345.0], [78.6, 31345.0], [78.7, 31345.0], [78.8, 31357.0], [78.9, 31357.0], [79.0, 31360.0], [79.1, 31360.0], [79.2, 31360.0], [79.3, 31364.0], [79.4, 31364.0], [79.5, 31366.0], [79.6, 31366.0], [79.7, 31366.0], [79.8, 31366.0], [79.9, 31366.0], [80.0, 31366.0], [80.1, 31366.0], [80.2, 31366.0], [80.3, 31369.0], [80.4, 31369.0], [80.5, 31369.0], [80.6, 31369.0], [80.7, 31369.0], [80.8, 31372.0], [80.9, 31372.0], [81.0, 31375.0], [81.1, 31375.0], [81.2, 31375.0], [81.3, 31378.0], [81.4, 31378.0], [81.5, 31378.0], [81.6, 31378.0], [81.7, 31378.0], [81.8, 31381.0], [81.9, 31381.0], [82.0, 31384.0], [82.1, 31384.0], [82.2, 31384.0], [82.3, 31393.0], [82.4, 31393.0], [82.5, 31396.0], [82.6, 31396.0], [82.7, 31396.0], [82.8, 31402.0], [82.9, 31402.0], [83.0, 31403.0], [83.1, 31403.0], [83.2, 31403.0], [83.3, 31414.0], [83.4, 31414.0], [83.5, 31414.0], [83.6, 31414.0], [83.7, 31414.0], [83.8, 31420.0], [83.9, 31420.0], [84.0, 31421.0], [84.1, 31421.0], [84.2, 31421.0], [84.3, 31423.0], [84.4, 31423.0], [84.5, 31426.0], [84.6, 31426.0], [84.7, 31426.0], [84.8, 31432.0], [84.9, 31432.0], [85.0, 31435.0], [85.1, 31435.0], [85.2, 31435.0], [85.3, 31438.0], [85.4, 31438.0], [85.5, 31438.0], [85.6, 31438.0], [85.7, 31438.0], [85.8, 31440.0], [85.9, 31440.0], [86.0, 31441.0], [86.1, 31441.0], [86.2, 31441.0], [86.3, 31442.0], [86.4, 31442.0], [86.5, 31444.0], [86.6, 31444.0], [86.7, 31444.0], [86.8, 31447.0], [86.9, 31447.0], [87.0, 31447.0], [87.1, 31447.0], [87.2, 31447.0], [87.3, 31450.0], [87.4, 31450.0], [87.5, 31453.0], [87.6, 31453.0], [87.7, 31453.0], [87.8, 31453.0], [87.9, 31453.0], [88.0, 31456.0], [88.1, 31456.0], [88.2, 31456.0], [88.3, 31459.0], [88.4, 31459.0], [88.5, 31460.0], [88.6, 31460.0], [88.7, 31460.0], [88.8, 31463.0], [88.9, 31463.0], [89.0, 31468.0], [89.1, 31468.0], [89.2, 31468.0], [89.3, 31471.0], [89.4, 31471.0], [89.5, 31474.0], [89.6, 31474.0], [89.7, 31474.0], [89.8, 31474.0], [89.9, 31474.0], [90.0, 31480.0], [90.1, 31480.0], [90.2, 31480.0], [90.3, 31480.0], [90.4, 31480.0], [90.5, 31482.0], [90.6, 31482.0], [90.7, 31482.0], [90.8, 31488.0], [90.9, 31488.0], [91.0, 31495.0], [91.1, 31495.0], [91.2, 31495.0], [91.3, 31496.0], [91.4, 31496.0], [91.5, 31497.0], [91.6, 31497.0], [91.7, 31497.0], [91.8, 31500.0], [91.9, 31500.0], [92.0, 31500.0], [92.1, 31500.0], [92.2, 31500.0], [92.3, 31503.0], [92.4, 31503.0], [92.5, 31507.0], [92.6, 31507.0], [92.7, 31507.0], [92.8, 31508.0], [92.9, 31508.0], [93.0, 31515.0], [93.1, 31515.0], [93.2, 31515.0], [93.3, 31521.0], [93.4, 31521.0], [93.5, 31521.0], [93.6, 31521.0], [93.7, 31521.0], [93.8, 31524.0], [93.9, 31524.0], [94.0, 31524.0], [94.1, 31524.0], [94.2, 31524.0], [94.3, 31530.0], [94.4, 31530.0], [94.5, 31536.0], [94.6, 31536.0], [94.7, 31536.0], [94.8, 31542.0], [94.9, 31542.0], [95.0, 31542.0], [95.1, 31542.0], [95.2, 31542.0], [95.3, 31543.0], [95.4, 31543.0], [95.5, 31545.0], [95.6, 31545.0], [95.7, 31545.0], [95.8, 31551.0], [95.9, 31551.0], [96.0, 31555.0], [96.1, 31555.0], [96.2, 31555.0], [96.3, 31561.0], [96.4, 31561.0], [96.5, 31563.0], [96.6, 31563.0], [96.7, 31563.0], [96.8, 31563.0], [96.9, 31563.0], [97.0, 31566.0], [97.1, 31566.0], [97.2, 31566.0], [97.3, 31567.0], [97.4, 31567.0], [97.5, 31572.0], [97.6, 31572.0], [97.7, 31572.0], [97.8, 31573.0], [97.9, 31573.0], [98.0, 31575.0], [98.1, 31575.0], [98.2, 31575.0], [98.3, 31578.0], [98.4, 31578.0], [98.5, 31578.0], [98.6, 31578.0], [98.7, 31578.0], [98.8, 31585.0], [98.9, 31585.0], [99.0, 31597.0], [99.1, 31597.0], [99.2, 31597.0], [99.3, 31599.0], [99.4, 31599.0], [99.5, 31600.0], [99.6, 31600.0], [99.7, 31600.0], [99.8, 31603.0], [99.9, 31603.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 7667.0, "series": [{"data": [[0.0, 3729.0], [2100.0, 2.0], [2200.0, 6.0], [3000.0, 50.0], [3100.0, 1.0], [200.0, 7667.0], [3200.0, 14.0], [15000.0, 142.0], [15100.0, 125.0], [1000.0, 61.0], [1100.0, 417.0], [1200.0, 333.0], [300.0, 645.0], [1300.0, 201.0], [21000.0, 82.0], [1400.0, 17.0], [100.0, 5182.0], [400.0, 607.0], [7000.0, 331.0], [7100.0, 269.0], [500.0, 119.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[15700.0, 37.0], [15500.0, 34.0], [15600.0, 33.0], [15400.0, 5.0], [15800.0, 32.0], [16000.0, 38.0], [15900.0, 53.0], [16200.0, 10.0], [16300.0, 26.0], [16100.0, 41.0], [16500.0, 40.0], [16400.0, 23.0], [16600.0, 23.0], [16700.0, 5.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[30400.0, 24.0], [30700.0, 33.0], [30500.0, 36.0], [30600.0, 29.0], [31500.0, 31.0], [31400.0, 36.0], [31300.0, 31.0], [30900.0, 41.0], [31000.0, 25.0], [31100.0, 39.0], [30800.0, 35.0], [31200.0, 38.0], [31600.0, 2.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 82.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 14153.0, "series": [{"data": [[0.0, 3796.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 14153.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 2769.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [[3.0, 82.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 225.51000000000013, "minX": 1.61758164E12, "maxY": 379.98448702101507, "series": [{"data": [[1.61758164E12, 225.51000000000013]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61758164E12, 379.98448702101507], [1.6175817E12, 229.30183246073247]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.6175817E12, 241.99999999999986]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175817E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 31521.0, "series": [{"data": [[2.0, 28.0], [3.0, 30.25], [4.0, 27.8], [5.0, 27.0], [6.0, 27.5], [7.0, 28.0], [8.0, 28.4], [9.0, 30.5], [10.0, 28.75], [11.0, 28.0], [12.0, 27.333333333333332], [13.0, 27.5], [14.0, 27.833333333333336], [15.0, 27.0], [16.0, 27.666666666666668], [17.0, 27.333333333333332], [18.0, 27.25], [19.0, 27.25], [20.0, 27.0], [21.0, 27.666666666666668], [22.0, 27.5], [23.0, 27.900000000000002], [24.0, 28.333333333333332], [25.0, 28.75], [26.0, 28.2], [27.0, 28.333333333333332], [28.0, 31.25], [29.0, 35.6], [30.0, 37.375], [31.0, 39.0], [33.0, 37.0], [32.0, 38.2], [35.0, 49.0], [34.0, 38.666666666666664], [37.0, 48.0], [36.0, 48.333333333333336], [39.0, 50.5], [38.0, 49.0], [41.0, 48.0], [40.0, 44.0], [43.0, 47.25], [42.0, 47.5], [45.0, 46.0], [44.0, 47.333333333333336], [47.0, 54.81818181818182], [46.0, 51.0], [49.0, 49.0], [48.0, 58.83333333333333], [51.0, 51.5], [50.0, 49.0], [53.0, 51.5], [52.0, 53.0], [55.0, 49.0], [54.0, 49.42857142857142], [57.0, 61.33333333333333], [56.0, 53.888888888888886], [59.0, 62.09090909090909], [58.0, 64.0], [61.0, 58.0], [60.0, 62.0], [63.0, 60.0], [62.0, 60.0], [67.0, 62.75], [66.0, 73.33333333333333], [65.0, 66.0], [64.0, 60.5], [71.0, 78.0], [70.0, 78.5], [69.0, 76.04347826086958], [68.0, 88.0], [75.0, 78.0], [74.0, 76.0], [73.0, 75.0], [72.0, 75.0], [79.0, 89.78571428571429], [78.0, 83.22222222222223], [77.0, 81.33333333333333], [76.0, 80.88888888888889], [83.0, 89.0], [82.0, 91.5], [81.0, 93.0], [80.0, 88.77777777777777], [87.0, 89.0], [86.0, 89.5], [85.0, 88.0], [84.0, 92.0], [91.0, 100.0], [90.0, 97.58333333333333], [89.0, 95.33333333333333], [88.0, 95.8], [95.0, 96.8], [94.0, 99.00000000000001], [93.0, 101.2], [92.0, 100.0], [99.0, 95.0], [98.0, 95.0], [97.0, 95.0], [96.0, 97.39999999999999], [103.0, 93.75], [102.0, 96.5], [101.0, 97.0], [100.0, 96.5], [107.0, 113.0], [106.0, 106.125], [105.0, 103.25], [104.0, 98.39999999999999], [111.0, 101.5], [110.0, 103.72727272727272], [109.0, 106.25], [108.0, 107.0], [115.0, 99.0], [114.0, 102.0], [113.0, 98.47826086956525], [112.0, 100.33333333333333], [119.0, 110.0], [118.0, 101.56250000000001], [117.0, 97.0], [116.0, 100.0], [123.0, 122.0], [122.0, 123.0], [121.0, 124.0], [120.0, 117.25], [127.0, 111.0], [126.0, 115.0], [125.0, 112.61538461538461], [124.0, 117.18181818181817], [135.0, 126.29999999999998], [134.0, 130.22222222222223], [133.0, 130.54545454545456], [132.0, 128.33333333333334], [131.0, 129.0], [130.0, 121.2], [129.0, 114.05882352941177], [128.0, 111.0], [143.0, 128.0], [142.0, 128.8], [141.0, 130.33333333333334], [140.0, 129.0], [139.0, 129.0], [138.0, 127.33333333333336], [137.0, 123.57142857142858], [136.0, 125.71428571428571], [151.0, 125.4], [150.0, 124.41176470588235], [149.0, 128.0], [148.0, 129.5], [147.0, 125.0], [146.0, 128.0], [145.0, 129.45000000000005], [144.0, 127.0], [159.0, 126.88888888888889], [158.0, 126.49999999999999], [157.0, 125.8], [156.0, 125.0], [155.0, 127.0], [154.0, 127.16666666666666], [153.0, 127.0], [152.0, 126.31578947368422], [167.0, 132.0], [166.0, 132.0], [165.0, 129.0], [164.0, 131.2142857142857], [163.0, 130.83333333333331], [162.0, 130.00000000000003], [161.0, 128.0], [160.0, 126.58333333333333], [175.0, 137.06666666666663], [174.0, 137.74999999999997], [173.0, 135.0], [172.0, 136.125], [171.0, 134.11764705882356], [170.0, 132.0], [169.0, 132.0], [168.0, 132.0], [183.0, 137.0], [182.0, 139.625], [181.0, 141.5], [180.0, 140.33333333333331], [179.0, 140.28571428571428], [178.0, 139.61111111111111], [177.0, 135.77777777777774], [176.0, 136.4], [191.0, 143.15625], [190.0, 138.0], [189.0, 142.0], [188.0, 138.66666666666666], [187.0, 140.33333333333331], [186.0, 141.43478260869566], [185.0, 139.0], [184.0, 136.22222222222223], [199.0, 150.68750000000003], [198.0, 145.45454545454544], [197.0, 145.20000000000002], [196.0, 145.375], [195.0, 145.44736842105266], [194.0, 142.64285714285717], [193.0, 145.44444444444446], [192.0, 145.57142857142858], [207.0, 172.55882352941182], [206.0, 164.3684210526316], [205.0, 167.33333333333334], [204.0, 164.88888888888889], [203.0, 158.1764705882353], [202.0, 155.5], [201.0, 157.0], [200.0, 157.45454545454547], [215.0, 168.83333333333334], [214.0, 170.0], [213.0, 169.55555555555554], [212.0, 170.0], [211.0, 172.2], [210.0, 178.18181818181822], [209.0, 179.58333333333334], [208.0, 179.0], [223.0, 168.06976744186048], [222.0, 175.72413793103453], [221.0, 170.5], [220.0, 169.25], [219.0, 171.5], [218.0, 169.42857142857144], [217.0, 169.33333333333334], [216.0, 168.75], [231.0, 160.0], [230.0, 158.0], [229.0, 156.65000000000003], [228.0, 154.10000000000002], [227.0, 152.89999999999998], [226.0, 155.76923076923077], [225.0, 159.25], [224.0, 160.71428571428572], [239.0, 149.33333333333334], [238.0, 154.21428571428572], [237.0, 155.5], [236.0, 159.74626865671635], [235.0, 161.5151515151515], [234.0, 165.34285714285716], [233.0, 165.82352941176464], [232.0, 160.23076923076923], [247.0, 121.53846153846155], [246.0, 123.66666666666667], [245.0, 7374.518518518518], [244.0, 145.0], [243.0, 148.22222222222226], [242.0, 155.9387755102041], [241.0, 149.0], [240.0, 148.2272727272727], [255.0, 98.78571428571428], [254.0, 3124.971428571429], [253.0, 10405.631578947368], [252.0, 5758.0], [251.0, 12138.8], [250.0, 7628.923076923077], [249.0, 8235.972972972975], [248.0, 718.7599999999999], [270.0, 36.0], [271.0, 28.333333333333332], [269.0, 30.0], [268.0, 27.0], [267.0, 12117.826086956522], [266.0, 2404.5789473684213], [265.0, 13846.162162162158], [264.0, 11229.302325581399], [263.0, 2556.8333333333335], [257.0, 8644.08602150538], [256.0, 82.60869565217392], [259.0, 57.5], [258.0, 73.88235294117646], [262.0, 47.5], [261.0, 11516.763157894738], [260.0, 9074.4], [286.0, 27.5], [287.0, 28.357142857142854], [285.0, 29.0], [284.0, 28.0], [283.0, 28.166666666666668], [282.0, 30.0], [281.0, 29.0], [280.0, 28.5], [279.0, 29.818181818181817], [273.0, 29.0], [272.0, 27.000000000000004], [275.0, 28.0], [274.0, 28.666666666666668], [278.0, 27.0], [277.0, 27.0], [276.0, 32.0], [302.0, 28.5], [303.0, 32.00000000000001], [301.0, 30.333333333333332], [300.0, 29.5], [299.0, 29.0], [298.0, 27.5], [297.0, 28.0], [296.0, 29.25], [295.0, 30.0], [289.0, 27.333333333333332], [288.0, 31.0], [291.0, 28.0], [290.0, 28.5], [294.0, 31.666666666666668], [293.0, 29.333333333333332], [292.0, 27.666666666666668], [318.0, 28.0], [319.0, 28.0], [317.0, 3043.6000000000004], [316.0, 3043.6666666666665], [315.0, 3046.8], [314.0, 2570.421052631579], [313.0, 29.25], [312.0, 2294.0], [311.0, 2161.588235294118], [305.0, 33.666666666666664], [304.0, 28.833333333333336], [307.0, 31.166666666666668], [306.0, 34.0], [310.0, 533.1666666666666], [309.0, 30.0], [308.0, 31.5], [334.0, 45.888888888888886], [335.0, 44.5], [333.0, 43.70588235294118], [332.0, 41.3], [331.0, 41.6], [330.0, 40.75], [329.0, 41.222222222222214], [328.0, 40.8095238095238], [327.0, 910.7619047619048], [321.0, 27.0], [320.0, 28.0], [323.0, 27.0], [322.0, 27.700000000000003], [326.0, 456.2], [325.0, 29.275], [324.0, 27.714285714285715], [349.0, 17179.857142857145], [348.0, 5656.535714285714], [339.0, 43.84210526315789], [338.0, 42.84615384615385], [337.0, 43.1219512195122], [336.0, 43.18181818181819], [347.0, 31.4], [346.0, 1952.4951140065143], [345.0, 51.333333333333336], [344.0, 52.57142857142858], [343.0, 45.0], [342.0, 45.375], [341.0, 43.99999999999999], [340.0, 44.62499999999999], [764.0, 5923.506329113923], [767.0, 3576.5748031496064], [753.0, 204.4], [752.0, 214.0], [755.0, 222.47058823529414], [754.0, 214.42201834862385], [757.0, 285.5], [756.0, 250.0], [766.0, 1606.8266666666664], [765.0, 132.13333333333335], [763.0, 142.41666666666669], [762.0, 145.69230769230765], [761.0, 161.4029850746269], [760.0, 208.19008264462812], [751.0, 214.0], [750.0, 213.5681818181817], [749.0, 202.5119047619048], [759.0, 252.5064935064935], [758.0, 288.90756302521015], [796.0, 245.06309148264975], [799.0, 285.4420131291025], [785.0, 27.333333333333332], [784.0, 28.157894736842103], [787.0, 27.88888888888889], [786.0, 28.272727272727273], [789.0, 28.5], [788.0, 28.439999999999994], [798.0, 258.1439024390241], [797.0, 241.46428571428572], [795.0, 495.8596491228071], [794.0, 577.071874999999], [793.0, 28.70560747663551], [792.0, 28.666666666666668], [783.0, 27.25], [769.0, 4369.438461538461], [768.0, 1974.954545454545], [771.0, 4162.624390243902], [770.0, 3396.477178423238], [773.0, 4884.062500000001], [772.0, 568.0238095238094], [775.0, 863.5294117647061], [774.0, 3376.5959595959594], [782.0, 27.666666666666668], [781.0, 27.25], [780.0, 28.0], [779.0, 27.90909090909091], [778.0, 4568.2941176470595], [777.0, 2900.909090909091], [776.0, 3790.9999999999986], [791.0, 28.0], [790.0, 28.5], [829.0, 56.6], [831.0, 29.0], [828.0, 245.83333333333334], [813.0, 245.79166666666666], [812.0, 247.0], [811.0, 247.0], [801.0, 246.57692307692307], [800.0, 305.62962962962956], [838.0, 29.333333333333332], [844.0, 28.0], [832.0, 29.0], [833.0, 37.0], [835.0, 28.0], [839.0, 29.375], [857.0, 29.0], [858.0, 72.4], [859.0, 30.0], [860.0, 30.0], [861.0, 27.0], [862.0, 29.0], [863.0, 46.5], [840.0, 31.0], [841.0, 27.5], [842.0, 53.0], [847.0, 39.8], [848.0, 29.0], [849.0, 30.0], [850.0, 30.5], [851.0, 29.0], [852.0, 27.5], [853.0, 61.55555555555556], [854.0, 28.0], [855.0, 29.0], [870.0, 85.25], [865.0, 30.0], [864.0, 30.5], [877.0, 40.666666666666664], [876.0, 245.0], [879.0, 44.0], [874.0, 57.43749999999999], [875.0, 36.0], [866.0, 30.0], [867.0, 102.0], [868.0, 66.75], [871.0, 83.25], [888.0, 45.5], [889.0, 50.333333333333336], [890.0, 51.333333333333336], [891.0, 218.14285714285717], [892.0, 56.25], [893.0, 57.2], [894.0, 57.4], [895.0, 53.333333333333336], [880.0, 40.8], [881.0, 41.333333333333336], [882.0, 41.25], [883.0, 38.666666666666664], [884.0, 38.0], [886.0, 41.5], [887.0, 46.6], [872.0, 95.43749999999999], [873.0, 66.35714285714286], [902.0, 61.0], [897.0, 52.0], [896.0, 52.8], [910.0, 59.75], [911.0, 61.0], [908.0, 58.666666666666664], [909.0, 58.0], [906.0, 56.857142857142854], [907.0, 58.57142857142857], [898.0, 52.0], [900.0, 58.0], [901.0, 58.333333333333336], [903.0, 60.0], [920.0, 77.6], [921.0, 76.2], [922.0, 74.85714285714286], [924.0, 75.28571428571428], [925.0, 71.66666666666667], [926.0, 71.33333333333333], [927.0, 74.2], [913.0, 243.70588235294122], [914.0, 65.16666666666667], [915.0, 68.4], [917.0, 71.0], [918.0, 74.28571428571429], [919.0, 77.375], [904.0, 61.333333333333336], [905.0, 58.2], [934.0, 134.33333333333334], [929.0, 75.0], [928.0, 113.75], [943.0, 96.5], [941.0, 93.77777777777777], [942.0, 95.0], [930.0, 75.0], [932.0, 79.42857142857143], [933.0, 79.0], [935.0, 84.33333333333333], [953.0, 93.625], [954.0, 94.25], [955.0, 93.5], [956.0, 214.0], [958.0, 104.0], [959.0, 95.0], [944.0, 97.33333333333333], [946.0, 95.33333333333333], [947.0, 94.24999999999999], [948.0, 94.0], [949.0, 91.66666666666666], [950.0, 90.0], [951.0, 90.0], [937.0, 86.0], [940.0, 91.0], [966.0, 99.0], [961.0, 98.0], [960.0, 95.0], [974.0, 98.0], [975.0, 94.57142857142857], [972.0, 93.57142857142857], [973.0, 95.0], [970.0, 96.5], [971.0, 97.0], [963.0, 100.33333333333334], [964.0, 102.33333333333333], [965.0, 98.2], [967.0, 100.0], [984.0, 103.5], [985.0, 129.5], [986.0, 107.22222222222223], [987.0, 105.5], [988.0, 107.125], [989.0, 106.0], [990.0, 109.25], [991.0, 169.91666666666666], [976.0, 93.8], [977.0, 95.0], [978.0, 97.0], [979.0, 97.0], [980.0, 99.42857142857143], [981.0, 101.4], [983.0, 102.66666666666667], [968.0, 100.25], [969.0, 99.5], [998.0, 108.5], [993.0, 114.0], [992.0, 112.0], [1006.0, 116.0], [1007.0, 115.5], [1003.0, 111.66666666666667], [1004.0, 114.33333333333334], [994.0, 107.0], [995.0, 109.22222222222223], [997.0, 112.5], [999.0, 108.5], [1016.0, 123.0], [1017.0, 121.0], [1018.0, 126.0], [1019.0, 124.33333333333333], [1021.0, 120.33333333333333], [1022.0, 119.0], [1023.0, 121.0], [1008.0, 118.75], [1009.0, 118.5], [1010.0, 119.5], [1011.0, 121.0], [1012.0, 121.0], [1013.0, 123.25], [1014.0, 124.66666666666667], [1015.0, 124.5], [1000.0, 109.33333333333333], [1001.0, 109.42857142857143], [1027.0, 122.8], [1024.0, 119.22222222222223], [1053.0, 134.5], [1054.0, 133.0], [1051.0, 136.25], [1052.0, 136.66666666666666], [1048.0, 135.375], [1050.0, 136.0], [1046.0, 136.0], [1047.0, 134.75], [1044.0, 137.33333333333334], [1045.0, 133.8], [1042.0, 136.0], [1043.0, 134.0], [1040.0, 134.0], [1041.0, 136.5], [1025.0, 120.0], [1026.0, 120.33333333333333], [1028.0, 123.0], [1030.0, 126.0], [1031.0, 128.5], [1032.0, 125.33333333333333], [1033.0, 128.0], [1034.0, 130.0], [1035.0, 132.75], [1036.0, 133.33333333333331], [1037.0, 132.0], [1038.0, 132.33333333333334], [1039.0, 130.5], [1056.0, 135.0], [1059.0, 143.7], [1060.0, 135.75], [1061.0, 131.0], [1062.0, 130.0], [1063.0, 130.2], [1064.0, 137.0], [1065.0, 127.5], [1066.0, 133.0], [1070.0, 147.0], [1116.0, 29.5], [1110.0, 27.0], [1107.0, 117.8125], [1105.0, 240.85], [1108.0, 102.8], [1109.0, 30.666666666666668], [1111.0, 28.0], [1113.0, 28.5], [1114.0, 28.0], [1119.0, 35.0], [1136.0, 39.333333333333336], [1137.0, 38.5], [1138.0, 41.5], [1139.0, 38.125], [1140.0, 36.75], [1141.0, 35.0], [1142.0, 40.0], [1143.0, 39.2], [1144.0, 40.0], [1145.0, 38.300000000000004], [1146.0, 43.0], [1147.0, 39.666666666666664], [1149.0, 44.0], [1150.0, 45.76923076923076], [1120.0, 37.400000000000006], [1121.0, 37.125], [1122.0, 35.333333333333336], [1123.0, 43.75], [1124.0, 37.0], [1125.0, 36.333333333333336], [1127.0, 34.2], [1128.0, 33.0], [1129.0, 33.5], [1130.0, 31.75], [1131.0, 34.0], [1132.0, 35.5], [1133.0, 38.4], [1134.0, 41.6], [1135.0, 40.142857142857146], [1156.0, 50.33333333333333], [1152.0, 47.25], [1183.0, 47.714285714285715], [1181.0, 49.00000000000001], [1182.0, 47.25], [1179.0, 80.0], [1180.0, 48.0], [1176.0, 43.166666666666664], [1178.0, 46.2], [1174.0, 42.666666666666664], [1175.0, 43.25], [1168.0, 44.0], [1173.0, 57.5], [1153.0, 46.25], [1154.0, 188.10344827586204], [1157.0, 48.199999999999996], [1158.0, 49.0], [1159.0, 46.666666666666664], [1160.0, 48.75], [1161.0, 48.72727272727272], [1162.0, 46.333333333333336], [1163.0, 42.75], [1164.0, 41.5], [1165.0, 40.5], [1166.0, 38.333333333333336], [1167.0, 41.0], [1200.0, 339.25747584726423], [1184.0, 87.0], [1186.0, 82.0], [1187.0, 40.5], [1188.0, 40.333333333333336], [1189.0, 41.333333333333336], [1190.0, 40.333333333333336], [1191.0, 47.0], [1192.0, 44.5], [1194.0, 45.6], [1195.0, 45.4], [1196.0, 44.6], [1197.0, 46.75], [1198.0, 50.75], [1199.0, 46.625], [1.0, 28.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[831.7086500000042, 744.4786000000006]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[828.0, 16173.8], [813.0, 16067.416666666668], [801.0, 16426.0], [884.0, 16185.0], [891.0, 16115.0], [890.0, 16179.5], [889.0, 16321.4375], [888.0, 16258.222222222223], [887.0, 15861.0], [886.0, 15999.874999999998], [885.0, 16065.0], [883.0, 16704.0], [913.0, 16007.181818181818], [956.0, 16156.0], [955.0, 16271.000000000002], [954.0, 15830.0], [953.0, 16017.57142857143], [990.0, 16062.333333333334], [991.0, 15908.8125], [989.0, 16141.333333333334], [987.0, 16357.0], [982.0, 16134.0], [980.0, 15710.0], [983.0, 16226.333333333334], [984.0, 16430.0], [986.0, 15948.0], [1083.0, 15982.0], [1087.0, 15940.75], [1086.0, 15823.666666666666], [1085.0, 15901.5], [1082.0, 15551.0], [1081.0, 15956.0], [1080.0, 15893.5], [1079.0, 15685.5], [1078.0, 15765.0], [1076.0, 15724.5], [1075.0, 16109.0], [1100.0, 16086.75], [1147.0, 15920.0], [1151.0, 16003.0], [1146.0, 15987.57142857143], [1148.0, 16054.666666666666], [1149.0, 16095.0], [1150.0, 16056.5], [1105.0, 16115.0], [1091.0, 16038.2], [1089.0, 15869.666666666666], [1093.0, 15997.714285714284], [1092.0, 15829.785714285716], [1095.0, 16158.4], [1094.0, 16147.285714285716], [1097.0, 16284.2], [1096.0, 16115.666666666666], [1099.0, 16306.333333333334], [1098.0, 16178.75], [1102.0, 15950.75], [1101.0, 15743.5], [1161.0, 16405.0], [1200.0, 16127.538461538463], [1199.0, 15966.0], [1186.0, 16223.5], [1184.0, 15559.0], [1182.0, 15789.0], [1152.0, 15897.0], [1154.0, 15990.840000000002], [1153.0, 16092.666666666666], [1163.0, 16175.0], [1165.0, 16121.0], [1164.0, 16401.0], [1181.0, 15664.0], [1180.0, 16136.333333333334], [1179.0, 16281.0], [1176.0, 15809.0], [1175.0, 15471.0], [1173.0, 16561.0], [1172.0, 16138.5], [1170.0, 15533.0], [1169.0, 16585.0], [1168.0, 15959.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1025.4950000000017, 16060.300000000001]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[543.0, 31016.0], [542.0, 30927.666666666668], [541.0, 30932.4], [540.0, 30739.0], [539.0, 31460.0], [538.0, 31132.0], [537.0, 31123.166666666668], [548.0, 30983.0], [555.0, 30940.666666666668], [544.0, 30901.125], [554.0, 30940.40625], [552.0, 30886.714285714286], [551.0, 30767.5], [550.0, 31001.5], [549.0, 31120.0], [547.0, 30912.666666666668], [545.0, 31043.222222222223], [639.0, 30683.0], [637.0, 31235.666666666668], [644.0, 31200.25], [649.0, 31011.40625], [647.0, 31043.705882352944], [646.0, 31230.285714285714], [645.0, 31081.4375], [643.0, 31205.333333333332], [642.0, 30949.0], [641.0, 31235.0], [640.0, 30940.0], [733.0, 31213.75], [735.0, 31203.5], [732.0, 31403.0], [730.0, 30998.0], [728.0, 31175.0], [719.0, 31521.0], [727.0, 31316.0], [726.0, 30567.0], [722.0, 30618.0], [720.0, 30933.5], [739.0, 31471.0], [749.0, 31257.942307692305], [747.0, 31205.4], [746.0, 31033.666666666664], [745.0, 31468.0], [744.0, 30773.333333333332], [743.0, 31168.0], [742.0, 31048.0], [740.0, 31140.25], [738.0, 31408.0], [736.0, 31289.6], [354.0, 30689.4], [373.0, 31009.25], [369.0, 30796.533333333333], [385.0, 30955.0], [384.0, 31057.090909090908], [431.0, 30703.12], [430.0, 30769.0], [429.0, 30970.88888888889], [428.0, 30823.333333333332]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}, {"data": [[590.9424999999994, 31016.364999999998]], "isOverall": false, "label": "JoinRoom&Wait30sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61758164E12, "maxY": 4.9E-324, "series": [{"data": [[1.61758164E12, 0.0], [1.6175817E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61758164E12, 0.0], [1.6175817E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175817E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 532.11915945612, "minX": 1.61758164E12, "maxY": 31016.364999999998, "series": [{"data": [[1.61758164E12, 532.11915945612], [1.6175817E12, 1643.9486910994767]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61758164E12, 16060.300000000001]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175817E12, 31016.364999999998]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175817E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61758164E12, "maxY": 4.9E-324, "series": [{"data": [[1.61758164E12, 0.0], [1.6175817E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61758164E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175817E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175817E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61758164E12, "maxY": 4.9E-324, "series": [{"data": [[1.61758164E12, 0.0], [1.6175817E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61758164E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175817E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175817E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61758164E12, "maxY": 31603.0, "series": [{"data": [[1.61758164E12, 16756.0], [1.6175817E12, 31603.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61758164E12, 1167.0], [1.6175817E12, 15158.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61758164E12, 16103.569999999996], [1.6175817E12, 31474.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61758164E12, 7055.0], [1.6175817E12, 30985.149999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61758164E12, 26.0], [1.6175817E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61758164E12, 242.0], [1.6175817E12, 129.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175817E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 18.0, "maxY": 31005.5, "series": [{"data": [[556.0, 44.0], [671.0, 482.0], [702.0, 217.0], [719.0, 185.0], [893.0, 86.0], [981.0, 247.0], [971.0, 156.0], [1029.0, 48.0], [66.0, 28.0], [1139.0, 193.0], [1179.0, 227.0], [1206.0, 265.0], [1337.0, 261.0], [1301.0, 136.0], [1360.0, 129.0], [1347.0, 202.0], [1502.0, 266.0], [1753.0, 263.0], [230.0, 30.0], [281.0, 29.0], [18.0, 28.0], [336.0, 36.0], [342.0, 51.0], [400.0, 31005.5], [481.0, 64.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[336.0, 21039.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1753.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 18.0, "maxY": 4.9E-324, "series": [{"data": [[556.0, 0.0], [671.0, 0.0], [702.0, 0.0], [719.0, 0.0], [893.0, 0.0], [981.0, 0.0], [971.0, 0.0], [1029.0, 0.0], [66.0, 0.0], [1139.0, 0.0], [1179.0, 0.0], [1206.0, 0.0], [1337.0, 0.0], [1301.0, 0.0], [1360.0, 0.0], [1347.0, 0.0], [1502.0, 0.0], [1753.0, 0.0], [230.0, 0.0], [281.0, 0.0], [18.0, 0.0], [336.0, 0.0], [342.0, 0.0], [400.0, 0.0], [481.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[336.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1753.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 57.85, "minX": 1.61758164E12, "maxY": 288.81666666666666, "series": [{"data": [[1.61758164E12, 288.81666666666666], [1.6175817E12, 57.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175817E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.61758164E12, "maxY": 276.3333333333333, "series": [{"data": [[1.61758164E12, 276.3333333333333], [1.6175817E12, 68.96666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6175817E12, 1.3666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175817E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.61758164E12, "maxY": 269.6666666666667, "series": [{"data": [[1.61758164E12, 6.666666666666667]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61758164E12, 269.6666666666667], [1.6175817E12, 62.3]], "isOverall": false, "label": "JoinRoom-success", "isController": false}, {"data": [[1.6175817E12, 1.3666666666666667]], "isOverall": false, "label": "JoinRoom-failure", "isController": false}, {"data": [[1.6175817E12, 6.666666666666667]], "isOverall": false, "label": "JoinRoom&Wait30sec-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175817E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.61758164E12, "maxY": 276.3333333333333, "series": [{"data": [[1.61758164E12, 276.3333333333333], [1.6175817E12, 68.96666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6175817E12, 1.3666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175817E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

