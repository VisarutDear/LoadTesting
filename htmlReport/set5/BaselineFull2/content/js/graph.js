/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 60053.0, "series": [{"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 27.0], [1.4, 27.0], [1.5, 28.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 28.0], [3.6, 28.0], [3.7, 28.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 29.0], [4.6, 29.0], [4.7, 29.0], [4.8, 29.0], [4.9, 29.0], [5.0, 29.0], [5.1, 29.0], [5.2, 29.0], [5.3, 29.0], [5.4, 29.0], [5.5, 29.0], [5.6, 29.0], [5.7, 29.0], [5.8, 29.0], [5.9, 29.0], [6.0, 29.0], [6.1, 30.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 30.0], [6.7, 30.0], [6.8, 30.0], [6.9, 30.0], [7.0, 30.0], [7.1, 30.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 31.0], [8.2, 31.0], [8.3, 31.0], [8.4, 31.0], [8.5, 31.0], [8.6, 31.0], [8.7, 31.0], [8.8, 31.0], [8.9, 31.0], [9.0, 31.0], [9.1, 31.0], [9.2, 31.0], [9.3, 31.0], [9.4, 32.0], [9.5, 32.0], [9.6, 32.0], [9.7, 32.0], [9.8, 32.0], [9.9, 32.0], [10.0, 32.0], [10.1, 32.0], [10.2, 32.0], [10.3, 32.0], [10.4, 32.0], [10.5, 32.0], [10.6, 33.0], [10.7, 33.0], [10.8, 33.0], [10.9, 33.0], [11.0, 33.0], [11.1, 33.0], [11.2, 33.0], [11.3, 33.0], [11.4, 33.0], [11.5, 33.0], [11.6, 34.0], [11.7, 34.0], [11.8, 34.0], [11.9, 34.0], [12.0, 34.0], [12.1, 34.0], [12.2, 34.0], [12.3, 34.0], [12.4, 34.0], [12.5, 35.0], [12.6, 35.0], [12.7, 35.0], [12.8, 35.0], [12.9, 35.0], [13.0, 35.0], [13.1, 36.0], [13.2, 36.0], [13.3, 36.0], [13.4, 36.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 38.0], [14.1, 38.0], [14.2, 38.0], [14.3, 38.0], [14.4, 39.0], [14.5, 39.0], [14.6, 39.0], [14.7, 39.0], [14.8, 40.0], [14.9, 40.0], [15.0, 40.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 43.0], [16.2, 43.0], [16.3, 43.0], [16.4, 43.0], [16.5, 44.0], [16.6, 44.0], [16.7, 44.0], [16.8, 45.0], [16.9, 45.0], [17.0, 45.0], [17.1, 46.0], [17.2, 46.0], [17.3, 46.0], [17.4, 46.0], [17.5, 47.0], [17.6, 47.0], [17.7, 47.0], [17.8, 47.0], [17.9, 48.0], [18.0, 48.0], [18.1, 48.0], [18.2, 48.0], [18.3, 48.0], [18.4, 49.0], [18.5, 49.0], [18.6, 49.0], [18.7, 49.0], [18.8, 50.0], [18.9, 50.0], [19.0, 50.0], [19.1, 50.0], [19.2, 51.0], [19.3, 51.0], [19.4, 51.0], [19.5, 51.0], [19.6, 51.0], [19.7, 52.0], [19.8, 52.0], [19.9, 52.0], [20.0, 52.0], [20.1, 52.0], [20.2, 52.0], [20.3, 52.0], [20.4, 52.0], [20.5, 53.0], [20.6, 53.0], [20.7, 53.0], [20.8, 53.0], [20.9, 53.0], [21.0, 53.0], [21.1, 53.0], [21.2, 53.0], [21.3, 53.0], [21.4, 54.0], [21.5, 54.0], [21.6, 54.0], [21.7, 54.0], [21.8, 54.0], [21.9, 54.0], [22.0, 54.0], [22.1, 54.0], [22.2, 54.0], [22.3, 55.0], [22.4, 55.0], [22.5, 55.0], [22.6, 55.0], [22.7, 55.0], [22.8, 55.0], [22.9, 55.0], [23.0, 56.0], [23.1, 56.0], [23.2, 56.0], [23.3, 56.0], [23.4, 56.0], [23.5, 56.0], [23.6, 56.0], [23.7, 56.0], [23.8, 56.0], [23.9, 56.0], [24.0, 57.0], [24.1, 57.0], [24.2, 57.0], [24.3, 57.0], [24.4, 57.0], [24.5, 57.0], [24.6, 57.0], [24.7, 58.0], [24.8, 58.0], [24.9, 58.0], [25.0, 58.0], [25.1, 59.0], [25.2, 59.0], [25.3, 59.0], [25.4, 59.0], [25.5, 59.0], [25.6, 59.0], [25.7, 60.0], [25.8, 60.0], [25.9, 60.0], [26.0, 60.0], [26.1, 60.0], [26.2, 60.0], [26.3, 61.0], [26.4, 61.0], [26.5, 61.0], [26.6, 61.0], [26.7, 61.0], [26.8, 61.0], [26.9, 61.0], [27.0, 62.0], [27.1, 62.0], [27.2, 62.0], [27.3, 63.0], [27.4, 63.0], [27.5, 63.0], [27.6, 63.0], [27.7, 64.0], [27.8, 64.0], [27.9, 64.0], [28.0, 64.0], [28.1, 65.0], [28.2, 65.0], [28.3, 65.0], [28.4, 65.0], [28.5, 66.0], [28.6, 66.0], [28.7, 66.0], [28.8, 66.0], [28.9, 67.0], [29.0, 67.0], [29.1, 67.0], [29.2, 68.0], [29.3, 68.0], [29.4, 68.0], [29.5, 69.0], [29.6, 69.0], [29.7, 69.0], [29.8, 70.0], [29.9, 70.0], [30.0, 70.0], [30.1, 71.0], [30.2, 71.0], [30.3, 72.0], [30.4, 72.0], [30.5, 73.0], [30.6, 73.0], [30.7, 73.0], [30.8, 74.0], [30.9, 74.0], [31.0, 74.0], [31.1, 75.0], [31.2, 75.0], [31.3, 75.0], [31.4, 76.0], [31.5, 76.0], [31.6, 76.0], [31.7, 77.0], [31.8, 77.0], [31.9, 77.0], [32.0, 77.0], [32.1, 78.0], [32.2, 78.0], [32.3, 78.0], [32.4, 78.0], [32.5, 79.0], [32.6, 79.0], [32.7, 79.0], [32.8, 79.0], [32.9, 79.0], [33.0, 80.0], [33.1, 80.0], [33.2, 80.0], [33.3, 80.0], [33.4, 81.0], [33.5, 81.0], [33.6, 81.0], [33.7, 81.0], [33.8, 82.0], [33.9, 82.0], [34.0, 82.0], [34.1, 82.0], [34.2, 83.0], [34.3, 83.0], [34.4, 83.0], [34.5, 83.0], [34.6, 83.0], [34.7, 84.0], [34.8, 84.0], [34.9, 84.0], [35.0, 84.0], [35.1, 84.0], [35.2, 84.0], [35.3, 85.0], [35.4, 85.0], [35.5, 85.0], [35.6, 85.0], [35.7, 86.0], [35.8, 86.0], [35.9, 86.0], [36.0, 86.0], [36.1, 86.0], [36.2, 87.0], [36.3, 87.0], [36.4, 87.0], [36.5, 87.0], [36.6, 87.0], [36.7, 88.0], [36.8, 88.0], [36.9, 88.0], [37.0, 88.0], [37.1, 89.0], [37.2, 89.0], [37.3, 89.0], [37.4, 89.0], [37.5, 90.0], [37.6, 90.0], [37.7, 90.0], [37.8, 91.0], [37.9, 91.0], [38.0, 91.0], [38.1, 91.0], [38.2, 91.0], [38.3, 91.0], [38.4, 92.0], [38.5, 92.0], [38.6, 92.0], [38.7, 92.0], [38.8, 92.0], [38.9, 93.0], [39.0, 93.0], [39.1, 93.0], [39.2, 93.0], [39.3, 94.0], [39.4, 94.0], [39.5, 94.0], [39.6, 94.0], [39.7, 94.0], [39.8, 94.0], [39.9, 95.0], [40.0, 95.0], [40.1, 95.0], [40.2, 95.0], [40.3, 95.0], [40.4, 95.0], [40.5, 95.0], [40.6, 95.0], [40.7, 96.0], [40.8, 96.0], [40.9, 96.0], [41.0, 96.0], [41.1, 96.0], [41.2, 96.0], [41.3, 97.0], [41.4, 97.0], [41.5, 97.0], [41.6, 97.0], [41.7, 97.0], [41.8, 97.0], [41.9, 98.0], [42.0, 98.0], [42.1, 98.0], [42.2, 98.0], [42.3, 98.0], [42.4, 98.0], [42.5, 98.0], [42.6, 98.0], [42.7, 98.0], [42.8, 99.0], [42.9, 99.0], [43.0, 99.0], [43.1, 99.0], [43.2, 99.0], [43.3, 99.0], [43.4, 99.0], [43.5, 99.0], [43.6, 99.0], [43.7, 99.0], [43.8, 99.0], [43.9, 100.0], [44.0, 100.0], [44.1, 100.0], [44.2, 100.0], [44.3, 100.0], [44.4, 100.0], [44.5, 100.0], [44.6, 100.0], [44.7, 100.0], [44.8, 100.0], [44.9, 100.0], [45.0, 101.0], [45.1, 101.0], [45.2, 101.0], [45.3, 101.0], [45.4, 101.0], [45.5, 101.0], [45.6, 101.0], [45.7, 101.0], [45.8, 101.0], [45.9, 102.0], [46.0, 102.0], [46.1, 102.0], [46.2, 102.0], [46.3, 102.0], [46.4, 102.0], [46.5, 102.0], [46.6, 102.0], [46.7, 102.0], [46.8, 102.0], [46.9, 102.0], [47.0, 102.0], [47.1, 103.0], [47.2, 103.0], [47.3, 103.0], [47.4, 103.0], [47.5, 103.0], [47.6, 103.0], [47.7, 103.0], [47.8, 103.0], [47.9, 103.0], [48.0, 103.0], [48.1, 103.0], [48.2, 104.0], [48.3, 104.0], [48.4, 104.0], [48.5, 104.0], [48.6, 104.0], [48.7, 104.0], [48.8, 104.0], [48.9, 104.0], [49.0, 104.0], [49.1, 104.0], [49.2, 104.0], [49.3, 104.0], [49.4, 104.0], [49.5, 105.0], [49.6, 105.0], [49.7, 105.0], [49.8, 105.0], [49.9, 105.0], [50.0, 105.0], [50.1, 105.0], [50.2, 105.0], [50.3, 105.0], [50.4, 105.0], [50.5, 105.0], [50.6, 105.0], [50.7, 106.0], [50.8, 106.0], [50.9, 106.0], [51.0, 106.0], [51.1, 106.0], [51.2, 106.0], [51.3, 106.0], [51.4, 107.0], [51.5, 107.0], [51.6, 107.0], [51.7, 107.0], [51.8, 107.0], [51.9, 107.0], [52.0, 108.0], [52.1, 108.0], [52.2, 108.0], [52.3, 108.0], [52.4, 108.0], [52.5, 108.0], [52.6, 109.0], [52.7, 109.0], [52.8, 109.0], [52.9, 109.0], [53.0, 109.0], [53.1, 109.0], [53.2, 110.0], [53.3, 110.0], [53.4, 110.0], [53.5, 110.0], [53.6, 110.0], [53.7, 110.0], [53.8, 110.0], [53.9, 111.0], [54.0, 111.0], [54.1, 111.0], [54.2, 111.0], [54.3, 111.0], [54.4, 112.0], [54.5, 112.0], [54.6, 112.0], [54.7, 112.0], [54.8, 112.0], [54.9, 113.0], [55.0, 113.0], [55.1, 113.0], [55.2, 113.0], [55.3, 113.0], [55.4, 113.0], [55.5, 113.0], [55.6, 114.0], [55.7, 114.0], [55.8, 114.0], [55.9, 114.0], [56.0, 114.0], [56.1, 114.0], [56.2, 114.0], [56.3, 115.0], [56.4, 115.0], [56.5, 115.0], [56.6, 115.0], [56.7, 115.0], [56.8, 115.0], [56.9, 116.0], [57.0, 116.0], [57.1, 116.0], [57.2, 116.0], [57.3, 116.0], [57.4, 116.0], [57.5, 117.0], [57.6, 117.0], [57.7, 117.0], [57.8, 117.0], [57.9, 118.0], [58.0, 118.0], [58.1, 118.0], [58.2, 118.0], [58.3, 119.0], [58.4, 119.0], [58.5, 119.0], [58.6, 120.0], [58.7, 120.0], [58.8, 120.0], [58.9, 120.0], [59.0, 121.0], [59.1, 121.0], [59.2, 121.0], [59.3, 121.0], [59.4, 121.0], [59.5, 122.0], [59.6, 122.0], [59.7, 122.0], [59.8, 122.0], [59.9, 122.0], [60.0, 123.0], [60.1, 123.0], [60.2, 123.0], [60.3, 123.0], [60.4, 123.0], [60.5, 123.0], [60.6, 124.0], [60.7, 124.0], [60.8, 124.0], [60.9, 124.0], [61.0, 125.0], [61.1, 125.0], [61.2, 125.0], [61.3, 125.0], [61.4, 126.0], [61.5, 126.0], [61.6, 126.0], [61.7, 127.0], [61.8, 127.0], [61.9, 127.0], [62.0, 127.0], [62.1, 127.0], [62.2, 128.0], [62.3, 128.0], [62.4, 128.0], [62.5, 128.0], [62.6, 128.0], [62.7, 128.0], [62.8, 129.0], [62.9, 129.0], [63.0, 129.0], [63.1, 130.0], [63.2, 130.0], [63.3, 130.0], [63.4, 130.0], [63.5, 130.0], [63.6, 131.0], [63.7, 131.0], [63.8, 131.0], [63.9, 131.0], [64.0, 132.0], [64.1, 132.0], [64.2, 132.0], [64.3, 132.0], [64.4, 133.0], [64.5, 133.0], [64.6, 133.0], [64.7, 133.0], [64.8, 133.0], [64.9, 134.0], [65.0, 134.0], [65.1, 134.0], [65.2, 134.0], [65.3, 134.0], [65.4, 134.0], [65.5, 135.0], [65.6, 135.0], [65.7, 135.0], [65.8, 135.0], [65.9, 135.0], [66.0, 136.0], [66.1, 136.0], [66.2, 136.0], [66.3, 136.0], [66.4, 136.0], [66.5, 136.0], [66.6, 137.0], [66.7, 137.0], [66.8, 137.0], [66.9, 137.0], [67.0, 137.0], [67.1, 138.0], [67.2, 138.0], [67.3, 138.0], [67.4, 138.0], [67.5, 138.0], [67.6, 138.0], [67.7, 138.0], [67.8, 139.0], [67.9, 139.0], [68.0, 139.0], [68.1, 139.0], [68.2, 139.0], [68.3, 139.0], [68.4, 139.0], [68.5, 140.0], [68.6, 140.0], [68.7, 140.0], [68.8, 140.0], [68.9, 140.0], [69.0, 140.0], [69.1, 140.0], [69.2, 140.0], [69.3, 141.0], [69.4, 141.0], [69.5, 141.0], [69.6, 141.0], [69.7, 141.0], [69.8, 141.0], [69.9, 141.0], [70.0, 142.0], [70.1, 142.0], [70.2, 142.0], [70.3, 142.0], [70.4, 142.0], [70.5, 142.0], [70.6, 142.0], [70.7, 142.0], [70.8, 142.0], [70.9, 142.0], [71.0, 142.0], [71.1, 143.0], [71.2, 143.0], [71.3, 143.0], [71.4, 143.0], [71.5, 143.0], [71.6, 143.0], [71.7, 143.0], [71.8, 143.0], [71.9, 143.0], [72.0, 144.0], [72.1, 144.0], [72.2, 144.0], [72.3, 144.0], [72.4, 144.0], [72.5, 145.0], [72.6, 145.0], [72.7, 145.0], [72.8, 145.0], [72.9, 145.0], [73.0, 145.0], [73.1, 146.0], [73.2, 146.0], [73.3, 146.0], [73.4, 146.0], [73.5, 146.0], [73.6, 146.0], [73.7, 147.0], [73.8, 147.0], [73.9, 147.0], [74.0, 147.0], [74.1, 148.0], [74.2, 148.0], [74.3, 148.0], [74.4, 148.0], [74.5, 148.0], [74.6, 149.0], [74.7, 149.0], [74.8, 149.0], [74.9, 149.0], [75.0, 149.0], [75.1, 149.0], [75.2, 150.0], [75.3, 150.0], [75.4, 150.0], [75.5, 150.0], [75.6, 150.0], [75.7, 150.0], [75.8, 151.0], [75.9, 151.0], [76.0, 151.0], [76.1, 151.0], [76.2, 152.0], [76.3, 152.0], [76.4, 152.0], [76.5, 152.0], [76.6, 153.0], [76.7, 153.0], [76.8, 153.0], [76.9, 154.0], [77.0, 154.0], [77.1, 154.0], [77.2, 155.0], [77.3, 155.0], [77.4, 155.0], [77.5, 156.0], [77.6, 156.0], [77.7, 156.0], [77.8, 157.0], [77.9, 157.0], [78.0, 157.0], [78.1, 158.0], [78.2, 158.0], [78.3, 158.0], [78.4, 159.0], [78.5, 159.0], [78.6, 159.0], [78.7, 160.0], [78.8, 160.0], [78.9, 161.0], [79.0, 161.0], [79.1, 161.0], [79.2, 161.0], [79.3, 161.0], [79.4, 162.0], [79.5, 162.0], [79.6, 162.0], [79.7, 163.0], [79.8, 163.0], [79.9, 163.0], [80.0, 163.0], [80.1, 164.0], [80.2, 164.0], [80.3, 164.0], [80.4, 165.0], [80.5, 165.0], [80.6, 165.0], [80.7, 165.0], [80.8, 166.0], [80.9, 166.0], [81.0, 166.0], [81.1, 166.0], [81.2, 167.0], [81.3, 167.0], [81.4, 167.0], [81.5, 168.0], [81.6, 168.0], [81.7, 168.0], [81.8, 168.0], [81.9, 169.0], [82.0, 169.0], [82.1, 169.0], [82.2, 170.0], [82.3, 170.0], [82.4, 170.0], [82.5, 171.0], [82.6, 171.0], [82.7, 171.0], [82.8, 172.0], [82.9, 172.0], [83.0, 172.0], [83.1, 172.0], [83.2, 173.0], [83.3, 173.0], [83.4, 173.0], [83.5, 173.0], [83.6, 174.0], [83.7, 174.0], [83.8, 174.0], [83.9, 174.0], [84.0, 175.0], [84.1, 175.0], [84.2, 175.0], [84.3, 176.0], [84.4, 176.0], [84.5, 176.0], [84.6, 176.0], [84.7, 177.0], [84.8, 177.0], [84.9, 177.0], [85.0, 177.0], [85.1, 178.0], [85.2, 178.0], [85.3, 178.0], [85.4, 179.0], [85.5, 179.0], [85.6, 179.0], [85.7, 180.0], [85.8, 180.0], [85.9, 180.0], [86.0, 181.0], [86.1, 181.0], [86.2, 181.0], [86.3, 182.0], [86.4, 182.0], [86.5, 183.0], [86.6, 183.0], [86.7, 184.0], [86.8, 184.0], [86.9, 185.0], [87.0, 185.0], [87.1, 186.0], [87.2, 186.0], [87.3, 187.0], [87.4, 188.0], [87.5, 189.0], [87.6, 190.0], [87.7, 191.0], [87.8, 192.0], [87.9, 193.0], [88.0, 193.0], [88.1, 194.0], [88.2, 195.0], [88.3, 196.0], [88.4, 197.0], [88.5, 198.0], [88.6, 202.0], [88.7, 203.0], [88.8, 205.0], [88.9, 208.0], [89.0, 210.0], [89.1, 212.0], [89.2, 215.0], [89.3, 217.0], [89.4, 220.0], [89.5, 224.0], [89.6, 226.0], [89.7, 228.0], [89.8, 231.0], [89.9, 234.0], [90.0, 237.0], [90.1, 242.0], [90.2, 245.0], [90.3, 247.0], [90.4, 251.0], [90.5, 254.0], [90.6, 256.0], [90.7, 258.0], [90.8, 262.0], [90.9, 265.0], [91.0, 267.0], [91.1, 270.0], [91.2, 272.0], [91.3, 275.0], [91.4, 281.0], [91.5, 289.0], [91.6, 301.0], [91.7, 302.0], [91.8, 305.0], [91.9, 313.0], [92.0, 332.0], [92.1, 349.0], [92.2, 357.0], [92.3, 377.0], [92.4, 386.0], [92.5, 391.0], [92.6, 393.0], [92.7, 395.0], [92.8, 397.0], [92.9, 399.0], [93.0, 401.0], [93.1, 402.0], [93.2, 407.0], [93.3, 413.0], [93.4, 427.0], [93.5, 446.0], [93.6, 450.0], [93.7, 501.0], [93.8, 589.0], [93.9, 596.0], [94.0, 1030.0], [94.1, 1032.0], [94.2, 1034.0], [94.3, 1035.0], [94.4, 1037.0], [94.5, 1038.0], [94.6, 1039.0], [94.7, 1040.0], [94.8, 1041.0], [94.9, 1042.0], [95.0, 1043.0], [95.1, 1045.0], [95.2, 1046.0], [95.3, 1048.0], [95.4, 1052.0], [95.5, 1057.0], [95.6, 1061.0], [95.7, 1064.0], [95.8, 1067.0], [95.9, 1069.0], [96.0, 1072.0], [96.1, 1074.0], [96.2, 1078.0], [96.3, 1080.0], [96.4, 1085.0], [96.5, 1088.0], [96.6, 1091.0], [96.7, 1095.0], [96.8, 1097.0], [96.9, 1101.0], [97.0, 1103.0], [97.1, 1105.0], [97.2, 1107.0], [97.3, 1109.0], [97.4, 1111.0], [97.5, 1112.0], [97.6, 1114.0], [97.7, 1117.0], [97.8, 1119.0], [97.9, 1123.0], [98.0, 1124.0], [98.1, 1127.0], [98.2, 1130.0], [98.3, 1134.0], [98.4, 1147.0], [98.5, 1171.0], [98.6, 1195.0], [98.7, 1207.0], [98.8, 1235.0], [98.9, 1280.0], [99.0, 1338.0], [99.1, 1356.0], [99.2, 1366.0], [99.3, 1403.0], [99.4, 1468.0], [99.5, 2064.0], [99.6, 2071.0], [99.7, 2079.0], [99.8, 2093.0], [99.9, 3134.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 12707.0], [0.1, 12707.0], [0.2, 12707.0], [0.3, 12707.0], [0.4, 12707.0], [0.5, 12710.0], [0.6, 12710.0], [0.7, 12710.0], [0.8, 12710.0], [0.9, 12710.0], [1.0, 12714.0], [1.1, 12714.0], [1.2, 12714.0], [1.3, 12714.0], [1.4, 12714.0], [1.5, 12716.0], [1.6, 12716.0], [1.7, 12716.0], [1.8, 12716.0], [1.9, 12716.0], [2.0, 12721.0], [2.1, 12721.0], [2.2, 12721.0], [2.3, 12721.0], [2.4, 12721.0], [2.5, 12727.0], [2.6, 12727.0], [2.7, 12727.0], [2.8, 12727.0], [2.9, 12727.0], [3.0, 12738.0], [3.1, 12738.0], [3.2, 12738.0], [3.3, 12738.0], [3.4, 12738.0], [3.5, 12738.0], [3.6, 12738.0], [3.7, 12738.0], [3.8, 12738.0], [3.9, 12738.0], [4.0, 12746.0], [4.1, 12746.0], [4.2, 12746.0], [4.3, 12746.0], [4.4, 12746.0], [4.5, 12749.0], [4.6, 12749.0], [4.7, 12749.0], [4.8, 12749.0], [4.9, 12749.0], [5.0, 12749.0], [5.1, 12749.0], [5.2, 12749.0], [5.3, 12749.0], [5.4, 12749.0], [5.5, 12761.0], [5.6, 12761.0], [5.7, 12761.0], [5.8, 12761.0], [5.9, 12761.0], [6.0, 12766.0], [6.1, 12766.0], [6.2, 12766.0], [6.3, 12766.0], [6.4, 12766.0], [6.5, 12767.0], [6.6, 12767.0], [6.7, 12767.0], [6.8, 12767.0], [6.9, 12767.0], [7.0, 12769.0], [7.1, 12769.0], [7.2, 12769.0], [7.3, 12769.0], [7.4, 12769.0], [7.5, 12771.0], [7.6, 12771.0], [7.7, 12771.0], [7.8, 12771.0], [7.9, 12771.0], [8.0, 12772.0], [8.1, 12772.0], [8.2, 12772.0], [8.3, 12772.0], [8.4, 12772.0], [8.5, 12775.0], [8.6, 12775.0], [8.7, 12775.0], [8.8, 12775.0], [8.9, 12775.0], [9.0, 12776.0], [9.1, 12776.0], [9.2, 12776.0], [9.3, 12776.0], [9.4, 12776.0], [9.5, 12776.0], [9.6, 12776.0], [9.7, 12776.0], [9.8, 12776.0], [9.9, 12776.0], [10.0, 12777.0], [10.1, 12777.0], [10.2, 12777.0], [10.3, 12777.0], [10.4, 12777.0], [10.5, 12782.0], [10.6, 12782.0], [10.7, 12782.0], [10.8, 12782.0], [10.9, 12782.0], [11.0, 12786.0], [11.1, 12786.0], [11.2, 12786.0], [11.3, 12786.0], [11.4, 12786.0], [11.5, 12807.0], [11.6, 12807.0], [11.7, 12807.0], [11.8, 12807.0], [11.9, 12807.0], [12.0, 12818.0], [12.1, 12818.0], [12.2, 12818.0], [12.3, 12818.0], [12.4, 12818.0], [12.5, 12818.0], [12.6, 12818.0], [12.7, 12818.0], [12.8, 12818.0], [12.9, 12818.0], [13.0, 12829.0], [13.1, 12829.0], [13.2, 12829.0], [13.3, 12829.0], [13.4, 12829.0], [13.5, 12832.0], [13.6, 12832.0], [13.7, 12832.0], [13.8, 12832.0], [13.9, 12832.0], [14.0, 12834.0], [14.1, 12834.0], [14.2, 12834.0], [14.3, 12834.0], [14.4, 12834.0], [14.5, 12836.0], [14.6, 12836.0], [14.7, 12836.0], [14.8, 12836.0], [14.9, 12836.0], [15.0, 12841.0], [15.1, 12841.0], [15.2, 12841.0], [15.3, 12841.0], [15.4, 12841.0], [15.5, 12844.0], [15.6, 12844.0], [15.7, 12844.0], [15.8, 12844.0], [15.9, 12844.0], [16.0, 12852.0], [16.1, 12852.0], [16.2, 12852.0], [16.3, 12852.0], [16.4, 12852.0], [16.5, 12870.0], [16.6, 12870.0], [16.7, 12870.0], [16.8, 12870.0], [16.9, 12870.0], [17.0, 12877.0], [17.1, 12877.0], [17.2, 12877.0], [17.3, 12877.0], [17.4, 12877.0], [17.5, 12880.0], [17.6, 12880.0], [17.7, 12880.0], [17.8, 12880.0], [17.9, 12880.0], [18.0, 12881.0], [18.1, 12881.0], [18.2, 12881.0], [18.3, 12881.0], [18.4, 12881.0], [18.5, 12891.0], [18.6, 12891.0], [18.7, 12891.0], [18.8, 12891.0], [18.9, 12891.0], [19.0, 12893.0], [19.1, 12893.0], [19.2, 12893.0], [19.3, 12893.0], [19.4, 12893.0], [19.5, 12899.0], [19.6, 12899.0], [19.7, 12899.0], [19.8, 12899.0], [19.9, 12899.0], [20.0, 12899.0], [20.1, 12899.0], [20.2, 12899.0], [20.3, 12899.0], [20.4, 12899.0], [20.5, 12911.0], [20.6, 12911.0], [20.7, 12911.0], [20.8, 12911.0], [20.9, 12911.0], [21.0, 12915.0], [21.1, 12915.0], [21.2, 12915.0], [21.3, 12915.0], [21.4, 12915.0], [21.5, 12915.0], [21.6, 12915.0], [21.7, 12915.0], [21.8, 12915.0], [21.9, 12915.0], [22.0, 12918.0], [22.1, 12918.0], [22.2, 12918.0], [22.3, 12918.0], [22.4, 12918.0], [22.5, 12923.0], [22.6, 12923.0], [22.7, 12923.0], [22.8, 12923.0], [22.9, 12923.0], [23.0, 12929.0], [23.1, 12929.0], [23.2, 12929.0], [23.3, 12929.0], [23.4, 12929.0], [23.5, 12932.0], [23.6, 12932.0], [23.7, 12932.0], [23.8, 12932.0], [23.9, 12932.0], [24.0, 12934.0], [24.1, 12934.0], [24.2, 12934.0], [24.3, 12934.0], [24.4, 12934.0], [24.5, 12945.0], [24.6, 12945.0], [24.7, 12945.0], [24.8, 12945.0], [24.9, 12945.0], [25.0, 12945.0], [25.1, 12945.0], [25.2, 12945.0], [25.3, 12945.0], [25.4, 12945.0], [25.5, 12945.0], [25.6, 12945.0], [25.7, 12945.0], [25.8, 12945.0], [25.9, 12945.0], [26.0, 12945.0], [26.1, 12945.0], [26.2, 12945.0], [26.3, 12945.0], [26.4, 12945.0], [26.5, 12946.0], [26.6, 12946.0], [26.7, 12946.0], [26.8, 12946.0], [26.9, 12946.0], [27.0, 12953.0], [27.1, 12953.0], [27.2, 12953.0], [27.3, 12953.0], [27.4, 12953.0], [27.5, 12955.0], [27.6, 12955.0], [27.7, 12955.0], [27.8, 12955.0], [27.9, 12955.0], [28.0, 12961.0], [28.1, 12961.0], [28.2, 12961.0], [28.3, 12961.0], [28.4, 12961.0], [28.5, 12961.0], [28.6, 12961.0], [28.7, 12961.0], [28.8, 12961.0], [28.9, 12961.0], [29.0, 12966.0], [29.1, 12966.0], [29.2, 12966.0], [29.3, 12966.0], [29.4, 12966.0], [29.5, 12967.0], [29.6, 12967.0], [29.7, 12967.0], [29.8, 12967.0], [29.9, 12967.0], [30.0, 12967.0], [30.1, 12967.0], [30.2, 12967.0], [30.3, 12967.0], [30.4, 12967.0], [30.5, 12973.0], [30.6, 12973.0], [30.7, 12973.0], [30.8, 12973.0], [30.9, 12973.0], [31.0, 12975.0], [31.1, 12975.0], [31.2, 12975.0], [31.3, 12975.0], [31.4, 12975.0], [31.5, 12985.0], [31.6, 12985.0], [31.7, 12985.0], [31.8, 12985.0], [31.9, 12985.0], [32.0, 12985.0], [32.1, 12985.0], [32.2, 12985.0], [32.3, 12985.0], [32.4, 12985.0], [32.5, 12987.0], [32.6, 12987.0], [32.7, 12987.0], [32.8, 12987.0], [32.9, 12987.0], [33.0, 12990.0], [33.1, 12990.0], [33.2, 12990.0], [33.3, 12990.0], [33.4, 12990.0], [33.5, 12991.0], [33.6, 12991.0], [33.7, 12991.0], [33.8, 12991.0], [33.9, 12991.0], [34.0, 12992.0], [34.1, 12992.0], [34.2, 12992.0], [34.3, 12992.0], [34.4, 12992.0], [34.5, 12994.0], [34.6, 12994.0], [34.7, 12994.0], [34.8, 12994.0], [34.9, 12994.0], [35.0, 12995.0], [35.1, 12995.0], [35.2, 12995.0], [35.3, 12995.0], [35.4, 12995.0], [35.5, 13018.0], [35.6, 13018.0], [35.7, 13018.0], [35.8, 13018.0], [35.9, 13018.0], [36.0, 13019.0], [36.1, 13019.0], [36.2, 13019.0], [36.3, 13019.0], [36.4, 13019.0], [36.5, 13019.0], [36.6, 13019.0], [36.7, 13019.0], [36.8, 13019.0], [36.9, 13019.0], [37.0, 13020.0], [37.1, 13020.0], [37.2, 13020.0], [37.3, 13020.0], [37.4, 13020.0], [37.5, 13036.0], [37.6, 13036.0], [37.7, 13036.0], [37.8, 13036.0], [37.9, 13036.0], [38.0, 13039.0], [38.1, 13039.0], [38.2, 13039.0], [38.3, 13039.0], [38.4, 13039.0], [38.5, 13040.0], [38.6, 13040.0], [38.7, 13040.0], [38.8, 13040.0], [38.9, 13040.0], [39.0, 13041.0], [39.1, 13041.0], [39.2, 13041.0], [39.3, 13041.0], [39.4, 13041.0], [39.5, 13042.0], [39.6, 13042.0], [39.7, 13042.0], [39.8, 13042.0], [39.9, 13042.0], [40.0, 13048.0], [40.1, 13048.0], [40.2, 13048.0], [40.3, 13048.0], [40.4, 13048.0], [40.5, 13074.0], [40.6, 13074.0], [40.7, 13074.0], [40.8, 13074.0], [40.9, 13074.0], [41.0, 13081.0], [41.1, 13081.0], [41.2, 13081.0], [41.3, 13081.0], [41.4, 13081.0], [41.5, 13104.0], [41.6, 13104.0], [41.7, 13104.0], [41.8, 13104.0], [41.9, 13104.0], [42.0, 13120.0], [42.1, 13120.0], [42.2, 13120.0], [42.3, 13120.0], [42.4, 13120.0], [42.5, 13125.0], [42.6, 13125.0], [42.7, 13125.0], [42.8, 13125.0], [42.9, 13125.0], [43.0, 13132.0], [43.1, 13132.0], [43.2, 13132.0], [43.3, 13132.0], [43.4, 13132.0], [43.5, 13134.0], [43.6, 13134.0], [43.7, 13134.0], [43.8, 13134.0], [43.9, 13134.0], [44.0, 13134.0], [44.1, 13134.0], [44.2, 13134.0], [44.3, 13134.0], [44.4, 13134.0], [44.5, 13140.0], [44.6, 13140.0], [44.7, 13140.0], [44.8, 13140.0], [44.9, 13140.0], [45.0, 13145.0], [45.1, 13145.0], [45.2, 13145.0], [45.3, 13145.0], [45.4, 13145.0], [45.5, 13147.0], [45.6, 13147.0], [45.7, 13147.0], [45.8, 13147.0], [45.9, 13147.0], [46.0, 13155.0], [46.1, 13155.0], [46.2, 13155.0], [46.3, 13155.0], [46.4, 13155.0], [46.5, 13155.0], [46.6, 13155.0], [46.7, 13155.0], [46.8, 13155.0], [46.9, 13155.0], [47.0, 13159.0], [47.1, 13159.0], [47.2, 13159.0], [47.3, 13159.0], [47.4, 13159.0], [47.5, 13159.0], [47.6, 13159.0], [47.7, 13159.0], [47.8, 13159.0], [47.9, 13159.0], [48.0, 13160.0], [48.1, 13160.0], [48.2, 13160.0], [48.3, 13160.0], [48.4, 13160.0], [48.5, 13161.0], [48.6, 13161.0], [48.7, 13161.0], [48.8, 13161.0], [48.9, 13161.0], [49.0, 13161.0], [49.1, 13161.0], [49.2, 13161.0], [49.3, 13161.0], [49.4, 13161.0], [49.5, 13162.0], [49.6, 13162.0], [49.7, 13162.0], [49.8, 13162.0], [49.9, 13162.0], [50.0, 13165.0], [50.1, 13165.0], [50.2, 13165.0], [50.3, 13165.0], [50.4, 13165.0], [50.5, 13185.0], [50.6, 13185.0], [50.7, 13185.0], [50.8, 13185.0], [50.9, 13185.0], [51.0, 13189.0], [51.1, 13189.0], [51.2, 13189.0], [51.3, 13189.0], [51.4, 13189.0], [51.5, 13201.0], [51.6, 13201.0], [51.7, 13201.0], [51.8, 13201.0], [51.9, 13201.0], [52.0, 13203.0], [52.1, 13203.0], [52.2, 13203.0], [52.3, 13203.0], [52.4, 13203.0], [52.5, 13203.0], [52.6, 13203.0], [52.7, 13203.0], [52.8, 13203.0], [52.9, 13203.0], [53.0, 13211.0], [53.1, 13211.0], [53.2, 13211.0], [53.3, 13211.0], [53.4, 13211.0], [53.5, 13212.0], [53.6, 13212.0], [53.7, 13212.0], [53.8, 13212.0], [53.9, 13212.0], [54.0, 13212.0], [54.1, 13212.0], [54.2, 13212.0], [54.3, 13212.0], [54.4, 13212.0], [54.5, 13213.0], [54.6, 13213.0], [54.7, 13213.0], [54.8, 13213.0], [54.9, 13213.0], [55.0, 13215.0], [55.1, 13215.0], [55.2, 13215.0], [55.3, 13215.0], [55.4, 13215.0], [55.5, 13216.0], [55.6, 13216.0], [55.7, 13216.0], [55.8, 13216.0], [55.9, 13216.0], [56.0, 13222.0], [56.1, 13222.0], [56.2, 13222.0], [56.3, 13222.0], [56.4, 13222.0], [56.5, 13222.0], [56.6, 13222.0], [56.7, 13222.0], [56.8, 13222.0], [56.9, 13222.0], [57.0, 13247.0], [57.1, 13247.0], [57.2, 13247.0], [57.3, 13247.0], [57.4, 13247.0], [57.5, 13261.0], [57.6, 13261.0], [57.7, 13261.0], [57.8, 13261.0], [57.9, 13261.0], [58.0, 13264.0], [58.1, 13264.0], [58.2, 13264.0], [58.3, 13264.0], [58.4, 13264.0], [58.5, 13270.0], [58.6, 13270.0], [58.7, 13270.0], [58.8, 13270.0], [58.9, 13270.0], [59.0, 13272.0], [59.1, 13272.0], [59.2, 13272.0], [59.3, 13272.0], [59.4, 13272.0], [59.5, 13283.0], [59.6, 13283.0], [59.7, 13283.0], [59.8, 13283.0], [59.9, 13283.0], [60.0, 13283.0], [60.1, 13283.0], [60.2, 13283.0], [60.3, 13283.0], [60.4, 13283.0], [60.5, 13284.0], [60.6, 13284.0], [60.7, 13284.0], [60.8, 13284.0], [60.9, 13284.0], [61.0, 13284.0], [61.1, 13284.0], [61.2, 13284.0], [61.3, 13284.0], [61.4, 13284.0], [61.5, 13285.0], [61.6, 13285.0], [61.7, 13285.0], [61.8, 13285.0], [61.9, 13285.0], [62.0, 13286.0], [62.1, 13286.0], [62.2, 13286.0], [62.3, 13286.0], [62.4, 13286.0], [62.5, 13286.0], [62.6, 13286.0], [62.7, 13286.0], [62.8, 13286.0], [62.9, 13286.0], [63.0, 13286.0], [63.1, 13286.0], [63.2, 13286.0], [63.3, 13286.0], [63.4, 13286.0], [63.5, 13289.0], [63.6, 13289.0], [63.7, 13289.0], [63.8, 13289.0], [63.9, 13289.0], [64.0, 13289.0], [64.1, 13289.0], [64.2, 13289.0], [64.3, 13289.0], [64.4, 13289.0], [64.5, 13290.0], [64.6, 13290.0], [64.7, 13290.0], [64.8, 13290.0], [64.9, 13290.0], [65.0, 13291.0], [65.1, 13291.0], [65.2, 13291.0], [65.3, 13291.0], [65.4, 13291.0], [65.5, 13291.0], [65.6, 13291.0], [65.7, 13291.0], [65.8, 13291.0], [65.9, 13291.0], [66.0, 13294.0], [66.1, 13294.0], [66.2, 13294.0], [66.3, 13294.0], [66.4, 13294.0], [66.5, 13296.0], [66.6, 13296.0], [66.7, 13296.0], [66.8, 13296.0], [66.9, 13296.0], [67.0, 13316.0], [67.1, 13316.0], [67.2, 13316.0], [67.3, 13316.0], [67.4, 13316.0], [67.5, 13317.0], [67.6, 13317.0], [67.7, 13317.0], [67.8, 13317.0], [67.9, 13317.0], [68.0, 13328.0], [68.1, 13328.0], [68.2, 13328.0], [68.3, 13328.0], [68.4, 13328.0], [68.5, 13380.0], [68.6, 13380.0], [68.7, 13380.0], [68.8, 13380.0], [68.9, 13380.0], [69.0, 13382.0], [69.1, 13382.0], [69.2, 13382.0], [69.3, 13382.0], [69.4, 13382.0], [69.5, 13385.0], [69.6, 13385.0], [69.7, 13385.0], [69.8, 13385.0], [69.9, 13385.0], [70.0, 13386.0], [70.1, 13386.0], [70.2, 13386.0], [70.3, 13386.0], [70.4, 13386.0], [70.5, 13386.0], [70.6, 13386.0], [70.7, 13386.0], [70.8, 13386.0], [70.9, 13386.0], [71.0, 13386.0], [71.1, 13386.0], [71.2, 13386.0], [71.3, 13386.0], [71.4, 13386.0], [71.5, 13397.0], [71.6, 13397.0], [71.7, 13397.0], [71.8, 13397.0], [71.9, 13397.0], [72.0, 13397.0], [72.1, 13397.0], [72.2, 13397.0], [72.3, 13397.0], [72.4, 13397.0], [72.5, 13400.0], [72.6, 13400.0], [72.7, 13400.0], [72.8, 13400.0], [72.9, 13400.0], [73.0, 13405.0], [73.1, 13405.0], [73.2, 13405.0], [73.3, 13405.0], [73.4, 13405.0], [73.5, 13415.0], [73.6, 13415.0], [73.7, 13415.0], [73.8, 13415.0], [73.9, 13415.0], [74.0, 13419.0], [74.1, 13419.0], [74.2, 13419.0], [74.3, 13419.0], [74.4, 13419.0], [74.5, 13421.0], [74.6, 13421.0], [74.7, 13421.0], [74.8, 13421.0], [74.9, 13421.0], [75.0, 13427.0], [75.1, 13427.0], [75.2, 13427.0], [75.3, 13427.0], [75.4, 13427.0], [75.5, 13433.0], [75.6, 13433.0], [75.7, 13433.0], [75.8, 13433.0], [75.9, 13433.0], [76.0, 13447.0], [76.1, 13447.0], [76.2, 13447.0], [76.3, 13447.0], [76.4, 13447.0], [76.5, 13447.0], [76.6, 13447.0], [76.7, 13447.0], [76.8, 13447.0], [76.9, 13447.0], [77.0, 13469.0], [77.1, 13469.0], [77.2, 13469.0], [77.3, 13469.0], [77.4, 13469.0], [77.5, 13471.0], [77.6, 13471.0], [77.7, 13471.0], [77.8, 13471.0], [77.9, 13471.0], [78.0, 13478.0], [78.1, 13478.0], [78.2, 13478.0], [78.3, 13478.0], [78.4, 13478.0], [78.5, 13488.0], [78.6, 13488.0], [78.7, 13488.0], [78.8, 13488.0], [78.9, 13488.0], [79.0, 13492.0], [79.1, 13492.0], [79.2, 13492.0], [79.3, 13492.0], [79.4, 13492.0], [79.5, 13494.0], [79.6, 13494.0], [79.7, 13494.0], [79.8, 13494.0], [79.9, 13494.0], [80.0, 13500.0], [80.1, 13500.0], [80.2, 13500.0], [80.3, 13500.0], [80.4, 13500.0], [80.5, 13513.0], [80.6, 13513.0], [80.7, 13513.0], [80.8, 13513.0], [80.9, 13513.0], [81.0, 13514.0], [81.1, 13514.0], [81.2, 13514.0], [81.3, 13514.0], [81.4, 13514.0], [81.5, 13517.0], [81.6, 13517.0], [81.7, 13517.0], [81.8, 13517.0], [81.9, 13517.0], [82.0, 13524.0], [82.1, 13524.0], [82.2, 13524.0], [82.3, 13524.0], [82.4, 13524.0], [82.5, 13524.0], [82.6, 13524.0], [82.7, 13524.0], [82.8, 13524.0], [82.9, 13524.0], [83.0, 13529.0], [83.1, 13529.0], [83.2, 13529.0], [83.3, 13529.0], [83.4, 13529.0], [83.5, 13535.0], [83.6, 13535.0], [83.7, 13535.0], [83.8, 13535.0], [83.9, 13535.0], [84.0, 13541.0], [84.1, 13541.0], [84.2, 13541.0], [84.3, 13541.0], [84.4, 13541.0], [84.5, 13552.0], [84.6, 13552.0], [84.7, 13552.0], [84.8, 13552.0], [84.9, 13552.0], [85.0, 13556.0], [85.1, 13556.0], [85.2, 13556.0], [85.3, 13556.0], [85.4, 13556.0], [85.5, 13561.0], [85.6, 13561.0], [85.7, 13561.0], [85.8, 13561.0], [85.9, 13561.0], [86.0, 13567.0], [86.1, 13567.0], [86.2, 13567.0], [86.3, 13567.0], [86.4, 13567.0], [86.5, 13568.0], [86.6, 13568.0], [86.7, 13568.0], [86.8, 13568.0], [86.9, 13568.0], [87.0, 13573.0], [87.1, 13573.0], [87.2, 13573.0], [87.3, 13573.0], [87.4, 13573.0], [87.5, 13576.0], [87.6, 13576.0], [87.7, 13576.0], [87.8, 13576.0], [87.9, 13576.0], [88.0, 13583.0], [88.1, 13583.0], [88.2, 13583.0], [88.3, 13583.0], [88.4, 13583.0], [88.5, 13588.0], [88.6, 13588.0], [88.7, 13588.0], [88.8, 13588.0], [88.9, 13588.0], [89.0, 13594.0], [89.1, 13594.0], [89.2, 13594.0], [89.3, 13594.0], [89.4, 13594.0], [89.5, 13595.0], [89.6, 13595.0], [89.7, 13595.0], [89.8, 13595.0], [89.9, 13595.0], [90.0, 13599.0], [90.1, 13599.0], [90.2, 13599.0], [90.3, 13599.0], [90.4, 13599.0], [90.5, 13608.0], [90.6, 13608.0], [90.7, 13608.0], [90.8, 13608.0], [90.9, 13608.0], [91.0, 13613.0], [91.1, 13613.0], [91.2, 13613.0], [91.3, 13613.0], [91.4, 13613.0], [91.5, 13615.0], [91.6, 13615.0], [91.7, 13615.0], [91.8, 13615.0], [91.9, 13615.0], [92.0, 13624.0], [92.1, 13624.0], [92.2, 13624.0], [92.3, 13624.0], [92.4, 13624.0], [92.5, 13629.0], [92.6, 13629.0], [92.7, 13629.0], [92.8, 13629.0], [92.9, 13629.0], [93.0, 13635.0], [93.1, 13635.0], [93.2, 13635.0], [93.3, 13635.0], [93.4, 13635.0], [93.5, 13639.0], [93.6, 13639.0], [93.7, 13639.0], [93.8, 13639.0], [93.9, 13639.0], [94.0, 13640.0], [94.1, 13640.0], [94.2, 13640.0], [94.3, 13640.0], [94.4, 13640.0], [94.5, 13649.0], [94.6, 13649.0], [94.7, 13649.0], [94.8, 13649.0], [94.9, 13649.0], [95.0, 13655.0], [95.1, 13655.0], [95.2, 13655.0], [95.3, 13655.0], [95.4, 13655.0], [95.5, 13657.0], [95.6, 13657.0], [95.7, 13657.0], [95.8, 13657.0], [95.9, 13657.0], [96.0, 13661.0], [96.1, 13661.0], [96.2, 13661.0], [96.3, 13661.0], [96.4, 13661.0], [96.5, 13670.0], [96.6, 13670.0], [96.7, 13670.0], [96.8, 13670.0], [96.9, 13670.0], [97.0, 13673.0], [97.1, 13673.0], [97.2, 13673.0], [97.3, 13673.0], [97.4, 13673.0], [97.5, 13674.0], [97.6, 13674.0], [97.7, 13674.0], [97.8, 13674.0], [97.9, 13674.0], [98.0, 13681.0], [98.1, 13681.0], [98.2, 13681.0], [98.3, 13681.0], [98.4, 13681.0], [98.5, 13689.0], [98.6, 13689.0], [98.7, 13689.0], [98.8, 13689.0], [98.9, 13689.0], [99.0, 13690.0], [99.1, 13690.0], [99.2, 13690.0], [99.3, 13690.0], [99.4, 13690.0], [99.5, 13696.0], [99.6, 13696.0], [99.7, 13696.0], [99.8, 13696.0], [99.9, 13696.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 60025.0], [0.1, 60025.0], [0.2, 60025.0], [0.3, 60025.0], [0.4, 60025.0], [0.5, 60026.0], [0.6, 60026.0], [0.7, 60026.0], [0.8, 60026.0], [0.9, 60026.0], [1.0, 60026.0], [1.1, 60026.0], [1.2, 60026.0], [1.3, 60026.0], [1.4, 60026.0], [1.5, 60026.0], [1.6, 60026.0], [1.7, 60026.0], [1.8, 60026.0], [1.9, 60026.0], [2.0, 60026.0], [2.1, 60026.0], [2.2, 60026.0], [2.3, 60026.0], [2.4, 60026.0], [2.5, 60026.0], [2.6, 60026.0], [2.7, 60026.0], [2.8, 60026.0], [2.9, 60026.0], [3.0, 60026.0], [3.1, 60026.0], [3.2, 60026.0], [3.3, 60026.0], [3.4, 60026.0], [3.5, 60026.0], [3.6, 60026.0], [3.7, 60026.0], [3.8, 60026.0], [3.9, 60026.0], [4.0, 60026.0], [4.1, 60026.0], [4.2, 60026.0], [4.3, 60026.0], [4.4, 60026.0], [4.5, 60026.0], [4.6, 60026.0], [4.7, 60026.0], [4.8, 60026.0], [4.9, 60026.0], [5.0, 60026.0], [5.1, 60026.0], [5.2, 60026.0], [5.3, 60026.0], [5.4, 60026.0], [5.5, 60026.0], [5.6, 60026.0], [5.7, 60026.0], [5.8, 60026.0], [5.9, 60026.0], [6.0, 60026.0], [6.1, 60026.0], [6.2, 60026.0], [6.3, 60026.0], [6.4, 60026.0], [6.5, 60026.0], [6.6, 60026.0], [6.7, 60026.0], [6.8, 60026.0], [6.9, 60026.0], [7.0, 60026.0], [7.1, 60026.0], [7.2, 60026.0], [7.3, 60026.0], [7.4, 60026.0], [7.5, 60026.0], [7.6, 60026.0], [7.7, 60026.0], [7.8, 60026.0], [7.9, 60026.0], [8.0, 60027.0], [8.1, 60027.0], [8.2, 60027.0], [8.3, 60027.0], [8.4, 60027.0], [8.5, 60027.0], [8.6, 60027.0], [8.7, 60027.0], [8.8, 60027.0], [8.9, 60027.0], [9.0, 60027.0], [9.1, 60027.0], [9.2, 60027.0], [9.3, 60027.0], [9.4, 60027.0], [9.5, 60027.0], [9.6, 60027.0], [9.7, 60027.0], [9.8, 60027.0], [9.9, 60027.0], [10.0, 60027.0], [10.1, 60027.0], [10.2, 60027.0], [10.3, 60027.0], [10.4, 60027.0], [10.5, 60027.0], [10.6, 60027.0], [10.7, 60027.0], [10.8, 60027.0], [10.9, 60027.0], [11.0, 60027.0], [11.1, 60027.0], [11.2, 60027.0], [11.3, 60027.0], [11.4, 60027.0], [11.5, 60027.0], [11.6, 60027.0], [11.7, 60027.0], [11.8, 60027.0], [11.9, 60027.0], [12.0, 60027.0], [12.1, 60027.0], [12.2, 60027.0], [12.3, 60027.0], [12.4, 60027.0], [12.5, 60027.0], [12.6, 60027.0], [12.7, 60027.0], [12.8, 60027.0], [12.9, 60027.0], [13.0, 60027.0], [13.1, 60027.0], [13.2, 60027.0], [13.3, 60027.0], [13.4, 60027.0], [13.5, 60027.0], [13.6, 60027.0], [13.7, 60027.0], [13.8, 60027.0], [13.9, 60027.0], [14.0, 60027.0], [14.1, 60027.0], [14.2, 60027.0], [14.3, 60027.0], [14.4, 60027.0], [14.5, 60027.0], [14.6, 60027.0], [14.7, 60027.0], [14.8, 60027.0], [14.9, 60027.0], [15.0, 60027.0], [15.1, 60027.0], [15.2, 60027.0], [15.3, 60027.0], [15.4, 60027.0], [15.5, 60027.0], [15.6, 60027.0], [15.7, 60027.0], [15.8, 60027.0], [15.9, 60027.0], [16.0, 60027.0], [16.1, 60027.0], [16.2, 60027.0], [16.3, 60027.0], [16.4, 60027.0], [16.5, 60027.0], [16.6, 60027.0], [16.7, 60027.0], [16.8, 60027.0], [16.9, 60027.0], [17.0, 60027.0], [17.1, 60027.0], [17.2, 60027.0], [17.3, 60027.0], [17.4, 60027.0], [17.5, 60027.0], [17.6, 60027.0], [17.7, 60027.0], [17.8, 60027.0], [17.9, 60027.0], [18.0, 60027.0], [18.1, 60027.0], [18.2, 60027.0], [18.3, 60027.0], [18.4, 60027.0], [18.5, 60027.0], [18.6, 60027.0], [18.7, 60027.0], [18.8, 60027.0], [18.9, 60027.0], [19.0, 60027.0], [19.1, 60027.0], [19.2, 60027.0], [19.3, 60027.0], [19.4, 60027.0], [19.5, 60027.0], [19.6, 60027.0], [19.7, 60027.0], [19.8, 60027.0], [19.9, 60027.0], [20.0, 60027.0], [20.1, 60027.0], [20.2, 60027.0], [20.3, 60027.0], [20.4, 60027.0], [20.5, 60027.0], [20.6, 60027.0], [20.7, 60027.0], [20.8, 60027.0], [20.9, 60027.0], [21.0, 60027.0], [21.1, 60027.0], [21.2, 60027.0], [21.3, 60027.0], [21.4, 60027.0], [21.5, 60027.0], [21.6, 60027.0], [21.7, 60027.0], [21.8, 60027.0], [21.9, 60027.0], [22.0, 60027.0], [22.1, 60027.0], [22.2, 60027.0], [22.3, 60027.0], [22.4, 60027.0], [22.5, 60027.0], [22.6, 60027.0], [22.7, 60027.0], [22.8, 60027.0], [22.9, 60027.0], [23.0, 60027.0], [23.1, 60027.0], [23.2, 60027.0], [23.3, 60027.0], [23.4, 60027.0], [23.5, 60027.0], [23.6, 60027.0], [23.7, 60027.0], [23.8, 60027.0], [23.9, 60027.0], [24.0, 60027.0], [24.1, 60027.0], [24.2, 60027.0], [24.3, 60027.0], [24.4, 60027.0], [24.5, 60027.0], [24.6, 60027.0], [24.7, 60027.0], [24.8, 60027.0], [24.9, 60027.0], [25.0, 60027.0], [25.1, 60027.0], [25.2, 60027.0], [25.3, 60027.0], [25.4, 60027.0], [25.5, 60027.0], [25.6, 60027.0], [25.7, 60027.0], [25.8, 60027.0], [25.9, 60027.0], [26.0, 60027.0], [26.1, 60027.0], [26.2, 60027.0], [26.3, 60027.0], [26.4, 60027.0], [26.5, 60027.0], [26.6, 60027.0], [26.7, 60027.0], [26.8, 60027.0], [26.9, 60027.0], [27.0, 60027.0], [27.1, 60027.0], [27.2, 60027.0], [27.3, 60027.0], [27.4, 60027.0], [27.5, 60027.0], [27.6, 60027.0], [27.7, 60027.0], [27.8, 60027.0], [27.9, 60027.0], [28.0, 60027.0], [28.1, 60027.0], [28.2, 60027.0], [28.3, 60027.0], [28.4, 60027.0], [28.5, 60027.0], [28.6, 60027.0], [28.7, 60027.0], [28.8, 60027.0], [28.9, 60027.0], [29.0, 60027.0], [29.1, 60027.0], [29.2, 60027.0], [29.3, 60027.0], [29.4, 60027.0], [29.5, 60027.0], [29.6, 60027.0], [29.7, 60027.0], [29.8, 60027.0], [29.9, 60027.0], [30.0, 60027.0], [30.1, 60027.0], [30.2, 60027.0], [30.3, 60027.0], [30.4, 60027.0], [30.5, 60027.0], [30.6, 60027.0], [30.7, 60027.0], [30.8, 60027.0], [30.9, 60027.0], [31.0, 60027.0], [31.1, 60027.0], [31.2, 60027.0], [31.3, 60027.0], [31.4, 60027.0], [31.5, 60027.0], [31.6, 60027.0], [31.7, 60027.0], [31.8, 60027.0], [31.9, 60027.0], [32.0, 60027.0], [32.1, 60027.0], [32.2, 60027.0], [32.3, 60027.0], [32.4, 60027.0], [32.5, 60027.0], [32.6, 60027.0], [32.7, 60027.0], [32.8, 60027.0], [32.9, 60027.0], [33.0, 60027.0], [33.1, 60027.0], [33.2, 60027.0], [33.3, 60027.0], [33.4, 60027.0], [33.5, 60027.0], [33.6, 60027.0], [33.7, 60027.0], [33.8, 60027.0], [33.9, 60027.0], [34.0, 60027.0], [34.1, 60027.0], [34.2, 60027.0], [34.3, 60027.0], [34.4, 60027.0], [34.5, 60027.0], [34.6, 60027.0], [34.7, 60027.0], [34.8, 60027.0], [34.9, 60027.0], [35.0, 60027.0], [35.1, 60027.0], [35.2, 60027.0], [35.3, 60027.0], [35.4, 60027.0], [35.5, 60027.0], [35.6, 60027.0], [35.7, 60027.0], [35.8, 60027.0], [35.9, 60027.0], [36.0, 60027.0], [36.1, 60027.0], [36.2, 60027.0], [36.3, 60027.0], [36.4, 60027.0], [36.5, 60027.0], [36.6, 60027.0], [36.7, 60027.0], [36.8, 60027.0], [36.9, 60027.0], [37.0, 60027.0], [37.1, 60027.0], [37.2, 60027.0], [37.3, 60027.0], [37.4, 60027.0], [37.5, 60027.0], [37.6, 60027.0], [37.7, 60027.0], [37.8, 60027.0], [37.9, 60027.0], [38.0, 60027.0], [38.1, 60027.0], [38.2, 60027.0], [38.3, 60027.0], [38.4, 60027.0], [38.5, 60027.0], [38.6, 60027.0], [38.7, 60027.0], [38.8, 60027.0], [38.9, 60027.0], [39.0, 60027.0], [39.1, 60027.0], [39.2, 60027.0], [39.3, 60027.0], [39.4, 60027.0], [39.5, 60027.0], [39.6, 60027.0], [39.7, 60027.0], [39.8, 60027.0], [39.9, 60027.0], [40.0, 60027.0], [40.1, 60027.0], [40.2, 60027.0], [40.3, 60027.0], [40.4, 60027.0], [40.5, 60027.0], [40.6, 60027.0], [40.7, 60027.0], [40.8, 60027.0], [40.9, 60027.0], [41.0, 60027.0], [41.1, 60027.0], [41.2, 60027.0], [41.3, 60027.0], [41.4, 60027.0], [41.5, 60027.0], [41.6, 60027.0], [41.7, 60027.0], [41.8, 60027.0], [41.9, 60027.0], [42.0, 60028.0], [42.1, 60028.0], [42.2, 60028.0], [42.3, 60028.0], [42.4, 60028.0], [42.5, 60028.0], [42.6, 60028.0], [42.7, 60028.0], [42.8, 60028.0], [42.9, 60028.0], [43.0, 60028.0], [43.1, 60028.0], [43.2, 60028.0], [43.3, 60028.0], [43.4, 60028.0], [43.5, 60028.0], [43.6, 60028.0], [43.7, 60028.0], [43.8, 60028.0], [43.9, 60028.0], [44.0, 60028.0], [44.1, 60028.0], [44.2, 60028.0], [44.3, 60028.0], [44.4, 60028.0], [44.5, 60028.0], [44.6, 60028.0], [44.7, 60028.0], [44.8, 60028.0], [44.9, 60028.0], [45.0, 60028.0], [45.1, 60028.0], [45.2, 60028.0], [45.3, 60028.0], [45.4, 60028.0], [45.5, 60028.0], [45.6, 60028.0], [45.7, 60028.0], [45.8, 60028.0], [45.9, 60028.0], [46.0, 60028.0], [46.1, 60028.0], [46.2, 60028.0], [46.3, 60028.0], [46.4, 60028.0], [46.5, 60028.0], [46.6, 60028.0], [46.7, 60028.0], [46.8, 60028.0], [46.9, 60028.0], [47.0, 60028.0], [47.1, 60028.0], [47.2, 60028.0], [47.3, 60028.0], [47.4, 60028.0], [47.5, 60028.0], [47.6, 60028.0], [47.7, 60028.0], [47.8, 60028.0], [47.9, 60028.0], [48.0, 60028.0], [48.1, 60028.0], [48.2, 60028.0], [48.3, 60028.0], [48.4, 60028.0], [48.5, 60028.0], [48.6, 60028.0], [48.7, 60028.0], [48.8, 60028.0], [48.9, 60028.0], [49.0, 60028.0], [49.1, 60028.0], [49.2, 60028.0], [49.3, 60028.0], [49.4, 60028.0], [49.5, 60028.0], [49.6, 60028.0], [49.7, 60028.0], [49.8, 60028.0], [49.9, 60028.0], [50.0, 60028.0], [50.1, 60028.0], [50.2, 60028.0], [50.3, 60028.0], [50.4, 60028.0], [50.5, 60028.0], [50.6, 60028.0], [50.7, 60028.0], [50.8, 60028.0], [50.9, 60028.0], [51.0, 60028.0], [51.1, 60028.0], [51.2, 60028.0], [51.3, 60028.0], [51.4, 60028.0], [51.5, 60028.0], [51.6, 60028.0], [51.7, 60028.0], [51.8, 60028.0], [51.9, 60028.0], [52.0, 60028.0], [52.1, 60028.0], [52.2, 60028.0], [52.3, 60028.0], [52.4, 60028.0], [52.5, 60028.0], [52.6, 60028.0], [52.7, 60028.0], [52.8, 60028.0], [52.9, 60028.0], [53.0, 60028.0], [53.1, 60028.0], [53.2, 60028.0], [53.3, 60028.0], [53.4, 60028.0], [53.5, 60028.0], [53.6, 60028.0], [53.7, 60028.0], [53.8, 60028.0], [53.9, 60028.0], [54.0, 60028.0], [54.1, 60028.0], [54.2, 60028.0], [54.3, 60028.0], [54.4, 60028.0], [54.5, 60028.0], [54.6, 60028.0], [54.7, 60028.0], [54.8, 60028.0], [54.9, 60028.0], [55.0, 60028.0], [55.1, 60028.0], [55.2, 60028.0], [55.3, 60028.0], [55.4, 60028.0], [55.5, 60028.0], [55.6, 60028.0], [55.7, 60028.0], [55.8, 60028.0], [55.9, 60028.0], [56.0, 60028.0], [56.1, 60028.0], [56.2, 60028.0], [56.3, 60028.0], [56.4, 60028.0], [56.5, 60028.0], [56.6, 60028.0], [56.7, 60028.0], [56.8, 60028.0], [56.9, 60028.0], [57.0, 60028.0], [57.1, 60028.0], [57.2, 60028.0], [57.3, 60028.0], [57.4, 60028.0], [57.5, 60028.0], [57.6, 60028.0], [57.7, 60028.0], [57.8, 60028.0], [57.9, 60028.0], [58.0, 60028.0], [58.1, 60028.0], [58.2, 60028.0], [58.3, 60028.0], [58.4, 60028.0], [58.5, 60028.0], [58.6, 60028.0], [58.7, 60028.0], [58.8, 60028.0], [58.9, 60028.0], [59.0, 60028.0], [59.1, 60028.0], [59.2, 60028.0], [59.3, 60028.0], [59.4, 60028.0], [59.5, 60028.0], [59.6, 60028.0], [59.7, 60028.0], [59.8, 60028.0], [59.9, 60028.0], [60.0, 60028.0], [60.1, 60028.0], [60.2, 60028.0], [60.3, 60028.0], [60.4, 60028.0], [60.5, 60028.0], [60.6, 60028.0], [60.7, 60028.0], [60.8, 60028.0], [60.9, 60028.0], [61.0, 60028.0], [61.1, 60028.0], [61.2, 60028.0], [61.3, 60028.0], [61.4, 60028.0], [61.5, 60028.0], [61.6, 60028.0], [61.7, 60028.0], [61.8, 60028.0], [61.9, 60028.0], [62.0, 60028.0], [62.1, 60028.0], [62.2, 60028.0], [62.3, 60028.0], [62.4, 60028.0], [62.5, 60028.0], [62.6, 60028.0], [62.7, 60028.0], [62.8, 60028.0], [62.9, 60028.0], [63.0, 60028.0], [63.1, 60028.0], [63.2, 60028.0], [63.3, 60028.0], [63.4, 60028.0], [63.5, 60028.0], [63.6, 60028.0], [63.7, 60028.0], [63.8, 60028.0], [63.9, 60028.0], [64.0, 60028.0], [64.1, 60028.0], [64.2, 60028.0], [64.3, 60028.0], [64.4, 60028.0], [64.5, 60028.0], [64.6, 60028.0], [64.7, 60028.0], [64.8, 60028.0], [64.9, 60028.0], [65.0, 60028.0], [65.1, 60028.0], [65.2, 60028.0], [65.3, 60028.0], [65.4, 60028.0], [65.5, 60028.0], [65.6, 60028.0], [65.7, 60028.0], [65.8, 60028.0], [65.9, 60028.0], [66.0, 60028.0], [66.1, 60028.0], [66.2, 60028.0], [66.3, 60028.0], [66.4, 60028.0], [66.5, 60028.0], [66.6, 60028.0], [66.7, 60028.0], [66.8, 60028.0], [66.9, 60028.0], [67.0, 60028.0], [67.1, 60028.0], [67.2, 60028.0], [67.3, 60028.0], [67.4, 60028.0], [67.5, 60028.0], [67.6, 60028.0], [67.7, 60028.0], [67.8, 60028.0], [67.9, 60028.0], [68.0, 60028.0], [68.1, 60028.0], [68.2, 60028.0], [68.3, 60028.0], [68.4, 60028.0], [68.5, 60028.0], [68.6, 60028.0], [68.7, 60028.0], [68.8, 60028.0], [68.9, 60028.0], [69.0, 60028.0], [69.1, 60028.0], [69.2, 60028.0], [69.3, 60028.0], [69.4, 60028.0], [69.5, 60028.0], [69.6, 60028.0], [69.7, 60028.0], [69.8, 60028.0], [69.9, 60028.0], [70.0, 60028.0], [70.1, 60028.0], [70.2, 60028.0], [70.3, 60028.0], [70.4, 60028.0], [70.5, 60028.0], [70.6, 60028.0], [70.7, 60028.0], [70.8, 60028.0], [70.9, 60028.0], [71.0, 60028.0], [71.1, 60028.0], [71.2, 60028.0], [71.3, 60028.0], [71.4, 60028.0], [71.5, 60028.0], [71.6, 60028.0], [71.7, 60028.0], [71.8, 60028.0], [71.9, 60028.0], [72.0, 60028.0], [72.1, 60028.0], [72.2, 60028.0], [72.3, 60028.0], [72.4, 60028.0], [72.5, 60028.0], [72.6, 60028.0], [72.7, 60028.0], [72.8, 60028.0], [72.9, 60028.0], [73.0, 60028.0], [73.1, 60028.0], [73.2, 60028.0], [73.3, 60028.0], [73.4, 60028.0], [73.5, 60028.0], [73.6, 60028.0], [73.7, 60028.0], [73.8, 60028.0], [73.9, 60028.0], [74.0, 60028.0], [74.1, 60028.0], [74.2, 60028.0], [74.3, 60028.0], [74.4, 60028.0], [74.5, 60028.0], [74.6, 60028.0], [74.7, 60028.0], [74.8, 60028.0], [74.9, 60028.0], [75.0, 60028.0], [75.1, 60028.0], [75.2, 60028.0], [75.3, 60028.0], [75.4, 60028.0], [75.5, 60028.0], [75.6, 60028.0], [75.7, 60028.0], [75.8, 60028.0], [75.9, 60028.0], [76.0, 60029.0], [76.1, 60029.0], [76.2, 60029.0], [76.3, 60029.0], [76.4, 60029.0], [76.5, 60029.0], [76.6, 60029.0], [76.7, 60029.0], [76.8, 60029.0], [76.9, 60029.0], [77.0, 60029.0], [77.1, 60029.0], [77.2, 60029.0], [77.3, 60029.0], [77.4, 60029.0], [77.5, 60029.0], [77.6, 60029.0], [77.7, 60029.0], [77.8, 60029.0], [77.9, 60029.0], [78.0, 60029.0], [78.1, 60029.0], [78.2, 60029.0], [78.3, 60029.0], [78.4, 60029.0], [78.5, 60029.0], [78.6, 60029.0], [78.7, 60029.0], [78.8, 60029.0], [78.9, 60029.0], [79.0, 60029.0], [79.1, 60029.0], [79.2, 60029.0], [79.3, 60029.0], [79.4, 60029.0], [79.5, 60029.0], [79.6, 60029.0], [79.7, 60029.0], [79.8, 60029.0], [79.9, 60029.0], [80.0, 60029.0], [80.1, 60029.0], [80.2, 60029.0], [80.3, 60029.0], [80.4, 60029.0], [80.5, 60029.0], [80.6, 60029.0], [80.7, 60029.0], [80.8, 60029.0], [80.9, 60029.0], [81.0, 60029.0], [81.1, 60029.0], [81.2, 60029.0], [81.3, 60029.0], [81.4, 60029.0], [81.5, 60029.0], [81.6, 60029.0], [81.7, 60029.0], [81.8, 60029.0], [81.9, 60029.0], [82.0, 60029.0], [82.1, 60029.0], [82.2, 60029.0], [82.3, 60029.0], [82.4, 60029.0], [82.5, 60029.0], [82.6, 60029.0], [82.7, 60029.0], [82.8, 60029.0], [82.9, 60029.0], [83.0, 60029.0], [83.1, 60029.0], [83.2, 60029.0], [83.3, 60029.0], [83.4, 60029.0], [83.5, 60029.0], [83.6, 60029.0], [83.7, 60029.0], [83.8, 60029.0], [83.9, 60029.0], [84.0, 60029.0], [84.1, 60029.0], [84.2, 60029.0], [84.3, 60029.0], [84.4, 60029.0], [84.5, 60029.0], [84.6, 60029.0], [84.7, 60029.0], [84.8, 60029.0], [84.9, 60029.0], [85.0, 60029.0], [85.1, 60029.0], [85.2, 60029.0], [85.3, 60029.0], [85.4, 60029.0], [85.5, 60030.0], [85.6, 60030.0], [85.7, 60030.0], [85.8, 60030.0], [85.9, 60030.0], [86.0, 60030.0], [86.1, 60030.0], [86.2, 60030.0], [86.3, 60030.0], [86.4, 60030.0], [86.5, 60030.0], [86.6, 60030.0], [86.7, 60030.0], [86.8, 60030.0], [86.9, 60030.0], [87.0, 60030.0], [87.1, 60030.0], [87.2, 60030.0], [87.3, 60030.0], [87.4, 60030.0], [87.5, 60030.0], [87.6, 60030.0], [87.7, 60030.0], [87.8, 60030.0], [87.9, 60030.0], [88.0, 60030.0], [88.1, 60030.0], [88.2, 60030.0], [88.3, 60030.0], [88.4, 60030.0], [88.5, 60030.0], [88.6, 60030.0], [88.7, 60030.0], [88.8, 60030.0], [88.9, 60030.0], [89.0, 60031.0], [89.1, 60031.0], [89.2, 60031.0], [89.3, 60031.0], [89.4, 60031.0], [89.5, 60031.0], [89.6, 60031.0], [89.7, 60031.0], [89.8, 60031.0], [89.9, 60031.0], [90.0, 60031.0], [90.1, 60031.0], [90.2, 60031.0], [90.3, 60031.0], [90.4, 60031.0], [90.5, 60031.0], [90.6, 60031.0], [90.7, 60031.0], [90.8, 60031.0], [90.9, 60031.0], [91.0, 60031.0], [91.1, 60031.0], [91.2, 60031.0], [91.3, 60031.0], [91.4, 60031.0], [91.5, 60031.0], [91.6, 60031.0], [91.7, 60031.0], [91.8, 60031.0], [91.9, 60031.0], [92.0, 60032.0], [92.1, 60032.0], [92.2, 60032.0], [92.3, 60032.0], [92.4, 60032.0], [92.5, 60032.0], [92.6, 60032.0], [92.7, 60032.0], [92.8, 60032.0], [92.9, 60032.0], [93.0, 60032.0], [93.1, 60032.0], [93.2, 60032.0], [93.3, 60032.0], [93.4, 60032.0], [93.5, 60032.0], [93.6, 60032.0], [93.7, 60032.0], [93.8, 60032.0], [93.9, 60032.0], [94.0, 60032.0], [94.1, 60032.0], [94.2, 60032.0], [94.3, 60032.0], [94.4, 60032.0], [94.5, 60032.0], [94.6, 60032.0], [94.7, 60032.0], [94.8, 60032.0], [94.9, 60032.0], [95.0, 60033.0], [95.1, 60033.0], [95.2, 60033.0], [95.3, 60033.0], [95.4, 60033.0], [95.5, 60035.0], [95.6, 60035.0], [95.7, 60035.0], [95.8, 60035.0], [95.9, 60035.0], [96.0, 60036.0], [96.1, 60036.0], [96.2, 60036.0], [96.3, 60036.0], [96.4, 60036.0], [96.5, 60036.0], [96.6, 60036.0], [96.7, 60036.0], [96.8, 60036.0], [96.9, 60036.0], [97.0, 60037.0], [97.1, 60037.0], [97.2, 60037.0], [97.3, 60037.0], [97.4, 60037.0], [97.5, 60041.0], [97.6, 60041.0], [97.7, 60041.0], [97.8, 60041.0], [97.9, 60041.0], [98.0, 60041.0], [98.1, 60041.0], [98.2, 60041.0], [98.3, 60041.0], [98.4, 60041.0], [98.5, 60044.0], [98.6, 60044.0], [98.7, 60044.0], [98.8, 60044.0], [98.9, 60044.0], [99.0, 60048.0], [99.1, 60048.0], [99.2, 60048.0], [99.3, 60048.0], [99.4, 60048.0], [99.5, 60053.0], [99.6, 60053.0], [99.7, 60053.0], [99.8, 60053.0], [99.9, 60053.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8944.0, "series": [{"data": [[0.0, 8765.0], [3000.0, 12.0], [3100.0, 26.0], [200.0, 605.0], [1000.0, 590.0], [1100.0, 359.0], [300.0, 271.0], [1200.0, 54.0], [1300.0, 71.0], [1400.0, 26.0], [1500.0, 3.0], [100.0, 8944.0], [400.0, 154.0], [7000.0, 1.0], [2000.0, 73.0], [500.0, 46.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[12700.0, 23.0], [13100.0, 20.0], [12900.0, 30.0], [13200.0, 31.0], [13300.0, 11.0], [12800.0, 18.0], [13000.0, 12.0], [13500.0, 21.0], [13600.0, 19.0], [13400.0, 15.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[60000.0, 200.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1615.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 9804.0, "series": [{"data": [[0.0, 8981.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 9804.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1615.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 100.54500000000009, "minX": 1.61757528E12, "maxY": 188.3181758270727, "series": [{"data": [[1.61757528E12, 104.15499999999996]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61757528E12, 188.3181758270727], [1.61757534E12, 171.66212841375898]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.61757534E12, 100.54500000000009]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757534E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.0, "minX": 3.0, "maxY": 60053.0, "series": [{"data": [[207.0, 28.0], [206.0, 28.0], [205.0, 2334.5], [204.0, 1086.0], [203.0, 27.764705882352942], [202.0, 28.0], [201.0, 905.5], [215.0, 28.0], [214.0, 28.368421052631575], [213.0, 28.0], [212.0, 27.875], [211.0, 28.166666666666664], [210.0, 216.56249999999997], [209.0, 29.0], [208.0, 206.1764705882353], [223.0, 28.5], [222.0, 230.2], [221.0, 28.2], [220.0, 28.0], [219.0, 27.75], [218.0, 28.75], [217.0, 27.833333333333332], [216.0, 28.142857142857142], [231.0, 124.66666666666667], [230.0, 286.6666666666667], [229.0, 112.0], [228.0, 472.25], [227.0, 560.3333333333333], [226.0, 85.66666666666664], [225.0, 171.7142857142857], [224.0, 28.904761904761912], [239.0, 172.21428571428572], [238.0, 29.5], [237.0, 27.0], [236.0, 278.625], [235.0, 27.666666666666668], [234.0, 195.5], [233.0, 106.77777777777777], [232.0, 281.4], [247.0, 94.53333333333332], [246.0, 388.0714285714286], [245.0, 283.25], [244.0, 27.333333333333332], [243.0, 432.0], [242.0, 264.5294117647059], [241.0, 278.5], [240.0, 27.0], [255.0, 102.42857142857142], [254.0, 28.25], [253.0, 29.3], [252.0, 29.5], [251.0, 28.57142857142857], [250.0, 27.89473684210526], [249.0, 27.5], [248.0, 84.0], [270.0, 151.05263157894737], [271.0, 253.15000000000003], [269.0, 44.0], [268.0, 156.19230769230765], [267.0, 117.21621621621621], [266.0, 31.0], [265.0, 370.3333333333333], [264.0, 32.166666666666664], [263.0, 31.81818181818182], [257.0, 28.0], [256.0, 67.52941176470588], [259.0, 28.0], [258.0, 27.0], [262.0, 100.13333333333334], [261.0, 31.75], [260.0, 93.4468085106383], [286.0, 30.0], [287.0, 56.45945945945946], [285.0, 29.714285714285715], [284.0, 27.5], [283.0, 66.88461538461539], [282.0, 27.0], [281.0, 129.0], [280.0, 28.5], [279.0, 29.666666666666668], [273.0, 1135.0312500000005], [272.0, 523.6363636363636], [275.0, 344.69230769230774], [274.0, 1523.0], [278.0, 230.48571428571427], [277.0, 362.0], [276.0, 130.20000000000002], [302.0, 46.5], [303.0, 80.6875], [301.0, 45.4], [300.0, 46.125], [299.0, 47.12], [298.0, 45.565217391304344], [297.0, 45.333333333333336], [296.0, 145.39999999999998], [295.0, 119.23076923076924], [289.0, 32.5], [288.0, 31.52173913043478], [291.0, 37.13333333333334], [290.0, 308.2272727272727], [294.0, 42.0], [293.0, 100.1875], [292.0, 35.333333333333336], [318.0, 113.46999999999998], [319.0, 123.21428571428571], [317.0, 77.25], [316.0, 164.8181818181818], [315.0, 104.21428571428572], [314.0, 320.75], [313.0, 64.86486486486486], [312.0, 61.476923076923086], [311.0, 161.5], [305.0, 46.4], [304.0, 134.40540540540536], [307.0, 50.25], [306.0, 47.666666666666664], [310.0, 58.0], [309.0, 56.35294117647058], [308.0, 53.73684210526316], [334.0, 137.0857142857143], [335.0, 247.58333333333334], [333.0, 77.0], [332.0, 107.9318181818182], [331.0, 121.91891891891893], [330.0, 312.1904761904762], [329.0, 330.5918367346938], [328.0, 288.3333333333333], [327.0, 245.86363636363632], [321.0, 150.6], [320.0, 161.0], [323.0, 126.09302325581395], [322.0, 134.0], [326.0, 132.0], [325.0, 112.46774193548387], [324.0, 118.61111111111111], [350.0, 78.33333333333333], [351.0, 96.0684931506849], [349.0, 133.24590163934425], [348.0, 113.37142857142858], [347.0, 93.10526315789474], [346.0, 215.1818181818182], [345.0, 253.83333333333334], [344.0, 191.23255813953483], [343.0, 392.2857142857143], [339.0, 157.22222222222217], [338.0, 140.47058823529414], [342.0, 103.6], [341.0, 101.99999999999999], [366.0, 154.87], [367.0, 122.00000000000001], [365.0, 185.66666666666669], [364.0, 285.41379310344826], [363.0, 152.52380952380955], [362.0, 143.179856115108], [361.0, 256.5714285714286], [360.0, 110.0], [359.0, 112.27027027027029], [353.0, 92.21428571428571], [352.0, 129.48000000000002], [355.0, 115.63636363636363], [354.0, 90.54054054054053], [358.0, 156.33333333333334], [357.0, 246.60000000000005], [356.0, 191.50000000000003], [382.0, 414.58928571428567], [383.0, 214.10389610389612], [381.0, 516.2372881355933], [380.0, 128.83333333333331], [379.0, 392.5652173913044], [378.0, 195.87847222222214], [377.0, 144.34090909090907], [376.0, 525.5], [375.0, 155.14285714285708], [369.0, 255.97794117647044], [368.0, 121.27272727272728], [371.0, 330.1222222222224], [370.0, 277.3050847457627], [374.0, 167.7], [373.0, 218.33333333333334], [372.0, 265.52727272727265], [398.0, 175.32809430255415], [399.0, 211.95410414827882], [397.0, 140.53450608931007], [396.0, 52.87499999999999], [395.0, 70.35593220338981], [394.0, 108.63963963963964], [393.0, 111.93589743589743], [392.0, 138.23376623376623], [391.0, 82.37804878048779], [385.0, 422.4571428571428], [384.0, 192.33333333333343], [387.0, 424.1896551724135], [386.0, 268.39344262295083], [390.0, 31.882352941176478], [389.0, 115.10526315789477], [388.0, 298.10526315789485], [415.0, 47.9], [400.0, 196.33971141781714], [417.0, 28.0], [416.0, 29.0], [419.0, 30.5], [428.0, 27.5], [429.0, 28.0], [430.0, 29.0], [431.0, 27.333333333333332], [420.0, 28.0], [421.0, 30.11111111111111], [422.0, 30.0], [423.0, 29.0], [424.0, 27.5], [425.0, 28.0], [426.0, 28.57142857142857], [427.0, 29.555555555555557], [433.0, 29.875], [432.0, 28.5], [434.0, 30.5], [435.0, 29.75], [436.0, 28.333333333333332], [437.0, 28.666666666666668], [438.0, 29.714285714285715], [439.0, 30.8], [440.0, 30.444444444444443], [446.0, 30.0], [447.0, 31.333333333333332], [444.0, 29.875], [445.0, 29.8], [441.0, 29.571428571428573], [442.0, 27.833333333333332], [443.0, 29.25], [449.0, 31.333333333333332], [448.0, 31.0], [450.0, 30.4], [451.0, 31.0], [452.0, 32.4], [453.0, 32.666666666666664], [454.0, 33.285714285714285], [455.0, 33.33333333333333], [456.0, 34.125], [462.0, 39.0], [463.0, 39.111111111111114], [460.0, 39.0], [461.0, 36.44444444444444], [457.0, 34.714285714285715], [458.0, 35.142857142857146], [459.0, 38.5], [465.0, 40.6], [464.0, 39.14285714285714], [466.0, 41.14285714285714], [467.0, 42.666666666666664], [468.0, 41.666666666666664], [469.0, 42.785714285714285], [470.0, 40.0], [471.0, 41.857142857142854], [472.0, 45.714285714285715], [478.0, 44.0], [479.0, 46.75], [476.0, 45.666666666666664], [477.0, 45.142857142857146], [473.0, 45.5], [474.0, 44.25], [475.0, 48.666666666666664], [481.0, 45.5], [480.0, 46.57142857142857], [482.0, 48.16666666666667], [483.0, 45.66666666666666], [484.0, 42.4], [485.0, 47.0], [486.0, 43.35294117647059], [487.0, 40.0], [488.0, 43.66666666666667], [494.0, 45.0], [495.0, 44.6], [492.0, 44.09090909090909], [493.0, 44.2], [489.0, 43.285714285714285], [490.0, 41.1], [491.0, 42.857142857142854], [497.0, 60.42857142857143], [496.0, 51.44444444444444], [498.0, 56.0], [499.0, 52.83333333333333], [500.0, 55.0], [501.0, 57.53846153846154], [502.0, 57.833333333333336], [505.0, 61.333333333333336], [511.0, 75.66666666666667], [508.0, 63.55555555555556], [509.0, 63.666666666666664], [506.0, 62.875], [507.0, 64.8], [537.0, 187.0], [513.0, 84.0], [514.0, 89.0], [535.0, 175.85714285714286], [543.0, 194.5], [536.0, 180.79999999999998], [538.0, 188.0], [540.0, 194.33333333333334], [541.0, 188.0], [542.0, 195.65000000000003], [551.0, 206.5], [545.0, 193.33333333333334], [544.0, 193.75], [558.0, 135.0], [559.0, 118.50000000000001], [556.0, 183.0], [557.0, 154.0], [547.0, 199.0], [548.0, 203.6], [549.0, 205.27272727272728], [560.0, 117.5], [575.0, 100.75], [573.0, 101.5], [574.0, 101.50000000000001], [570.0, 103.83333333333333], [571.0, 103.33333333333334], [568.0, 113.60000000000001], [569.0, 102.2], [562.0, 118.0], [563.0, 109.0], [564.0, 111.375], [565.0, 114.66666666666667], [566.0, 110.8], [567.0, 113.0], [552.0, 209.0], [553.0, 207.0], [554.0, 206.0], [555.0, 204.33333333333334], [579.0, 110.33333333333333], [576.0, 101.0], [590.0, 98.0], [591.0, 99.33333333333333], [588.0, 97.5], [589.0, 99.33333333333333], [586.0, 92.0], [587.0, 92.66666666666667], [577.0, 101.33333333333333], [578.0, 109.0], [580.0, 113.0], [581.0, 112.85714285714286], [582.0, 110.27272727272727], [583.0, 106.0], [592.0, 94.625], [600.0, 168.14567712318242], [593.0, 89.0], [594.0, 86.2], [595.0, 73.99999999999999], [596.0, 70.46774193548386], [597.0, 77.90476190476191], [598.0, 68.57142857142857], [599.0, 69.0], [584.0, 104.2], [585.0, 99.77777777777777]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[453.0864500000015, 178.30289999999997]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[415.0, 13067.5], [413.0, 12874.5], [412.0, 13084.333333333334], [411.0, 13696.0], [410.0, 13296.0], [431.0, 13427.0], [429.0, 13362.0], [427.0, 13297.0], [424.0, 13157.5], [423.0, 13146.5], [422.0, 12749.0], [421.0, 13643.0], [420.0, 13162.0], [418.0, 13613.0], [416.0, 12841.0], [446.0, 13229.0], [443.0, 13148.166666666666], [441.0, 13019.0], [440.0, 13291.0], [439.0, 12961.0], [438.0, 13213.0], [436.0, 13038.0], [435.0, 12834.0], [432.0, 12807.0], [462.0, 13343.666666666666], [460.0, 13176.5], [458.0, 13324.0], [455.0, 13296.5], [452.0, 13091.666666666666], [450.0, 12899.0], [449.0, 13095.0], [476.0, 13361.0], [478.0, 13649.0], [479.0, 13087.5], [477.0, 12893.0], [473.0, 13140.0], [472.0, 12870.0], [471.0, 12716.0], [464.0, 13290.0], [467.0, 13216.0], [466.0, 13040.0], [469.0, 13689.0], [468.0, 13076.333333333334], [495.0, 13400.0], [494.0, 13146.666666666666], [491.0, 12939.333333333334], [490.0, 12710.0], [488.0, 13318.5], [486.0, 13433.0], [485.0, 13222.0], [483.0, 13155.0], [482.0, 13289.0], [499.0, 13635.0], [510.0, 13398.0], [508.0, 12832.0], [507.0, 12953.0], [505.0, 12968.5], [504.0, 13222.0], [503.0, 13009.0], [502.0, 13023.5], [501.0, 13302.0], [498.0, 13241.0], [497.0, 13452.0], [540.0, 13285.5], [543.0, 13134.0], [538.0, 13120.0], [537.0, 13119.5], [536.0, 13690.0], [518.0, 13199.666666666666], [514.0, 12988.5], [513.0, 13048.0], [532.0, 13372.0], [530.0, 12931.5], [528.0, 13212.0], [526.0, 12892.5], [524.0, 13036.0], [523.0, 13212.0], [522.0, 13517.0], [520.0, 13134.0], [573.0, 12992.333333333334], [574.0, 12988.0], [571.0, 12996.5], [568.0, 13607.5], [567.0, 13107.5], [565.0, 13367.0], [561.0, 13288.666666666666], [560.0, 13224.5], [559.0, 12772.0], [545.0, 13661.0], [544.0, 13386.0], [547.0, 13266.6], [546.0, 13285.0], [551.0, 13212.0], [550.0, 12982.333333333334], [557.0, 13535.0], [552.0, 13184.333333333334], [593.0, 13289.5], [600.0, 13114.0], [597.0, 13382.0], [596.0, 13203.42857142857], [595.0, 13608.0], [590.0, 13316.0], [589.0, 13624.0], [586.0, 12714.0], [583.0, 13152.5], [582.0, 13415.0], [581.0, 13257.0], [579.0, 13029.5], [578.0, 12929.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[504.1099999999999, 13182.985000000002]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[3.0, 60036.0], [6.0, 60036.0], [7.0, 60028.0], [8.0, 60027.0], [9.0, 60027.0], [10.0, 60027.0], [11.0, 60026.0], [12.0, 60027.0], [13.0, 60027.0], [14.0, 60028.0], [15.0, 60027.0], [16.0, 60029.0], [17.0, 60031.0], [18.0, 60029.0], [19.0, 60028.0], [20.0, 60028.0], [21.0, 60028.0], [22.0, 60027.0], [23.0, 60028.0], [24.0, 60032.0], [25.0, 60028.0], [26.0, 60028.0], [27.0, 60029.0], [28.0, 60028.0], [29.0, 60032.0], [31.0, 60030.5], [33.0, 60028.0], [32.0, 60027.0], [35.0, 60028.0], [34.0, 60026.0], [37.0, 60027.0], [36.0, 60027.0], [39.0, 60028.0], [38.0, 60029.0], [41.0, 60028.0], [40.0, 60027.0], [43.0, 60027.0], [42.0, 60028.0], [45.0, 60028.0], [44.0, 60029.0], [47.0, 60028.0], [46.0, 60029.0], [49.0, 60027.0], [48.0, 60027.0], [51.0, 60027.0], [50.0, 60026.0], [53.0, 60027.0], [52.0, 60025.0], [55.0, 60027.0], [54.0, 60026.0], [57.0, 60028.0], [56.0, 60026.0], [59.0, 60028.0], [58.0, 60028.0], [61.0, 60028.0], [60.0, 60028.0], [63.0, 60028.0], [62.0, 60026.0], [67.0, 60029.0], [66.0, 60026.0], [65.0, 60029.0], [64.0, 60028.0], [71.0, 60027.0], [70.0, 60027.0], [69.0, 60027.0], [68.0, 60030.0], [75.0, 60027.0], [74.0, 60028.0], [73.0, 60028.0], [72.0, 60027.0], [79.0, 60032.0], [78.0, 60028.0], [77.0, 60032.0], [76.0, 60028.0], [83.0, 60027.0], [82.0, 60028.0], [81.0, 60027.0], [80.0, 60026.0], [87.0, 60027.0], [86.0, 60028.0], [85.0, 60027.0], [84.0, 60028.0], [91.0, 60029.0], [90.0, 60030.0], [89.0, 60028.0], [88.0, 60029.0], [95.0, 60026.0], [94.0, 60027.0], [93.0, 60027.0], [92.0, 60028.0], [99.0, 60028.0], [98.0, 60027.0], [97.0, 60027.0], [96.0, 60027.0], [103.0, 60028.0], [102.0, 60027.0], [101.0, 60027.0], [100.0, 60028.0], [107.0, 60027.0], [106.0, 60026.0], [105.0, 60028.0], [104.0, 60027.0], [111.0, 60029.0], [110.0, 60027.0], [109.0, 60030.0], [108.0, 60027.0], [115.0, 60026.0], [114.0, 60027.0], [113.0, 60028.0], [112.0, 60028.0], [119.0, 60027.0], [118.0, 60028.0], [117.0, 60032.0], [116.0, 60029.0], [123.0, 60027.0], [122.0, 60030.0], [121.0, 60027.0], [120.0, 60027.0], [127.0, 60027.0], [126.0, 60028.0], [125.0, 60027.0], [124.0, 60030.0], [135.0, 60029.0], [134.0, 60029.0], [133.0, 60029.0], [132.0, 60027.0], [131.0, 60028.0], [130.0, 60027.0], [129.0, 60027.0], [128.0, 60027.0], [143.0, 60028.0], [142.0, 60027.0], [141.0, 60028.0], [140.0, 60028.0], [139.0, 60026.0], [138.0, 60028.0], [137.0, 60030.0], [136.0, 60027.0], [151.0, 60028.0], [150.0, 60026.0], [149.0, 60027.0], [148.0, 60030.0], [147.0, 60027.0], [146.0, 60028.0], [145.0, 60028.0], [144.0, 60032.0], [159.0, 60027.0], [158.0, 60027.0], [157.0, 60027.0], [156.0, 60031.0], [155.0, 60027.0], [154.0, 60027.0], [153.0, 60031.0], [152.0, 60027.0], [167.0, 60027.0], [166.0, 60026.0], [165.0, 60031.0], [164.0, 60029.0], [163.0, 60027.0], [162.0, 60028.0], [161.0, 60028.0], [160.0, 60028.0], [175.0, 60028.0], [174.0, 60028.0], [173.0, 60028.0], [172.0, 60028.0], [171.0, 60028.0], [170.0, 60028.0], [169.0, 60027.0], [168.0, 60027.0], [183.0, 60028.0], [182.0, 60028.0], [181.0, 60028.0], [180.0, 60029.0], [179.0, 60027.0], [178.0, 60028.0], [177.0, 60028.0], [176.0, 60027.0], [191.0, 60029.0], [190.0, 60029.0], [189.0, 60026.0], [188.0, 60028.0], [187.0, 60028.0], [186.0, 60028.0], [185.0, 60027.0], [184.0, 60028.0], [199.0, 60042.5], [197.0, 60036.0], [195.0, 60035.0], [194.0, 60027.0], [193.0, 60027.0], [192.0, 60027.0], [200.0, 60053.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[100.54500000000009, 60028.49]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61757528E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757528E12, 0.0], [1.61757534E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61757528E12, 0.0], [1.61757534E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757534E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 155.14946619217028, "minX": 1.61757528E12, "maxY": 60028.49, "series": [{"data": [[1.61757528E12, 155.14946619217028], [1.61757534E12, 192.45460404414686]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757528E12, 13182.985000000002]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757534E12, 60028.49]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757534E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757528E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757528E12, 0.0], [1.61757534E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757528E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757534E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757534E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757528E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757528E12, 0.0], [1.61757534E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757528E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757534E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757534E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61757528E12, "maxY": 60053.0, "series": [{"data": [[1.61757528E12, 13696.0], [1.61757534E12, 60053.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61757528E12, 302.0], [1.61757534E12, 305.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61757528E12, 13284.119999999999], [1.61757534E12, 60027.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61757528E12, 1088.5999999999995], [1.61757534E12, 1103.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61757528E12, 26.0], [1.61757534E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61757528E12, 81.0], [1.61757534E12, 127.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757534E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 8.0, "maxY": 60028.0, "series": [{"data": [[541.0, 194.0], [615.0, 102.0], [688.0, 48.0], [48.0, 28.0], [829.0, 143.0], [874.0, 30.0], [883.0, 106.0], [867.0, 102.0], [926.0, 75.0], [1003.0, 51.0], [992.0, 103.0], [1062.0, 41.0], [1046.0, 105.0], [1145.0, 172.0], [1100.0, 39.0], [1181.0, 151.0], [1269.0, 123.0], [1300.0, 143.0], [1432.0, 122.0], [1595.0, 57.0], [8.0, 27.0], [150.0, 28.0], [11.0, 28.0], [183.0, 60028.0], [12.0, 42.5], [216.0, 29.0], [17.0, 60028.0], [407.0, 32.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1595.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 8.0, "maxY": 4.9E-324, "series": [{"data": [[541.0, 0.0], [615.0, 0.0], [688.0, 0.0], [48.0, 0.0], [829.0, 0.0], [874.0, 0.0], [883.0, 0.0], [867.0, 0.0], [926.0, 0.0], [1003.0, 0.0], [992.0, 0.0], [1062.0, 0.0], [1046.0, 0.0], [1145.0, 0.0], [1100.0, 0.0], [1181.0, 0.0], [1269.0, 0.0], [1300.0, 0.0], [1432.0, 0.0], [1595.0, 0.0], [8.0, 0.0], [150.0, 0.0], [11.0, 0.0], [183.0, 0.0], [12.0, 0.0], [216.0, 0.0], [17.0, 0.0], [407.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1595.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 136.45, "minX": 1.61757528E12, "maxY": 203.55, "series": [{"data": [[1.61757528E12, 136.45], [1.61757534E12, 203.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757534E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 129.78333333333333, "minX": 1.61757528E12, "maxY": 210.21666666666667, "series": [{"data": [[1.61757528E12, 129.78333333333333], [1.61757534E12, 210.21666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757534E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.61757528E12, "maxY": 206.88333333333333, "series": [{"data": [[1.61757534E12, 3.3333333333333335]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.61757528E12, 3.3333333333333335]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61757528E12, 126.45], [1.61757534E12, 206.88333333333333]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757534E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 129.78333333333333, "minX": 1.61757528E12, "maxY": 210.21666666666667, "series": [{"data": [[1.61757528E12, 129.78333333333333], [1.61757534E12, 210.21666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757534E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

