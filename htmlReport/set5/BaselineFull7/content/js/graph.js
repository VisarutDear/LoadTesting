/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 60066.0, "series": [{"data": [[0.0, 26.0], [0.1, 26.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 27.0], [1.4, 27.0], [1.5, 27.0], [1.6, 27.0], [1.7, 27.0], [1.8, 27.0], [1.9, 27.0], [2.0, 27.0], [2.1, 27.0], [2.2, 27.0], [2.3, 27.0], [2.4, 27.0], [2.5, 27.0], [2.6, 27.0], [2.7, 27.0], [2.8, 27.0], [2.9, 27.0], [3.0, 27.0], [3.1, 27.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 28.0], [3.6, 28.0], [3.7, 28.0], [3.8, 28.0], [3.9, 28.0], [4.0, 28.0], [4.1, 28.0], [4.2, 28.0], [4.3, 28.0], [4.4, 28.0], [4.5, 28.0], [4.6, 28.0], [4.7, 28.0], [4.8, 28.0], [4.9, 28.0], [5.0, 28.0], [5.1, 28.0], [5.2, 28.0], [5.3, 28.0], [5.4, 28.0], [5.5, 28.0], [5.6, 28.0], [5.7, 28.0], [5.8, 28.0], [5.9, 28.0], [6.0, 28.0], [6.1, 28.0], [6.2, 28.0], [6.3, 28.0], [6.4, 28.0], [6.5, 28.0], [6.6, 28.0], [6.7, 28.0], [6.8, 28.0], [6.9, 28.0], [7.0, 28.0], [7.1, 28.0], [7.2, 28.0], [7.3, 28.0], [7.4, 28.0], [7.5, 28.0], [7.6, 28.0], [7.7, 28.0], [7.8, 28.0], [7.9, 28.0], [8.0, 28.0], [8.1, 29.0], [8.2, 29.0], [8.3, 29.0], [8.4, 29.0], [8.5, 29.0], [8.6, 29.0], [8.7, 29.0], [8.8, 29.0], [8.9, 29.0], [9.0, 29.0], [9.1, 29.0], [9.2, 29.0], [9.3, 29.0], [9.4, 29.0], [9.5, 29.0], [9.6, 29.0], [9.7, 29.0], [9.8, 29.0], [9.9, 29.0], [10.0, 29.0], [10.1, 29.0], [10.2, 29.0], [10.3, 29.0], [10.4, 29.0], [10.5, 29.0], [10.6, 29.0], [10.7, 29.0], [10.8, 29.0], [10.9, 30.0], [11.0, 30.0], [11.1, 30.0], [11.2, 30.0], [11.3, 30.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 30.0], [12.0, 30.0], [12.1, 30.0], [12.2, 30.0], [12.3, 30.0], [12.4, 30.0], [12.5, 30.0], [12.6, 30.0], [12.7, 30.0], [12.8, 31.0], [12.9, 31.0], [13.0, 31.0], [13.1, 31.0], [13.2, 31.0], [13.3, 31.0], [13.4, 31.0], [13.5, 31.0], [13.6, 31.0], [13.7, 31.0], [13.8, 31.0], [13.9, 31.0], [14.0, 31.0], [14.1, 32.0], [14.2, 32.0], [14.3, 32.0], [14.4, 32.0], [14.5, 32.0], [14.6, 32.0], [14.7, 32.0], [14.8, 32.0], [14.9, 32.0], [15.0, 32.0], [15.1, 33.0], [15.2, 33.0], [15.3, 33.0], [15.4, 33.0], [15.5, 33.0], [15.6, 33.0], [15.7, 33.0], [15.8, 33.0], [15.9, 34.0], [16.0, 34.0], [16.1, 34.0], [16.2, 34.0], [16.3, 34.0], [16.4, 34.0], [16.5, 34.0], [16.6, 34.0], [16.7, 34.0], [16.8, 35.0], [16.9, 35.0], [17.0, 35.0], [17.1, 35.0], [17.2, 35.0], [17.3, 35.0], [17.4, 35.0], [17.5, 36.0], [17.6, 36.0], [17.7, 36.0], [17.8, 36.0], [17.9, 36.0], [18.0, 37.0], [18.1, 37.0], [18.2, 37.0], [18.3, 38.0], [18.4, 38.0], [18.5, 38.0], [18.6, 39.0], [18.7, 39.0], [18.8, 39.0], [18.9, 39.0], [19.0, 39.0], [19.1, 39.0], [19.2, 40.0], [19.3, 40.0], [19.4, 40.0], [19.5, 40.0], [19.6, 41.0], [19.7, 41.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 43.0], [20.4, 43.0], [20.5, 43.0], [20.6, 43.0], [20.7, 43.0], [20.8, 43.0], [20.9, 43.0], [21.0, 44.0], [21.1, 44.0], [21.2, 44.0], [21.3, 44.0], [21.4, 44.0], [21.5, 44.0], [21.6, 44.0], [21.7, 45.0], [21.8, 45.0], [21.9, 45.0], [22.0, 45.0], [22.1, 46.0], [22.2, 46.0], [22.3, 47.0], [22.4, 47.0], [22.5, 47.0], [22.6, 47.0], [22.7, 48.0], [22.8, 48.0], [22.9, 48.0], [23.0, 48.0], [23.1, 48.0], [23.2, 48.0], [23.3, 49.0], [23.4, 49.0], [23.5, 49.0], [23.6, 50.0], [23.7, 50.0], [23.8, 50.0], [23.9, 51.0], [24.0, 51.0], [24.1, 52.0], [24.2, 52.0], [24.3, 53.0], [24.4, 53.0], [24.5, 54.0], [24.6, 54.0], [24.7, 55.0], [24.8, 55.0], [24.9, 56.0], [25.0, 56.0], [25.1, 56.0], [25.2, 57.0], [25.3, 57.0], [25.4, 58.0], [25.5, 58.0], [25.6, 58.0], [25.7, 59.0], [25.8, 60.0], [25.9, 60.0], [26.0, 61.0], [26.1, 62.0], [26.2, 63.0], [26.3, 63.0], [26.4, 64.0], [26.5, 64.0], [26.6, 65.0], [26.7, 66.0], [26.8, 67.0], [26.9, 68.0], [27.0, 68.0], [27.1, 69.0], [27.2, 70.0], [27.3, 71.0], [27.4, 71.0], [27.5, 72.0], [27.6, 73.0], [27.7, 73.0], [27.8, 74.0], [27.9, 75.0], [28.0, 76.0], [28.1, 76.0], [28.2, 77.0], [28.3, 78.0], [28.4, 79.0], [28.5, 80.0], [28.6, 81.0], [28.7, 82.0], [28.8, 82.0], [28.9, 82.0], [29.0, 83.0], [29.1, 83.0], [29.2, 84.0], [29.3, 84.0], [29.4, 84.0], [29.5, 85.0], [29.6, 85.0], [29.7, 85.0], [29.8, 86.0], [29.9, 87.0], [30.0, 87.0], [30.1, 87.0], [30.2, 88.0], [30.3, 88.0], [30.4, 88.0], [30.5, 89.0], [30.6, 89.0], [30.7, 90.0], [30.8, 90.0], [30.9, 90.0], [31.0, 90.0], [31.1, 91.0], [31.2, 91.0], [31.3, 92.0], [31.4, 92.0], [31.5, 92.0], [31.6, 93.0], [31.7, 93.0], [31.8, 93.0], [31.9, 94.0], [32.0, 94.0], [32.1, 94.0], [32.2, 95.0], [32.3, 95.0], [32.4, 95.0], [32.5, 96.0], [32.6, 96.0], [32.7, 96.0], [32.8, 97.0], [32.9, 97.0], [33.0, 97.0], [33.1, 97.0], [33.2, 98.0], [33.3, 98.0], [33.4, 98.0], [33.5, 98.0], [33.6, 99.0], [33.7, 99.0], [33.8, 100.0], [33.9, 100.0], [34.0, 101.0], [34.1, 101.0], [34.2, 101.0], [34.3, 102.0], [34.4, 102.0], [34.5, 102.0], [34.6, 103.0], [34.7, 103.0], [34.8, 103.0], [34.9, 103.0], [35.0, 104.0], [35.1, 104.0], [35.2, 105.0], [35.3, 105.0], [35.4, 105.0], [35.5, 105.0], [35.6, 106.0], [35.7, 106.0], [35.8, 106.0], [35.9, 106.0], [36.0, 106.0], [36.1, 106.0], [36.2, 107.0], [36.3, 107.0], [36.4, 107.0], [36.5, 107.0], [36.6, 108.0], [36.7, 108.0], [36.8, 108.0], [36.9, 108.0], [37.0, 109.0], [37.1, 109.0], [37.2, 109.0], [37.3, 109.0], [37.4, 109.0], [37.5, 109.0], [37.6, 109.0], [37.7, 110.0], [37.8, 110.0], [37.9, 110.0], [38.0, 110.0], [38.1, 111.0], [38.2, 111.0], [38.3, 111.0], [38.4, 111.0], [38.5, 111.0], [38.6, 111.0], [38.7, 112.0], [38.8, 112.0], [38.9, 112.0], [39.0, 112.0], [39.1, 112.0], [39.2, 113.0], [39.3, 113.0], [39.4, 113.0], [39.5, 113.0], [39.6, 113.0], [39.7, 113.0], [39.8, 114.0], [39.9, 114.0], [40.0, 114.0], [40.1, 114.0], [40.2, 114.0], [40.3, 114.0], [40.4, 114.0], [40.5, 115.0], [40.6, 115.0], [40.7, 115.0], [40.8, 115.0], [40.9, 115.0], [41.0, 115.0], [41.1, 115.0], [41.2, 115.0], [41.3, 115.0], [41.4, 116.0], [41.5, 116.0], [41.6, 116.0], [41.7, 116.0], [41.8, 116.0], [41.9, 116.0], [42.0, 116.0], [42.1, 117.0], [42.2, 117.0], [42.3, 117.0], [42.4, 117.0], [42.5, 117.0], [42.6, 117.0], [42.7, 118.0], [42.8, 118.0], [42.9, 118.0], [43.0, 118.0], [43.1, 118.0], [43.2, 118.0], [43.3, 118.0], [43.4, 118.0], [43.5, 118.0], [43.6, 118.0], [43.7, 118.0], [43.8, 119.0], [43.9, 119.0], [44.0, 119.0], [44.1, 119.0], [44.2, 119.0], [44.3, 119.0], [44.4, 119.0], [44.5, 119.0], [44.6, 119.0], [44.7, 119.0], [44.8, 119.0], [44.9, 119.0], [45.0, 120.0], [45.1, 120.0], [45.2, 120.0], [45.3, 120.0], [45.4, 120.0], [45.5, 120.0], [45.6, 120.0], [45.7, 120.0], [45.8, 120.0], [45.9, 120.0], [46.0, 120.0], [46.1, 120.0], [46.2, 121.0], [46.3, 121.0], [46.4, 121.0], [46.5, 121.0], [46.6, 121.0], [46.7, 121.0], [46.8, 121.0], [46.9, 121.0], [47.0, 121.0], [47.1, 121.0], [47.2, 121.0], [47.3, 121.0], [47.4, 122.0], [47.5, 122.0], [47.6, 122.0], [47.7, 122.0], [47.8, 122.0], [47.9, 122.0], [48.0, 122.0], [48.1, 122.0], [48.2, 122.0], [48.3, 122.0], [48.4, 122.0], [48.5, 122.0], [48.6, 122.0], [48.7, 123.0], [48.8, 123.0], [48.9, 123.0], [49.0, 123.0], [49.1, 123.0], [49.2, 123.0], [49.3, 123.0], [49.4, 123.0], [49.5, 123.0], [49.6, 123.0], [49.7, 123.0], [49.8, 123.0], [49.9, 123.0], [50.0, 123.0], [50.1, 123.0], [50.2, 123.0], [50.3, 123.0], [50.4, 123.0], [50.5, 123.0], [50.6, 123.0], [50.7, 123.0], [50.8, 123.0], [50.9, 123.0], [51.0, 124.0], [51.1, 124.0], [51.2, 124.0], [51.3, 124.0], [51.4, 124.0], [51.5, 124.0], [51.6, 124.0], [51.7, 124.0], [51.8, 124.0], [51.9, 124.0], [52.0, 124.0], [52.1, 124.0], [52.2, 124.0], [52.3, 124.0], [52.4, 124.0], [52.5, 124.0], [52.6, 124.0], [52.7, 124.0], [52.8, 124.0], [52.9, 124.0], [53.0, 124.0], [53.1, 124.0], [53.2, 124.0], [53.3, 125.0], [53.4, 125.0], [53.5, 125.0], [53.6, 125.0], [53.7, 125.0], [53.8, 125.0], [53.9, 125.0], [54.0, 125.0], [54.1, 125.0], [54.2, 125.0], [54.3, 125.0], [54.4, 125.0], [54.5, 125.0], [54.6, 125.0], [54.7, 125.0], [54.8, 125.0], [54.9, 125.0], [55.0, 126.0], [55.1, 126.0], [55.2, 126.0], [55.3, 126.0], [55.4, 126.0], [55.5, 126.0], [55.6, 126.0], [55.7, 126.0], [55.8, 126.0], [55.9, 126.0], [56.0, 126.0], [56.1, 126.0], [56.2, 126.0], [56.3, 126.0], [56.4, 126.0], [56.5, 126.0], [56.6, 127.0], [56.7, 127.0], [56.8, 127.0], [56.9, 127.0], [57.0, 127.0], [57.1, 127.0], [57.2, 127.0], [57.3, 127.0], [57.4, 127.0], [57.5, 127.0], [57.6, 127.0], [57.7, 127.0], [57.8, 127.0], [57.9, 127.0], [58.0, 127.0], [58.1, 127.0], [58.2, 127.0], [58.3, 127.0], [58.4, 127.0], [58.5, 127.0], [58.6, 127.0], [58.7, 127.0], [58.8, 128.0], [58.9, 128.0], [59.0, 128.0], [59.1, 128.0], [59.2, 128.0], [59.3, 128.0], [59.4, 128.0], [59.5, 128.0], [59.6, 128.0], [59.7, 128.0], [59.8, 128.0], [59.9, 128.0], [60.0, 128.0], [60.1, 128.0], [60.2, 128.0], [60.3, 128.0], [60.4, 129.0], [60.5, 129.0], [60.6, 129.0], [60.7, 129.0], [60.8, 129.0], [60.9, 129.0], [61.0, 129.0], [61.1, 129.0], [61.2, 129.0], [61.3, 129.0], [61.4, 129.0], [61.5, 129.0], [61.6, 129.0], [61.7, 129.0], [61.8, 129.0], [61.9, 130.0], [62.0, 130.0], [62.1, 130.0], [62.2, 130.0], [62.3, 130.0], [62.4, 130.0], [62.5, 130.0], [62.6, 130.0], [62.7, 130.0], [62.8, 130.0], [62.9, 130.0], [63.0, 130.0], [63.1, 130.0], [63.2, 130.0], [63.3, 131.0], [63.4, 131.0], [63.5, 131.0], [63.6, 131.0], [63.7, 131.0], [63.8, 131.0], [63.9, 131.0], [64.0, 131.0], [64.1, 131.0], [64.2, 131.0], [64.3, 131.0], [64.4, 131.0], [64.5, 131.0], [64.6, 132.0], [64.7, 132.0], [64.8, 132.0], [64.9, 132.0], [65.0, 132.0], [65.1, 132.0], [65.2, 132.0], [65.3, 132.0], [65.4, 132.0], [65.5, 132.0], [65.6, 132.0], [65.7, 132.0], [65.8, 133.0], [65.9, 133.0], [66.0, 133.0], [66.1, 133.0], [66.2, 133.0], [66.3, 133.0], [66.4, 133.0], [66.5, 133.0], [66.6, 133.0], [66.7, 133.0], [66.8, 133.0], [66.9, 133.0], [67.0, 133.0], [67.1, 133.0], [67.2, 134.0], [67.3, 134.0], [67.4, 134.0], [67.5, 134.0], [67.6, 134.0], [67.7, 134.0], [67.8, 134.0], [67.9, 134.0], [68.0, 134.0], [68.1, 134.0], [68.2, 134.0], [68.3, 134.0], [68.4, 134.0], [68.5, 135.0], [68.6, 135.0], [68.7, 135.0], [68.8, 135.0], [68.9, 135.0], [69.0, 135.0], [69.1, 135.0], [69.2, 135.0], [69.3, 135.0], [69.4, 135.0], [69.5, 135.0], [69.6, 135.0], [69.7, 135.0], [69.8, 135.0], [69.9, 136.0], [70.0, 136.0], [70.1, 136.0], [70.2, 136.0], [70.3, 136.0], [70.4, 136.0], [70.5, 136.0], [70.6, 136.0], [70.7, 136.0], [70.8, 136.0], [70.9, 136.0], [71.0, 137.0], [71.1, 137.0], [71.2, 137.0], [71.3, 137.0], [71.4, 137.0], [71.5, 137.0], [71.6, 137.0], [71.7, 137.0], [71.8, 137.0], [71.9, 138.0], [72.0, 138.0], [72.1, 138.0], [72.2, 138.0], [72.3, 138.0], [72.4, 138.0], [72.5, 138.0], [72.6, 138.0], [72.7, 138.0], [72.8, 139.0], [72.9, 139.0], [73.0, 139.0], [73.1, 139.0], [73.2, 139.0], [73.3, 139.0], [73.4, 139.0], [73.5, 139.0], [73.6, 139.0], [73.7, 139.0], [73.8, 140.0], [73.9, 140.0], [74.0, 140.0], [74.1, 140.0], [74.2, 140.0], [74.3, 140.0], [74.4, 140.0], [74.5, 140.0], [74.6, 141.0], [74.7, 141.0], [74.8, 141.0], [74.9, 141.0], [75.0, 142.0], [75.1, 142.0], [75.2, 142.0], [75.3, 143.0], [75.4, 143.0], [75.5, 143.0], [75.6, 143.0], [75.7, 143.0], [75.8, 144.0], [75.9, 144.0], [76.0, 144.0], [76.1, 144.0], [76.2, 144.0], [76.3, 144.0], [76.4, 145.0], [76.5, 145.0], [76.6, 145.0], [76.7, 146.0], [76.8, 146.0], [76.9, 146.0], [77.0, 147.0], [77.1, 147.0], [77.2, 148.0], [77.3, 148.0], [77.4, 149.0], [77.5, 149.0], [77.6, 149.0], [77.7, 150.0], [77.8, 150.0], [77.9, 150.0], [78.0, 151.0], [78.1, 151.0], [78.2, 152.0], [78.3, 152.0], [78.4, 152.0], [78.5, 153.0], [78.6, 153.0], [78.7, 153.0], [78.8, 154.0], [78.9, 154.0], [79.0, 155.0], [79.1, 155.0], [79.2, 156.0], [79.3, 156.0], [79.4, 157.0], [79.5, 158.0], [79.6, 159.0], [79.7, 159.0], [79.8, 161.0], [79.9, 161.0], [80.0, 162.0], [80.1, 162.0], [80.2, 163.0], [80.3, 164.0], [80.4, 164.0], [80.5, 164.0], [80.6, 165.0], [80.7, 166.0], [80.8, 166.0], [80.9, 167.0], [81.0, 167.0], [81.1, 167.0], [81.2, 168.0], [81.3, 168.0], [81.4, 169.0], [81.5, 169.0], [81.6, 170.0], [81.7, 171.0], [81.8, 171.0], [81.9, 171.0], [82.0, 172.0], [82.1, 172.0], [82.2, 172.0], [82.3, 172.0], [82.4, 173.0], [82.5, 174.0], [82.6, 175.0], [82.7, 176.0], [82.8, 177.0], [82.9, 178.0], [83.0, 180.0], [83.1, 182.0], [83.2, 183.0], [83.3, 184.0], [83.4, 187.0], [83.5, 188.0], [83.6, 190.0], [83.7, 193.0], [83.8, 194.0], [83.9, 196.0], [84.0, 199.0], [84.1, 202.0], [84.2, 206.0], [84.3, 211.0], [84.4, 215.0], [84.5, 219.0], [84.6, 224.0], [84.7, 227.0], [84.8, 229.0], [84.9, 233.0], [85.0, 238.0], [85.1, 243.0], [85.2, 245.0], [85.3, 247.0], [85.4, 248.0], [85.5, 249.0], [85.6, 250.0], [85.7, 251.0], [85.8, 252.0], [85.9, 253.0], [86.0, 253.0], [86.1, 254.0], [86.2, 255.0], [86.3, 257.0], [86.4, 258.0], [86.5, 259.0], [86.6, 261.0], [86.7, 265.0], [86.8, 268.0], [86.9, 273.0], [87.0, 280.0], [87.1, 289.0], [87.2, 305.0], [87.3, 315.0], [87.4, 326.0], [87.5, 339.0], [87.6, 353.0], [87.7, 365.0], [87.8, 373.0], [87.9, 378.0], [88.0, 385.0], [88.1, 388.0], [88.2, 389.0], [88.3, 391.0], [88.4, 394.0], [88.5, 397.0], [88.6, 403.0], [88.7, 407.0], [88.8, 408.0], [88.9, 413.0], [89.0, 433.0], [89.1, 447.0], [89.2, 458.0], [89.3, 466.0], [89.4, 482.0], [89.5, 487.0], [89.6, 490.0], [89.7, 491.0], [89.8, 498.0], [89.9, 1029.0], [90.0, 1031.0], [90.1, 1033.0], [90.2, 1034.0], [90.3, 1035.0], [90.4, 1036.0], [90.5, 1037.0], [90.6, 1038.0], [90.7, 1039.0], [90.8, 1040.0], [90.9, 1041.0], [91.0, 1043.0], [91.1, 1044.0], [91.2, 1046.0], [91.3, 1048.0], [91.4, 1051.0], [91.5, 1054.0], [91.6, 1057.0], [91.7, 1059.0], [91.8, 1061.0], [91.9, 1064.0], [92.0, 1066.0], [92.1, 1068.0], [92.2, 1069.0], [92.3, 1071.0], [92.4, 1074.0], [92.5, 1076.0], [92.6, 1078.0], [92.7, 1087.0], [92.8, 1092.0], [92.9, 1094.0], [93.0, 1096.0], [93.1, 1099.0], [93.2, 1102.0], [93.3, 1104.0], [93.4, 1106.0], [93.5, 1109.0], [93.6, 1111.0], [93.7, 1115.0], [93.8, 1119.0], [93.9, 1123.0], [94.0, 1129.0], [94.1, 1133.0], [94.2, 1137.0], [94.3, 3034.0], [94.4, 3037.0], [94.5, 3039.0], [94.6, 3041.0], [94.7, 3043.0], [94.8, 3044.0], [94.9, 3047.0], [95.0, 3049.0], [95.1, 3051.0], [95.2, 3052.0], [95.3, 3055.0], [95.4, 3057.0], [95.5, 3062.0], [95.6, 3068.0], [95.7, 3071.0], [95.8, 3077.0], [95.9, 3089.0], [96.0, 3097.0], [96.1, 3131.0], [96.2, 3139.0], [96.3, 3146.0], [96.4, 3152.0], [96.5, 3160.0], [96.6, 3166.0], [96.7, 3171.0], [96.8, 3174.0], [96.9, 3177.0], [97.0, 3181.0], [97.1, 3314.0], [97.2, 3362.0], [97.3, 7042.0], [97.4, 7046.0], [97.5, 7048.0], [97.6, 7050.0], [97.7, 7052.0], [97.8, 7054.0], [97.9, 7056.0], [98.0, 7058.0], [98.1, 7059.0], [98.2, 7062.0], [98.3, 7065.0], [98.4, 7067.0], [98.5, 7068.0], [98.6, 7072.0], [98.7, 7074.0], [98.8, 7077.0], [98.9, 7088.0], [99.0, 7097.0], [99.1, 7101.0], [99.2, 7108.0], [99.3, 7117.0], [99.4, 7128.0], [99.5, 15050.0], [99.6, 15058.0], [99.7, 15064.0], [99.8, 15070.0], [99.9, 15080.0], [100.0, 21054.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 12510.0], [0.1, 12510.0], [0.2, 12510.0], [0.3, 12510.0], [0.4, 12510.0], [0.5, 12511.0], [0.6, 12511.0], [0.7, 12511.0], [0.8, 12511.0], [0.9, 12511.0], [1.0, 12515.0], [1.1, 12515.0], [1.2, 12515.0], [1.3, 12515.0], [1.4, 12515.0], [1.5, 12519.0], [1.6, 12519.0], [1.7, 12519.0], [1.8, 12519.0], [1.9, 12519.0], [2.0, 12526.0], [2.1, 12526.0], [2.2, 12526.0], [2.3, 12526.0], [2.4, 12526.0], [2.5, 12536.0], [2.6, 12536.0], [2.7, 12536.0], [2.8, 12536.0], [2.9, 12536.0], [3.0, 12544.0], [3.1, 12544.0], [3.2, 12544.0], [3.3, 12544.0], [3.4, 12544.0], [3.5, 12547.0], [3.6, 12547.0], [3.7, 12547.0], [3.8, 12547.0], [3.9, 12547.0], [4.0, 12553.0], [4.1, 12553.0], [4.2, 12553.0], [4.3, 12553.0], [4.4, 12553.0], [4.5, 12556.0], [4.6, 12556.0], [4.7, 12556.0], [4.8, 12556.0], [4.9, 12556.0], [5.0, 12558.0], [5.1, 12558.0], [5.2, 12558.0], [5.3, 12558.0], [5.4, 12558.0], [5.5, 12560.0], [5.6, 12560.0], [5.7, 12560.0], [5.8, 12560.0], [5.9, 12560.0], [6.0, 12570.0], [6.1, 12570.0], [6.2, 12570.0], [6.3, 12570.0], [6.4, 12570.0], [6.5, 12570.0], [6.6, 12570.0], [6.7, 12570.0], [6.8, 12570.0], [6.9, 12570.0], [7.0, 12575.0], [7.1, 12575.0], [7.2, 12575.0], [7.3, 12575.0], [7.4, 12575.0], [7.5, 12575.0], [7.6, 12575.0], [7.7, 12575.0], [7.8, 12575.0], [7.9, 12575.0], [8.0, 12575.0], [8.1, 12575.0], [8.2, 12575.0], [8.3, 12575.0], [8.4, 12575.0], [8.5, 12579.0], [8.6, 12579.0], [8.7, 12579.0], [8.8, 12579.0], [8.9, 12579.0], [9.0, 12583.0], [9.1, 12583.0], [9.2, 12583.0], [9.3, 12583.0], [9.4, 12583.0], [9.5, 12589.0], [9.6, 12589.0], [9.7, 12589.0], [9.8, 12589.0], [9.9, 12589.0], [10.0, 12589.0], [10.1, 12589.0], [10.2, 12589.0], [10.3, 12589.0], [10.4, 12589.0], [10.5, 12592.0], [10.6, 12592.0], [10.7, 12592.0], [10.8, 12592.0], [10.9, 12592.0], [11.0, 12592.0], [11.1, 12592.0], [11.2, 12592.0], [11.3, 12592.0], [11.4, 12592.0], [11.5, 12593.0], [11.6, 12593.0], [11.7, 12593.0], [11.8, 12593.0], [11.9, 12593.0], [12.0, 12594.0], [12.1, 12594.0], [12.2, 12594.0], [12.3, 12594.0], [12.4, 12594.0], [12.5, 12594.0], [12.6, 12594.0], [12.7, 12594.0], [12.8, 12594.0], [12.9, 12594.0], [13.0, 12595.0], [13.1, 12595.0], [13.2, 12595.0], [13.3, 12595.0], [13.4, 12595.0], [13.5, 12600.0], [13.6, 12600.0], [13.7, 12600.0], [13.8, 12600.0], [13.9, 12600.0], [14.0, 12605.0], [14.1, 12605.0], [14.2, 12605.0], [14.3, 12605.0], [14.4, 12605.0], [14.5, 12605.0], [14.6, 12605.0], [14.7, 12605.0], [14.8, 12605.0], [14.9, 12605.0], [15.0, 12630.0], [15.1, 12630.0], [15.2, 12630.0], [15.3, 12630.0], [15.4, 12630.0], [15.5, 12638.0], [15.6, 12638.0], [15.7, 12638.0], [15.8, 12638.0], [15.9, 12638.0], [16.0, 12642.0], [16.1, 12642.0], [16.2, 12642.0], [16.3, 12642.0], [16.4, 12642.0], [16.5, 12644.0], [16.6, 12644.0], [16.7, 12644.0], [16.8, 12644.0], [16.9, 12644.0], [17.0, 12644.0], [17.1, 12644.0], [17.2, 12644.0], [17.3, 12644.0], [17.4, 12644.0], [17.5, 12645.0], [17.6, 12645.0], [17.7, 12645.0], [17.8, 12645.0], [17.9, 12645.0], [18.0, 12654.0], [18.1, 12654.0], [18.2, 12654.0], [18.3, 12654.0], [18.4, 12654.0], [18.5, 12674.0], [18.6, 12674.0], [18.7, 12674.0], [18.8, 12674.0], [18.9, 12674.0], [19.0, 12675.0], [19.1, 12675.0], [19.2, 12675.0], [19.3, 12675.0], [19.4, 12675.0], [19.5, 12676.0], [19.6, 12676.0], [19.7, 12676.0], [19.8, 12676.0], [19.9, 12676.0], [20.0, 12680.0], [20.1, 12680.0], [20.2, 12680.0], [20.3, 12680.0], [20.4, 12680.0], [20.5, 12692.0], [20.6, 12692.0], [20.7, 12692.0], [20.8, 12692.0], [20.9, 12692.0], [21.0, 12693.0], [21.1, 12693.0], [21.2, 12693.0], [21.3, 12693.0], [21.4, 12693.0], [21.5, 12698.0], [21.6, 12698.0], [21.7, 12698.0], [21.8, 12698.0], [21.9, 12698.0], [22.0, 12713.0], [22.1, 12713.0], [22.2, 12713.0], [22.3, 12713.0], [22.4, 12713.0], [22.5, 12718.0], [22.6, 12718.0], [22.7, 12718.0], [22.8, 12718.0], [22.9, 12718.0], [23.0, 12719.0], [23.1, 12719.0], [23.2, 12719.0], [23.3, 12719.0], [23.4, 12719.0], [23.5, 12733.0], [23.6, 12733.0], [23.7, 12733.0], [23.8, 12733.0], [23.9, 12733.0], [24.0, 12738.0], [24.1, 12738.0], [24.2, 12738.0], [24.3, 12738.0], [24.4, 12738.0], [24.5, 12739.0], [24.6, 12739.0], [24.7, 12739.0], [24.8, 12739.0], [24.9, 12739.0], [25.0, 12744.0], [25.1, 12744.0], [25.2, 12744.0], [25.3, 12744.0], [25.4, 12744.0], [25.5, 12746.0], [25.6, 12746.0], [25.7, 12746.0], [25.8, 12746.0], [25.9, 12746.0], [26.0, 12749.0], [26.1, 12749.0], [26.2, 12749.0], [26.3, 12749.0], [26.4, 12749.0], [26.5, 12762.0], [26.6, 12762.0], [26.7, 12762.0], [26.8, 12762.0], [26.9, 12762.0], [27.0, 12769.0], [27.1, 12769.0], [27.2, 12769.0], [27.3, 12769.0], [27.4, 12769.0], [27.5, 12788.0], [27.6, 12788.0], [27.7, 12788.0], [27.8, 12788.0], [27.9, 12788.0], [28.0, 12789.0], [28.1, 12789.0], [28.2, 12789.0], [28.3, 12789.0], [28.4, 12789.0], [28.5, 12792.0], [28.6, 12792.0], [28.7, 12792.0], [28.8, 12792.0], [28.9, 12792.0], [29.0, 12797.0], [29.1, 12797.0], [29.2, 12797.0], [29.3, 12797.0], [29.4, 12797.0], [29.5, 12807.0], [29.6, 12807.0], [29.7, 12807.0], [29.8, 12807.0], [29.9, 12807.0], [30.0, 12809.0], [30.1, 12809.0], [30.2, 12809.0], [30.3, 12809.0], [30.4, 12809.0], [30.5, 12811.0], [30.6, 12811.0], [30.7, 12811.0], [30.8, 12811.0], [30.9, 12811.0], [31.0, 12813.0], [31.1, 12813.0], [31.2, 12813.0], [31.3, 12813.0], [31.4, 12813.0], [31.5, 12818.0], [31.6, 12818.0], [31.7, 12818.0], [31.8, 12818.0], [31.9, 12818.0], [32.0, 12822.0], [32.1, 12822.0], [32.2, 12822.0], [32.3, 12822.0], [32.4, 12822.0], [32.5, 12824.0], [32.6, 12824.0], [32.7, 12824.0], [32.8, 12824.0], [32.9, 12824.0], [33.0, 12833.0], [33.1, 12833.0], [33.2, 12833.0], [33.3, 12833.0], [33.4, 12833.0], [33.5, 12836.0], [33.6, 12836.0], [33.7, 12836.0], [33.8, 12836.0], [33.9, 12836.0], [34.0, 12849.0], [34.1, 12849.0], [34.2, 12849.0], [34.3, 12849.0], [34.4, 12849.0], [34.5, 12852.0], [34.6, 12852.0], [34.7, 12852.0], [34.8, 12852.0], [34.9, 12852.0], [35.0, 12855.0], [35.1, 12855.0], [35.2, 12855.0], [35.3, 12855.0], [35.4, 12855.0], [35.5, 12857.0], [35.6, 12857.0], [35.7, 12857.0], [35.8, 12857.0], [35.9, 12857.0], [36.0, 12857.0], [36.1, 12857.0], [36.2, 12857.0], [36.3, 12857.0], [36.4, 12857.0], [36.5, 12872.0], [36.6, 12872.0], [36.7, 12872.0], [36.8, 12872.0], [36.9, 12872.0], [37.0, 12876.0], [37.1, 12876.0], [37.2, 12876.0], [37.3, 12876.0], [37.4, 12876.0], [37.5, 12878.0], [37.6, 12878.0], [37.7, 12878.0], [37.8, 12878.0], [37.9, 12878.0], [38.0, 12882.0], [38.1, 12882.0], [38.2, 12882.0], [38.3, 12882.0], [38.4, 12882.0], [38.5, 12895.0], [38.6, 12895.0], [38.7, 12895.0], [38.8, 12895.0], [38.9, 12895.0], [39.0, 12895.0], [39.1, 12895.0], [39.2, 12895.0], [39.3, 12895.0], [39.4, 12895.0], [39.5, 12901.0], [39.6, 12901.0], [39.7, 12901.0], [39.8, 12901.0], [39.9, 12901.0], [40.0, 12903.0], [40.1, 12903.0], [40.2, 12903.0], [40.3, 12903.0], [40.4, 12903.0], [40.5, 12910.0], [40.6, 12910.0], [40.7, 12910.0], [40.8, 12910.0], [40.9, 12910.0], [41.0, 12918.0], [41.1, 12918.0], [41.2, 12918.0], [41.3, 12918.0], [41.4, 12918.0], [41.5, 12922.0], [41.6, 12922.0], [41.7, 12922.0], [41.8, 12922.0], [41.9, 12922.0], [42.0, 12927.0], [42.1, 12927.0], [42.2, 12927.0], [42.3, 12927.0], [42.4, 12927.0], [42.5, 12931.0], [42.6, 12931.0], [42.7, 12931.0], [42.8, 12931.0], [42.9, 12931.0], [43.0, 12936.0], [43.1, 12936.0], [43.2, 12936.0], [43.3, 12936.0], [43.4, 12936.0], [43.5, 12937.0], [43.6, 12937.0], [43.7, 12937.0], [43.8, 12937.0], [43.9, 12937.0], [44.0, 12950.0], [44.1, 12950.0], [44.2, 12950.0], [44.3, 12950.0], [44.4, 12950.0], [44.5, 12952.0], [44.6, 12952.0], [44.7, 12952.0], [44.8, 12952.0], [44.9, 12952.0], [45.0, 12957.0], [45.1, 12957.0], [45.2, 12957.0], [45.3, 12957.0], [45.4, 12957.0], [45.5, 12958.0], [45.6, 12958.0], [45.7, 12958.0], [45.8, 12958.0], [45.9, 12958.0], [46.0, 12966.0], [46.1, 12966.0], [46.2, 12966.0], [46.3, 12966.0], [46.4, 12966.0], [46.5, 12970.0], [46.6, 12970.0], [46.7, 12970.0], [46.8, 12970.0], [46.9, 12970.0], [47.0, 12970.0], [47.1, 12970.0], [47.2, 12970.0], [47.3, 12970.0], [47.4, 12970.0], [47.5, 12986.0], [47.6, 12986.0], [47.7, 12986.0], [47.8, 12986.0], [47.9, 12986.0], [48.0, 12986.0], [48.1, 12986.0], [48.2, 12986.0], [48.3, 12986.0], [48.4, 12986.0], [48.5, 12987.0], [48.6, 12987.0], [48.7, 12987.0], [48.8, 12987.0], [48.9, 12987.0], [49.0, 12988.0], [49.1, 12988.0], [49.2, 12988.0], [49.3, 12988.0], [49.4, 12988.0], [49.5, 12996.0], [49.6, 12996.0], [49.7, 12996.0], [49.8, 12996.0], [49.9, 12996.0], [50.0, 13000.0], [50.1, 13000.0], [50.2, 13000.0], [50.3, 13000.0], [50.4, 13000.0], [50.5, 13009.0], [50.6, 13009.0], [50.7, 13009.0], [50.8, 13009.0], [50.9, 13009.0], [51.0, 13010.0], [51.1, 13010.0], [51.2, 13010.0], [51.3, 13010.0], [51.4, 13010.0], [51.5, 13012.0], [51.6, 13012.0], [51.7, 13012.0], [51.8, 13012.0], [51.9, 13012.0], [52.0, 13016.0], [52.1, 13016.0], [52.2, 13016.0], [52.3, 13016.0], [52.4, 13016.0], [52.5, 13016.0], [52.6, 13016.0], [52.7, 13016.0], [52.8, 13016.0], [52.9, 13016.0], [53.0, 13024.0], [53.1, 13024.0], [53.2, 13024.0], [53.3, 13024.0], [53.4, 13024.0], [53.5, 13026.0], [53.6, 13026.0], [53.7, 13026.0], [53.8, 13026.0], [53.9, 13026.0], [54.0, 13029.0], [54.1, 13029.0], [54.2, 13029.0], [54.3, 13029.0], [54.4, 13029.0], [54.5, 13045.0], [54.6, 13045.0], [54.7, 13045.0], [54.8, 13045.0], [54.9, 13045.0], [55.0, 13050.0], [55.1, 13050.0], [55.2, 13050.0], [55.3, 13050.0], [55.4, 13050.0], [55.5, 13057.0], [55.6, 13057.0], [55.7, 13057.0], [55.8, 13057.0], [55.9, 13057.0], [56.0, 13061.0], [56.1, 13061.0], [56.2, 13061.0], [56.3, 13061.0], [56.4, 13061.0], [56.5, 13062.0], [56.6, 13062.0], [56.7, 13062.0], [56.8, 13062.0], [56.9, 13062.0], [57.0, 13071.0], [57.1, 13071.0], [57.2, 13071.0], [57.3, 13071.0], [57.4, 13071.0], [57.5, 13074.0], [57.6, 13074.0], [57.7, 13074.0], [57.8, 13074.0], [57.9, 13074.0], [58.0, 13079.0], [58.1, 13079.0], [58.2, 13079.0], [58.3, 13079.0], [58.4, 13079.0], [58.5, 13083.0], [58.6, 13083.0], [58.7, 13083.0], [58.8, 13083.0], [58.9, 13083.0], [59.0, 13084.0], [59.1, 13084.0], [59.2, 13084.0], [59.3, 13084.0], [59.4, 13084.0], [59.5, 13086.0], [59.6, 13086.0], [59.7, 13086.0], [59.8, 13086.0], [59.9, 13086.0], [60.0, 13090.0], [60.1, 13090.0], [60.2, 13090.0], [60.3, 13090.0], [60.4, 13090.0], [60.5, 13095.0], [60.6, 13095.0], [60.7, 13095.0], [60.8, 13095.0], [60.9, 13095.0], [61.0, 13099.0], [61.1, 13099.0], [61.2, 13099.0], [61.3, 13099.0], [61.4, 13099.0], [61.5, 13110.0], [61.6, 13110.0], [61.7, 13110.0], [61.8, 13110.0], [61.9, 13110.0], [62.0, 13114.0], [62.1, 13114.0], [62.2, 13114.0], [62.3, 13114.0], [62.4, 13114.0], [62.5, 13116.0], [62.6, 13116.0], [62.7, 13116.0], [62.8, 13116.0], [62.9, 13116.0], [63.0, 13116.0], [63.1, 13116.0], [63.2, 13116.0], [63.3, 13116.0], [63.4, 13116.0], [63.5, 13119.0], [63.6, 13119.0], [63.7, 13119.0], [63.8, 13119.0], [63.9, 13119.0], [64.0, 13125.0], [64.1, 13125.0], [64.2, 13125.0], [64.3, 13125.0], [64.4, 13125.0], [64.5, 13125.0], [64.6, 13125.0], [64.7, 13125.0], [64.8, 13125.0], [64.9, 13125.0], [65.0, 13140.0], [65.1, 13140.0], [65.2, 13140.0], [65.3, 13140.0], [65.4, 13140.0], [65.5, 13142.0], [65.6, 13142.0], [65.7, 13142.0], [65.8, 13142.0], [65.9, 13142.0], [66.0, 13143.0], [66.1, 13143.0], [66.2, 13143.0], [66.3, 13143.0], [66.4, 13143.0], [66.5, 13153.0], [66.6, 13153.0], [66.7, 13153.0], [66.8, 13153.0], [66.9, 13153.0], [67.0, 13153.0], [67.1, 13153.0], [67.2, 13153.0], [67.3, 13153.0], [67.4, 13153.0], [67.5, 13154.0], [67.6, 13154.0], [67.7, 13154.0], [67.8, 13154.0], [67.9, 13154.0], [68.0, 13155.0], [68.1, 13155.0], [68.2, 13155.0], [68.3, 13155.0], [68.4, 13155.0], [68.5, 13157.0], [68.6, 13157.0], [68.7, 13157.0], [68.8, 13157.0], [68.9, 13157.0], [69.0, 13157.0], [69.1, 13157.0], [69.2, 13157.0], [69.3, 13157.0], [69.4, 13157.0], [69.5, 13181.0], [69.6, 13181.0], [69.7, 13181.0], [69.8, 13181.0], [69.9, 13181.0], [70.0, 13182.0], [70.1, 13182.0], [70.2, 13182.0], [70.3, 13182.0], [70.4, 13182.0], [70.5, 13184.0], [70.6, 13184.0], [70.7, 13184.0], [70.8, 13184.0], [70.9, 13184.0], [71.0, 13194.0], [71.1, 13194.0], [71.2, 13194.0], [71.3, 13194.0], [71.4, 13194.0], [71.5, 13197.0], [71.6, 13197.0], [71.7, 13197.0], [71.8, 13197.0], [71.9, 13197.0], [72.0, 13197.0], [72.1, 13197.0], [72.2, 13197.0], [72.3, 13197.0], [72.4, 13197.0], [72.5, 13202.0], [72.6, 13202.0], [72.7, 13202.0], [72.8, 13202.0], [72.9, 13202.0], [73.0, 13216.0], [73.1, 13216.0], [73.2, 13216.0], [73.3, 13216.0], [73.4, 13216.0], [73.5, 13244.0], [73.6, 13244.0], [73.7, 13244.0], [73.8, 13244.0], [73.9, 13244.0], [74.0, 13245.0], [74.1, 13245.0], [74.2, 13245.0], [74.3, 13245.0], [74.4, 13245.0], [74.5, 13247.0], [74.6, 13247.0], [74.7, 13247.0], [74.8, 13247.0], [74.9, 13247.0], [75.0, 13256.0], [75.1, 13256.0], [75.2, 13256.0], [75.3, 13256.0], [75.4, 13256.0], [75.5, 13262.0], [75.6, 13262.0], [75.7, 13262.0], [75.8, 13262.0], [75.9, 13262.0], [76.0, 13264.0], [76.1, 13264.0], [76.2, 13264.0], [76.3, 13264.0], [76.4, 13264.0], [76.5, 13264.0], [76.6, 13264.0], [76.7, 13264.0], [76.8, 13264.0], [76.9, 13264.0], [77.0, 13264.0], [77.1, 13264.0], [77.2, 13264.0], [77.3, 13264.0], [77.4, 13264.0], [77.5, 13265.0], [77.6, 13265.0], [77.7, 13265.0], [77.8, 13265.0], [77.9, 13265.0], [78.0, 13266.0], [78.1, 13266.0], [78.2, 13266.0], [78.3, 13266.0], [78.4, 13266.0], [78.5, 13268.0], [78.6, 13268.0], [78.7, 13268.0], [78.8, 13268.0], [78.9, 13268.0], [79.0, 13270.0], [79.1, 13270.0], [79.2, 13270.0], [79.3, 13270.0], [79.4, 13270.0], [79.5, 13289.0], [79.6, 13289.0], [79.7, 13289.0], [79.8, 13289.0], [79.9, 13289.0], [80.0, 13290.0], [80.1, 13290.0], [80.2, 13290.0], [80.3, 13290.0], [80.4, 13290.0], [80.5, 13314.0], [80.6, 13314.0], [80.7, 13314.0], [80.8, 13314.0], [80.9, 13314.0], [81.0, 13316.0], [81.1, 13316.0], [81.2, 13316.0], [81.3, 13316.0], [81.4, 13316.0], [81.5, 13325.0], [81.6, 13325.0], [81.7, 13325.0], [81.8, 13325.0], [81.9, 13325.0], [82.0, 13327.0], [82.1, 13327.0], [82.2, 13327.0], [82.3, 13327.0], [82.4, 13327.0], [82.5, 13333.0], [82.6, 13333.0], [82.7, 13333.0], [82.8, 13333.0], [82.9, 13333.0], [83.0, 13336.0], [83.1, 13336.0], [83.2, 13336.0], [83.3, 13336.0], [83.4, 13336.0], [83.5, 13342.0], [83.6, 13342.0], [83.7, 13342.0], [83.8, 13342.0], [83.9, 13342.0], [84.0, 13351.0], [84.1, 13351.0], [84.2, 13351.0], [84.3, 13351.0], [84.4, 13351.0], [84.5, 13354.0], [84.6, 13354.0], [84.7, 13354.0], [84.8, 13354.0], [84.9, 13354.0], [85.0, 13357.0], [85.1, 13357.0], [85.2, 13357.0], [85.3, 13357.0], [85.4, 13357.0], [85.5, 13362.0], [85.6, 13362.0], [85.7, 13362.0], [85.8, 13362.0], [85.9, 13362.0], [86.0, 13369.0], [86.1, 13369.0], [86.2, 13369.0], [86.3, 13369.0], [86.4, 13369.0], [86.5, 13372.0], [86.6, 13372.0], [86.7, 13372.0], [86.8, 13372.0], [86.9, 13372.0], [87.0, 13375.0], [87.1, 13375.0], [87.2, 13375.0], [87.3, 13375.0], [87.4, 13375.0], [87.5, 13384.0], [87.6, 13384.0], [87.7, 13384.0], [87.8, 13384.0], [87.9, 13384.0], [88.0, 13385.0], [88.1, 13385.0], [88.2, 13385.0], [88.3, 13385.0], [88.4, 13385.0], [88.5, 13390.0], [88.6, 13390.0], [88.7, 13390.0], [88.8, 13390.0], [88.9, 13390.0], [89.0, 13400.0], [89.1, 13400.0], [89.2, 13400.0], [89.3, 13400.0], [89.4, 13400.0], [89.5, 13406.0], [89.6, 13406.0], [89.7, 13406.0], [89.8, 13406.0], [89.9, 13406.0], [90.0, 13412.0], [90.1, 13412.0], [90.2, 13412.0], [90.3, 13412.0], [90.4, 13412.0], [90.5, 13417.0], [90.6, 13417.0], [90.7, 13417.0], [90.8, 13417.0], [90.9, 13417.0], [91.0, 13420.0], [91.1, 13420.0], [91.2, 13420.0], [91.3, 13420.0], [91.4, 13420.0], [91.5, 13421.0], [91.6, 13421.0], [91.7, 13421.0], [91.8, 13421.0], [91.9, 13421.0], [92.0, 13425.0], [92.1, 13425.0], [92.2, 13425.0], [92.3, 13425.0], [92.4, 13425.0], [92.5, 13427.0], [92.6, 13427.0], [92.7, 13427.0], [92.8, 13427.0], [92.9, 13427.0], [93.0, 13441.0], [93.1, 13441.0], [93.2, 13441.0], [93.3, 13441.0], [93.4, 13441.0], [93.5, 13442.0], [93.6, 13442.0], [93.7, 13442.0], [93.8, 13442.0], [93.9, 13442.0], [94.0, 13444.0], [94.1, 13444.0], [94.2, 13444.0], [94.3, 13444.0], [94.4, 13444.0], [94.5, 13444.0], [94.6, 13444.0], [94.7, 13444.0], [94.8, 13444.0], [94.9, 13444.0], [95.0, 13449.0], [95.1, 13449.0], [95.2, 13449.0], [95.3, 13449.0], [95.4, 13449.0], [95.5, 13456.0], [95.6, 13456.0], [95.7, 13456.0], [95.8, 13456.0], [95.9, 13456.0], [96.0, 13466.0], [96.1, 13466.0], [96.2, 13466.0], [96.3, 13466.0], [96.4, 13466.0], [96.5, 13466.0], [96.6, 13466.0], [96.7, 13466.0], [96.8, 13466.0], [96.9, 13466.0], [97.0, 13474.0], [97.1, 13474.0], [97.2, 13474.0], [97.3, 13474.0], [97.4, 13474.0], [97.5, 13475.0], [97.6, 13475.0], [97.7, 13475.0], [97.8, 13475.0], [97.9, 13475.0], [98.0, 13477.0], [98.1, 13477.0], [98.2, 13477.0], [98.3, 13477.0], [98.4, 13477.0], [98.5, 13495.0], [98.6, 13495.0], [98.7, 13495.0], [98.8, 13495.0], [98.9, 13495.0], [99.0, 13500.0], [99.1, 13500.0], [99.2, 13500.0], [99.3, 13500.0], [99.4, 13500.0], [99.5, 13500.0], [99.6, 13500.0], [99.7, 13500.0], [99.8, 13500.0], [99.9, 13500.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 60026.0], [0.1, 60026.0], [0.2, 60026.0], [0.3, 60026.0], [0.4, 60026.0], [0.5, 60026.0], [0.6, 60026.0], [0.7, 60026.0], [0.8, 60026.0], [0.9, 60026.0], [1.0, 60026.0], [1.1, 60026.0], [1.2, 60026.0], [1.3, 60026.0], [1.4, 60026.0], [1.5, 60026.0], [1.6, 60026.0], [1.7, 60026.0], [1.8, 60026.0], [1.9, 60026.0], [2.0, 60026.0], [2.1, 60026.0], [2.2, 60026.0], [2.3, 60026.0], [2.4, 60026.0], [2.5, 60026.0], [2.6, 60026.0], [2.7, 60026.0], [2.8, 60026.0], [2.9, 60026.0], [3.0, 60026.0], [3.1, 60026.0], [3.2, 60026.0], [3.3, 60026.0], [3.4, 60026.0], [3.5, 60026.0], [3.6, 60026.0], [3.7, 60026.0], [3.8, 60026.0], [3.9, 60026.0], [4.0, 60026.0], [4.1, 60026.0], [4.2, 60026.0], [4.3, 60026.0], [4.4, 60026.0], [4.5, 60026.0], [4.6, 60026.0], [4.7, 60026.0], [4.8, 60026.0], [4.9, 60026.0], [5.0, 60026.0], [5.1, 60026.0], [5.2, 60026.0], [5.3, 60026.0], [5.4, 60026.0], [5.5, 60026.0], [5.6, 60026.0], [5.7, 60026.0], [5.8, 60026.0], [5.9, 60026.0], [6.0, 60027.0], [6.1, 60027.0], [6.2, 60027.0], [6.3, 60027.0], [6.4, 60027.0], [6.5, 60027.0], [6.6, 60027.0], [6.7, 60027.0], [6.8, 60027.0], [6.9, 60027.0], [7.0, 60027.0], [7.1, 60027.0], [7.2, 60027.0], [7.3, 60027.0], [7.4, 60027.0], [7.5, 60027.0], [7.6, 60027.0], [7.7, 60027.0], [7.8, 60027.0], [7.9, 60027.0], [8.0, 60027.0], [8.1, 60027.0], [8.2, 60027.0], [8.3, 60027.0], [8.4, 60027.0], [8.5, 60027.0], [8.6, 60027.0], [8.7, 60027.0], [8.8, 60027.0], [8.9, 60027.0], [9.0, 60027.0], [9.1, 60027.0], [9.2, 60027.0], [9.3, 60027.0], [9.4, 60027.0], [9.5, 60027.0], [9.6, 60027.0], [9.7, 60027.0], [9.8, 60027.0], [9.9, 60027.0], [10.0, 60027.0], [10.1, 60027.0], [10.2, 60027.0], [10.3, 60027.0], [10.4, 60027.0], [10.5, 60027.0], [10.6, 60027.0], [10.7, 60027.0], [10.8, 60027.0], [10.9, 60027.0], [11.0, 60027.0], [11.1, 60027.0], [11.2, 60027.0], [11.3, 60027.0], [11.4, 60027.0], [11.5, 60027.0], [11.6, 60027.0], [11.7, 60027.0], [11.8, 60027.0], [11.9, 60027.0], [12.0, 60027.0], [12.1, 60027.0], [12.2, 60027.0], [12.3, 60027.0], [12.4, 60027.0], [12.5, 60027.0], [12.6, 60027.0], [12.7, 60027.0], [12.8, 60027.0], [12.9, 60027.0], [13.0, 60027.0], [13.1, 60027.0], [13.2, 60027.0], [13.3, 60027.0], [13.4, 60027.0], [13.5, 60027.0], [13.6, 60027.0], [13.7, 60027.0], [13.8, 60027.0], [13.9, 60027.0], [14.0, 60027.0], [14.1, 60027.0], [14.2, 60027.0], [14.3, 60027.0], [14.4, 60027.0], [14.5, 60027.0], [14.6, 60027.0], [14.7, 60027.0], [14.8, 60027.0], [14.9, 60027.0], [15.0, 60027.0], [15.1, 60027.0], [15.2, 60027.0], [15.3, 60027.0], [15.4, 60027.0], [15.5, 60027.0], [15.6, 60027.0], [15.7, 60027.0], [15.8, 60027.0], [15.9, 60027.0], [16.0, 60027.0], [16.1, 60027.0], [16.2, 60027.0], [16.3, 60027.0], [16.4, 60027.0], [16.5, 60027.0], [16.6, 60027.0], [16.7, 60027.0], [16.8, 60027.0], [16.9, 60027.0], [17.0, 60027.0], [17.1, 60027.0], [17.2, 60027.0], [17.3, 60027.0], [17.4, 60027.0], [17.5, 60027.0], [17.6, 60027.0], [17.7, 60027.0], [17.8, 60027.0], [17.9, 60027.0], [18.0, 60027.0], [18.1, 60027.0], [18.2, 60027.0], [18.3, 60027.0], [18.4, 60027.0], [18.5, 60027.0], [18.6, 60027.0], [18.7, 60027.0], [18.8, 60027.0], [18.9, 60027.0], [19.0, 60027.0], [19.1, 60027.0], [19.2, 60027.0], [19.3, 60027.0], [19.4, 60027.0], [19.5, 60027.0], [19.6, 60027.0], [19.7, 60027.0], [19.8, 60027.0], [19.9, 60027.0], [20.0, 60027.0], [20.1, 60027.0], [20.2, 60027.0], [20.3, 60027.0], [20.4, 60027.0], [20.5, 60027.0], [20.6, 60027.0], [20.7, 60027.0], [20.8, 60027.0], [20.9, 60027.0], [21.0, 60027.0], [21.1, 60027.0], [21.2, 60027.0], [21.3, 60027.0], [21.4, 60027.0], [21.5, 60027.0], [21.6, 60027.0], [21.7, 60027.0], [21.8, 60027.0], [21.9, 60027.0], [22.0, 60027.0], [22.1, 60027.0], [22.2, 60027.0], [22.3, 60027.0], [22.4, 60027.0], [22.5, 60027.0], [22.6, 60027.0], [22.7, 60027.0], [22.8, 60027.0], [22.9, 60027.0], [23.0, 60027.0], [23.1, 60027.0], [23.2, 60027.0], [23.3, 60027.0], [23.4, 60027.0], [23.5, 60027.0], [23.6, 60027.0], [23.7, 60027.0], [23.8, 60027.0], [23.9, 60027.0], [24.0, 60027.0], [24.1, 60027.0], [24.2, 60027.0], [24.3, 60027.0], [24.4, 60027.0], [24.5, 60027.0], [24.6, 60027.0], [24.7, 60027.0], [24.8, 60027.0], [24.9, 60027.0], [25.0, 60027.0], [25.1, 60027.0], [25.2, 60027.0], [25.3, 60027.0], [25.4, 60027.0], [25.5, 60027.0], [25.6, 60027.0], [25.7, 60027.0], [25.8, 60027.0], [25.9, 60027.0], [26.0, 60027.0], [26.1, 60027.0], [26.2, 60027.0], [26.3, 60027.0], [26.4, 60027.0], [26.5, 60027.0], [26.6, 60027.0], [26.7, 60027.0], [26.8, 60027.0], [26.9, 60027.0], [27.0, 60027.0], [27.1, 60027.0], [27.2, 60027.0], [27.3, 60027.0], [27.4, 60027.0], [27.5, 60027.0], [27.6, 60027.0], [27.7, 60027.0], [27.8, 60027.0], [27.9, 60027.0], [28.0, 60027.0], [28.1, 60027.0], [28.2, 60027.0], [28.3, 60027.0], [28.4, 60027.0], [28.5, 60027.0], [28.6, 60027.0], [28.7, 60027.0], [28.8, 60027.0], [28.9, 60027.0], [29.0, 60027.0], [29.1, 60027.0], [29.2, 60027.0], [29.3, 60027.0], [29.4, 60027.0], [29.5, 60027.0], [29.6, 60027.0], [29.7, 60027.0], [29.8, 60027.0], [29.9, 60027.0], [30.0, 60027.0], [30.1, 60027.0], [30.2, 60027.0], [30.3, 60027.0], [30.4, 60027.0], [30.5, 60027.0], [30.6, 60027.0], [30.7, 60027.0], [30.8, 60027.0], [30.9, 60027.0], [31.0, 60027.0], [31.1, 60027.0], [31.2, 60027.0], [31.3, 60027.0], [31.4, 60027.0], [31.5, 60027.0], [31.6, 60027.0], [31.7, 60027.0], [31.8, 60027.0], [31.9, 60027.0], [32.0, 60027.0], [32.1, 60027.0], [32.2, 60027.0], [32.3, 60027.0], [32.4, 60027.0], [32.5, 60027.0], [32.6, 60027.0], [32.7, 60027.0], [32.8, 60027.0], [32.9, 60027.0], [33.0, 60027.0], [33.1, 60027.0], [33.2, 60027.0], [33.3, 60027.0], [33.4, 60027.0], [33.5, 60027.0], [33.6, 60027.0], [33.7, 60027.0], [33.8, 60027.0], [33.9, 60027.0], [34.0, 60027.0], [34.1, 60027.0], [34.2, 60027.0], [34.3, 60027.0], [34.4, 60027.0], [34.5, 60028.0], [34.6, 60028.0], [34.7, 60028.0], [34.8, 60028.0], [34.9, 60028.0], [35.0, 60028.0], [35.1, 60028.0], [35.2, 60028.0], [35.3, 60028.0], [35.4, 60028.0], [35.5, 60028.0], [35.6, 60028.0], [35.7, 60028.0], [35.8, 60028.0], [35.9, 60028.0], [36.0, 60028.0], [36.1, 60028.0], [36.2, 60028.0], [36.3, 60028.0], [36.4, 60028.0], [36.5, 60028.0], [36.6, 60028.0], [36.7, 60028.0], [36.8, 60028.0], [36.9, 60028.0], [37.0, 60028.0], [37.1, 60028.0], [37.2, 60028.0], [37.3, 60028.0], [37.4, 60028.0], [37.5, 60028.0], [37.6, 60028.0], [37.7, 60028.0], [37.8, 60028.0], [37.9, 60028.0], [38.0, 60028.0], [38.1, 60028.0], [38.2, 60028.0], [38.3, 60028.0], [38.4, 60028.0], [38.5, 60028.0], [38.6, 60028.0], [38.7, 60028.0], [38.8, 60028.0], [38.9, 60028.0], [39.0, 60028.0], [39.1, 60028.0], [39.2, 60028.0], [39.3, 60028.0], [39.4, 60028.0], [39.5, 60028.0], [39.6, 60028.0], [39.7, 60028.0], [39.8, 60028.0], [39.9, 60028.0], [40.0, 60028.0], [40.1, 60028.0], [40.2, 60028.0], [40.3, 60028.0], [40.4, 60028.0], [40.5, 60028.0], [40.6, 60028.0], [40.7, 60028.0], [40.8, 60028.0], [40.9, 60028.0], [41.0, 60028.0], [41.1, 60028.0], [41.2, 60028.0], [41.3, 60028.0], [41.4, 60028.0], [41.5, 60028.0], [41.6, 60028.0], [41.7, 60028.0], [41.8, 60028.0], [41.9, 60028.0], [42.0, 60028.0], [42.1, 60028.0], [42.2, 60028.0], [42.3, 60028.0], [42.4, 60028.0], [42.5, 60028.0], [42.6, 60028.0], [42.7, 60028.0], [42.8, 60028.0], [42.9, 60028.0], [43.0, 60028.0], [43.1, 60028.0], [43.2, 60028.0], [43.3, 60028.0], [43.4, 60028.0], [43.5, 60028.0], [43.6, 60028.0], [43.7, 60028.0], [43.8, 60028.0], [43.9, 60028.0], [44.0, 60028.0], [44.1, 60028.0], [44.2, 60028.0], [44.3, 60028.0], [44.4, 60028.0], [44.5, 60028.0], [44.6, 60028.0], [44.7, 60028.0], [44.8, 60028.0], [44.9, 60028.0], [45.0, 60028.0], [45.1, 60028.0], [45.2, 60028.0], [45.3, 60028.0], [45.4, 60028.0], [45.5, 60028.0], [45.6, 60028.0], [45.7, 60028.0], [45.8, 60028.0], [45.9, 60028.0], [46.0, 60028.0], [46.1, 60028.0], [46.2, 60028.0], [46.3, 60028.0], [46.4, 60028.0], [46.5, 60028.0], [46.6, 60028.0], [46.7, 60028.0], [46.8, 60028.0], [46.9, 60028.0], [47.0, 60028.0], [47.1, 60028.0], [47.2, 60028.0], [47.3, 60028.0], [47.4, 60028.0], [47.5, 60028.0], [47.6, 60028.0], [47.7, 60028.0], [47.8, 60028.0], [47.9, 60028.0], [48.0, 60028.0], [48.1, 60028.0], [48.2, 60028.0], [48.3, 60028.0], [48.4, 60028.0], [48.5, 60028.0], [48.6, 60028.0], [48.7, 60028.0], [48.8, 60028.0], [48.9, 60028.0], [49.0, 60028.0], [49.1, 60028.0], [49.2, 60028.0], [49.3, 60028.0], [49.4, 60028.0], [49.5, 60028.0], [49.6, 60028.0], [49.7, 60028.0], [49.8, 60028.0], [49.9, 60028.0], [50.0, 60028.0], [50.1, 60028.0], [50.2, 60028.0], [50.3, 60028.0], [50.4, 60028.0], [50.5, 60028.0], [50.6, 60028.0], [50.7, 60028.0], [50.8, 60028.0], [50.9, 60028.0], [51.0, 60028.0], [51.1, 60028.0], [51.2, 60028.0], [51.3, 60028.0], [51.4, 60028.0], [51.5, 60028.0], [51.6, 60028.0], [51.7, 60028.0], [51.8, 60028.0], [51.9, 60028.0], [52.0, 60028.0], [52.1, 60028.0], [52.2, 60028.0], [52.3, 60028.0], [52.4, 60028.0], [52.5, 60028.0], [52.6, 60028.0], [52.7, 60028.0], [52.8, 60028.0], [52.9, 60028.0], [53.0, 60028.0], [53.1, 60028.0], [53.2, 60028.0], [53.3, 60028.0], [53.4, 60028.0], [53.5, 60028.0], [53.6, 60028.0], [53.7, 60028.0], [53.8, 60028.0], [53.9, 60028.0], [54.0, 60028.0], [54.1, 60028.0], [54.2, 60028.0], [54.3, 60028.0], [54.4, 60028.0], [54.5, 60028.0], [54.6, 60028.0], [54.7, 60028.0], [54.8, 60028.0], [54.9, 60028.0], [55.0, 60028.0], [55.1, 60028.0], [55.2, 60028.0], [55.3, 60028.0], [55.4, 60028.0], [55.5, 60028.0], [55.6, 60028.0], [55.7, 60028.0], [55.8, 60028.0], [55.9, 60028.0], [56.0, 60028.0], [56.1, 60028.0], [56.2, 60028.0], [56.3, 60028.0], [56.4, 60028.0], [56.5, 60028.0], [56.6, 60028.0], [56.7, 60028.0], [56.8, 60028.0], [56.9, 60028.0], [57.0, 60028.0], [57.1, 60028.0], [57.2, 60028.0], [57.3, 60028.0], [57.4, 60028.0], [57.5, 60028.0], [57.6, 60028.0], [57.7, 60028.0], [57.8, 60028.0], [57.9, 60028.0], [58.0, 60028.0], [58.1, 60028.0], [58.2, 60028.0], [58.3, 60028.0], [58.4, 60028.0], [58.5, 60028.0], [58.6, 60028.0], [58.7, 60028.0], [58.8, 60028.0], [58.9, 60028.0], [59.0, 60028.0], [59.1, 60028.0], [59.2, 60028.0], [59.3, 60028.0], [59.4, 60028.0], [59.5, 60028.0], [59.6, 60028.0], [59.7, 60028.0], [59.8, 60028.0], [59.9, 60028.0], [60.0, 60028.0], [60.1, 60028.0], [60.2, 60028.0], [60.3, 60028.0], [60.4, 60028.0], [60.5, 60028.0], [60.6, 60028.0], [60.7, 60028.0], [60.8, 60028.0], [60.9, 60028.0], [61.0, 60028.0], [61.1, 60028.0], [61.2, 60028.0], [61.3, 60028.0], [61.4, 60028.0], [61.5, 60028.0], [61.6, 60028.0], [61.7, 60028.0], [61.8, 60028.0], [61.9, 60028.0], [62.0, 60028.0], [62.1, 60028.0], [62.2, 60028.0], [62.3, 60028.0], [62.4, 60028.0], [62.5, 60028.0], [62.6, 60028.0], [62.7, 60028.0], [62.8, 60028.0], [62.9, 60028.0], [63.0, 60028.0], [63.1, 60028.0], [63.2, 60028.0], [63.3, 60028.0], [63.4, 60028.0], [63.5, 60028.0], [63.6, 60028.0], [63.7, 60028.0], [63.8, 60028.0], [63.9, 60028.0], [64.0, 60028.0], [64.1, 60028.0], [64.2, 60028.0], [64.3, 60028.0], [64.4, 60028.0], [64.5, 60028.0], [64.6, 60028.0], [64.7, 60028.0], [64.8, 60028.0], [64.9, 60028.0], [65.0, 60028.0], [65.1, 60028.0], [65.2, 60028.0], [65.3, 60028.0], [65.4, 60028.0], [65.5, 60028.0], [65.6, 60028.0], [65.7, 60028.0], [65.8, 60028.0], [65.9, 60028.0], [66.0, 60028.0], [66.1, 60028.0], [66.2, 60028.0], [66.3, 60028.0], [66.4, 60028.0], [66.5, 60028.0], [66.6, 60028.0], [66.7, 60028.0], [66.8, 60028.0], [66.9, 60028.0], [67.0, 60028.0], [67.1, 60028.0], [67.2, 60028.0], [67.3, 60028.0], [67.4, 60028.0], [67.5, 60028.0], [67.6, 60028.0], [67.7, 60028.0], [67.8, 60028.0], [67.9, 60028.0], [68.0, 60028.0], [68.1, 60028.0], [68.2, 60028.0], [68.3, 60028.0], [68.4, 60028.0], [68.5, 60029.0], [68.6, 60029.0], [68.7, 60029.0], [68.8, 60029.0], [68.9, 60029.0], [69.0, 60029.0], [69.1, 60029.0], [69.2, 60029.0], [69.3, 60029.0], [69.4, 60029.0], [69.5, 60029.0], [69.6, 60029.0], [69.7, 60029.0], [69.8, 60029.0], [69.9, 60029.0], [70.0, 60029.0], [70.1, 60029.0], [70.2, 60029.0], [70.3, 60029.0], [70.4, 60029.0], [70.5, 60029.0], [70.6, 60029.0], [70.7, 60029.0], [70.8, 60029.0], [70.9, 60029.0], [71.0, 60029.0], [71.1, 60029.0], [71.2, 60029.0], [71.3, 60029.0], [71.4, 60029.0], [71.5, 60029.0], [71.6, 60029.0], [71.7, 60029.0], [71.8, 60029.0], [71.9, 60029.0], [72.0, 60029.0], [72.1, 60029.0], [72.2, 60029.0], [72.3, 60029.0], [72.4, 60029.0], [72.5, 60029.0], [72.6, 60029.0], [72.7, 60029.0], [72.8, 60029.0], [72.9, 60029.0], [73.0, 60029.0], [73.1, 60029.0], [73.2, 60029.0], [73.3, 60029.0], [73.4, 60029.0], [73.5, 60029.0], [73.6, 60029.0], [73.7, 60029.0], [73.8, 60029.0], [73.9, 60029.0], [74.0, 60029.0], [74.1, 60029.0], [74.2, 60029.0], [74.3, 60029.0], [74.4, 60029.0], [74.5, 60029.0], [74.6, 60029.0], [74.7, 60029.0], [74.8, 60029.0], [74.9, 60029.0], [75.0, 60029.0], [75.1, 60029.0], [75.2, 60029.0], [75.3, 60029.0], [75.4, 60029.0], [75.5, 60029.0], [75.6, 60029.0], [75.7, 60029.0], [75.8, 60029.0], [75.9, 60029.0], [76.0, 60029.0], [76.1, 60029.0], [76.2, 60029.0], [76.3, 60029.0], [76.4, 60029.0], [76.5, 60029.0], [76.6, 60029.0], [76.7, 60029.0], [76.8, 60029.0], [76.9, 60029.0], [77.0, 60029.0], [77.1, 60029.0], [77.2, 60029.0], [77.3, 60029.0], [77.4, 60029.0], [77.5, 60029.0], [77.6, 60029.0], [77.7, 60029.0], [77.8, 60029.0], [77.9, 60029.0], [78.0, 60029.0], [78.1, 60029.0], [78.2, 60029.0], [78.3, 60029.0], [78.4, 60029.0], [78.5, 60029.0], [78.6, 60029.0], [78.7, 60029.0], [78.8, 60029.0], [78.9, 60029.0], [79.0, 60029.0], [79.1, 60029.0], [79.2, 60029.0], [79.3, 60029.0], [79.4, 60029.0], [79.5, 60029.0], [79.6, 60029.0], [79.7, 60029.0], [79.8, 60029.0], [79.9, 60029.0], [80.0, 60029.0], [80.1, 60029.0], [80.2, 60029.0], [80.3, 60029.0], [80.4, 60029.0], [80.5, 60029.0], [80.6, 60029.0], [80.7, 60029.0], [80.8, 60029.0], [80.9, 60029.0], [81.0, 60030.0], [81.1, 60030.0], [81.2, 60030.0], [81.3, 60030.0], [81.4, 60030.0], [81.5, 60030.0], [81.6, 60030.0], [81.7, 60030.0], [81.8, 60030.0], [81.9, 60030.0], [82.0, 60030.0], [82.1, 60030.0], [82.2, 60030.0], [82.3, 60030.0], [82.4, 60030.0], [82.5, 60030.0], [82.6, 60030.0], [82.7, 60030.0], [82.8, 60030.0], [82.9, 60030.0], [83.0, 60030.0], [83.1, 60030.0], [83.2, 60030.0], [83.3, 60030.0], [83.4, 60030.0], [83.5, 60030.0], [83.6, 60030.0], [83.7, 60030.0], [83.8, 60030.0], [83.9, 60030.0], [84.0, 60030.0], [84.1, 60030.0], [84.2, 60030.0], [84.3, 60030.0], [84.4, 60030.0], [84.5, 60030.0], [84.6, 60030.0], [84.7, 60030.0], [84.8, 60030.0], [84.9, 60030.0], [85.0, 60030.0], [85.1, 60030.0], [85.2, 60030.0], [85.3, 60030.0], [85.4, 60030.0], [85.5, 60030.0], [85.6, 60030.0], [85.7, 60030.0], [85.8, 60030.0], [85.9, 60030.0], [86.0, 60030.0], [86.1, 60030.0], [86.2, 60030.0], [86.3, 60030.0], [86.4, 60030.0], [86.5, 60030.0], [86.6, 60030.0], [86.7, 60030.0], [86.8, 60030.0], [86.9, 60030.0], [87.0, 60030.0], [87.1, 60030.0], [87.2, 60030.0], [87.3, 60030.0], [87.4, 60030.0], [87.5, 60030.0], [87.6, 60030.0], [87.7, 60030.0], [87.8, 60030.0], [87.9, 60030.0], [88.0, 60031.0], [88.1, 60031.0], [88.2, 60031.0], [88.3, 60031.0], [88.4, 60031.0], [88.5, 60031.0], [88.6, 60031.0], [88.7, 60031.0], [88.8, 60031.0], [88.9, 60031.0], [89.0, 60031.0], [89.1, 60031.0], [89.2, 60031.0], [89.3, 60031.0], [89.4, 60031.0], [89.5, 60031.0], [89.6, 60031.0], [89.7, 60031.0], [89.8, 60031.0], [89.9, 60031.0], [90.0, 60031.0], [90.1, 60031.0], [90.2, 60031.0], [90.3, 60031.0], [90.4, 60031.0], [90.5, 60031.0], [90.6, 60031.0], [90.7, 60031.0], [90.8, 60031.0], [90.9, 60031.0], [91.0, 60031.0], [91.1, 60031.0], [91.2, 60031.0], [91.3, 60031.0], [91.4, 60031.0], [91.5, 60032.0], [91.6, 60032.0], [91.7, 60032.0], [91.8, 60032.0], [91.9, 60032.0], [92.0, 60033.0], [92.1, 60033.0], [92.2, 60033.0], [92.3, 60033.0], [92.4, 60033.0], [92.5, 60035.0], [92.6, 60035.0], [92.7, 60035.0], [92.8, 60035.0], [92.9, 60035.0], [93.0, 60035.0], [93.1, 60035.0], [93.2, 60035.0], [93.3, 60035.0], [93.4, 60035.0], [93.5, 60035.0], [93.6, 60035.0], [93.7, 60035.0], [93.8, 60035.0], [93.9, 60035.0], [94.0, 60035.0], [94.1, 60035.0], [94.2, 60035.0], [94.3, 60035.0], [94.4, 60035.0], [94.5, 60036.0], [94.6, 60036.0], [94.7, 60036.0], [94.8, 60036.0], [94.9, 60036.0], [95.0, 60038.0], [95.1, 60038.0], [95.2, 60038.0], [95.3, 60038.0], [95.4, 60038.0], [95.5, 60040.0], [95.6, 60040.0], [95.7, 60040.0], [95.8, 60040.0], [95.9, 60040.0], [96.0, 60040.0], [96.1, 60040.0], [96.2, 60040.0], [96.3, 60040.0], [96.4, 60040.0], [96.5, 60040.0], [96.6, 60040.0], [96.7, 60040.0], [96.8, 60040.0], [96.9, 60040.0], [97.0, 60041.0], [97.1, 60041.0], [97.2, 60041.0], [97.3, 60041.0], [97.4, 60041.0], [97.5, 60045.0], [97.6, 60045.0], [97.7, 60045.0], [97.8, 60045.0], [97.9, 60045.0], [98.0, 60047.0], [98.1, 60047.0], [98.2, 60047.0], [98.3, 60047.0], [98.4, 60047.0], [98.5, 60050.0], [98.6, 60050.0], [98.7, 60050.0], [98.8, 60050.0], [98.9, 60050.0], [99.0, 60056.0], [99.1, 60056.0], [99.2, 60056.0], [99.3, 60056.0], [99.4, 60056.0], [99.5, 60066.0], [99.6, 60066.0], [99.7, 60066.0], [99.8, 60066.0], [99.9, 60066.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 10055.0, "series": [{"data": [[0.0, 6746.0], [3000.0, 352.0], [3100.0, 207.0], [200.0, 633.0], [3300.0, 39.0], [3200.0, 5.0], [3400.0, 1.0], [15000.0, 112.0], [1000.0, 648.0], [1100.0, 225.0], [300.0, 270.0], [1200.0, 4.0], [21000.0, 3.0], [1300.0, 1.0], [1400.0, 1.0], [100.0, 10055.0], [400.0, 262.0], [7000.0, 356.0], [7100.0, 72.0], [7300.0, 1.0], [500.0, 7.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[12600.0, 17.0], [12700.0, 15.0], [12500.0, 27.0], [12800.0, 20.0], [13100.0, 22.0], [13200.0, 16.0], [13000.0, 23.0], [12900.0, 21.0], [13300.0, 17.0], [13400.0, 20.0], [13500.0, 2.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[60000.0, 200.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 11178.0, "series": [{"data": [[0.0, 6795.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 11178.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 2424.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 86.10426966292123, "minX": 1.61757714E12, "maxY": 185.95898734177226, "series": [{"data": [[1.61757714E12, 134.51500000000004]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61757714E12, 185.95898734177226], [1.6175772E12, 86.10426966292123]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.6175772E12, 100.56000000000007]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175772E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 60057.333333333336, "series": [{"data": [[2.0, 28.0], [3.0, 27.0], [4.0, 27.285714285714285], [5.0, 28.75], [6.0, 120.09090909090911], [7.0, 27.0], [8.0, 27.5], [9.0, 27.9], [10.0, 28.0], [11.0, 28.333333333333332], [12.0, 28.466666666666665], [13.0, 29.0], [14.0, 31.428571428571427], [15.0, 29.666666666666668], [16.0, 64.8], [17.0, 253.2222222222223], [18.0, 27.9], [19.0, 204.4912280701755], [20.0, 29.666666666666664], [21.0, 29.5], [22.0, 27.5], [23.0, 29.5], [24.0, 130.5], [25.0, 29.5], [26.0, 27.5], [27.0, 28.0], [28.0, 431.4], [29.0, 833.1], [31.0, 30.0], [33.0, 28.0], [32.0, 28.0], [35.0, 27.0], [34.0, 27.0], [37.0, 27.5], [36.0, 27.0], [39.0, 27.77777777777778], [38.0, 27.0], [41.0, 28.5], [40.0, 27.6], [43.0, 28.333333333333332], [42.0, 27.666666666666668], [45.0, 30.0], [44.0, 28.533333333333328], [47.0, 28.5], [46.0, 28.0], [49.0, 28.900000000000002], [48.0, 27.0], [51.0, 31.0], [50.0, 29.0], [53.0, 29.333333333333332], [52.0, 30.666666666666668], [55.0, 31.0], [54.0, 30.0], [57.0, 32.25], [56.0, 29.6], [59.0, 33.42857142857143], [58.0, 32.93333333333332], [61.0, 35.38461538461538], [60.0, 34.0], [62.0, 34.714285714285715], [67.0, 39.09375000000001], [66.0, 38.54545454545455], [65.0, 36.2], [64.0, 35.99999999999999], [71.0, 41.0], [70.0, 41.42857142857143], [69.0, 42.0], [68.0, 40.2], [75.0, 43.28571428571429], [74.0, 44.785714285714285], [73.0, 40.437500000000014], [72.0, 45.0], [79.0, 48.375], [78.0, 46.666666666666664], [77.0, 46.0], [76.0, 44.44], [83.0, 47.70588235294118], [82.0, 47.833333333333336], [81.0, 49.2258064516129], [80.0, 47.96551724137931], [86.0, 69.1860465116279], [85.0, 53.142857142857146], [84.0, 48.759999999999984], [91.0, 440.14393939393915], [90.0, 1420.579365079365], [89.0, 932.904761904762], [88.0, 53.0], [95.0, 229.2], [94.0, 27.6], [93.0, 1033.0], [92.0, 2871.7222222222226], [118.0, 29.0], [127.0, 30.0], [124.0, 29.0], [133.0, 1035.0], [131.0, 30.0], [130.0, 1039.0], [143.0, 1028.0], [137.0, 28.0], [214.0, 1041.0], [228.0, 28.0], [239.0, 28.0], [233.0, 27.0], [245.0, 27.5], [250.0, 28.5], [271.0, 27.5], [269.0, 530.0], [265.0, 29.0], [263.0, 27.5], [261.0, 1035.0], [256.0, 27.0], [280.0, 1039.0], [286.0, 1033.25], [283.0, 1031.0], [282.0, 1030.0], [281.0, 28.0], [277.0, 27.5], [276.0, 1040.0], [275.0, 28.0], [274.0, 28.0], [303.0, 32.45454545454545], [302.0, 33.0], [301.0, 28.88888888888889], [300.0, 315.21428571428567], [318.0, 28.25], [319.0, 27.5], [317.0, 28.000000000000004], [316.0, 28.16666666666667], [315.0, 29.266666666666662], [314.0, 27.666666666666668], [313.0, 2032.9821428571427], [312.0, 215.51282051282053], [311.0, 28.333333333333332], [305.0, 41.55932203389831], [304.0, 36.71428571428571], [307.0, 46.86538461538463], [306.0, 42.907407407407405], [310.0, 11268.343434343438], [309.0, 7945.271186440679], [308.0, 51.53333333333334], [334.0, 29.333333333333332], [335.0, 31.0], [333.0, 29.5], [332.0, 28.666666666666668], [331.0, 28.0], [330.0, 29.333333333333332], [329.0, 27.0], [328.0, 28.333333333333332], [327.0, 29.4], [321.0, 27.8], [320.0, 28.5], [323.0, 29.25], [322.0, 28.769230769230774], [326.0, 30.5], [325.0, 28.666666666666668], [324.0, 28.11111111111111], [350.0, 29.23157894736842], [351.0, 30.0], [349.0, 29.175], [348.0, 2818.4814814814818], [347.0, 1673.9090909090905], [345.0, 30.0], [344.0, 1237.9], [343.0, 29.333333333333332], [336.0, 29.333333333333332], [338.0, 31.0], [337.0, 27.75], [342.0, 30.083333333333332], [340.0, 31.0], [366.0, 28.6], [367.0, 29.0], [365.0, 27.2], [364.0, 2265.1512605042017], [363.0, 614.2631578947369], [362.0, 2573.166666666667], [361.0, 2574.1666666666665], [360.0, 1164.9715189873411], [359.0, 36.833333333333336], [353.0, 30.791666666666668], [355.0, 32.0], [354.0, 30.499999999999996], [358.0, 1268.9411764705883], [357.0, 31.500000000000004], [356.0, 32.55555555555556], [382.0, 127.52583862194024], [383.0, 1308.0519480519479], [381.0, 4284.505376344085], [380.0, 3558.705882352942], [379.0, 1589.5215686274503], [378.0, 203.08928571428567], [377.0, 242.23076923076923], [376.0, 252.52631578947367], [375.0, 252.89570552147225], [369.0, 27.6], [368.0, 27.454545454545457], [371.0, 27.925925925925924], [370.0, 27.76923076923077], [374.0, 163.41190476190476], [373.0, 140.5463659147869], [372.0, 151.76541095890414], [398.0, 29.0], [399.0, 28.0], [397.0, 27.714285714285715], [396.0, 31.454545454545457], [395.0, 27.888888888888893], [394.0, 28.083333333333336], [393.0, 28.125000000000004], [392.0, 27.571428571428573], [391.0, 27.0], [385.0, 1070.5434889434887], [384.0, 410.42226748133066], [387.0, 29.0], [386.0, 27.0], [390.0, 27.5], [389.0, 28.0], [388.0, 28.0], [411.0, 47.0], [413.0, 28.5], [414.0, 30.0], [415.0, 26.0], [400.0, 213.50279905716044], [417.0, 28.71428571428571], [416.0, 30.0], [418.0, 29.0], [419.0, 29.0], [420.0, 30.0], [421.0, 28.0], [423.0, 30.333333333333332], [424.0, 30.666666666666668], [430.0, 33.0], [431.0, 32.666666666666664], [425.0, 28.0], [426.0, 36.333333333333336], [428.0, 45.81818181818182], [429.0, 30.75], [432.0, 34.666666666666664], [433.0, 35.4], [444.0, 38.666666666666664], [445.0, 39.57142857142857], [446.0, 41.75], [447.0, 42.75], [436.0, 41.333333333333336], [437.0, 44.0], [438.0, 44.25], [439.0, 43.4], [440.0, 41.0], [441.0, 43.0], [442.0, 41.5], [443.0, 42.6], [449.0, 42.666666666666664], [448.0, 43.333333333333336], [450.0, 42.375], [451.0, 39.0], [452.0, 50.74999999999999], [453.0, 50.0], [454.0, 51.125], [456.0, 52.0], [462.0, 56.14285714285714], [463.0, 51.0], [460.0, 57.25], [461.0, 62.0], [458.0, 51.0], [459.0, 57.6], [464.0, 63.0], [473.0, 85.42857142857142], [474.0, 84.69999999999999], [475.0, 75.60000000000001], [476.0, 80.78571428571428], [478.0, 79.0], [472.0, 28.5], [482.0, 88.72727272727272], [481.0, 91.0], [483.0, 67.57142857142857], [492.0, 68.0], [493.0, 58.22222222222222], [494.0, 57.5], [495.0, 61.62499999999999], [484.0, 53.75], [485.0, 54.777777777777786], [486.0, 56.166666666666664], [487.0, 59.91666666666667], [488.0, 63.0], [489.0, 66.7], [490.0, 70.0], [491.0, 72.0], [497.0, 65.0], [496.0, 62.333333333333336], [498.0, 67.83333333333333], [499.0, 70.0], [500.0, 70.49999999999999], [501.0, 71.5], [502.0, 73.33333333333334], [503.0, 74.8], [504.0, 75.9090909090909], [510.0, 79.0], [511.0, 82.25], [508.0, 78.0], [509.0, 82.0], [505.0, 77.66666666666667], [506.0, 78.66666666666667], [507.0, 79.0], [515.0, 82.5], [512.0, 81.90909090909092], [526.0, 89.08333333333334], [527.0, 87.875], [524.0, 88.4], [525.0, 88.33333333333333], [522.0, 72.11111111111111], [523.0, 89.0], [513.0, 81.0], [514.0, 81.0], [516.0, 83.42857142857143], [517.0, 84.85714285714285], [518.0, 84.6], [519.0, 85.625], [528.0, 89.75], [543.0, 95.0], [541.0, 97.2], [542.0, 98.33333333333333], [539.0, 98.0], [540.0, 95.66666666666667], [536.0, 96.85714285714286], [538.0, 103.57142857142857], [529.0, 90.0], [530.0, 91.0], [531.0, 93.57142857142857], [532.0, 94.0], [533.0, 93.28571428571428], [534.0, 95.25], [535.0, 98.0], [520.0, 88.0], [521.0, 86.66666666666667], [544.0, 96.4], [545.0, 97.0], [550.0, 141.0], [553.0, 153.33333333333334], [556.0, 164.5], [559.0, 175.33333333333334], [569.0, 213.5], [575.0, 250.0], [594.0, 36.4], [578.0, 261.5], [600.0, 177.6689860834989], [587.0, 289.0], [590.0, 28.0], [591.0, 185.32432432432432], [595.0, 28.0], [596.0, 28.0], [597.0, 30.666666666666664], [598.0, 35.14285714285714], [599.0, 38.857142857142854], [1.0, 430.6]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[390.2168499999991, 480.5638499999994]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[539.0, 13119.0], [543.0, 12973.0], [542.0, 13441.0], [541.0, 13020.0], [537.0, 13018.5], [536.0, 12931.0], [534.0, 13336.0], [522.0, 12973.966666666669], [514.0, 13283.5], [513.0, 12853.5], [516.0, 12913.0], [515.0, 13104.2], [519.0, 13076.5], [517.0, 13019.75], [521.0, 13086.272727272726], [520.0, 12934.000000000002], [574.0, 13325.0], [575.0, 13164.5], [571.0, 12893.333333333334], [570.0, 12575.0], [569.0, 13449.0], [568.0, 13036.5], [558.0, 13142.666666666666], [547.0, 12798.666666666666], [545.0, 12877.0], [550.0, 12879.0], [548.0, 13081.0], [557.0, 13278.0], [556.0, 13062.0], [555.0, 13071.0], [554.0, 13045.0], [553.0, 13213.666666666666], [565.0, 13444.0], [564.0, 13477.0], [563.0, 12570.0], [590.0, 12739.0], [600.0, 12930.066666666668], [589.0, 12699.0], [588.0, 12878.0], [586.0, 12976.0], [585.0, 12769.0], [584.0, 12840.75], [581.0, 12813.0], [580.0, 12575.0], [577.0, 12519.0], [576.0, 13012.0], [495.0, 12748.0], [493.0, 12939.75], [492.0, 12788.0], [491.0, 13412.0], [510.0, 13064.6], [511.0, 13109.0], [508.0, 12709.0], [499.0, 13372.0], [498.0, 13154.666666666666], [496.0, 13051.5], [505.0, 13108.2], [506.0, 12724.25], [507.0, 13153.0], [504.0, 13116.0], [503.0, 13154.0], [502.0, 12910.25], [501.0, 13057.0], [500.0, 12605.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[534.4350000000004, 12994.68000000001]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[99.0, 60035.333333333336], [96.0, 60041.0], [103.0, 60028.0], [102.0, 60027.0], [101.0, 60032.5], [107.0, 60027.0], [106.0, 60027.0], [105.0, 60027.0], [104.0, 60027.0], [111.0, 60028.0], [110.0, 60028.0], [109.0, 60030.0], [108.0, 60028.0], [115.0, 60027.0], [114.0, 60029.0], [113.0, 60028.0], [112.0, 60030.0], [119.0, 60027.0], [118.0, 60030.0], [117.0, 60033.0], [116.0, 60029.0], [123.0, 60027.0], [122.0, 60028.0], [121.0, 60028.0], [120.0, 60027.0], [127.0, 60027.0], [126.0, 60027.0], [125.0, 60026.0], [124.0, 60027.0], [135.0, 60029.0], [134.0, 60028.0], [133.0, 60027.0], [132.0, 60028.0], [131.0, 60028.0], [130.0, 60028.0], [129.0, 60028.0], [128.0, 60028.0], [143.0, 60028.0], [142.0, 60029.0], [141.0, 60027.0], [140.0, 60028.0], [139.0, 60028.0], [138.0, 60029.0], [137.0, 60030.0], [136.0, 60027.0], [151.0, 60028.0], [150.0, 60029.0], [149.0, 60027.0], [148.0, 60028.0], [147.0, 60029.0], [146.0, 60028.0], [145.0, 60030.0], [144.0, 60027.0], [159.0, 60032.0], [158.0, 60028.0], [157.0, 60029.0], [156.0, 60028.0], [155.0, 60027.0], [154.0, 60027.0], [153.0, 60026.0], [152.0, 60026.0], [167.0, 60026.0], [166.0, 60027.0], [165.0, 60027.0], [164.0, 60033.0], [162.0, 60027.0], [161.0, 60028.0], [160.0, 60027.0], [175.0, 60031.0], [174.0, 60027.0], [173.0, 60029.0], [172.0, 60027.0], [171.0, 60027.0], [170.0, 60028.0], [169.0, 60028.0], [168.0, 60027.0], [183.0, 60028.0], [182.0, 60027.0], [181.0, 60028.0], [180.0, 60030.0], [179.0, 60028.0], [178.0, 60027.0], [177.0, 60026.0], [176.0, 60028.0], [191.0, 60029.0], [190.0, 60026.0], [189.0, 60031.0], [188.0, 60027.0], [187.0, 60027.0], [186.0, 60029.0], [185.0, 60027.0], [184.0, 60027.0], [199.0, 60029.0], [198.0, 60027.0], [197.0, 60029.0], [196.0, 60026.0], [195.0, 60029.0], [194.0, 60031.0], [193.0, 60028.0], [192.0, 60027.0], [207.0, 60027.0], [206.0, 60029.0], [205.0, 60027.0], [204.0, 60027.0], [203.0, 60031.0], [202.0, 60030.0], [201.0, 60028.0], [200.0, 60028.0], [215.0, 60029.0], [214.0, 60030.0], [213.0, 60029.0], [212.0, 60029.0], [211.0, 60027.0], [210.0, 60029.0], [209.0, 60027.0], [208.0, 60028.0], [223.0, 60027.0], [222.0, 60026.0], [221.0, 60029.0], [220.0, 60026.0], [219.0, 60027.0], [218.0, 60028.0], [217.0, 60028.0], [216.0, 60029.0], [231.0, 60028.0], [230.0, 60028.0], [229.0, 60027.0], [227.0, 60029.0], [226.0, 60028.0], [225.0, 60030.0], [224.0, 60027.0], [239.0, 60029.0], [238.0, 60028.0], [237.0, 60027.0], [236.0, 60027.0], [235.0, 60029.0], [234.0, 60028.0], [233.0, 60028.0], [232.0, 60028.0], [247.0, 60026.0], [246.0, 60028.0], [244.0, 60028.0], [243.0, 60029.0], [242.0, 60028.0], [241.0, 60028.0], [240.0, 60030.0], [255.0, 60027.0], [254.0, 60028.0], [253.0, 60026.0], [252.0, 60027.0], [251.0, 60027.0], [250.0, 60028.0], [249.0, 60028.0], [248.0, 60028.0], [270.0, 60027.0], [271.0, 60028.0], [269.0, 60028.0], [268.0, 60028.0], [267.0, 60028.0], [266.0, 60028.0], [264.0, 60027.0], [262.0, 60027.0], [257.0, 60027.0], [256.0, 60028.0], [259.0, 60028.0], [258.0, 60030.0], [261.0, 60027.0], [260.0, 60027.0], [286.0, 60031.0], [285.0, 60032.5], [274.0, 60028.0], [273.0, 60030.0], [272.0, 60028.0], [283.0, 60027.0], [282.0, 60028.0], [281.0, 60031.0], [280.0, 60027.0], [279.0, 60028.0], [278.0, 60028.0], [277.0, 60028.0], [276.0, 60028.0], [300.0, 60036.5], [298.0, 60036.0], [297.0, 60028.0], [296.0, 60057.333333333336], [293.0, 60028.0], [292.0, 60028.0], [291.0, 60042.5], [289.0, 60028.0], [288.0, 60037.5]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[196.63000000000005, 60029.104999999996]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61757714E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757714E12, 0.0], [1.6175772E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61757714E12, 0.0], [1.6175772E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175772E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 414.7063853727137, "minX": 1.61757714E12, "maxY": 60029.104999999996, "series": [{"data": [[1.61757714E12, 414.7063853727137], [1.6175772E12, 1006.6835955056179]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757714E12, 12994.68000000001]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175772E12, 60029.104999999996]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175772E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757714E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757714E12, 0.0], [1.6175772E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757714E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175772E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175772E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757714E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757714E12, 0.0], [1.6175772E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757714E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175772E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175772E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61757714E12, "maxY": 60066.0, "series": [{"data": [[1.61757714E12, 13500.0], [1.6175772E12, 60066.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61757714E12, 1040.0], [1.6175772E12, 15068.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61757714E12, 12589.810000000001], [1.6175772E12, 60030.74]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61757714E12, 3070.0], [1.6175772E12, 60028.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61757714E12, 26.0], [1.6175772E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61757714E12, 125.0], [1.6175772E12, 43.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175772E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 60027.0, "series": [{"data": [[516.0, 28.0], [2.0, 539.5], [575.0, 31.0], [564.0, 44.0], [585.0, 70.0], [36.0, 28.0], [662.0, 117.0], [678.0, 47.0], [708.0, 123.0], [721.0, 121.0], [766.0, 97.0], [775.0, 174.0], [3.0, 1038.0], [840.0, 105.0], [895.0, 141.0], [892.0, 126.0], [59.0, 28.0], [991.0, 124.0], [994.0, 127.0], [4.0, 29.0], [1155.0, 113.0], [73.0, 7047.0], [1234.0, 128.5], [1339.0, 132.0], [1442.0, 133.0], [89.0, 60027.0], [118.0, 15048.5], [180.0, 1047.0], [206.0, 29.0], [260.0, 28.0], [1.0, 1031.0], [385.0, 174.0], [408.0, 125.0], [442.0, 29.0], [472.0, 122.0], [484.0, 29.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[575.0, 21040.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1442.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[516.0, 0.0], [2.0, 0.0], [575.0, 0.0], [564.0, 0.0], [585.0, 0.0], [36.0, 0.0], [662.0, 0.0], [678.0, 0.0], [708.0, 0.0], [721.0, 0.0], [766.0, 0.0], [775.0, 0.0], [3.0, 0.0], [840.0, 0.0], [895.0, 0.0], [892.0, 0.0], [59.0, 0.0], [991.0, 0.0], [994.0, 0.0], [4.0, 0.0], [1155.0, 0.0], [73.0, 0.0], [1234.0, 0.0], [1339.0, 0.0], [1442.0, 0.0], [89.0, 0.0], [118.0, 0.0], [180.0, 0.0], [206.0, 0.0], [260.0, 0.0], [1.0, 0.0], [385.0, 0.0], [408.0, 0.0], [442.0, 0.0], [472.0, 0.0], [484.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[575.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1442.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 34.61666666666667, "minX": 1.61757714E12, "maxY": 305.3833333333333, "series": [{"data": [[1.61757714E12, 305.3833333333333], [1.6175772E12, 34.61666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175772E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.61757714E12, "maxY": 299.53333333333336, "series": [{"data": [[1.61757714E12, 299.53333333333336], [1.6175772E12, 40.416666666666664]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61757714E12, 0.05]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175772E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.61757714E12, "maxY": 296.2, "series": [{"data": [[1.6175772E12, 3.3333333333333335]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.61757714E12, 3.3333333333333335]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61757714E12, 296.2], [1.6175772E12, 37.083333333333336]], "isOverall": false, "label": "JoinRoom-success", "isController": false}, {"data": [[1.61757714E12, 0.05]], "isOverall": false, "label": "JoinRoom-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175772E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.61757714E12, "maxY": 299.53333333333336, "series": [{"data": [[1.61757714E12, 299.53333333333336], [1.6175772E12, 40.416666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61757714E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175772E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

