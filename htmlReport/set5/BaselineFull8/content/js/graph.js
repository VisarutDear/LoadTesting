/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 60051.0, "series": [{"data": [[0.0, 26.0], [0.1, 26.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 27.0], [1.4, 27.0], [1.5, 27.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 29.0], [4.4, 30.0], [4.5, 30.0], [4.6, 30.0], [4.7, 30.0], [4.8, 30.0], [4.9, 30.0], [5.0, 30.0], [5.1, 30.0], [5.2, 30.0], [5.3, 31.0], [5.4, 31.0], [5.5, 31.0], [5.6, 31.0], [5.7, 31.0], [5.8, 31.0], [5.9, 31.0], [6.0, 31.0], [6.1, 31.0], [6.2, 31.0], [6.3, 32.0], [6.4, 32.0], [6.5, 32.0], [6.6, 32.0], [6.7, 32.0], [6.8, 32.0], [6.9, 32.0], [7.0, 32.0], [7.1, 32.0], [7.2, 32.0], [7.3, 33.0], [7.4, 33.0], [7.5, 33.0], [7.6, 33.0], [7.7, 33.0], [7.8, 33.0], [7.9, 33.0], [8.0, 33.0], [8.1, 33.0], [8.2, 33.0], [8.3, 33.0], [8.4, 33.0], [8.5, 33.0], [8.6, 33.0], [8.7, 34.0], [8.8, 34.0], [8.9, 34.0], [9.0, 34.0], [9.1, 34.0], [9.2, 34.0], [9.3, 34.0], [9.4, 34.0], [9.5, 34.0], [9.6, 34.0], [9.7, 34.0], [9.8, 34.0], [9.9, 34.0], [10.0, 34.0], [10.1, 34.0], [10.2, 34.0], [10.3, 35.0], [10.4, 35.0], [10.5, 35.0], [10.6, 35.0], [10.7, 35.0], [10.8, 35.0], [10.9, 35.0], [11.0, 35.0], [11.1, 35.0], [11.2, 35.0], [11.3, 35.0], [11.4, 35.0], [11.5, 35.0], [11.6, 35.0], [11.7, 35.0], [11.8, 35.0], [11.9, 36.0], [12.0, 36.0], [12.1, 36.0], [12.2, 36.0], [12.3, 36.0], [12.4, 36.0], [12.5, 36.0], [12.6, 36.0], [12.7, 36.0], [12.8, 36.0], [12.9, 37.0], [13.0, 37.0], [13.1, 37.0], [13.2, 37.0], [13.3, 37.0], [13.4, 37.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 37.0], [14.1, 38.0], [14.2, 38.0], [14.3, 38.0], [14.4, 38.0], [14.5, 38.0], [14.6, 38.0], [14.7, 38.0], [14.8, 39.0], [14.9, 39.0], [15.0, 39.0], [15.1, 39.0], [15.2, 39.0], [15.3, 40.0], [15.4, 40.0], [15.5, 40.0], [15.6, 40.0], [15.7, 41.0], [15.8, 41.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 43.0], [16.4, 43.0], [16.5, 43.0], [16.6, 44.0], [16.7, 44.0], [16.8, 44.0], [16.9, 45.0], [17.0, 45.0], [17.1, 45.0], [17.2, 46.0], [17.3, 46.0], [17.4, 46.0], [17.5, 46.0], [17.6, 46.0], [17.7, 46.0], [17.8, 47.0], [17.9, 47.0], [18.0, 47.0], [18.1, 47.0], [18.2, 47.0], [18.3, 48.0], [18.4, 48.0], [18.5, 48.0], [18.6, 48.0], [18.7, 48.0], [18.8, 48.0], [18.9, 48.0], [19.0, 49.0], [19.1, 49.0], [19.2, 49.0], [19.3, 49.0], [19.4, 49.0], [19.5, 49.0], [19.6, 49.0], [19.7, 50.0], [19.8, 50.0], [19.9, 50.0], [20.0, 50.0], [20.1, 50.0], [20.2, 50.0], [20.3, 50.0], [20.4, 50.0], [20.5, 50.0], [20.6, 51.0], [20.7, 51.0], [20.8, 51.0], [20.9, 51.0], [21.0, 51.0], [21.1, 51.0], [21.2, 51.0], [21.3, 52.0], [21.4, 52.0], [21.5, 52.0], [21.6, 52.0], [21.7, 52.0], [21.8, 52.0], [21.9, 52.0], [22.0, 52.0], [22.1, 53.0], [22.2, 53.0], [22.3, 53.0], [22.4, 53.0], [22.5, 53.0], [22.6, 54.0], [22.7, 54.0], [22.8, 54.0], [22.9, 54.0], [23.0, 55.0], [23.1, 55.0], [23.2, 55.0], [23.3, 56.0], [23.4, 56.0], [23.5, 56.0], [23.6, 56.0], [23.7, 56.0], [23.8, 57.0], [23.9, 57.0], [24.0, 57.0], [24.1, 57.0], [24.2, 58.0], [24.3, 58.0], [24.4, 59.0], [24.5, 59.0], [24.6, 59.0], [24.7, 60.0], [24.8, 60.0], [24.9, 60.0], [25.0, 61.0], [25.1, 61.0], [25.2, 61.0], [25.3, 62.0], [25.4, 62.0], [25.5, 63.0], [25.6, 63.0], [25.7, 63.0], [25.8, 63.0], [25.9, 64.0], [26.0, 64.0], [26.1, 64.0], [26.2, 65.0], [26.3, 65.0], [26.4, 65.0], [26.5, 66.0], [26.6, 66.0], [26.7, 66.0], [26.8, 67.0], [26.9, 67.0], [27.0, 67.0], [27.1, 68.0], [27.2, 68.0], [27.3, 68.0], [27.4, 69.0], [27.5, 69.0], [27.6, 69.0], [27.7, 70.0], [27.8, 70.0], [27.9, 70.0], [28.0, 70.0], [28.1, 71.0], [28.2, 71.0], [28.3, 71.0], [28.4, 71.0], [28.5, 72.0], [28.6, 72.0], [28.7, 72.0], [28.8, 72.0], [28.9, 73.0], [29.0, 73.0], [29.1, 73.0], [29.2, 74.0], [29.3, 74.0], [29.4, 74.0], [29.5, 75.0], [29.6, 75.0], [29.7, 76.0], [29.8, 76.0], [29.9, 77.0], [30.0, 77.0], [30.1, 77.0], [30.2, 78.0], [30.3, 79.0], [30.4, 79.0], [30.5, 80.0], [30.6, 80.0], [30.7, 81.0], [30.8, 81.0], [30.9, 82.0], [31.0, 82.0], [31.1, 83.0], [31.2, 83.0], [31.3, 83.0], [31.4, 84.0], [31.5, 84.0], [31.6, 84.0], [31.7, 84.0], [31.8, 85.0], [31.9, 85.0], [32.0, 85.0], [32.1, 85.0], [32.2, 85.0], [32.3, 85.0], [32.4, 86.0], [32.5, 86.0], [32.6, 86.0], [32.7, 86.0], [32.8, 86.0], [32.9, 87.0], [33.0, 87.0], [33.1, 87.0], [33.2, 87.0], [33.3, 87.0], [33.4, 87.0], [33.5, 88.0], [33.6, 88.0], [33.7, 88.0], [33.8, 88.0], [33.9, 88.0], [34.0, 89.0], [34.1, 89.0], [34.2, 89.0], [34.3, 89.0], [34.4, 89.0], [34.5, 89.0], [34.6, 90.0], [34.7, 90.0], [34.8, 90.0], [34.9, 91.0], [35.0, 91.0], [35.1, 91.0], [35.2, 91.0], [35.3, 92.0], [35.4, 92.0], [35.5, 92.0], [35.6, 92.0], [35.7, 92.0], [35.8, 93.0], [35.9, 93.0], [36.0, 93.0], [36.1, 94.0], [36.2, 94.0], [36.3, 94.0], [36.4, 94.0], [36.5, 94.0], [36.6, 95.0], [36.7, 95.0], [36.8, 95.0], [36.9, 95.0], [37.0, 95.0], [37.1, 96.0], [37.2, 96.0], [37.3, 96.0], [37.4, 96.0], [37.5, 96.0], [37.6, 97.0], [37.7, 97.0], [37.8, 97.0], [37.9, 97.0], [38.0, 98.0], [38.1, 98.0], [38.2, 98.0], [38.3, 98.0], [38.4, 98.0], [38.5, 98.0], [38.6, 99.0], [38.7, 99.0], [38.8, 99.0], [38.9, 99.0], [39.0, 99.0], [39.1, 99.0], [39.2, 99.0], [39.3, 99.0], [39.4, 99.0], [39.5, 100.0], [39.6, 100.0], [39.7, 100.0], [39.8, 100.0], [39.9, 100.0], [40.0, 100.0], [40.1, 100.0], [40.2, 101.0], [40.3, 101.0], [40.4, 101.0], [40.5, 101.0], [40.6, 102.0], [40.7, 102.0], [40.8, 102.0], [40.9, 102.0], [41.0, 102.0], [41.1, 102.0], [41.2, 103.0], [41.3, 103.0], [41.4, 103.0], [41.5, 103.0], [41.6, 103.0], [41.7, 103.0], [41.8, 104.0], [41.9, 104.0], [42.0, 104.0], [42.1, 104.0], [42.2, 104.0], [42.3, 105.0], [42.4, 105.0], [42.5, 105.0], [42.6, 105.0], [42.7, 105.0], [42.8, 105.0], [42.9, 106.0], [43.0, 106.0], [43.1, 106.0], [43.2, 106.0], [43.3, 106.0], [43.4, 106.0], [43.5, 106.0], [43.6, 106.0], [43.7, 107.0], [43.8, 107.0], [43.9, 107.0], [44.0, 107.0], [44.1, 107.0], [44.2, 107.0], [44.3, 107.0], [44.4, 108.0], [44.5, 108.0], [44.6, 108.0], [44.7, 108.0], [44.8, 108.0], [44.9, 108.0], [45.0, 108.0], [45.1, 109.0], [45.2, 109.0], [45.3, 109.0], [45.4, 109.0], [45.5, 109.0], [45.6, 109.0], [45.7, 109.0], [45.8, 110.0], [45.9, 110.0], [46.0, 110.0], [46.1, 110.0], [46.2, 110.0], [46.3, 110.0], [46.4, 110.0], [46.5, 111.0], [46.6, 111.0], [46.7, 111.0], [46.8, 111.0], [46.9, 111.0], [47.0, 111.0], [47.1, 111.0], [47.2, 111.0], [47.3, 111.0], [47.4, 111.0], [47.5, 111.0], [47.6, 112.0], [47.7, 112.0], [47.8, 112.0], [47.9, 112.0], [48.0, 112.0], [48.1, 112.0], [48.2, 112.0], [48.3, 112.0], [48.4, 112.0], [48.5, 112.0], [48.6, 112.0], [48.7, 112.0], [48.8, 113.0], [48.9, 113.0], [49.0, 113.0], [49.1, 113.0], [49.2, 113.0], [49.3, 113.0], [49.4, 113.0], [49.5, 113.0], [49.6, 113.0], [49.7, 113.0], [49.8, 113.0], [49.9, 113.0], [50.0, 113.0], [50.1, 114.0], [50.2, 114.0], [50.3, 114.0], [50.4, 114.0], [50.5, 114.0], [50.6, 114.0], [50.7, 114.0], [50.8, 114.0], [50.9, 114.0], [51.0, 114.0], [51.1, 114.0], [51.2, 114.0], [51.3, 114.0], [51.4, 114.0], [51.5, 114.0], [51.6, 114.0], [51.7, 115.0], [51.8, 115.0], [51.9, 115.0], [52.0, 115.0], [52.1, 115.0], [52.2, 115.0], [52.3, 115.0], [52.4, 115.0], [52.5, 115.0], [52.6, 115.0], [52.7, 115.0], [52.8, 115.0], [52.9, 115.0], [53.0, 115.0], [53.1, 115.0], [53.2, 115.0], [53.3, 115.0], [53.4, 115.0], [53.5, 116.0], [53.6, 116.0], [53.7, 116.0], [53.8, 116.0], [53.9, 116.0], [54.0, 116.0], [54.1, 116.0], [54.2, 116.0], [54.3, 116.0], [54.4, 116.0], [54.5, 116.0], [54.6, 116.0], [54.7, 116.0], [54.8, 116.0], [54.9, 116.0], [55.0, 116.0], [55.1, 116.0], [55.2, 116.0], [55.3, 116.0], [55.4, 116.0], [55.5, 116.0], [55.6, 116.0], [55.7, 116.0], [55.8, 117.0], [55.9, 117.0], [56.0, 117.0], [56.1, 117.0], [56.2, 117.0], [56.3, 117.0], [56.4, 117.0], [56.5, 117.0], [56.6, 117.0], [56.7, 117.0], [56.8, 117.0], [56.9, 117.0], [57.0, 117.0], [57.1, 117.0], [57.2, 117.0], [57.3, 117.0], [57.4, 117.0], [57.5, 117.0], [57.6, 117.0], [57.7, 117.0], [57.8, 117.0], [57.9, 117.0], [58.0, 117.0], [58.1, 117.0], [58.2, 117.0], [58.3, 118.0], [58.4, 118.0], [58.5, 118.0], [58.6, 118.0], [58.7, 118.0], [58.8, 118.0], [58.9, 118.0], [59.0, 118.0], [59.1, 118.0], [59.2, 118.0], [59.3, 118.0], [59.4, 118.0], [59.5, 118.0], [59.6, 118.0], [59.7, 118.0], [59.8, 118.0], [59.9, 118.0], [60.0, 119.0], [60.1, 119.0], [60.2, 119.0], [60.3, 119.0], [60.4, 119.0], [60.5, 119.0], [60.6, 119.0], [60.7, 119.0], [60.8, 119.0], [60.9, 119.0], [61.0, 119.0], [61.1, 119.0], [61.2, 119.0], [61.3, 119.0], [61.4, 119.0], [61.5, 120.0], [61.6, 120.0], [61.7, 120.0], [61.8, 120.0], [61.9, 120.0], [62.0, 120.0], [62.1, 120.0], [62.2, 120.0], [62.3, 120.0], [62.4, 120.0], [62.5, 120.0], [62.6, 120.0], [62.7, 120.0], [62.8, 120.0], [62.9, 121.0], [63.0, 121.0], [63.1, 121.0], [63.2, 121.0], [63.3, 121.0], [63.4, 121.0], [63.5, 121.0], [63.6, 121.0], [63.7, 121.0], [63.8, 121.0], [63.9, 121.0], [64.0, 122.0], [64.1, 122.0], [64.2, 122.0], [64.3, 122.0], [64.4, 122.0], [64.5, 122.0], [64.6, 122.0], [64.7, 122.0], [64.8, 122.0], [64.9, 122.0], [65.0, 122.0], [65.1, 123.0], [65.2, 123.0], [65.3, 123.0], [65.4, 123.0], [65.5, 123.0], [65.6, 123.0], [65.7, 123.0], [65.8, 123.0], [65.9, 123.0], [66.0, 123.0], [66.1, 123.0], [66.2, 124.0], [66.3, 124.0], [66.4, 124.0], [66.5, 124.0], [66.6, 124.0], [66.7, 124.0], [66.8, 124.0], [66.9, 124.0], [67.0, 124.0], [67.1, 125.0], [67.2, 125.0], [67.3, 125.0], [67.4, 125.0], [67.5, 125.0], [67.6, 125.0], [67.7, 125.0], [67.8, 125.0], [67.9, 126.0], [68.0, 126.0], [68.1, 126.0], [68.2, 126.0], [68.3, 126.0], [68.4, 126.0], [68.5, 126.0], [68.6, 126.0], [68.7, 127.0], [68.8, 127.0], [68.9, 127.0], [69.0, 127.0], [69.1, 127.0], [69.2, 127.0], [69.3, 128.0], [69.4, 128.0], [69.5, 128.0], [69.6, 128.0], [69.7, 128.0], [69.8, 128.0], [69.9, 128.0], [70.0, 129.0], [70.1, 129.0], [70.2, 129.0], [70.3, 129.0], [70.4, 129.0], [70.5, 129.0], [70.6, 129.0], [70.7, 130.0], [70.8, 130.0], [70.9, 130.0], [71.0, 130.0], [71.1, 130.0], [71.2, 130.0], [71.3, 131.0], [71.4, 131.0], [71.5, 131.0], [71.6, 131.0], [71.7, 132.0], [71.8, 132.0], [71.9, 132.0], [72.0, 132.0], [72.1, 132.0], [72.2, 133.0], [72.3, 133.0], [72.4, 133.0], [72.5, 133.0], [72.6, 134.0], [72.7, 134.0], [72.8, 134.0], [72.9, 134.0], [73.0, 134.0], [73.1, 135.0], [73.2, 135.0], [73.3, 135.0], [73.4, 135.0], [73.5, 135.0], [73.6, 136.0], [73.7, 136.0], [73.8, 136.0], [73.9, 136.0], [74.0, 137.0], [74.1, 137.0], [74.2, 137.0], [74.3, 137.0], [74.4, 138.0], [74.5, 138.0], [74.6, 138.0], [74.7, 138.0], [74.8, 139.0], [74.9, 139.0], [75.0, 139.0], [75.1, 139.0], [75.2, 140.0], [75.3, 140.0], [75.4, 140.0], [75.5, 140.0], [75.6, 141.0], [75.7, 141.0], [75.8, 141.0], [75.9, 142.0], [76.0, 142.0], [76.1, 142.0], [76.2, 143.0], [76.3, 143.0], [76.4, 143.0], [76.5, 143.0], [76.6, 143.0], [76.7, 143.0], [76.8, 144.0], [76.9, 144.0], [77.0, 144.0], [77.1, 144.0], [77.2, 144.0], [77.3, 144.0], [77.4, 144.0], [77.5, 144.0], [77.6, 145.0], [77.7, 145.0], [77.8, 145.0], [77.9, 145.0], [78.0, 145.0], [78.1, 146.0], [78.2, 146.0], [78.3, 146.0], [78.4, 146.0], [78.5, 146.0], [78.6, 146.0], [78.7, 146.0], [78.8, 146.0], [78.9, 147.0], [79.0, 147.0], [79.1, 147.0], [79.2, 147.0], [79.3, 147.0], [79.4, 147.0], [79.5, 147.0], [79.6, 147.0], [79.7, 147.0], [79.8, 147.0], [79.9, 148.0], [80.0, 148.0], [80.1, 148.0], [80.2, 148.0], [80.3, 148.0], [80.4, 148.0], [80.5, 149.0], [80.6, 149.0], [80.7, 149.0], [80.8, 149.0], [80.9, 149.0], [81.0, 150.0], [81.1, 150.0], [81.2, 150.0], [81.3, 150.0], [81.4, 150.0], [81.5, 151.0], [81.6, 151.0], [81.7, 151.0], [81.8, 151.0], [81.9, 151.0], [82.0, 151.0], [82.1, 151.0], [82.2, 152.0], [82.3, 152.0], [82.4, 152.0], [82.5, 153.0], [82.6, 153.0], [82.7, 154.0], [82.8, 154.0], [82.9, 154.0], [83.0, 155.0], [83.1, 155.0], [83.2, 155.0], [83.3, 156.0], [83.4, 156.0], [83.5, 156.0], [83.6, 156.0], [83.7, 156.0], [83.8, 157.0], [83.9, 157.0], [84.0, 157.0], [84.1, 157.0], [84.2, 158.0], [84.3, 158.0], [84.4, 158.0], [84.5, 159.0], [84.6, 159.0], [84.7, 159.0], [84.8, 160.0], [84.9, 160.0], [85.0, 161.0], [85.1, 161.0], [85.2, 162.0], [85.3, 162.0], [85.4, 162.0], [85.5, 162.0], [85.6, 163.0], [85.7, 163.0], [85.8, 164.0], [85.9, 165.0], [86.0, 166.0], [86.1, 167.0], [86.2, 168.0], [86.3, 170.0], [86.4, 171.0], [86.5, 173.0], [86.6, 175.0], [86.7, 176.0], [86.8, 178.0], [86.9, 182.0], [87.0, 185.0], [87.1, 189.0], [87.2, 193.0], [87.3, 199.0], [87.4, 201.0], [87.5, 204.0], [87.6, 207.0], [87.7, 209.0], [87.8, 211.0], [87.9, 213.0], [88.0, 216.0], [88.1, 219.0], [88.2, 222.0], [88.3, 230.0], [88.4, 235.0], [88.5, 237.0], [88.6, 239.0], [88.7, 245.0], [88.8, 250.0], [88.9, 253.0], [89.0, 255.0], [89.1, 259.0], [89.2, 264.0], [89.3, 266.0], [89.4, 269.0], [89.5, 275.0], [89.6, 279.0], [89.7, 282.0], [89.8, 288.0], [89.9, 297.0], [90.0, 300.0], [90.1, 303.0], [90.2, 305.0], [90.3, 308.0], [90.4, 311.0], [90.5, 318.0], [90.6, 323.0], [90.7, 331.0], [90.8, 334.0], [90.9, 337.0], [91.0, 344.0], [91.1, 359.0], [91.2, 365.0], [91.3, 368.0], [91.4, 370.0], [91.5, 373.0], [91.6, 378.0], [91.7, 380.0], [91.8, 382.0], [91.9, 386.0], [92.0, 388.0], [92.1, 390.0], [92.2, 395.0], [92.3, 396.0], [92.4, 398.0], [92.5, 401.0], [92.6, 402.0], [92.7, 407.0], [92.8, 412.0], [92.9, 422.0], [93.0, 431.0], [93.1, 436.0], [93.2, 439.0], [93.3, 456.0], [93.4, 505.0], [93.5, 541.0], [93.6, 547.0], [93.7, 569.0], [93.8, 1033.0], [93.9, 1038.0], [94.0, 1043.0], [94.1, 1048.0], [94.2, 1053.0], [94.3, 1055.0], [94.4, 1058.0], [94.5, 1060.0], [94.6, 1063.0], [94.7, 1069.0], [94.8, 1073.0], [94.9, 1078.0], [95.0, 1081.0], [95.1, 1085.0], [95.2, 1087.0], [95.3, 1090.0], [95.4, 1094.0], [95.5, 1097.0], [95.6, 1099.0], [95.7, 1103.0], [95.8, 1107.0], [95.9, 1111.0], [96.0, 1117.0], [96.1, 1140.0], [96.2, 1252.0], [96.3, 1369.0], [96.4, 1434.0], [96.5, 2128.0], [96.6, 3034.0], [96.7, 3038.0], [96.8, 3040.0], [96.9, 3042.0], [97.0, 3044.0], [97.1, 3046.0], [97.2, 3047.0], [97.3, 3048.0], [97.4, 3050.0], [97.5, 3051.0], [97.6, 3052.0], [97.7, 3054.0], [97.8, 3056.0], [97.9, 3057.0], [98.0, 3061.0], [98.1, 3064.0], [98.2, 3066.0], [98.3, 3068.0], [98.4, 3074.0], [98.5, 3080.0], [98.6, 3088.0], [98.7, 3101.0], [98.8, 3105.0], [98.9, 3111.0], [99.0, 3140.0], [99.1, 3153.0], [99.2, 3160.0], [99.3, 3172.0], [99.4, 15067.0], [99.5, 15072.0], [99.6, 15081.0], [99.7, 15094.0], [99.8, 15116.0], [99.9, 15140.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 12809.0], [0.1, 12809.0], [0.2, 12809.0], [0.3, 12809.0], [0.4, 12809.0], [0.5, 12813.0], [0.6, 12813.0], [0.7, 12813.0], [0.8, 12813.0], [0.9, 12813.0], [1.0, 12818.0], [1.1, 12818.0], [1.2, 12818.0], [1.3, 12818.0], [1.4, 12820.0], [1.5, 12820.0], [1.6, 12820.0], [1.7, 12820.0], [1.8, 12820.0], [1.9, 12823.0], [2.0, 12823.0], [2.1, 12823.0], [2.2, 12823.0], [2.3, 12834.0], [2.4, 12834.0], [2.5, 12834.0], [2.6, 12834.0], [2.7, 12834.0], [2.8, 12838.0], [2.9, 12838.0], [3.0, 12838.0], [3.1, 12838.0], [3.2, 12843.0], [3.3, 12843.0], [3.4, 12843.0], [3.5, 12843.0], [3.6, 12843.0], [3.7, 12843.0], [3.8, 12843.0], [3.9, 12843.0], [4.0, 12843.0], [4.1, 12849.0], [4.2, 12849.0], [4.3, 12849.0], [4.4, 12849.0], [4.5, 12849.0], [4.6, 12850.0], [4.7, 12850.0], [4.8, 12850.0], [4.9, 12850.0], [5.0, 12856.0], [5.1, 12856.0], [5.2, 12856.0], [5.3, 12856.0], [5.4, 12856.0], [5.5, 12863.0], [5.6, 12863.0], [5.7, 12863.0], [5.8, 12863.0], [5.9, 12863.0], [6.0, 12867.0], [6.1, 12867.0], [6.2, 12867.0], [6.3, 12867.0], [6.4, 12870.0], [6.5, 12870.0], [6.6, 12870.0], [6.7, 12870.0], [6.8, 12870.0], [6.9, 12873.0], [7.0, 12873.0], [7.1, 12873.0], [7.2, 12873.0], [7.3, 12877.0], [7.4, 12877.0], [7.5, 12877.0], [7.6, 12877.0], [7.7, 12877.0], [7.8, 12884.0], [7.9, 12884.0], [8.0, 12884.0], [8.1, 12884.0], [8.2, 12886.0], [8.3, 12886.0], [8.4, 12886.0], [8.5, 12886.0], [8.6, 12886.0], [8.7, 12888.0], [8.8, 12888.0], [8.9, 12888.0], [9.0, 12888.0], [9.1, 12902.0], [9.2, 12902.0], [9.3, 12902.0], [9.4, 12902.0], [9.5, 12902.0], [9.6, 12906.0], [9.7, 12906.0], [9.8, 12906.0], [9.9, 12906.0], [10.0, 12907.0], [10.1, 12907.0], [10.2, 12907.0], [10.3, 12907.0], [10.4, 12907.0], [10.5, 12911.0], [10.6, 12911.0], [10.7, 12911.0], [10.8, 12911.0], [10.9, 12911.0], [11.0, 12919.0], [11.1, 12919.0], [11.2, 12919.0], [11.3, 12919.0], [11.4, 12921.0], [11.5, 12921.0], [11.6, 12921.0], [11.7, 12921.0], [11.8, 12921.0], [11.9, 12921.0], [12.0, 12921.0], [12.1, 12921.0], [12.2, 12921.0], [12.3, 12925.0], [12.4, 12925.0], [12.5, 12925.0], [12.6, 12925.0], [12.7, 12925.0], [12.8, 12931.0], [12.9, 12931.0], [13.0, 12931.0], [13.1, 12931.0], [13.2, 12938.0], [13.3, 12938.0], [13.4, 12938.0], [13.5, 12938.0], [13.6, 12938.0], [13.7, 12939.0], [13.8, 12939.0], [13.9, 12939.0], [14.0, 12939.0], [14.1, 12945.0], [14.2, 12945.0], [14.3, 12945.0], [14.4, 12945.0], [14.5, 12945.0], [14.6, 12954.0], [14.7, 12954.0], [14.8, 12954.0], [14.9, 12954.0], [15.0, 12954.0], [15.1, 12958.0], [15.2, 12958.0], [15.3, 12958.0], [15.4, 12958.0], [15.5, 12969.0], [15.6, 12969.0], [15.7, 12969.0], [15.8, 12969.0], [15.9, 12969.0], [16.0, 12970.0], [16.1, 12970.0], [16.2, 12970.0], [16.3, 12970.0], [16.4, 12974.0], [16.5, 12974.0], [16.6, 12974.0], [16.7, 12974.0], [16.8, 12974.0], [16.9, 12977.0], [17.0, 12977.0], [17.1, 12977.0], [17.2, 12977.0], [17.3, 12980.0], [17.4, 12980.0], [17.5, 12980.0], [17.6, 12980.0], [17.7, 12980.0], [17.8, 12986.0], [17.9, 12986.0], [18.0, 12986.0], [18.1, 12986.0], [18.2, 12992.0], [18.3, 12992.0], [18.4, 12992.0], [18.5, 12992.0], [18.6, 12992.0], [18.7, 12993.0], [18.8, 12993.0], [18.9, 12993.0], [19.0, 12993.0], [19.1, 12999.0], [19.2, 12999.0], [19.3, 12999.0], [19.4, 12999.0], [19.5, 12999.0], [19.6, 13003.0], [19.7, 13003.0], [19.8, 13003.0], [19.9, 13003.0], [20.0, 13004.0], [20.1, 13004.0], [20.2, 13004.0], [20.3, 13004.0], [20.4, 13004.0], [20.5, 13008.0], [20.6, 13008.0], [20.7, 13008.0], [20.8, 13008.0], [20.9, 13008.0], [21.0, 13009.0], [21.1, 13009.0], [21.2, 13009.0], [21.3, 13009.0], [21.4, 13010.0], [21.5, 13010.0], [21.6, 13010.0], [21.7, 13010.0], [21.8, 13010.0], [21.9, 13012.0], [22.0, 13012.0], [22.1, 13012.0], [22.2, 13012.0], [22.3, 13012.0], [22.4, 13012.0], [22.5, 13012.0], [22.6, 13012.0], [22.7, 13012.0], [22.8, 13013.0], [22.9, 13013.0], [23.0, 13013.0], [23.1, 13013.0], [23.2, 13015.0], [23.3, 13015.0], [23.4, 13015.0], [23.5, 13015.0], [23.6, 13015.0], [23.7, 13024.0], [23.8, 13024.0], [23.9, 13024.0], [24.0, 13024.0], [24.1, 13024.0], [24.2, 13024.0], [24.3, 13024.0], [24.4, 13024.0], [24.5, 13024.0], [24.6, 13028.0], [24.7, 13028.0], [24.8, 13028.0], [24.9, 13028.0], [25.0, 13044.0], [25.1, 13044.0], [25.2, 13044.0], [25.3, 13044.0], [25.4, 13044.0], [25.5, 13045.0], [25.6, 13045.0], [25.7, 13045.0], [25.8, 13045.0], [25.9, 13045.0], [26.0, 13046.0], [26.1, 13046.0], [26.2, 13046.0], [26.3, 13046.0], [26.4, 13048.0], [26.5, 13048.0], [26.6, 13048.0], [26.7, 13048.0], [26.8, 13048.0], [26.9, 13065.0], [27.0, 13065.0], [27.1, 13065.0], [27.2, 13065.0], [27.3, 13080.0], [27.4, 13080.0], [27.5, 13080.0], [27.6, 13080.0], [27.7, 13080.0], [27.8, 13081.0], [27.9, 13081.0], [28.0, 13081.0], [28.1, 13081.0], [28.2, 13090.0], [28.3, 13090.0], [28.4, 13090.0], [28.5, 13090.0], [28.6, 13090.0], [28.7, 13105.0], [28.8, 13105.0], [28.9, 13105.0], [29.0, 13105.0], [29.1, 13109.0], [29.2, 13109.0], [29.3, 13109.0], [29.4, 13109.0], [29.5, 13109.0], [29.6, 13112.0], [29.7, 13112.0], [29.8, 13112.0], [29.9, 13112.0], [30.0, 13112.0], [30.1, 13112.0], [30.2, 13112.0], [30.3, 13112.0], [30.4, 13112.0], [30.5, 13119.0], [30.6, 13119.0], [30.7, 13119.0], [30.8, 13119.0], [30.9, 13119.0], [31.0, 13131.0], [31.1, 13131.0], [31.2, 13131.0], [31.3, 13131.0], [31.4, 13131.0], [31.5, 13131.0], [31.6, 13131.0], [31.7, 13131.0], [31.8, 13131.0], [31.9, 13138.0], [32.0, 13138.0], [32.1, 13138.0], [32.2, 13138.0], [32.3, 13144.0], [32.4, 13144.0], [32.5, 13144.0], [32.6, 13144.0], [32.7, 13144.0], [32.8, 13149.0], [32.9, 13149.0], [33.0, 13149.0], [33.1, 13149.0], [33.2, 13161.0], [33.3, 13161.0], [33.4, 13161.0], [33.5, 13161.0], [33.6, 13161.0], [33.7, 13162.0], [33.8, 13162.0], [33.9, 13162.0], [34.0, 13162.0], [34.1, 13167.0], [34.2, 13167.0], [34.3, 13167.0], [34.4, 13167.0], [34.5, 13167.0], [34.6, 13176.0], [34.7, 13176.0], [34.8, 13176.0], [34.9, 13176.0], [35.0, 13178.0], [35.1, 13178.0], [35.2, 13178.0], [35.3, 13178.0], [35.4, 13178.0], [35.5, 13178.0], [35.6, 13178.0], [35.7, 13178.0], [35.8, 13178.0], [35.9, 13178.0], [36.0, 13191.0], [36.1, 13191.0], [36.2, 13191.0], [36.3, 13191.0], [36.4, 13192.0], [36.5, 13192.0], [36.6, 13192.0], [36.7, 13192.0], [36.8, 13192.0], [36.9, 13205.0], [37.0, 13205.0], [37.1, 13205.0], [37.2, 13205.0], [37.3, 13210.0], [37.4, 13210.0], [37.5, 13210.0], [37.6, 13210.0], [37.7, 13210.0], [37.8, 13214.0], [37.9, 13214.0], [38.0, 13214.0], [38.1, 13214.0], [38.2, 13219.0], [38.3, 13219.0], [38.4, 13219.0], [38.5, 13219.0], [38.6, 13219.0], [38.7, 13221.0], [38.8, 13221.0], [38.9, 13221.0], [39.0, 13221.0], [39.1, 13227.0], [39.2, 13227.0], [39.3, 13227.0], [39.4, 13227.0], [39.5, 13227.0], [39.6, 13229.0], [39.7, 13229.0], [39.8, 13229.0], [39.9, 13229.0], [40.0, 13233.0], [40.1, 13233.0], [40.2, 13233.0], [40.3, 13233.0], [40.4, 13233.0], [40.5, 13235.0], [40.6, 13235.0], [40.7, 13235.0], [40.8, 13235.0], [40.9, 13235.0], [41.0, 13236.0], [41.1, 13236.0], [41.2, 13236.0], [41.3, 13236.0], [41.4, 13239.0], [41.5, 13239.0], [41.6, 13239.0], [41.7, 13239.0], [41.8, 13239.0], [41.9, 13249.0], [42.0, 13249.0], [42.1, 13249.0], [42.2, 13249.0], [42.3, 13249.0], [42.4, 13249.0], [42.5, 13249.0], [42.6, 13249.0], [42.7, 13249.0], [42.8, 13250.0], [42.9, 13250.0], [43.0, 13250.0], [43.1, 13250.0], [43.2, 13250.0], [43.3, 13250.0], [43.4, 13250.0], [43.5, 13250.0], [43.6, 13250.0], [43.7, 13251.0], [43.8, 13251.0], [43.9, 13251.0], [44.0, 13251.0], [44.1, 13253.0], [44.2, 13253.0], [44.3, 13253.0], [44.4, 13253.0], [44.5, 13253.0], [44.6, 13254.0], [44.7, 13254.0], [44.8, 13254.0], [44.9, 13254.0], [45.0, 13256.0], [45.1, 13256.0], [45.2, 13256.0], [45.3, 13256.0], [45.4, 13256.0], [45.5, 13256.0], [45.6, 13256.0], [45.7, 13256.0], [45.8, 13256.0], [45.9, 13256.0], [46.0, 13257.0], [46.1, 13257.0], [46.2, 13257.0], [46.3, 13257.0], [46.4, 13258.0], [46.5, 13258.0], [46.6, 13258.0], [46.7, 13258.0], [46.8, 13258.0], [46.9, 13260.0], [47.0, 13260.0], [47.1, 13260.0], [47.2, 13260.0], [47.3, 13270.0], [47.4, 13270.0], [47.5, 13270.0], [47.6, 13270.0], [47.7, 13270.0], [47.8, 13273.0], [47.9, 13273.0], [48.0, 13273.0], [48.1, 13273.0], [48.2, 13281.0], [48.3, 13281.0], [48.4, 13281.0], [48.5, 13281.0], [48.6, 13281.0], [48.7, 13290.0], [48.8, 13290.0], [48.9, 13290.0], [49.0, 13290.0], [49.1, 13301.0], [49.2, 13301.0], [49.3, 13301.0], [49.4, 13301.0], [49.5, 13301.0], [49.6, 13325.0], [49.7, 13325.0], [49.8, 13325.0], [49.9, 13325.0], [50.0, 13330.0], [50.1, 13330.0], [50.2, 13330.0], [50.3, 13330.0], [50.4, 13330.0], [50.5, 13335.0], [50.6, 13335.0], [50.7, 13335.0], [50.8, 13335.0], [50.9, 13335.0], [51.0, 13344.0], [51.1, 13344.0], [51.2, 13344.0], [51.3, 13344.0], [51.4, 13361.0], [51.5, 13361.0], [51.6, 13361.0], [51.7, 13361.0], [51.8, 13361.0], [51.9, 13368.0], [52.0, 13368.0], [52.1, 13368.0], [52.2, 13368.0], [52.3, 13373.0], [52.4, 13373.0], [52.5, 13373.0], [52.6, 13373.0], [52.7, 13373.0], [52.8, 13377.0], [52.9, 13377.0], [53.0, 13377.0], [53.1, 13377.0], [53.2, 13378.0], [53.3, 13378.0], [53.4, 13378.0], [53.5, 13378.0], [53.6, 13378.0], [53.7, 13379.0], [53.8, 13379.0], [53.9, 13379.0], [54.0, 13379.0], [54.1, 13384.0], [54.2, 13384.0], [54.3, 13384.0], [54.4, 13384.0], [54.5, 13384.0], [54.6, 13389.0], [54.7, 13389.0], [54.8, 13389.0], [54.9, 13389.0], [55.0, 13389.0], [55.1, 13389.0], [55.2, 13389.0], [55.3, 13389.0], [55.4, 13389.0], [55.5, 13405.0], [55.6, 13405.0], [55.7, 13405.0], [55.8, 13405.0], [55.9, 13405.0], [56.0, 13407.0], [56.1, 13407.0], [56.2, 13407.0], [56.3, 13407.0], [56.4, 13415.0], [56.5, 13415.0], [56.6, 13415.0], [56.7, 13415.0], [56.8, 13415.0], [56.9, 13421.0], [57.0, 13421.0], [57.1, 13421.0], [57.2, 13421.0], [57.3, 13432.0], [57.4, 13432.0], [57.5, 13432.0], [57.6, 13432.0], [57.7, 13432.0], [57.8, 13435.0], [57.9, 13435.0], [58.0, 13435.0], [58.1, 13435.0], [58.2, 13437.0], [58.3, 13437.0], [58.4, 13437.0], [58.5, 13437.0], [58.6, 13437.0], [58.7, 13438.0], [58.8, 13438.0], [58.9, 13438.0], [59.0, 13438.0], [59.1, 13440.0], [59.2, 13440.0], [59.3, 13440.0], [59.4, 13440.0], [59.5, 13440.0], [59.6, 13441.0], [59.7, 13441.0], [59.8, 13441.0], [59.9, 13441.0], [60.0, 13445.0], [60.1, 13445.0], [60.2, 13445.0], [60.3, 13445.0], [60.4, 13445.0], [60.5, 13448.0], [60.6, 13448.0], [60.7, 13448.0], [60.8, 13448.0], [60.9, 13448.0], [61.0, 13466.0], [61.1, 13466.0], [61.2, 13466.0], [61.3, 13466.0], [61.4, 13469.0], [61.5, 13469.0], [61.6, 13469.0], [61.7, 13469.0], [61.8, 13469.0], [61.9, 13471.0], [62.0, 13471.0], [62.1, 13471.0], [62.2, 13471.0], [62.3, 13472.0], [62.4, 13472.0], [62.5, 13472.0], [62.6, 13472.0], [62.7, 13472.0], [62.8, 13472.0], [62.9, 13472.0], [63.0, 13472.0], [63.1, 13472.0], [63.2, 13473.0], [63.3, 13473.0], [63.4, 13473.0], [63.5, 13473.0], [63.6, 13473.0], [63.7, 13473.0], [63.8, 13473.0], [63.9, 13473.0], [64.0, 13473.0], [64.1, 13474.0], [64.2, 13474.0], [64.3, 13474.0], [64.4, 13474.0], [64.5, 13474.0], [64.6, 13476.0], [64.7, 13476.0], [64.8, 13476.0], [64.9, 13476.0], [65.0, 13476.0], [65.1, 13476.0], [65.2, 13476.0], [65.3, 13476.0], [65.4, 13476.0], [65.5, 13477.0], [65.6, 13477.0], [65.7, 13477.0], [65.8, 13477.0], [65.9, 13477.0], [66.0, 13477.0], [66.1, 13477.0], [66.2, 13477.0], [66.3, 13477.0], [66.4, 13477.0], [66.5, 13477.0], [66.6, 13477.0], [66.7, 13477.0], [66.8, 13477.0], [66.9, 13478.0], [67.0, 13478.0], [67.1, 13478.0], [67.2, 13478.0], [67.3, 13479.0], [67.4, 13479.0], [67.5, 13479.0], [67.6, 13479.0], [67.7, 13479.0], [67.8, 13479.0], [67.9, 13479.0], [68.0, 13479.0], [68.1, 13479.0], [68.2, 13480.0], [68.3, 13480.0], [68.4, 13480.0], [68.5, 13480.0], [68.6, 13480.0], [68.7, 13480.0], [68.8, 13480.0], [68.9, 13480.0], [69.0, 13480.0], [69.1, 13480.0], [69.2, 13480.0], [69.3, 13480.0], [69.4, 13480.0], [69.5, 13480.0], [69.6, 13480.0], [69.7, 13480.0], [69.8, 13480.0], [69.9, 13480.0], [70.0, 13480.0], [70.1, 13480.0], [70.2, 13480.0], [70.3, 13480.0], [70.4, 13480.0], [70.5, 13482.0], [70.6, 13482.0], [70.7, 13482.0], [70.8, 13482.0], [70.9, 13482.0], [71.0, 13482.0], [71.1, 13482.0], [71.2, 13482.0], [71.3, 13482.0], [71.4, 13482.0], [71.5, 13482.0], [71.6, 13482.0], [71.7, 13482.0], [71.8, 13482.0], [71.9, 13482.0], [72.0, 13482.0], [72.1, 13482.0], [72.2, 13482.0], [72.3, 13483.0], [72.4, 13483.0], [72.5, 13483.0], [72.6, 13483.0], [72.7, 13483.0], [72.8, 13494.0], [72.9, 13494.0], [73.0, 13494.0], [73.1, 13494.0], [73.2, 13504.0], [73.3, 13504.0], [73.4, 13504.0], [73.5, 13504.0], [73.6, 13504.0], [73.7, 13535.0], [73.8, 13535.0], [73.9, 13535.0], [74.0, 13535.0], [74.1, 13539.0], [74.2, 13539.0], [74.3, 13539.0], [74.4, 13539.0], [74.5, 13539.0], [74.6, 13540.0], [74.7, 13540.0], [74.8, 13540.0], [74.9, 13540.0], [75.0, 13543.0], [75.1, 13543.0], [75.2, 13543.0], [75.3, 13543.0], [75.4, 13543.0], [75.5, 13575.0], [75.6, 13575.0], [75.7, 13575.0], [75.8, 13575.0], [75.9, 13575.0], [76.0, 13600.0], [76.1, 13600.0], [76.2, 13600.0], [76.3, 13600.0], [76.4, 13602.0], [76.5, 13602.0], [76.6, 13602.0], [76.7, 13602.0], [76.8, 13602.0], [76.9, 13606.0], [77.0, 13606.0], [77.1, 13606.0], [77.2, 13606.0], [77.3, 13609.0], [77.4, 13609.0], [77.5, 13609.0], [77.6, 13609.0], [77.7, 13609.0], [77.8, 13611.0], [77.9, 13611.0], [78.0, 13611.0], [78.1, 13611.0], [78.2, 13617.0], [78.3, 13617.0], [78.4, 13617.0], [78.5, 13617.0], [78.6, 13617.0], [78.7, 13633.0], [78.8, 13633.0], [78.9, 13633.0], [79.0, 13633.0], [79.1, 13651.0], [79.2, 13651.0], [79.3, 13651.0], [79.4, 13651.0], [79.5, 13651.0], [79.6, 13667.0], [79.7, 13667.0], [79.8, 13667.0], [79.9, 13667.0], [80.0, 13671.0], [80.1, 13671.0], [80.2, 13671.0], [80.3, 13671.0], [80.4, 13671.0], [80.5, 13672.0], [80.6, 13672.0], [80.7, 13672.0], [80.8, 13672.0], [80.9, 13672.0], [81.0, 13678.0], [81.1, 13678.0], [81.2, 13678.0], [81.3, 13678.0], [81.4, 13682.0], [81.5, 13682.0], [81.6, 13682.0], [81.7, 13682.0], [81.8, 13682.0], [81.9, 13688.0], [82.0, 13688.0], [82.1, 13688.0], [82.2, 13688.0], [82.3, 13692.0], [82.4, 13692.0], [82.5, 13692.0], [82.6, 13692.0], [82.7, 13692.0], [82.8, 13699.0], [82.9, 13699.0], [83.0, 13699.0], [83.1, 13699.0], [83.2, 13704.0], [83.3, 13704.0], [83.4, 13704.0], [83.5, 13704.0], [83.6, 13704.0], [83.7, 13704.0], [83.8, 13704.0], [83.9, 13704.0], [84.0, 13704.0], [84.1, 13706.0], [84.2, 13706.0], [84.3, 13706.0], [84.4, 13706.0], [84.5, 13706.0], [84.6, 13723.0], [84.7, 13723.0], [84.8, 13723.0], [84.9, 13723.0], [85.0, 13728.0], [85.1, 13728.0], [85.2, 13728.0], [85.3, 13728.0], [85.4, 13728.0], [85.5, 13733.0], [85.6, 13733.0], [85.7, 13733.0], [85.8, 13733.0], [85.9, 13733.0], [86.0, 13739.0], [86.1, 13739.0], [86.2, 13739.0], [86.3, 13739.0], [86.4, 13742.0], [86.5, 13742.0], [86.6, 13742.0], [86.7, 13742.0], [86.8, 13742.0], [86.9, 13742.0], [87.0, 13742.0], [87.1, 13742.0], [87.2, 13742.0], [87.3, 13744.0], [87.4, 13744.0], [87.5, 13744.0], [87.6, 13744.0], [87.7, 13744.0], [87.8, 13758.0], [87.9, 13758.0], [88.0, 13758.0], [88.1, 13758.0], [88.2, 13760.0], [88.3, 13760.0], [88.4, 13760.0], [88.5, 13760.0], [88.6, 13760.0], [88.7, 13760.0], [88.8, 13760.0], [88.9, 13760.0], [89.0, 13760.0], [89.1, 13764.0], [89.2, 13764.0], [89.3, 13764.0], [89.4, 13764.0], [89.5, 13764.0], [89.6, 13785.0], [89.7, 13785.0], [89.8, 13785.0], [89.9, 13785.0], [90.0, 13792.0], [90.1, 13792.0], [90.2, 13792.0], [90.3, 13792.0], [90.4, 13792.0], [90.5, 13792.0], [90.6, 13792.0], [90.7, 13792.0], [90.8, 13792.0], [90.9, 13792.0], [91.0, 13804.0], [91.1, 13804.0], [91.2, 13804.0], [91.3, 13804.0], [91.4, 13804.0], [91.5, 13804.0], [91.6, 13804.0], [91.7, 13804.0], [91.8, 13804.0], [91.9, 13808.0], [92.0, 13808.0], [92.1, 13808.0], [92.2, 13808.0], [92.3, 13816.0], [92.4, 13816.0], [92.5, 13816.0], [92.6, 13816.0], [92.7, 13816.0], [92.8, 13819.0], [92.9, 13819.0], [93.0, 13819.0], [93.1, 13819.0], [93.2, 13827.0], [93.3, 13827.0], [93.4, 13827.0], [93.5, 13827.0], [93.6, 13827.0], [93.7, 13829.0], [93.8, 13829.0], [93.9, 13829.0], [94.0, 13829.0], [94.1, 13840.0], [94.2, 13840.0], [94.3, 13840.0], [94.4, 13840.0], [94.5, 13840.0], [94.6, 13846.0], [94.7, 13846.0], [94.8, 13846.0], [94.9, 13846.0], [95.0, 13854.0], [95.1, 13854.0], [95.2, 13854.0], [95.3, 13854.0], [95.4, 13854.0], [95.5, 13856.0], [95.6, 13856.0], [95.7, 13856.0], [95.8, 13856.0], [95.9, 13856.0], [96.0, 13864.0], [96.1, 13864.0], [96.2, 13864.0], [96.3, 13864.0], [96.4, 13869.0], [96.5, 13869.0], [96.6, 13869.0], [96.7, 13869.0], [96.8, 13869.0], [96.9, 13874.0], [97.0, 13874.0], [97.1, 13874.0], [97.2, 13874.0], [97.3, 13878.0], [97.4, 13878.0], [97.5, 13878.0], [97.6, 13878.0], [97.7, 13878.0], [97.8, 13882.0], [97.9, 13882.0], [98.0, 13882.0], [98.1, 13882.0], [98.2, 13883.0], [98.3, 13883.0], [98.4, 13883.0], [98.5, 13883.0], [98.6, 13883.0], [98.7, 13884.0], [98.8, 13884.0], [98.9, 13884.0], [99.0, 13884.0], [99.1, 13889.0], [99.2, 13889.0], [99.3, 13889.0], [99.4, 13889.0], [99.5, 13889.0], [99.6, 13894.0], [99.7, 13894.0], [99.8, 13894.0], [99.9, 13894.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 60026.0], [0.1, 60026.0], [0.2, 60026.0], [0.3, 60026.0], [0.4, 60026.0], [0.5, 60026.0], [0.6, 60026.0], [0.7, 60026.0], [0.8, 60026.0], [0.9, 60026.0], [1.0, 60026.0], [1.1, 60026.0], [1.2, 60026.0], [1.3, 60026.0], [1.4, 60026.0], [1.5, 60026.0], [1.6, 60026.0], [1.7, 60026.0], [1.8, 60026.0], [1.9, 60026.0], [2.0, 60026.0], [2.1, 60026.0], [2.2, 60026.0], [2.3, 60026.0], [2.4, 60026.0], [2.5, 60026.0], [2.6, 60026.0], [2.7, 60026.0], [2.8, 60026.0], [2.9, 60026.0], [3.0, 60026.0], [3.1, 60026.0], [3.2, 60026.0], [3.3, 60026.0], [3.4, 60026.0], [3.5, 60026.0], [3.6, 60026.0], [3.7, 60026.0], [3.8, 60026.0], [3.9, 60026.0], [4.0, 60026.0], [4.1, 60026.0], [4.2, 60026.0], [4.3, 60026.0], [4.4, 60026.0], [4.5, 60026.0], [4.6, 60026.0], [4.7, 60026.0], [4.8, 60026.0], [4.9, 60026.0], [5.0, 60027.0], [5.1, 60027.0], [5.2, 60027.0], [5.3, 60027.0], [5.4, 60027.0], [5.5, 60027.0], [5.6, 60027.0], [5.7, 60027.0], [5.8, 60027.0], [5.9, 60027.0], [6.0, 60027.0], [6.1, 60027.0], [6.2, 60027.0], [6.3, 60027.0], [6.4, 60027.0], [6.5, 60027.0], [6.6, 60027.0], [6.7, 60027.0], [6.8, 60027.0], [6.9, 60027.0], [7.0, 60027.0], [7.1, 60027.0], [7.2, 60027.0], [7.3, 60027.0], [7.4, 60027.0], [7.5, 60027.0], [7.6, 60027.0], [7.7, 60027.0], [7.8, 60027.0], [7.9, 60027.0], [8.0, 60027.0], [8.1, 60027.0], [8.2, 60027.0], [8.3, 60027.0], [8.4, 60027.0], [8.5, 60027.0], [8.6, 60027.0], [8.7, 60027.0], [8.8, 60027.0], [8.9, 60027.0], [9.0, 60027.0], [9.1, 60027.0], [9.2, 60027.0], [9.3, 60027.0], [9.4, 60027.0], [9.5, 60027.0], [9.6, 60027.0], [9.7, 60027.0], [9.8, 60027.0], [9.9, 60027.0], [10.0, 60027.0], [10.1, 60027.0], [10.2, 60027.0], [10.3, 60027.0], [10.4, 60027.0], [10.5, 60027.0], [10.6, 60027.0], [10.7, 60027.0], [10.8, 60027.0], [10.9, 60027.0], [11.0, 60027.0], [11.1, 60027.0], [11.2, 60027.0], [11.3, 60027.0], [11.4, 60027.0], [11.5, 60027.0], [11.6, 60027.0], [11.7, 60027.0], [11.8, 60027.0], [11.9, 60027.0], [12.0, 60027.0], [12.1, 60027.0], [12.2, 60027.0], [12.3, 60027.0], [12.4, 60027.0], [12.5, 60027.0], [12.6, 60027.0], [12.7, 60027.0], [12.8, 60027.0], [12.9, 60027.0], [13.0, 60027.0], [13.1, 60027.0], [13.2, 60027.0], [13.3, 60027.0], [13.4, 60027.0], [13.5, 60027.0], [13.6, 60027.0], [13.7, 60027.0], [13.8, 60027.0], [13.9, 60027.0], [14.0, 60027.0], [14.1, 60027.0], [14.2, 60027.0], [14.3, 60027.0], [14.4, 60027.0], [14.5, 60027.0], [14.6, 60027.0], [14.7, 60027.0], [14.8, 60027.0], [14.9, 60027.0], [15.0, 60027.0], [15.1, 60027.0], [15.2, 60027.0], [15.3, 60027.0], [15.4, 60027.0], [15.5, 60027.0], [15.6, 60027.0], [15.7, 60027.0], [15.8, 60027.0], [15.9, 60027.0], [16.0, 60027.0], [16.1, 60027.0], [16.2, 60027.0], [16.3, 60027.0], [16.4, 60027.0], [16.5, 60027.0], [16.6, 60027.0], [16.7, 60027.0], [16.8, 60027.0], [16.9, 60027.0], [17.0, 60027.0], [17.1, 60027.0], [17.2, 60027.0], [17.3, 60027.0], [17.4, 60027.0], [17.5, 60027.0], [17.6, 60027.0], [17.7, 60027.0], [17.8, 60027.0], [17.9, 60027.0], [18.0, 60027.0], [18.1, 60027.0], [18.2, 60027.0], [18.3, 60027.0], [18.4, 60027.0], [18.5, 60027.0], [18.6, 60027.0], [18.7, 60027.0], [18.8, 60027.0], [18.9, 60027.0], [19.0, 60027.0], [19.1, 60027.0], [19.2, 60027.0], [19.3, 60027.0], [19.4, 60027.0], [19.5, 60027.0], [19.6, 60027.0], [19.7, 60027.0], [19.8, 60027.0], [19.9, 60027.0], [20.0, 60027.0], [20.1, 60027.0], [20.2, 60027.0], [20.3, 60027.0], [20.4, 60027.0], [20.5, 60027.0], [20.6, 60027.0], [20.7, 60027.0], [20.8, 60027.0], [20.9, 60027.0], [21.0, 60027.0], [21.1, 60027.0], [21.2, 60027.0], [21.3, 60027.0], [21.4, 60027.0], [21.5, 60027.0], [21.6, 60027.0], [21.7, 60027.0], [21.8, 60027.0], [21.9, 60027.0], [22.0, 60027.0], [22.1, 60027.0], [22.2, 60027.0], [22.3, 60027.0], [22.4, 60027.0], [22.5, 60027.0], [22.6, 60027.0], [22.7, 60027.0], [22.8, 60027.0], [22.9, 60027.0], [23.0, 60027.0], [23.1, 60027.0], [23.2, 60027.0], [23.3, 60027.0], [23.4, 60027.0], [23.5, 60027.0], [23.6, 60027.0], [23.7, 60027.0], [23.8, 60027.0], [23.9, 60027.0], [24.0, 60027.0], [24.1, 60027.0], [24.2, 60027.0], [24.3, 60027.0], [24.4, 60027.0], [24.5, 60027.0], [24.6, 60027.0], [24.7, 60027.0], [24.8, 60027.0], [24.9, 60027.0], [25.0, 60027.0], [25.1, 60027.0], [25.2, 60027.0], [25.3, 60027.0], [25.4, 60027.0], [25.5, 60027.0], [25.6, 60027.0], [25.7, 60027.0], [25.8, 60027.0], [25.9, 60027.0], [26.0, 60027.0], [26.1, 60027.0], [26.2, 60027.0], [26.3, 60027.0], [26.4, 60027.0], [26.5, 60027.0], [26.6, 60027.0], [26.7, 60027.0], [26.8, 60027.0], [26.9, 60027.0], [27.0, 60027.0], [27.1, 60027.0], [27.2, 60027.0], [27.3, 60027.0], [27.4, 60027.0], [27.5, 60027.0], [27.6, 60027.0], [27.7, 60027.0], [27.8, 60027.0], [27.9, 60027.0], [28.0, 60027.0], [28.1, 60027.0], [28.2, 60027.0], [28.3, 60027.0], [28.4, 60027.0], [28.5, 60027.0], [28.6, 60027.0], [28.7, 60027.0], [28.8, 60027.0], [28.9, 60027.0], [29.0, 60027.0], [29.1, 60027.0], [29.2, 60027.0], [29.3, 60027.0], [29.4, 60027.0], [29.5, 60027.0], [29.6, 60027.0], [29.7, 60027.0], [29.8, 60027.0], [29.9, 60027.0], [30.0, 60027.0], [30.1, 60027.0], [30.2, 60027.0], [30.3, 60027.0], [30.4, 60027.0], [30.5, 60027.0], [30.6, 60027.0], [30.7, 60027.0], [30.8, 60027.0], [30.9, 60027.0], [31.0, 60027.0], [31.1, 60027.0], [31.2, 60027.0], [31.3, 60027.0], [31.4, 60027.0], [31.5, 60027.0], [31.6, 60027.0], [31.7, 60027.0], [31.8, 60027.0], [31.9, 60028.0], [32.0, 60028.0], [32.1, 60028.0], [32.2, 60028.0], [32.3, 60028.0], [32.4, 60028.0], [32.5, 60028.0], [32.6, 60028.0], [32.7, 60028.0], [32.8, 60028.0], [32.9, 60028.0], [33.0, 60028.0], [33.1, 60028.0], [33.2, 60028.0], [33.3, 60028.0], [33.4, 60028.0], [33.5, 60028.0], [33.6, 60028.0], [33.7, 60028.0], [33.8, 60028.0], [33.9, 60028.0], [34.0, 60028.0], [34.1, 60028.0], [34.2, 60028.0], [34.3, 60028.0], [34.4, 60028.0], [34.5, 60028.0], [34.6, 60028.0], [34.7, 60028.0], [34.8, 60028.0], [34.9, 60028.0], [35.0, 60028.0], [35.1, 60028.0], [35.2, 60028.0], [35.3, 60028.0], [35.4, 60028.0], [35.5, 60028.0], [35.6, 60028.0], [35.7, 60028.0], [35.8, 60028.0], [35.9, 60028.0], [36.0, 60028.0], [36.1, 60028.0], [36.2, 60028.0], [36.3, 60028.0], [36.4, 60028.0], [36.5, 60028.0], [36.6, 60028.0], [36.7, 60028.0], [36.8, 60028.0], [36.9, 60028.0], [37.0, 60028.0], [37.1, 60028.0], [37.2, 60028.0], [37.3, 60028.0], [37.4, 60028.0], [37.5, 60028.0], [37.6, 60028.0], [37.7, 60028.0], [37.8, 60028.0], [37.9, 60028.0], [38.0, 60028.0], [38.1, 60028.0], [38.2, 60028.0], [38.3, 60028.0], [38.4, 60028.0], [38.5, 60028.0], [38.6, 60028.0], [38.7, 60028.0], [38.8, 60028.0], [38.9, 60028.0], [39.0, 60028.0], [39.1, 60028.0], [39.2, 60028.0], [39.3, 60028.0], [39.4, 60028.0], [39.5, 60028.0], [39.6, 60028.0], [39.7, 60028.0], [39.8, 60028.0], [39.9, 60028.0], [40.0, 60028.0], [40.1, 60028.0], [40.2, 60028.0], [40.3, 60028.0], [40.4, 60028.0], [40.5, 60028.0], [40.6, 60028.0], [40.7, 60028.0], [40.8, 60028.0], [40.9, 60028.0], [41.0, 60028.0], [41.1, 60028.0], [41.2, 60028.0], [41.3, 60028.0], [41.4, 60028.0], [41.5, 60028.0], [41.6, 60028.0], [41.7, 60028.0], [41.8, 60028.0], [41.9, 60028.0], [42.0, 60028.0], [42.1, 60028.0], [42.2, 60028.0], [42.3, 60028.0], [42.4, 60028.0], [42.5, 60028.0], [42.6, 60028.0], [42.7, 60028.0], [42.8, 60028.0], [42.9, 60028.0], [43.0, 60028.0], [43.1, 60028.0], [43.2, 60028.0], [43.3, 60028.0], [43.4, 60028.0], [43.5, 60028.0], [43.6, 60028.0], [43.7, 60028.0], [43.8, 60028.0], [43.9, 60028.0], [44.0, 60028.0], [44.1, 60028.0], [44.2, 60028.0], [44.3, 60028.0], [44.4, 60028.0], [44.5, 60028.0], [44.6, 60028.0], [44.7, 60028.0], [44.8, 60028.0], [44.9, 60028.0], [45.0, 60028.0], [45.1, 60028.0], [45.2, 60028.0], [45.3, 60028.0], [45.4, 60028.0], [45.5, 60028.0], [45.6, 60028.0], [45.7, 60028.0], [45.8, 60028.0], [45.9, 60028.0], [46.0, 60028.0], [46.1, 60028.0], [46.2, 60028.0], [46.3, 60028.0], [46.4, 60028.0], [46.5, 60028.0], [46.6, 60028.0], [46.7, 60028.0], [46.8, 60028.0], [46.9, 60028.0], [47.0, 60028.0], [47.1, 60028.0], [47.2, 60028.0], [47.3, 60028.0], [47.4, 60028.0], [47.5, 60028.0], [47.6, 60028.0], [47.7, 60028.0], [47.8, 60028.0], [47.9, 60028.0], [48.0, 60028.0], [48.1, 60028.0], [48.2, 60028.0], [48.3, 60028.0], [48.4, 60028.0], [48.5, 60028.0], [48.6, 60028.0], [48.7, 60028.0], [48.8, 60028.0], [48.9, 60028.0], [49.0, 60028.0], [49.1, 60028.0], [49.2, 60028.0], [49.3, 60028.0], [49.4, 60028.0], [49.5, 60028.0], [49.6, 60028.0], [49.7, 60028.0], [49.8, 60028.0], [49.9, 60028.0], [50.0, 60028.0], [50.1, 60028.0], [50.2, 60028.0], [50.3, 60028.0], [50.4, 60028.0], [50.5, 60028.0], [50.6, 60028.0], [50.7, 60028.0], [50.8, 60028.0], [50.9, 60028.0], [51.0, 60028.0], [51.1, 60028.0], [51.2, 60028.0], [51.3, 60028.0], [51.4, 60028.0], [51.5, 60028.0], [51.6, 60028.0], [51.7, 60028.0], [51.8, 60028.0], [51.9, 60028.0], [52.0, 60028.0], [52.1, 60028.0], [52.2, 60028.0], [52.3, 60028.0], [52.4, 60028.0], [52.5, 60028.0], [52.6, 60028.0], [52.7, 60028.0], [52.8, 60028.0], [52.9, 60028.0], [53.0, 60028.0], [53.1, 60028.0], [53.2, 60028.0], [53.3, 60028.0], [53.4, 60028.0], [53.5, 60028.0], [53.6, 60028.0], [53.7, 60028.0], [53.8, 60028.0], [53.9, 60028.0], [54.0, 60028.0], [54.1, 60028.0], [54.2, 60028.0], [54.3, 60028.0], [54.4, 60028.0], [54.5, 60028.0], [54.6, 60028.0], [54.7, 60028.0], [54.8, 60028.0], [54.9, 60028.0], [55.0, 60028.0], [55.1, 60028.0], [55.2, 60028.0], [55.3, 60028.0], [55.4, 60028.0], [55.5, 60028.0], [55.6, 60028.0], [55.7, 60028.0], [55.8, 60028.0], [55.9, 60028.0], [56.0, 60028.0], [56.1, 60028.0], [56.2, 60028.0], [56.3, 60028.0], [56.4, 60028.0], [56.5, 60028.0], [56.6, 60028.0], [56.7, 60028.0], [56.8, 60028.0], [56.9, 60028.0], [57.0, 60028.0], [57.1, 60028.0], [57.2, 60028.0], [57.3, 60028.0], [57.4, 60028.0], [57.5, 60028.0], [57.6, 60028.0], [57.7, 60028.0], [57.8, 60028.0], [57.9, 60028.0], [58.0, 60028.0], [58.1, 60028.0], [58.2, 60028.0], [58.3, 60028.0], [58.4, 60028.0], [58.5, 60028.0], [58.6, 60028.0], [58.7, 60028.0], [58.8, 60028.0], [58.9, 60028.0], [59.0, 60028.0], [59.1, 60028.0], [59.2, 60028.0], [59.3, 60028.0], [59.4, 60028.0], [59.5, 60028.0], [59.6, 60028.0], [59.7, 60028.0], [59.8, 60028.0], [59.9, 60028.0], [60.0, 60028.0], [60.1, 60028.0], [60.2, 60028.0], [60.3, 60028.0], [60.4, 60028.0], [60.5, 60028.0], [60.6, 60028.0], [60.7, 60028.0], [60.8, 60028.0], [60.9, 60028.0], [61.0, 60028.0], [61.1, 60028.0], [61.2, 60028.0], [61.3, 60028.0], [61.4, 60028.0], [61.5, 60028.0], [61.6, 60028.0], [61.7, 60028.0], [61.8, 60028.0], [61.9, 60028.0], [62.0, 60028.0], [62.1, 60028.0], [62.2, 60028.0], [62.3, 60028.0], [62.4, 60028.0], [62.5, 60028.0], [62.6, 60028.0], [62.7, 60028.0], [62.8, 60028.0], [62.9, 60028.0], [63.0, 60028.0], [63.1, 60028.0], [63.2, 60028.0], [63.3, 60028.0], [63.4, 60028.0], [63.5, 60028.0], [63.6, 60028.0], [63.7, 60028.0], [63.8, 60028.0], [63.9, 60028.0], [64.0, 60028.0], [64.1, 60028.0], [64.2, 60028.0], [64.3, 60028.0], [64.4, 60028.0], [64.5, 60028.0], [64.6, 60028.0], [64.7, 60028.0], [64.8, 60028.0], [64.9, 60028.0], [65.0, 60029.0], [65.1, 60029.0], [65.2, 60029.0], [65.3, 60029.0], [65.4, 60029.0], [65.5, 60029.0], [65.6, 60029.0], [65.7, 60029.0], [65.8, 60029.0], [65.9, 60029.0], [66.0, 60029.0], [66.1, 60029.0], [66.2, 60029.0], [66.3, 60029.0], [66.4, 60029.0], [66.5, 60029.0], [66.6, 60029.0], [66.7, 60029.0], [66.8, 60029.0], [66.9, 60029.0], [67.0, 60029.0], [67.1, 60029.0], [67.2, 60029.0], [67.3, 60029.0], [67.4, 60029.0], [67.5, 60029.0], [67.6, 60029.0], [67.7, 60029.0], [67.8, 60029.0], [67.9, 60029.0], [68.0, 60029.0], [68.1, 60029.0], [68.2, 60029.0], [68.3, 60029.0], [68.4, 60029.0], [68.5, 60029.0], [68.6, 60029.0], [68.7, 60029.0], [68.8, 60029.0], [68.9, 60029.0], [69.0, 60029.0], [69.1, 60029.0], [69.2, 60029.0], [69.3, 60029.0], [69.4, 60029.0], [69.5, 60029.0], [69.6, 60029.0], [69.7, 60029.0], [69.8, 60029.0], [69.9, 60029.0], [70.0, 60029.0], [70.1, 60029.0], [70.2, 60029.0], [70.3, 60029.0], [70.4, 60029.0], [70.5, 60029.0], [70.6, 60029.0], [70.7, 60029.0], [70.8, 60029.0], [70.9, 60029.0], [71.0, 60029.0], [71.1, 60029.0], [71.2, 60029.0], [71.3, 60029.0], [71.4, 60029.0], [71.5, 60029.0], [71.6, 60029.0], [71.7, 60029.0], [71.8, 60029.0], [71.9, 60029.0], [72.0, 60029.0], [72.1, 60029.0], [72.2, 60029.0], [72.3, 60029.0], [72.4, 60029.0], [72.5, 60029.0], [72.6, 60029.0], [72.7, 60029.0], [72.8, 60029.0], [72.9, 60029.0], [73.0, 60029.0], [73.1, 60029.0], [73.2, 60029.0], [73.3, 60029.0], [73.4, 60029.0], [73.5, 60029.0], [73.6, 60029.0], [73.7, 60029.0], [73.8, 60029.0], [73.9, 60029.0], [74.0, 60029.0], [74.1, 60029.0], [74.2, 60029.0], [74.3, 60029.0], [74.4, 60029.0], [74.5, 60029.0], [74.6, 60029.0], [74.7, 60029.0], [74.8, 60029.0], [74.9, 60029.0], [75.0, 60029.0], [75.1, 60029.0], [75.2, 60029.0], [75.3, 60029.0], [75.4, 60029.0], [75.5, 60029.0], [75.6, 60029.0], [75.7, 60029.0], [75.8, 60029.0], [75.9, 60029.0], [76.0, 60029.0], [76.1, 60029.0], [76.2, 60029.0], [76.3, 60029.0], [76.4, 60029.0], [76.5, 60029.0], [76.6, 60029.0], [76.7, 60029.0], [76.8, 60029.0], [76.9, 60029.0], [77.0, 60029.0], [77.1, 60029.0], [77.2, 60029.0], [77.3, 60029.0], [77.4, 60029.0], [77.5, 60029.0], [77.6, 60029.0], [77.7, 60029.0], [77.8, 60029.0], [77.9, 60029.0], [78.0, 60029.0], [78.1, 60029.0], [78.2, 60029.0], [78.3, 60029.0], [78.4, 60029.0], [78.5, 60029.0], [78.6, 60029.0], [78.7, 60029.0], [78.8, 60029.0], [78.9, 60029.0], [79.0, 60029.0], [79.1, 60029.0], [79.2, 60029.0], [79.3, 60029.0], [79.4, 60029.0], [79.5, 60029.0], [79.6, 60029.0], [79.7, 60029.0], [79.8, 60029.0], [79.9, 60029.0], [80.0, 60029.0], [80.1, 60029.0], [80.2, 60029.0], [80.3, 60029.0], [80.4, 60029.0], [80.5, 60029.0], [80.6, 60029.0], [80.7, 60029.0], [80.8, 60029.0], [80.9, 60029.0], [81.0, 60029.0], [81.1, 60029.0], [81.2, 60029.0], [81.3, 60029.0], [81.4, 60029.0], [81.5, 60029.0], [81.6, 60029.0], [81.7, 60029.0], [81.8, 60029.0], [81.9, 60029.0], [82.0, 60029.0], [82.1, 60029.0], [82.2, 60029.0], [82.3, 60030.0], [82.4, 60030.0], [82.5, 60030.0], [82.6, 60030.0], [82.7, 60030.0], [82.8, 60030.0], [82.9, 60030.0], [83.0, 60030.0], [83.1, 60030.0], [83.2, 60030.0], [83.3, 60030.0], [83.4, 60030.0], [83.5, 60030.0], [83.6, 60030.0], [83.7, 60030.0], [83.8, 60030.0], [83.9, 60030.0], [84.0, 60030.0], [84.1, 60030.0], [84.2, 60030.0], [84.3, 60030.0], [84.4, 60030.0], [84.5, 60030.0], [84.6, 60030.0], [84.7, 60030.0], [84.8, 60030.0], [84.9, 60030.0], [85.0, 60030.0], [85.1, 60030.0], [85.2, 60030.0], [85.3, 60030.0], [85.4, 60030.0], [85.5, 60030.0], [85.6, 60030.0], [85.7, 60030.0], [85.8, 60030.0], [85.9, 60030.0], [86.0, 60030.0], [86.1, 60030.0], [86.2, 60030.0], [86.3, 60030.0], [86.4, 60030.0], [86.5, 60030.0], [86.6, 60030.0], [86.7, 60030.0], [86.8, 60030.0], [86.9, 60030.0], [87.0, 60030.0], [87.1, 60030.0], [87.2, 60030.0], [87.3, 60030.0], [87.4, 60030.0], [87.5, 60030.0], [87.6, 60030.0], [87.7, 60030.0], [87.8, 60030.0], [87.9, 60030.0], [88.0, 60030.0], [88.1, 60030.0], [88.2, 60030.0], [88.3, 60030.0], [88.4, 60030.0], [88.5, 60030.0], [88.6, 60030.0], [88.7, 60030.0], [88.8, 60030.0], [88.9, 60030.0], [89.0, 60030.0], [89.1, 60031.0], [89.2, 60031.0], [89.3, 60031.0], [89.4, 60031.0], [89.5, 60031.0], [89.6, 60031.0], [89.7, 60031.0], [89.8, 60031.0], [89.9, 60031.0], [90.0, 60031.0], [90.1, 60031.0], [90.2, 60031.0], [90.3, 60031.0], [90.4, 60031.0], [90.5, 60031.0], [90.6, 60031.0], [90.7, 60031.0], [90.8, 60031.0], [90.9, 60031.0], [91.0, 60031.0], [91.1, 60031.0], [91.2, 60031.0], [91.3, 60031.0], [91.4, 60031.0], [91.5, 60031.0], [91.6, 60031.0], [91.7, 60031.0], [91.8, 60031.0], [91.9, 60031.0], [92.0, 60031.0], [92.1, 60031.0], [92.2, 60031.0], [92.3, 60031.0], [92.4, 60031.0], [92.5, 60031.0], [92.6, 60031.0], [92.7, 60031.0], [92.8, 60031.0], [92.9, 60031.0], [93.0, 60031.0], [93.1, 60031.0], [93.2, 60031.0], [93.3, 60031.0], [93.4, 60031.0], [93.5, 60031.0], [93.6, 60031.0], [93.7, 60032.0], [93.8, 60032.0], [93.9, 60032.0], [94.0, 60032.0], [94.1, 60032.0], [94.2, 60032.0], [94.3, 60032.0], [94.4, 60032.0], [94.5, 60032.0], [94.6, 60033.0], [94.7, 60033.0], [94.8, 60033.0], [94.9, 60033.0], [95.0, 60033.0], [95.1, 60033.0], [95.2, 60033.0], [95.3, 60033.0], [95.4, 60033.0], [95.5, 60034.0], [95.6, 60034.0], [95.7, 60034.0], [95.8, 60034.0], [95.9, 60034.0], [96.0, 60036.0], [96.1, 60036.0], [96.2, 60036.0], [96.3, 60036.0], [96.4, 60036.0], [96.5, 60036.0], [96.6, 60036.0], [96.7, 60036.0], [96.8, 60036.0], [96.9, 60036.0], [97.0, 60036.0], [97.1, 60036.0], [97.2, 60036.0], [97.3, 60041.0], [97.4, 60041.0], [97.5, 60041.0], [97.6, 60041.0], [97.7, 60041.0], [97.8, 60041.0], [97.9, 60041.0], [98.0, 60041.0], [98.1, 60041.0], [98.2, 60041.0], [98.3, 60041.0], [98.4, 60041.0], [98.5, 60041.0], [98.6, 60041.0], [98.7, 60046.0], [98.8, 60046.0], [98.9, 60046.0], [99.0, 60046.0], [99.1, 60046.0], [99.2, 60046.0], [99.3, 60046.0], [99.4, 60046.0], [99.5, 60046.0], [99.6, 60051.0], [99.7, 60051.0], [99.8, 60051.0], [99.9, 60051.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 12640.0, "series": [{"data": [[0.0, 10418.0], [2100.0, 26.0], [2500.0, 1.0], [3000.0, 558.0], [3100.0, 174.0], [200.0, 695.0], [3200.0, 1.0], [3500.0, 1.0], [15000.0, 110.0], [15100.0, 66.0], [1000.0, 491.0], [1100.0, 149.0], [1200.0, 12.0], [300.0, 656.0], [1300.0, 43.0], [1400.0, 12.0], [1500.0, 1.0], [100.0, 12640.0], [400.0, 247.0], [7000.0, 1.0], [2000.0, 3.0], [500.0, 95.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[12800.0, 20.0], [13000.0, 20.0], [12900.0, 23.0], [13300.0, 14.0], [13100.0, 18.0], [13200.0, 27.0], [13600.0, 16.0], [13700.0, 17.0], [13400.0, 39.0], [13500.0, 6.0], [13800.0, 20.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[60000.0, 220.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2089.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 14158.0, "series": [{"data": [[0.0, 10593.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 14158.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 2089.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 110.56363636363639, "minX": 1.61757738E12, "maxY": 210.98895610579524, "series": [{"data": [[1.61757738E12, 118.44545454545465]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61757744E12, 150.87721602101126], [1.61757738E12, 210.98895610579524]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.61757744E12, 110.56363636363639]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757744E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 60041.0, "series": [{"data": [[2.0, 28.588235294117645], [3.0, 27.681818181818183], [4.0, 28.0], [5.0, 1594.1041666666656], [231.0, 1035.3333333333333], [230.0, 29.0], [229.0, 27.5], [228.0, 28.833333333333336], [227.0, 28.666666666666668], [226.0, 28.5], [239.0, 27.775000000000002], [238.0, 28.249999999999996], [237.0, 28.0], [236.0, 27.92857142857143], [235.0, 28.0], [234.0, 27.333333333333332], [233.0, 1838.8], [232.0, 3041.0], [247.0, 27.0], [246.0, 28.0], [245.0, 28.0], [244.0, 28.0], [243.0, 27.875], [242.0, 28.0], [241.0, 27.8], [240.0, 28.5], [255.0, 28.15384615384615], [254.0, 28.0], [253.0, 27.4], [252.0, 27.714285714285715], [251.0, 28.714285714285715], [250.0, 27.0], [249.0, 28.5], [248.0, 27.0], [270.0, 34.07692307692308], [271.0, 35.18181818181818], [269.0, 31.0], [268.0, 33.68], [267.0, 32.333333333333336], [266.0, 30.0], [265.0, 33.0], [264.0, 32.15], [263.0, 30.0], [257.0, 28.615384615384613], [256.0, 28.875], [259.0, 28.0], [258.0, 29.84], [262.0, 30.5], [261.0, 31.076923076923077], [260.0, 29.75675675675675], [285.0, 48.333333333333336], [287.0, 49.4], [284.0, 49.30769230769231], [275.0, 47.68749999999999], [274.0, 42.44680851063831], [273.0, 38.0], [272.0, 36.0], [283.0, 48.333333333333336], [282.0, 47.76470588235294], [281.0, 53.0], [280.0, 56.0], [279.0, 52.25], [278.0, 49.666666666666664], [277.0, 50.5], [276.0, 52.0], [302.0, 66.96969696969695], [303.0, 67.5], [301.0, 58.714285714285715], [300.0, 58.26315789473685], [299.0, 55.699999999999996], [298.0, 51.64285714285714], [297.0, 51.89655172413793], [296.0, 54.111111111111114], [295.0, 51.666666666666664], [289.0, 48.42857142857143], [288.0, 48.4090909090909], [291.0, 48.0], [290.0, 48.0], [294.0, 50.77272727272727], [293.0, 51.875], [292.0, 49.33333333333333], [318.0, 70.3], [319.0, 67.0], [317.0, 68.63333333333333], [316.0, 71.77777777777777], [314.0, 69.34782608695652], [313.0, 66.0], [312.0, 69.74999999999999], [311.0, 70.1304347826087], [305.0, 75.375], [304.0, 71.94999999999999], [307.0, 72.58333333333333], [306.0, 77.6], [310.0, 72.40350877192982], [309.0, 71.0909090909091], [308.0, 70.71428571428571], [334.0, 83.2153846153846], [335.0, 88.54545454545456], [333.0, 1893.770186335403], [332.0, 3068.6666666666665], [331.0, 412.84313725490205], [330.0, 60.0], [329.0, 66.66666666666666], [328.0, 72.0], [327.0, 75.08333333333334], [321.0, 73.42857142857143], [320.0, 72.8], [323.0, 72.22222222222223], [322.0, 71.39999999999999], [326.0, 71.62962962962963], [325.0, 72.3], [324.0, 72.55555555555556], [350.0, 400.75000000000006], [351.0, 80.8], [349.0, 94.0], [348.0, 122.05714285714286], [347.0, 80.28571428571429], [346.0, 81.8421052631579], [345.0, 615.0000000000001], [344.0, 144.30952380952382], [343.0, 100.0], [337.0, 96.0], [336.0, 93.55], [339.0, 95.5], [338.0, 92.30769230769232], [342.0, 102.60714285714286], [341.0, 101.0], [340.0, 101.77215189873415], [366.0, 644.1666666666661], [367.0, 2265.6], [365.0, 214.9358974358975], [364.0, 414.7142857142857], [363.0, 414.651376146789], [362.0, 229.62820512820514], [361.0, 91.12499999999999], [360.0, 86.56666666666666], [359.0, 87.04], [353.0, 89.55319148936171], [352.0, 113.57142857142857], [355.0, 84.33333333333333], [354.0, 91.34343434343434], [358.0, 99.94117647058823], [357.0, 90.08333333333333], [356.0, 85.86666666666669], [382.0, 650.653153153153], [383.0, 125.78378378378372], [381.0, 96.5083333333333], [380.0, 109.82608695652176], [379.0, 109.02247191011239], [378.0, 108.64856230031947], [377.0, 106.2439024390244], [376.0, 107.5], [375.0, 108.09999999999997], [369.0, 48.6], [368.0, 1984.1428571428569], [371.0, 1096.652777777778], [370.0, 1304.6181818181815], [374.0, 109.0125], [373.0, 116.05851063829793], [372.0, 123.91764705882355], [398.0, 28.0], [399.0, 28.5], [397.0, 28.0], [396.0, 27.5], [395.0, 27.5], [394.0, 27.333333333333332], [393.0, 27.5], [392.0, 27.0], [391.0, 570.5259634226013], [385.0, 27.666666666666668], [384.0, 724.9487179487171], [387.0, 27.772727272727277], [386.0, 27.833333333333332], [390.0, 27.865853658536587], [389.0, 27.874999999999996], [388.0, 27.73913043478261], [414.0, 28.04081632653061], [415.0, 27.666666666666668], [413.0, 27.736842105263158], [412.0, 27.75], [411.0, 27.82608695652174], [410.0, 28.115384615384617], [409.0, 29.0], [408.0, 27.4], [407.0, 27.785714285714285], [401.0, 27.583333333333332], [400.0, 28.22222222222222], [403.0, 29.0], [402.0, 27.848484848484848], [406.0, 28.666666666666668], [405.0, 32.0], [404.0, 28.133333333333333], [430.0, 31.325581395348824], [431.0, 1544.9], [429.0, 29.20000000000001], [428.0, 28.809523809523814], [427.0, 29.03030303030304], [426.0, 28.0], [425.0, 28.636363636363633], [424.0, 29.375], [423.0, 28.0], [417.0, 28.142857142857142], [416.0, 28.0], [419.0, 27.785714285714292], [418.0, 28.157894736842103], [422.0, 27.75862068965517], [421.0, 28.11111111111111], [420.0, 28.083333333333332], [440.0, 203.8017060060756], [439.0, 34.69736842105263], [438.0, 33.853658536585364], [437.0, 33.77020202020204], [436.0, 31.272727272727273], [435.0, 30.36363636363637], [434.0, 2217.325], [432.0, 1461.052631578947], [460.0, 28.666666666666668], [451.0, 40.16666666666667], [453.0, 29.5], [455.0, 29.5], [456.0, 29.0], [457.0, 28.142857142857146], [458.0, 28.0], [459.0, 27.0], [461.0, 29.0], [462.0, 28.75], [463.0, 29.0], [465.0, 30.0], [464.0, 29.25], [466.0, 28.333333333333332], [467.0, 28.666666666666668], [468.0, 29.4], [469.0, 30.4], [470.0, 54.875], [471.0, 30.0], [472.0, 31.0], [479.0, 43.333333333333336], [476.0, 34.5], [477.0, 39.0], [473.0, 79.55555555555556], [475.0, 34.42857142857143], [481.0, 56.375], [480.0, 48.333333333333336], [482.0, 42.5], [483.0, 40.0], [484.0, 43.142857142857146], [485.0, 43.166666666666664], [486.0, 40.57142857142858], [487.0, 35.833333333333336], [488.0, 34.714285714285715], [494.0, 35.42857142857143], [495.0, 38.8], [492.0, 34.0], [493.0, 35.333333333333336], [489.0, 36.75], [490.0, 35.875], [491.0, 33.5], [498.0, 48.25], [497.0, 43.5], [499.0, 47.0], [508.0, 56.0], [509.0, 56.5], [510.0, 53.18181818181818], [511.0, 50.5], [500.0, 51.6], [501.0, 52.45454545454546], [502.0, 51.888888888888886], [503.0, 50.25], [504.0, 53.142857142857146], [505.0, 57.0], [506.0, 60.0], [507.0, 60.42857142857143], [518.0, 58.875], [513.0, 55.83333333333333], [512.0, 54.4], [526.0, 68.0], [527.0, 70.33333333333333], [524.0, 64.0], [525.0, 66.33333333333334], [522.0, 59.666666666666664], [523.0, 61.666666666666664], [514.0, 55.6], [515.0, 57.666666666666664], [517.0, 62.42857142857142], [519.0, 59.125], [537.0, 73.66666666666667], [539.0, 81.25], [540.0, 97.75], [541.0, 86.5], [542.0, 91.16666666666667], [543.0, 83.25], [528.0, 72.58333333333334], [529.0, 71.0], [530.0, 71.0], [531.0, 69.25], [532.0, 71.57142857142857], [533.0, 67.33333333333333], [534.0, 67.0], [535.0, 69.0], [520.0, 58.166666666666664], [521.0, 58.333333333333336], [547.0, 76.0], [544.0, 79.6], [558.0, 79.8], [559.0, 83.0], [556.0, 88.8], [557.0, 82.875], [554.0, 97.6], [555.0, 97.5], [545.0, 79.55555555555556], [546.0, 75.00000000000001], [548.0, 82.66666666666667], [549.0, 84.66666666666667], [550.0, 87.75], [551.0, 91.25], [560.0, 83.16666666666666], [574.0, 86.85714285714286], [575.0, 87.28571428571428], [572.0, 84.14285714285714], [573.0, 86.57142857142858], [570.0, 86.16666666666666], [571.0, 84.8], [568.0, 86.375], [569.0, 86.0], [561.0, 85.33333333333333], [562.0, 86.77777777777777], [563.0, 86.0], [564.0, 90.66666666666666], [565.0, 90.37500000000001], [566.0, 88.0], [567.0, 87.28571428571429], [552.0, 95.2], [553.0, 97.75], [579.0, 86.5], [576.0, 89.84615384615384], [590.0, 94.22222222222223], [591.0, 95.0], [588.0, 95.0], [589.0, 95.0], [586.0, 95.42857142857143], [587.0, 93.3], [577.0, 85.42857142857143], [578.0, 86.3], [580.0, 87.58333333333333], [581.0, 87.28571428571428], [582.0, 87.83333333333333], [583.0, 87.0], [592.0, 93.18181818181817], [606.0, 97.42857142857143], [607.0, 104.0], [604.0, 100.89999999999999], [605.0, 99.0], [602.0, 100.0], [603.0, 101.66666666666667], [600.0, 97.93333333333332], [601.0, 97.33333333333333], [593.0, 94.0], [594.0, 94.93333333333335], [595.0, 95.0], [596.0, 97.5], [597.0, 98.16666666666666], [598.0, 99.28571428571429], [599.0, 100.10000000000001], [584.0, 92.5], [585.0, 92.6], [610.0, 104.71428571428571], [609.0, 109.875], [622.0, 120.71428571428572], [623.0, 119.0], [620.0, 120.6], [621.0, 119.83333333333333], [611.0, 107.2], [612.0, 137.0], [613.0, 113.85714285714285], [614.0, 119.33333333333333], [615.0, 120.4], [624.0, 120.66666666666667], [639.0, 115.7272727272727], [637.0, 134.375], [638.0, 124.4], [635.0, 175.66666666666666], [634.0, 133.5], [633.0, 134.4], [636.0, 144.08333333333337], [625.0, 119.33333333333333], [627.0, 137.0], [631.0, 138.0], [616.0, 130.5], [617.0, 122.80000000000001], [618.0, 118.26315789473684], [619.0, 122.0], [641.0, 115.52941176470588], [640.0, 113.92307692307693], [655.0, 134.5], [654.0, 144.0909090909091], [652.0, 137.0], [653.0, 137.5], [650.0, 131.88888888888889], [651.0, 133.5], [642.0, 115.0], [643.0, 112.5], [644.0, 115.8], [645.0, 120.16666666666667], [647.0, 127.33333333333333], [646.0, 139.37096774193546], [656.0, 135.66666666666666], [657.0, 119.5], [658.0, 117.0], [660.0, 186.35329143235174], [648.0, 127.77777777777777], [649.0, 129.33333333333334], [1.0, 32.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[438.0975378787918, 322.26511363636354]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[462.0, 13407.0], [461.0, 13281.0], [460.0, 13162.5], [459.0, 13233.0], [477.0, 13389.0], [476.0, 13024.0], [473.0, 12994.0], [468.0, 12902.0], [465.0, 13024.0], [494.0, 13249.666666666666], [495.0, 13302.5], [493.0, 13176.0], [491.0, 13840.0], [490.0, 12820.0], [489.0, 13071.0], [487.0, 12971.5], [485.0, 13429.0], [483.0, 13257.0], [482.0, 13322.0], [481.0, 13535.0], [480.0, 12925.0], [510.0, 13228.5], [511.0, 13210.0], [509.0, 13874.0], [499.0, 13311.666666666666], [497.0, 13395.75], [496.0, 13415.0], [506.0, 13205.0], [505.0, 13256.0], [504.0, 13226.666666666666], [502.0, 13854.0], [501.0, 13174.0], [500.0, 13299.5], [537.0, 12834.0], [541.0, 13085.5], [543.0, 13480.0], [540.0, 13882.0], [539.0, 13706.0], [538.0, 13235.0], [527.0, 13617.0], [512.0, 13418.6], [515.0, 13155.5], [514.0, 12884.0], [517.0, 13597.75], [516.0, 13688.0], [519.0, 13180.666666666666], [518.0, 13348.0], [526.0, 13514.0], [523.0, 13477.0], [522.0, 13452.0], [521.0, 13293.5], [520.0, 12993.0], [535.0, 13200.4], [534.0, 13440.333333333334], [530.0, 13543.0], [529.0, 13312.5], [561.0, 13105.0], [575.0, 13417.0], [570.0, 13341.5], [568.0, 13156.666666666666], [551.0, 13389.0], [550.0, 13643.666666666666], [547.0, 13233.0], [546.0, 13015.0], [567.0, 13474.0], [564.0, 13662.5], [562.0, 13856.0], [560.0, 13353.0], [557.0, 13334.8], [552.0, 13154.333333333334], [596.0, 13250.0], [607.0, 13471.0], [601.0, 13425.5], [600.0, 13349.0], [583.0, 13371.5], [582.0, 13487.75], [580.0, 13290.0], [578.0, 13441.0], [576.0, 13112.0], [591.0, 12818.0], [590.0, 13883.0], [589.0, 12888.0], [585.0, 13804.0], [584.0, 13579.75], [599.0, 12939.0], [598.0, 13785.0], [597.0, 13472.0], [594.0, 13748.666666666666], [592.0, 13344.0], [636.0, 12984.5], [638.0, 13617.666666666666], [635.0, 13811.5], [634.0, 13028.0], [633.0, 12985.333333333334], [615.0, 13422.25], [614.0, 13456.5], [612.0, 13742.0], [611.0, 13441.5], [609.0, 12886.0], [608.0, 13289.0], [628.0, 13494.0], [626.0, 13142.666666666666], [625.0, 13435.0], [624.0, 13601.0], [623.0, 13500.0], [622.0, 13249.0], [621.0, 12907.0], [616.0, 13144.0], [660.0, 12976.5], [659.0, 13273.333333333334], [657.0, 13497.0], [646.0, 13059.0], [644.0, 12850.0], [642.0, 13325.0], [641.0, 13520.5], [640.0, 13384.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[558.4136363636366, 13328.013636363628]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[9.0, 60038.5], [11.0, 60038.5], [12.0, 60027.0], [13.0, 60030.0], [14.0, 60028.0], [15.0, 60028.0], [16.0, 60029.0], [17.0, 60027.0], [18.0, 60029.0], [19.0, 60026.0], [20.0, 60028.0], [21.0, 60026.0], [22.0, 60026.0], [23.0, 60028.0], [24.0, 60028.0], [25.0, 60030.0], [26.0, 60028.0], [27.0, 60026.0], [28.0, 60027.0], [29.0, 60028.0], [30.0, 60031.0], [31.0, 60029.0], [33.0, 60029.0], [32.0, 60029.0], [35.0, 60029.0], [34.0, 60027.0], [37.0, 60028.0], [36.0, 60029.0], [39.0, 60027.0], [38.0, 60027.0], [41.0, 60027.0], [40.0, 60028.0], [43.0, 60026.0], [42.0, 60030.0], [45.0, 60029.0], [44.0, 60027.0], [47.0, 60030.0], [46.0, 60028.0], [49.0, 60028.0], [48.0, 60027.0], [51.0, 60029.0], [50.0, 60028.0], [53.0, 60028.0], [52.0, 60028.0], [54.0, 60032.0], [57.0, 60028.0], [56.0, 60031.0], [59.0, 60028.0], [58.0, 60030.0], [61.0, 60029.0], [60.0, 60031.0], [63.0, 60026.0], [62.0, 60028.0], [67.0, 60028.0], [66.0, 60029.0], [65.0, 60028.0], [64.0, 60028.0], [71.0, 60028.0], [70.0, 60030.5], [68.0, 60028.0], [75.0, 60028.0], [74.0, 60029.0], [73.0, 60028.0], [72.0, 60027.0], [79.0, 60027.0], [78.0, 60027.0], [77.0, 60029.0], [76.0, 60027.0], [83.0, 60031.0], [82.0, 60027.0], [81.0, 60030.0], [80.0, 60027.0], [87.0, 60027.0], [86.0, 60029.0], [85.0, 60028.0], [84.0, 60028.0], [91.0, 60027.0], [90.0, 60028.0], [89.0, 60028.5], [95.0, 60026.0], [94.0, 60029.0], [93.0, 60027.0], [92.0, 60029.0], [99.0, 60029.0], [98.0, 60027.0], [97.0, 60027.0], [96.0, 60028.0], [103.0, 60029.0], [102.0, 60031.0], [101.0, 60029.0], [100.0, 60029.0], [107.0, 60028.0], [106.0, 60028.0], [105.0, 60029.0], [104.0, 60027.0], [111.0, 60030.0], [110.0, 60030.0], [109.0, 60028.0], [108.0, 60028.0], [115.0, 60029.0], [114.0, 60027.0], [113.0, 60034.0], [112.0, 60028.0], [119.0, 60027.0], [118.0, 60027.0], [117.0, 60027.0], [116.0, 60031.0], [123.0, 60027.0], [122.0, 60027.0], [121.0, 60027.0], [120.0, 60028.0], [127.0, 60029.0], [126.0, 60029.0], [125.0, 60030.0], [124.0, 60027.0], [135.0, 60027.0], [134.0, 60027.0], [133.0, 60028.0], [132.0, 60029.0], [131.0, 60030.0], [130.0, 60028.0], [129.0, 60029.0], [128.0, 60027.0], [143.0, 60026.0], [142.0, 60028.0], [141.0, 60028.0], [140.0, 60031.0], [139.0, 60027.0], [138.0, 60028.0], [137.0, 60027.0], [136.0, 60028.0], [151.0, 60026.0], [150.0, 60027.0], [149.0, 60028.0], [148.0, 60028.0], [147.0, 60028.0], [146.0, 60028.0], [145.0, 60028.0], [144.0, 60028.0], [159.0, 60028.0], [158.0, 60027.0], [157.0, 60032.0], [156.0, 60028.0], [155.0, 60027.0], [154.0, 60027.0], [153.0, 60027.0], [152.0, 60030.0], [167.0, 60027.0], [166.0, 60028.0], [165.0, 60027.0], [164.0, 60028.0], [163.0, 60028.0], [162.0, 60029.0], [161.0, 60027.0], [160.0, 60029.0], [175.0, 60026.0], [174.0, 60027.0], [173.0, 60028.0], [172.0, 60028.0], [171.0, 60027.0], [170.0, 60028.0], [169.0, 60030.0], [168.0, 60027.0], [183.0, 60027.0], [182.0, 60028.0], [181.0, 60027.0], [180.0, 60027.0], [179.0, 60031.0], [178.0, 60030.0], [177.0, 60027.0], [176.0, 60029.0], [191.0, 60027.0], [190.0, 60028.0], [189.0, 60027.0], [188.0, 60028.0], [187.0, 60030.0], [186.0, 60027.0], [185.0, 60029.0], [184.0, 60028.0], [199.0, 60029.0], [198.0, 60028.0], [197.0, 60029.0], [196.0, 60027.0], [195.0, 60027.0], [194.0, 60027.0], [193.0, 60028.0], [192.0, 60029.0], [207.0, 60029.0], [206.0, 60027.0], [205.0, 60028.0], [204.0, 60028.0], [203.0, 60028.0], [202.0, 60028.0], [201.0, 60029.0], [200.0, 60028.0], [215.0, 60027.0], [214.0, 60027.0], [213.0, 60029.0], [212.0, 60027.0], [211.0, 60029.0], [210.0, 60028.0], [209.0, 60028.0], [208.0, 60028.0], [223.0, 60041.0], [220.0, 60028.0], [219.0, 60028.0], [218.0, 60031.0], [217.0, 60028.0], [216.0, 60028.0], [225.0, 60040.5]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[115.56363636363642, 60028.74090909092]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 660.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61757738E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757744E12, 0.0], [1.61757738E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61757744E12, 0.0], [1.61757738E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757744E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 182.33617051209876, "minX": 1.61757738E12, "maxY": 60028.74090909092, "series": [{"data": [[1.61757744E12, 485.5308601444518], [1.61757738E12, 182.33617051209876]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757738E12, 13328.013636363628]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757744E12, 60028.74090909092]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757744E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757738E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757744E12, 0.0], [1.61757738E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757738E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757744E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757744E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757738E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757744E12, 0.0], [1.61757738E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757738E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757744E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757744E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61757738E12, "maxY": 60051.0, "series": [{"data": [[1.61757744E12, 60051.0], [1.61757738E12, 13894.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61757744E12, 402.5], [1.61757738E12, 328.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61757744E12, 60028.0], [1.61757738E12, 13172.669999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61757744E12, 3064.0], [1.61757738E12, 1078.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61757744E12, 26.0], [1.61757738E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61757744E12, 115.0], [1.61757738E12, 108.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757744E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 4.0, "maxY": 60028.0, "series": [{"data": [[519.0, 29.0], [35.0, 114.0], [618.0, 71.0], [648.0, 129.5], [681.0, 145.0], [707.0, 33.0], [733.0, 94.0], [736.0, 119.0], [787.0, 106.0], [794.0, 107.0], [791.0, 119.0], [858.0, 46.0], [912.0, 49.0], [933.0, 36.0], [982.0, 35.0], [1056.0, 148.0], [66.0, 210.0], [4.0, 29.5], [68.0, 3040.5], [1182.0, 196.0], [1204.0, 116.0], [1279.0, 111.0], [1276.0, 142.0], [1229.0, 122.0], [1317.0, 57.0], [5.0, 29.0], [87.0, 28.0], [1421.0, 116.0], [1435.0, 117.0], [1415.0, 110.0], [1489.0, 147.0], [98.0, 60028.0], [101.0, 15069.0], [122.0, 60028.0], [132.0, 28.0], [167.0, 119.0], [232.0, 122.0], [279.0, 28.0], [415.0, 51.0], [27.0, 29.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1489.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 4.9E-324, "series": [{"data": [[519.0, 0.0], [35.0, 0.0], [618.0, 0.0], [648.0, 0.0], [681.0, 0.0], [707.0, 0.0], [733.0, 0.0], [736.0, 0.0], [787.0, 0.0], [794.0, 0.0], [791.0, 0.0], [858.0, 0.0], [912.0, 0.0], [933.0, 0.0], [982.0, 0.0], [1056.0, 0.0], [66.0, 0.0], [4.0, 0.0], [68.0, 0.0], [1182.0, 0.0], [1204.0, 0.0], [1279.0, 0.0], [1276.0, 0.0], [1229.0, 0.0], [1317.0, 0.0], [5.0, 0.0], [87.0, 0.0], [1421.0, 0.0], [1435.0, 0.0], [1415.0, 0.0], [1489.0, 0.0], [98.0, 0.0], [101.0, 0.0], [122.0, 0.0], [132.0, 0.0], [167.0, 0.0], [232.0, 0.0], [279.0, 0.0], [415.0, 0.0], [27.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1489.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 200.21666666666667, "minX": 1.61757738E12, "maxY": 247.11666666666667, "series": [{"data": [[1.61757744E12, 200.21666666666667], [1.61757738E12, 247.11666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757744E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 206.73333333333332, "minX": 1.61757738E12, "maxY": 240.6, "series": [{"data": [[1.61757744E12, 206.73333333333332], [1.61757738E12, 240.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757744E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.6666666666666665, "minX": 1.61757738E12, "maxY": 236.93333333333334, "series": [{"data": [[1.61757744E12, 3.6666666666666665]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.61757738E12, 3.6666666666666665]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61757744E12, 203.06666666666666], [1.61757738E12, 236.93333333333334]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757744E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 206.73333333333332, "minX": 1.61757738E12, "maxY": 240.6, "series": [{"data": [[1.61757744E12, 206.73333333333332], [1.61757738E12, 240.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757744E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

