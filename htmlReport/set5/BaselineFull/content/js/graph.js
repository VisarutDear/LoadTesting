/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 60091.0, "series": [{"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 28.0], [1.1, 28.0], [1.2, 28.0], [1.3, 28.0], [1.4, 28.0], [1.5, 28.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 29.0], [2.6, 29.0], [2.7, 29.0], [2.8, 29.0], [2.9, 29.0], [3.0, 29.0], [3.1, 29.0], [3.2, 29.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 30.0], [3.8, 30.0], [3.9, 30.0], [4.0, 30.0], [4.1, 30.0], [4.2, 30.0], [4.3, 31.0], [4.4, 31.0], [4.5, 31.0], [4.6, 31.0], [4.7, 31.0], [4.8, 31.0], [4.9, 32.0], [5.0, 32.0], [5.1, 32.0], [5.2, 32.0], [5.3, 32.0], [5.4, 33.0], [5.5, 33.0], [5.6, 33.0], [5.7, 33.0], [5.8, 34.0], [5.9, 34.0], [6.0, 34.0], [6.1, 34.0], [6.2, 35.0], [6.3, 35.0], [6.4, 36.0], [6.5, 36.0], [6.6, 36.0], [6.7, 37.0], [6.8, 37.0], [6.9, 38.0], [7.0, 38.0], [7.1, 39.0], [7.2, 39.0], [7.3, 40.0], [7.4, 41.0], [7.5, 41.0], [7.6, 42.0], [7.7, 42.0], [7.8, 43.0], [7.9, 43.0], [8.0, 44.0], [8.1, 44.0], [8.2, 45.0], [8.3, 45.0], [8.4, 46.0], [8.5, 46.0], [8.6, 46.0], [8.7, 47.0], [8.8, 47.0], [8.9, 48.0], [9.0, 48.0], [9.1, 48.0], [9.2, 49.0], [9.3, 49.0], [9.4, 49.0], [9.5, 50.0], [9.6, 50.0], [9.7, 51.0], [9.8, 51.0], [9.9, 52.0], [10.0, 53.0], [10.1, 53.0], [10.2, 53.0], [10.3, 54.0], [10.4, 54.0], [10.5, 55.0], [10.6, 55.0], [10.7, 56.0], [10.8, 56.0], [10.9, 56.0], [11.0, 57.0], [11.1, 57.0], [11.2, 58.0], [11.3, 58.0], [11.4, 58.0], [11.5, 59.0], [11.6, 59.0], [11.7, 59.0], [11.8, 59.0], [11.9, 60.0], [12.0, 60.0], [12.1, 60.0], [12.2, 60.0], [12.3, 61.0], [12.4, 61.0], [12.5, 61.0], [12.6, 62.0], [12.7, 62.0], [12.8, 62.0], [12.9, 62.0], [13.0, 63.0], [13.1, 63.0], [13.2, 63.0], [13.3, 64.0], [13.4, 64.0], [13.5, 65.0], [13.6, 65.0], [13.7, 66.0], [13.8, 66.0], [13.9, 66.0], [14.0, 66.0], [14.1, 67.0], [14.2, 67.0], [14.3, 67.0], [14.4, 67.0], [14.5, 68.0], [14.6, 68.0], [14.7, 68.0], [14.8, 69.0], [14.9, 69.0], [15.0, 69.0], [15.1, 69.0], [15.2, 70.0], [15.3, 70.0], [15.4, 70.0], [15.5, 70.0], [15.6, 71.0], [15.7, 71.0], [15.8, 71.0], [15.9, 71.0], [16.0, 71.0], [16.1, 71.0], [16.2, 72.0], [16.3, 72.0], [16.4, 72.0], [16.5, 72.0], [16.6, 72.0], [16.7, 72.0], [16.8, 72.0], [16.9, 73.0], [17.0, 73.0], [17.1, 73.0], [17.2, 73.0], [17.3, 74.0], [17.4, 74.0], [17.5, 74.0], [17.6, 74.0], [17.7, 75.0], [17.8, 75.0], [17.9, 75.0], [18.0, 75.0], [18.1, 75.0], [18.2, 76.0], [18.3, 76.0], [18.4, 76.0], [18.5, 76.0], [18.6, 76.0], [18.7, 76.0], [18.8, 77.0], [18.9, 77.0], [19.0, 77.0], [19.1, 77.0], [19.2, 77.0], [19.3, 78.0], [19.4, 78.0], [19.5, 78.0], [19.6, 78.0], [19.7, 78.0], [19.8, 78.0], [19.9, 78.0], [20.0, 79.0], [20.1, 79.0], [20.2, 79.0], [20.3, 79.0], [20.4, 79.0], [20.5, 79.0], [20.6, 79.0], [20.7, 79.0], [20.8, 79.0], [20.9, 79.0], [21.0, 79.0], [21.1, 80.0], [21.2, 80.0], [21.3, 80.0], [21.4, 80.0], [21.5, 80.0], [21.6, 80.0], [21.7, 80.0], [21.8, 80.0], [21.9, 80.0], [22.0, 80.0], [22.1, 80.0], [22.2, 80.0], [22.3, 81.0], [22.4, 81.0], [22.5, 81.0], [22.6, 81.0], [22.7, 81.0], [22.8, 81.0], [22.9, 81.0], [23.0, 81.0], [23.1, 81.0], [23.2, 81.0], [23.3, 81.0], [23.4, 82.0], [23.5, 82.0], [23.6, 82.0], [23.7, 82.0], [23.8, 82.0], [23.9, 82.0], [24.0, 82.0], [24.1, 82.0], [24.2, 82.0], [24.3, 82.0], [24.4, 82.0], [24.5, 82.0], [24.6, 83.0], [24.7, 83.0], [24.8, 83.0], [24.9, 83.0], [25.0, 83.0], [25.1, 83.0], [25.2, 83.0], [25.3, 83.0], [25.4, 83.0], [25.5, 84.0], [25.6, 84.0], [25.7, 84.0], [25.8, 84.0], [25.9, 84.0], [26.0, 84.0], [26.1, 84.0], [26.2, 84.0], [26.3, 85.0], [26.4, 85.0], [26.5, 85.0], [26.6, 85.0], [26.7, 85.0], [26.8, 85.0], [26.9, 85.0], [27.0, 85.0], [27.1, 86.0], [27.2, 86.0], [27.3, 86.0], [27.4, 86.0], [27.5, 86.0], [27.6, 86.0], [27.7, 87.0], [27.8, 87.0], [27.9, 87.0], [28.0, 87.0], [28.1, 87.0], [28.2, 87.0], [28.3, 88.0], [28.4, 88.0], [28.5, 88.0], [28.6, 88.0], [28.7, 88.0], [28.8, 88.0], [28.9, 88.0], [29.0, 89.0], [29.1, 89.0], [29.2, 89.0], [29.3, 89.0], [29.4, 89.0], [29.5, 90.0], [29.6, 90.0], [29.7, 90.0], [29.8, 90.0], [29.9, 90.0], [30.0, 91.0], [30.1, 91.0], [30.2, 91.0], [30.3, 91.0], [30.4, 91.0], [30.5, 92.0], [30.6, 92.0], [30.7, 92.0], [30.8, 92.0], [30.9, 93.0], [31.0, 93.0], [31.1, 93.0], [31.2, 93.0], [31.3, 94.0], [31.4, 94.0], [31.5, 94.0], [31.6, 94.0], [31.7, 94.0], [31.8, 95.0], [31.9, 95.0], [32.0, 95.0], [32.1, 95.0], [32.2, 95.0], [32.3, 96.0], [32.4, 96.0], [32.5, 96.0], [32.6, 97.0], [32.7, 97.0], [32.8, 97.0], [32.9, 98.0], [33.0, 98.0], [33.1, 98.0], [33.2, 99.0], [33.3, 99.0], [33.4, 99.0], [33.5, 99.0], [33.6, 100.0], [33.7, 100.0], [33.8, 101.0], [33.9, 101.0], [34.0, 101.0], [34.1, 101.0], [34.2, 102.0], [34.3, 102.0], [34.4, 102.0], [34.5, 102.0], [34.6, 102.0], [34.7, 103.0], [34.8, 103.0], [34.9, 103.0], [35.0, 103.0], [35.1, 103.0], [35.2, 103.0], [35.3, 103.0], [35.4, 104.0], [35.5, 104.0], [35.6, 104.0], [35.7, 104.0], [35.8, 104.0], [35.9, 104.0], [36.0, 104.0], [36.1, 105.0], [36.2, 105.0], [36.3, 105.0], [36.4, 105.0], [36.5, 105.0], [36.6, 105.0], [36.7, 105.0], [36.8, 105.0], [36.9, 106.0], [37.0, 106.0], [37.1, 106.0], [37.2, 106.0], [37.3, 106.0], [37.4, 106.0], [37.5, 106.0], [37.6, 106.0], [37.7, 106.0], [37.8, 106.0], [37.9, 106.0], [38.0, 106.0], [38.1, 106.0], [38.2, 106.0], [38.3, 106.0], [38.4, 106.0], [38.5, 107.0], [38.6, 107.0], [38.7, 107.0], [38.8, 107.0], [38.9, 107.0], [39.0, 107.0], [39.1, 107.0], [39.2, 107.0], [39.3, 107.0], [39.4, 107.0], [39.5, 107.0], [39.6, 107.0], [39.7, 107.0], [39.8, 107.0], [39.9, 107.0], [40.0, 108.0], [40.1, 108.0], [40.2, 108.0], [40.3, 108.0], [40.4, 108.0], [40.5, 108.0], [40.6, 108.0], [40.7, 108.0], [40.8, 108.0], [40.9, 108.0], [41.0, 108.0], [41.1, 108.0], [41.2, 108.0], [41.3, 108.0], [41.4, 109.0], [41.5, 109.0], [41.6, 109.0], [41.7, 109.0], [41.8, 109.0], [41.9, 109.0], [42.0, 109.0], [42.1, 109.0], [42.2, 109.0], [42.3, 109.0], [42.4, 109.0], [42.5, 109.0], [42.6, 109.0], [42.7, 109.0], [42.8, 109.0], [42.9, 109.0], [43.0, 109.0], [43.1, 109.0], [43.2, 109.0], [43.3, 110.0], [43.4, 110.0], [43.5, 110.0], [43.6, 110.0], [43.7, 110.0], [43.8, 110.0], [43.9, 110.0], [44.0, 110.0], [44.1, 110.0], [44.2, 110.0], [44.3, 110.0], [44.4, 110.0], [44.5, 110.0], [44.6, 110.0], [44.7, 110.0], [44.8, 110.0], [44.9, 110.0], [45.0, 110.0], [45.1, 110.0], [45.2, 110.0], [45.3, 110.0], [45.4, 110.0], [45.5, 110.0], [45.6, 110.0], [45.7, 110.0], [45.8, 110.0], [45.9, 110.0], [46.0, 111.0], [46.1, 111.0], [46.2, 111.0], [46.3, 111.0], [46.4, 111.0], [46.5, 111.0], [46.6, 111.0], [46.7, 111.0], [46.8, 111.0], [46.9, 111.0], [47.0, 111.0], [47.1, 111.0], [47.2, 111.0], [47.3, 111.0], [47.4, 111.0], [47.5, 111.0], [47.6, 111.0], [47.7, 111.0], [47.8, 111.0], [47.9, 111.0], [48.0, 111.0], [48.1, 111.0], [48.2, 112.0], [48.3, 112.0], [48.4, 112.0], [48.5, 112.0], [48.6, 112.0], [48.7, 112.0], [48.8, 112.0], [48.9, 112.0], [49.0, 112.0], [49.1, 112.0], [49.2, 112.0], [49.3, 112.0], [49.4, 112.0], [49.5, 112.0], [49.6, 112.0], [49.7, 112.0], [49.8, 112.0], [49.9, 112.0], [50.0, 112.0], [50.1, 112.0], [50.2, 112.0], [50.3, 112.0], [50.4, 112.0], [50.5, 112.0], [50.6, 112.0], [50.7, 113.0], [50.8, 113.0], [50.9, 113.0], [51.0, 113.0], [51.1, 113.0], [51.2, 113.0], [51.3, 113.0], [51.4, 113.0], [51.5, 113.0], [51.6, 113.0], [51.7, 113.0], [51.8, 113.0], [51.9, 113.0], [52.0, 113.0], [52.1, 113.0], [52.2, 113.0], [52.3, 113.0], [52.4, 113.0], [52.5, 113.0], [52.6, 113.0], [52.7, 113.0], [52.8, 113.0], [52.9, 113.0], [53.0, 113.0], [53.1, 113.0], [53.2, 113.0], [53.3, 113.0], [53.4, 113.0], [53.5, 113.0], [53.6, 113.0], [53.7, 113.0], [53.8, 113.0], [53.9, 113.0], [54.0, 114.0], [54.1, 114.0], [54.2, 114.0], [54.3, 114.0], [54.4, 114.0], [54.5, 114.0], [54.6, 114.0], [54.7, 114.0], [54.8, 114.0], [54.9, 114.0], [55.0, 114.0], [55.1, 114.0], [55.2, 114.0], [55.3, 114.0], [55.4, 114.0], [55.5, 114.0], [55.6, 114.0], [55.7, 114.0], [55.8, 114.0], [55.9, 114.0], [56.0, 114.0], [56.1, 114.0], [56.2, 114.0], [56.3, 114.0], [56.4, 114.0], [56.5, 114.0], [56.6, 115.0], [56.7, 115.0], [56.8, 115.0], [56.9, 115.0], [57.0, 115.0], [57.1, 115.0], [57.2, 115.0], [57.3, 115.0], [57.4, 115.0], [57.5, 115.0], [57.6, 115.0], [57.7, 115.0], [57.8, 115.0], [57.9, 115.0], [58.0, 115.0], [58.1, 115.0], [58.2, 115.0], [58.3, 115.0], [58.4, 115.0], [58.5, 115.0], [58.6, 115.0], [58.7, 115.0], [58.8, 115.0], [58.9, 115.0], [59.0, 115.0], [59.1, 115.0], [59.2, 115.0], [59.3, 115.0], [59.4, 115.0], [59.5, 115.0], [59.6, 115.0], [59.7, 115.0], [59.8, 115.0], [59.9, 116.0], [60.0, 116.0], [60.1, 116.0], [60.2, 116.0], [60.3, 116.0], [60.4, 116.0], [60.5, 116.0], [60.6, 116.0], [60.7, 116.0], [60.8, 116.0], [60.9, 116.0], [61.0, 116.0], [61.1, 116.0], [61.2, 116.0], [61.3, 116.0], [61.4, 116.0], [61.5, 116.0], [61.6, 116.0], [61.7, 116.0], [61.8, 116.0], [61.9, 116.0], [62.0, 116.0], [62.1, 116.0], [62.2, 116.0], [62.3, 116.0], [62.4, 116.0], [62.5, 116.0], [62.6, 116.0], [62.7, 116.0], [62.8, 116.0], [62.9, 116.0], [63.0, 116.0], [63.1, 117.0], [63.2, 117.0], [63.3, 117.0], [63.4, 117.0], [63.5, 117.0], [63.6, 117.0], [63.7, 117.0], [63.8, 117.0], [63.9, 117.0], [64.0, 117.0], [64.1, 117.0], [64.2, 117.0], [64.3, 117.0], [64.4, 117.0], [64.5, 117.0], [64.6, 117.0], [64.7, 117.0], [64.8, 117.0], [64.9, 117.0], [65.0, 117.0], [65.1, 117.0], [65.2, 117.0], [65.3, 117.0], [65.4, 117.0], [65.5, 117.0], [65.6, 117.0], [65.7, 117.0], [65.8, 117.0], [65.9, 118.0], [66.0, 118.0], [66.1, 118.0], [66.2, 118.0], [66.3, 118.0], [66.4, 118.0], [66.5, 118.0], [66.6, 118.0], [66.7, 118.0], [66.8, 118.0], [66.9, 118.0], [67.0, 118.0], [67.1, 118.0], [67.2, 118.0], [67.3, 118.0], [67.4, 118.0], [67.5, 118.0], [67.6, 118.0], [67.7, 118.0], [67.8, 118.0], [67.9, 118.0], [68.0, 118.0], [68.1, 118.0], [68.2, 118.0], [68.3, 119.0], [68.4, 119.0], [68.5, 119.0], [68.6, 119.0], [68.7, 119.0], [68.8, 119.0], [68.9, 119.0], [69.0, 119.0], [69.1, 119.0], [69.2, 119.0], [69.3, 119.0], [69.4, 119.0], [69.5, 119.0], [69.6, 119.0], [69.7, 119.0], [69.8, 119.0], [69.9, 119.0], [70.0, 119.0], [70.1, 119.0], [70.2, 119.0], [70.3, 119.0], [70.4, 119.0], [70.5, 119.0], [70.6, 119.0], [70.7, 120.0], [70.8, 120.0], [70.9, 120.0], [71.0, 120.0], [71.1, 120.0], [71.2, 120.0], [71.3, 120.0], [71.4, 120.0], [71.5, 120.0], [71.6, 120.0], [71.7, 120.0], [71.8, 120.0], [71.9, 120.0], [72.0, 120.0], [72.1, 120.0], [72.2, 120.0], [72.3, 120.0], [72.4, 120.0], [72.5, 120.0], [72.6, 120.0], [72.7, 120.0], [72.8, 121.0], [72.9, 121.0], [73.0, 121.0], [73.1, 121.0], [73.2, 121.0], [73.3, 121.0], [73.4, 121.0], [73.5, 121.0], [73.6, 121.0], [73.7, 121.0], [73.8, 121.0], [73.9, 121.0], [74.0, 121.0], [74.1, 121.0], [74.2, 121.0], [74.3, 121.0], [74.4, 121.0], [74.5, 121.0], [74.6, 121.0], [74.7, 121.0], [74.8, 122.0], [74.9, 122.0], [75.0, 122.0], [75.1, 122.0], [75.2, 122.0], [75.3, 122.0], [75.4, 122.0], [75.5, 122.0], [75.6, 122.0], [75.7, 122.0], [75.8, 122.0], [75.9, 122.0], [76.0, 122.0], [76.1, 122.0], [76.2, 122.0], [76.3, 122.0], [76.4, 123.0], [76.5, 123.0], [76.6, 123.0], [76.7, 123.0], [76.8, 123.0], [76.9, 123.0], [77.0, 123.0], [77.1, 123.0], [77.2, 123.0], [77.3, 123.0], [77.4, 123.0], [77.5, 123.0], [77.6, 124.0], [77.7, 124.0], [77.8, 124.0], [77.9, 124.0], [78.0, 124.0], [78.1, 124.0], [78.2, 124.0], [78.3, 124.0], [78.4, 124.0], [78.5, 124.0], [78.6, 124.0], [78.7, 125.0], [78.8, 125.0], [78.9, 125.0], [79.0, 125.0], [79.1, 125.0], [79.2, 125.0], [79.3, 125.0], [79.4, 125.0], [79.5, 125.0], [79.6, 126.0], [79.7, 126.0], [79.8, 126.0], [79.9, 126.0], [80.0, 126.0], [80.1, 126.0], [80.2, 126.0], [80.3, 126.0], [80.4, 126.0], [80.5, 127.0], [80.6, 127.0], [80.7, 127.0], [80.8, 127.0], [80.9, 127.0], [81.0, 127.0], [81.1, 127.0], [81.2, 127.0], [81.3, 128.0], [81.4, 128.0], [81.5, 128.0], [81.6, 128.0], [81.7, 128.0], [81.8, 129.0], [81.9, 129.0], [82.0, 130.0], [82.1, 130.0], [82.2, 130.0], [82.3, 131.0], [82.4, 131.0], [82.5, 131.0], [82.6, 131.0], [82.7, 132.0], [82.8, 132.0], [82.9, 132.0], [83.0, 132.0], [83.1, 133.0], [83.2, 133.0], [83.3, 133.0], [83.4, 134.0], [83.5, 134.0], [83.6, 135.0], [83.7, 135.0], [83.8, 136.0], [83.9, 136.0], [84.0, 136.0], [84.1, 137.0], [84.2, 137.0], [84.3, 137.0], [84.4, 138.0], [84.5, 138.0], [84.6, 138.0], [84.7, 138.0], [84.8, 139.0], [84.9, 139.0], [85.0, 140.0], [85.1, 140.0], [85.2, 140.0], [85.3, 141.0], [85.4, 141.0], [85.5, 142.0], [85.6, 142.0], [85.7, 143.0], [85.8, 143.0], [85.9, 144.0], [86.0, 144.0], [86.1, 145.0], [86.2, 145.0], [86.3, 146.0], [86.4, 147.0], [86.5, 148.0], [86.6, 148.0], [86.7, 149.0], [86.8, 150.0], [86.9, 150.0], [87.0, 151.0], [87.1, 151.0], [87.2, 152.0], [87.3, 152.0], [87.4, 152.0], [87.5, 153.0], [87.6, 154.0], [87.7, 155.0], [87.8, 155.0], [87.9, 156.0], [88.0, 156.0], [88.1, 158.0], [88.2, 158.0], [88.3, 159.0], [88.4, 160.0], [88.5, 160.0], [88.6, 161.0], [88.7, 162.0], [88.8, 163.0], [88.9, 164.0], [89.0, 165.0], [89.1, 167.0], [89.2, 169.0], [89.3, 170.0], [89.4, 171.0], [89.5, 172.0], [89.6, 173.0], [89.7, 173.0], [89.8, 174.0], [89.9, 175.0], [90.0, 175.0], [90.1, 175.0], [90.2, 176.0], [90.3, 176.0], [90.4, 177.0], [90.5, 177.0], [90.6, 178.0], [90.7, 178.0], [90.8, 179.0], [90.9, 179.0], [91.0, 179.0], [91.1, 180.0], [91.2, 181.0], [91.3, 182.0], [91.4, 183.0], [91.5, 183.0], [91.6, 184.0], [91.7, 184.0], [91.8, 186.0], [91.9, 186.0], [92.0, 187.0], [92.1, 188.0], [92.2, 190.0], [92.3, 191.0], [92.4, 193.0], [92.5, 194.0], [92.6, 194.0], [92.7, 196.0], [92.8, 197.0], [92.9, 199.0], [93.0, 202.0], [93.1, 203.0], [93.2, 207.0], [93.3, 210.0], [93.4, 211.0], [93.5, 215.0], [93.6, 220.0], [93.7, 222.0], [93.8, 226.0], [93.9, 230.0], [94.0, 234.0], [94.1, 237.0], [94.2, 239.0], [94.3, 241.0], [94.4, 242.0], [94.5, 243.0], [94.6, 271.0], [94.7, 304.0], [94.8, 337.0], [94.9, 354.0], [95.0, 357.0], [95.1, 359.0], [95.2, 360.0], [95.3, 362.0], [95.4, 364.0], [95.5, 367.0], [95.6, 369.0], [95.7, 372.0], [95.8, 374.0], [95.9, 375.0], [96.0, 380.0], [96.1, 381.0], [96.2, 382.0], [96.3, 386.0], [96.4, 390.0], [96.5, 407.0], [96.6, 436.0], [96.7, 471.0], [96.8, 527.0], [96.9, 537.0], [97.0, 582.0], [97.1, 617.0], [97.2, 1038.0], [97.3, 1043.0], [97.4, 1046.0], [97.5, 1049.0], [97.6, 1052.0], [97.7, 1055.0], [97.8, 1056.0], [97.9, 1058.0], [98.0, 1060.0], [98.1, 1062.0], [98.2, 1064.0], [98.3, 1065.0], [98.4, 1067.0], [98.5, 1069.0], [98.6, 1071.0], [98.7, 1074.0], [98.8, 1076.0], [98.9, 1079.0], [99.0, 1082.0], [99.1, 1085.0], [99.2, 1091.0], [99.3, 1098.0], [99.4, 1102.0], [99.5, 1107.0], [99.6, 1114.0], [99.7, 1120.0], [99.8, 1123.0], [99.9, 1128.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 12462.0], [0.1, 12462.0], [0.2, 12462.0], [0.3, 12462.0], [0.4, 12462.0], [0.5, 12462.0], [0.6, 12490.0], [0.7, 12490.0], [0.8, 12490.0], [0.9, 12490.0], [1.0, 12490.0], [1.1, 12490.0], [1.2, 12495.0], [1.3, 12495.0], [1.4, 12495.0], [1.5, 12495.0], [1.6, 12495.0], [1.7, 12495.0], [1.8, 12503.0], [1.9, 12503.0], [2.0, 12503.0], [2.1, 12503.0], [2.2, 12503.0], [2.3, 12503.0], [2.4, 12510.0], [2.5, 12510.0], [2.6, 12510.0], [2.7, 12510.0], [2.8, 12510.0], [2.9, 12510.0], [3.0, 12516.0], [3.1, 12516.0], [3.2, 12516.0], [3.3, 12516.0], [3.4, 12516.0], [3.5, 12516.0], [3.6, 12523.0], [3.7, 12523.0], [3.8, 12523.0], [3.9, 12523.0], [4.0, 12523.0], [4.1, 12523.0], [4.2, 12524.0], [4.3, 12524.0], [4.4, 12524.0], [4.5, 12524.0], [4.6, 12524.0], [4.7, 12524.0], [4.8, 12525.0], [4.9, 12525.0], [5.0, 12525.0], [5.1, 12525.0], [5.2, 12525.0], [5.3, 12527.0], [5.4, 12527.0], [5.5, 12527.0], [5.6, 12527.0], [5.7, 12527.0], [5.8, 12527.0], [5.9, 12528.0], [6.0, 12528.0], [6.1, 12528.0], [6.2, 12528.0], [6.3, 12528.0], [6.4, 12528.0], [6.5, 12529.0], [6.6, 12529.0], [6.7, 12529.0], [6.8, 12529.0], [6.9, 12529.0], [7.0, 12529.0], [7.1, 12538.0], [7.2, 12538.0], [7.3, 12538.0], [7.4, 12538.0], [7.5, 12538.0], [7.6, 12538.0], [7.7, 12540.0], [7.8, 12540.0], [7.9, 12540.0], [8.0, 12540.0], [8.1, 12540.0], [8.2, 12540.0], [8.3, 12549.0], [8.4, 12549.0], [8.5, 12549.0], [8.6, 12549.0], [8.7, 12549.0], [8.8, 12549.0], [8.9, 12558.0], [9.0, 12558.0], [9.1, 12558.0], [9.2, 12558.0], [9.3, 12558.0], [9.4, 12558.0], [9.5, 12561.0], [9.6, 12561.0], [9.7, 12561.0], [9.8, 12561.0], [9.9, 12561.0], [10.0, 12575.0], [10.1, 12575.0], [10.2, 12575.0], [10.3, 12575.0], [10.4, 12575.0], [10.5, 12575.0], [10.6, 12584.0], [10.7, 12584.0], [10.8, 12584.0], [10.9, 12584.0], [11.0, 12584.0], [11.1, 12584.0], [11.2, 12590.0], [11.3, 12590.0], [11.4, 12590.0], [11.5, 12590.0], [11.6, 12590.0], [11.7, 12590.0], [11.8, 12594.0], [11.9, 12594.0], [12.0, 12594.0], [12.1, 12594.0], [12.2, 12594.0], [12.3, 12594.0], [12.4, 12596.0], [12.5, 12596.0], [12.6, 12596.0], [12.7, 12596.0], [12.8, 12596.0], [12.9, 12596.0], [13.0, 12598.0], [13.1, 12598.0], [13.2, 12598.0], [13.3, 12598.0], [13.4, 12598.0], [13.5, 12598.0], [13.6, 12599.0], [13.7, 12599.0], [13.8, 12599.0], [13.9, 12599.0], [14.0, 12599.0], [14.1, 12599.0], [14.2, 12625.0], [14.3, 12625.0], [14.4, 12625.0], [14.5, 12625.0], [14.6, 12625.0], [14.7, 12625.0], [14.8, 12629.0], [14.9, 12629.0], [15.0, 12629.0], [15.1, 12629.0], [15.2, 12629.0], [15.3, 12633.0], [15.4, 12633.0], [15.5, 12633.0], [15.6, 12633.0], [15.7, 12633.0], [15.8, 12633.0], [15.9, 12641.0], [16.0, 12641.0], [16.1, 12641.0], [16.2, 12641.0], [16.3, 12641.0], [16.4, 12641.0], [16.5, 12654.0], [16.6, 12654.0], [16.7, 12654.0], [16.8, 12654.0], [16.9, 12654.0], [17.0, 12654.0], [17.1, 12658.0], [17.2, 12658.0], [17.3, 12658.0], [17.4, 12658.0], [17.5, 12658.0], [17.6, 12658.0], [17.7, 12661.0], [17.8, 12661.0], [17.9, 12661.0], [18.0, 12661.0], [18.1, 12661.0], [18.2, 12661.0], [18.3, 12666.0], [18.4, 12666.0], [18.5, 12666.0], [18.6, 12666.0], [18.7, 12666.0], [18.8, 12666.0], [18.9, 12669.0], [19.0, 12669.0], [19.1, 12669.0], [19.2, 12669.0], [19.3, 12669.0], [19.4, 12669.0], [19.5, 12675.0], [19.6, 12675.0], [19.7, 12675.0], [19.8, 12675.0], [19.9, 12675.0], [20.0, 12675.0], [20.1, 12680.0], [20.2, 12680.0], [20.3, 12680.0], [20.4, 12680.0], [20.5, 12680.0], [20.6, 12684.0], [20.7, 12684.0], [20.8, 12684.0], [20.9, 12684.0], [21.0, 12684.0], [21.1, 12684.0], [21.2, 12688.0], [21.3, 12688.0], [21.4, 12688.0], [21.5, 12688.0], [21.6, 12688.0], [21.7, 12688.0], [21.8, 12690.0], [21.9, 12690.0], [22.0, 12690.0], [22.1, 12690.0], [22.2, 12690.0], [22.3, 12690.0], [22.4, 12692.0], [22.5, 12692.0], [22.6, 12692.0], [22.7, 12692.0], [22.8, 12692.0], [22.9, 12692.0], [23.0, 12700.0], [23.1, 12700.0], [23.2, 12700.0], [23.3, 12700.0], [23.4, 12700.0], [23.5, 12700.0], [23.6, 12704.0], [23.7, 12704.0], [23.8, 12704.0], [23.9, 12704.0], [24.0, 12704.0], [24.1, 12704.0], [24.2, 12706.0], [24.3, 12706.0], [24.4, 12706.0], [24.5, 12706.0], [24.6, 12706.0], [24.7, 12706.0], [24.8, 12707.0], [24.9, 12707.0], [25.0, 12707.0], [25.1, 12707.0], [25.2, 12707.0], [25.3, 12709.0], [25.4, 12709.0], [25.5, 12709.0], [25.6, 12709.0], [25.7, 12709.0], [25.8, 12709.0], [25.9, 12709.0], [26.0, 12709.0], [26.1, 12709.0], [26.2, 12709.0], [26.3, 12709.0], [26.4, 12709.0], [26.5, 12709.0], [26.6, 12709.0], [26.7, 12709.0], [26.8, 12709.0], [26.9, 12709.0], [27.0, 12709.0], [27.1, 12711.0], [27.2, 12711.0], [27.3, 12711.0], [27.4, 12711.0], [27.5, 12711.0], [27.6, 12711.0], [27.7, 12712.0], [27.8, 12712.0], [27.9, 12712.0], [28.0, 12712.0], [28.1, 12712.0], [28.2, 12712.0], [28.3, 12713.0], [28.4, 12713.0], [28.5, 12713.0], [28.6, 12713.0], [28.7, 12713.0], [28.8, 12713.0], [28.9, 12715.0], [29.0, 12715.0], [29.1, 12715.0], [29.2, 12715.0], [29.3, 12715.0], [29.4, 12715.0], [29.5, 12715.0], [29.6, 12715.0], [29.7, 12715.0], [29.8, 12715.0], [29.9, 12715.0], [30.0, 12715.0], [30.1, 12715.0], [30.2, 12715.0], [30.3, 12715.0], [30.4, 12715.0], [30.5, 12715.0], [30.6, 12716.0], [30.7, 12716.0], [30.8, 12716.0], [30.9, 12716.0], [31.0, 12716.0], [31.1, 12716.0], [31.2, 12717.0], [31.3, 12717.0], [31.4, 12717.0], [31.5, 12717.0], [31.6, 12717.0], [31.7, 12717.0], [31.8, 12717.0], [31.9, 12717.0], [32.0, 12717.0], [32.1, 12717.0], [32.2, 12717.0], [32.3, 12717.0], [32.4, 12721.0], [32.5, 12721.0], [32.6, 12721.0], [32.7, 12721.0], [32.8, 12721.0], [32.9, 12721.0], [33.0, 12724.0], [33.1, 12724.0], [33.2, 12724.0], [33.3, 12724.0], [33.4, 12724.0], [33.5, 12724.0], [33.6, 12724.0], [33.7, 12724.0], [33.8, 12724.0], [33.9, 12724.0], [34.0, 12724.0], [34.1, 12724.0], [34.2, 12728.0], [34.3, 12728.0], [34.4, 12728.0], [34.5, 12728.0], [34.6, 12728.0], [34.7, 12728.0], [34.8, 12772.0], [34.9, 12772.0], [35.0, 12772.0], [35.1, 12772.0], [35.2, 12772.0], [35.3, 12793.0], [35.4, 12793.0], [35.5, 12793.0], [35.6, 12793.0], [35.7, 12793.0], [35.8, 12793.0], [35.9, 12798.0], [36.0, 12798.0], [36.1, 12798.0], [36.2, 12798.0], [36.3, 12798.0], [36.4, 12798.0], [36.5, 12812.0], [36.6, 12812.0], [36.7, 12812.0], [36.8, 12812.0], [36.9, 12812.0], [37.0, 12812.0], [37.1, 12812.0], [37.2, 12812.0], [37.3, 12812.0], [37.4, 12812.0], [37.5, 12812.0], [37.6, 12812.0], [37.7, 12812.0], [37.8, 12812.0], [37.9, 12812.0], [38.0, 12812.0], [38.1, 12812.0], [38.2, 12812.0], [38.3, 12814.0], [38.4, 12814.0], [38.5, 12814.0], [38.6, 12814.0], [38.7, 12814.0], [38.8, 12814.0], [38.9, 12814.0], [39.0, 12814.0], [39.1, 12814.0], [39.2, 12814.0], [39.3, 12814.0], [39.4, 12814.0], [39.5, 12814.0], [39.6, 12814.0], [39.7, 12814.0], [39.8, 12814.0], [39.9, 12814.0], [40.0, 12814.0], [40.1, 12816.0], [40.2, 12816.0], [40.3, 12816.0], [40.4, 12816.0], [40.5, 12816.0], [40.6, 12818.0], [40.7, 12818.0], [40.8, 12818.0], [40.9, 12818.0], [41.0, 12818.0], [41.1, 12818.0], [41.2, 12821.0], [41.3, 12821.0], [41.4, 12821.0], [41.5, 12821.0], [41.6, 12821.0], [41.7, 12821.0], [41.8, 12855.0], [41.9, 12855.0], [42.0, 12855.0], [42.1, 12855.0], [42.2, 12855.0], [42.3, 12855.0], [42.4, 12870.0], [42.5, 12870.0], [42.6, 12870.0], [42.7, 12870.0], [42.8, 12870.0], [42.9, 12870.0], [43.0, 12871.0], [43.1, 12871.0], [43.2, 12871.0], [43.3, 12871.0], [43.4, 12871.0], [43.5, 12871.0], [43.6, 12874.0], [43.7, 12874.0], [43.8, 12874.0], [43.9, 12874.0], [44.0, 12874.0], [44.1, 12874.0], [44.2, 12878.0], [44.3, 12878.0], [44.4, 12878.0], [44.5, 12878.0], [44.6, 12878.0], [44.7, 12878.0], [44.8, 12897.0], [44.9, 12897.0], [45.0, 12897.0], [45.1, 12897.0], [45.2, 12897.0], [45.3, 12932.0], [45.4, 12932.0], [45.5, 12932.0], [45.6, 12932.0], [45.7, 12932.0], [45.8, 12932.0], [45.9, 12934.0], [46.0, 12934.0], [46.1, 12934.0], [46.2, 12934.0], [46.3, 12934.0], [46.4, 12934.0], [46.5, 12957.0], [46.6, 12957.0], [46.7, 12957.0], [46.8, 12957.0], [46.9, 12957.0], [47.0, 12957.0], [47.1, 12965.0], [47.2, 12965.0], [47.3, 12965.0], [47.4, 12965.0], [47.5, 12965.0], [47.6, 12965.0], [47.7, 12968.0], [47.8, 12968.0], [47.9, 12968.0], [48.0, 12968.0], [48.1, 12968.0], [48.2, 12968.0], [48.3, 12969.0], [48.4, 12969.0], [48.5, 12969.0], [48.6, 12969.0], [48.7, 12969.0], [48.8, 12969.0], [48.9, 12969.0], [49.0, 12969.0], [49.1, 12969.0], [49.2, 12969.0], [49.3, 12969.0], [49.4, 12969.0], [49.5, 12970.0], [49.6, 12970.0], [49.7, 12970.0], [49.8, 12970.0], [49.9, 12970.0], [50.0, 12970.0], [50.1, 12970.0], [50.2, 12970.0], [50.3, 12970.0], [50.4, 12970.0], [50.5, 12970.0], [50.6, 12971.0], [50.7, 12971.0], [50.8, 12971.0], [50.9, 12971.0], [51.0, 12971.0], [51.1, 12971.0], [51.2, 12975.0], [51.3, 12975.0], [51.4, 12975.0], [51.5, 12975.0], [51.6, 12975.0], [51.7, 12975.0], [51.8, 12975.0], [51.9, 12975.0], [52.0, 12975.0], [52.1, 12975.0], [52.2, 12975.0], [52.3, 12975.0], [52.4, 12975.0], [52.5, 12975.0], [52.6, 12975.0], [52.7, 12975.0], [52.8, 12975.0], [52.9, 12975.0], [53.0, 12976.0], [53.1, 12976.0], [53.2, 12976.0], [53.3, 12976.0], [53.4, 12976.0], [53.5, 12976.0], [53.6, 13005.0], [53.7, 13005.0], [53.8, 13005.0], [53.9, 13005.0], [54.0, 13005.0], [54.1, 13005.0], [54.2, 13006.0], [54.3, 13006.0], [54.4, 13006.0], [54.5, 13006.0], [54.6, 13006.0], [54.7, 13006.0], [54.8, 13007.0], [54.9, 13007.0], [55.0, 13007.0], [55.1, 13007.0], [55.2, 13007.0], [55.3, 13022.0], [55.4, 13022.0], [55.5, 13022.0], [55.6, 13022.0], [55.7, 13022.0], [55.8, 13022.0], [55.9, 13026.0], [56.0, 13026.0], [56.1, 13026.0], [56.2, 13026.0], [56.3, 13026.0], [56.4, 13026.0], [56.5, 13040.0], [56.6, 13040.0], [56.7, 13040.0], [56.8, 13040.0], [56.9, 13040.0], [57.0, 13040.0], [57.1, 13040.0], [57.2, 13040.0], [57.3, 13040.0], [57.4, 13040.0], [57.5, 13040.0], [57.6, 13040.0], [57.7, 13045.0], [57.8, 13045.0], [57.9, 13045.0], [58.0, 13045.0], [58.1, 13045.0], [58.2, 13045.0], [58.3, 13049.0], [58.4, 13049.0], [58.5, 13049.0], [58.6, 13049.0], [58.7, 13049.0], [58.8, 13049.0], [58.9, 13064.0], [59.0, 13064.0], [59.1, 13064.0], [59.2, 13064.0], [59.3, 13064.0], [59.4, 13064.0], [59.5, 13066.0], [59.6, 13066.0], [59.7, 13066.0], [59.8, 13066.0], [59.9, 13066.0], [60.0, 13068.0], [60.1, 13068.0], [60.2, 13068.0], [60.3, 13068.0], [60.4, 13068.0], [60.5, 13068.0], [60.6, 13068.0], [60.7, 13068.0], [60.8, 13068.0], [60.9, 13068.0], [61.0, 13068.0], [61.1, 13068.0], [61.2, 13069.0], [61.3, 13069.0], [61.4, 13069.0], [61.5, 13069.0], [61.6, 13069.0], [61.7, 13069.0], [61.8, 13070.0], [61.9, 13070.0], [62.0, 13070.0], [62.1, 13070.0], [62.2, 13070.0], [62.3, 13070.0], [62.4, 13070.0], [62.5, 13070.0], [62.6, 13070.0], [62.7, 13070.0], [62.8, 13070.0], [62.9, 13070.0], [63.0, 13071.0], [63.1, 13071.0], [63.2, 13071.0], [63.3, 13071.0], [63.4, 13071.0], [63.5, 13071.0], [63.6, 13072.0], [63.7, 13072.0], [63.8, 13072.0], [63.9, 13072.0], [64.0, 13072.0], [64.1, 13072.0], [64.2, 13104.0], [64.3, 13104.0], [64.4, 13104.0], [64.5, 13104.0], [64.6, 13104.0], [64.7, 13104.0], [64.8, 13105.0], [64.9, 13105.0], [65.0, 13105.0], [65.1, 13105.0], [65.2, 13105.0], [65.3, 13107.0], [65.4, 13107.0], [65.5, 13107.0], [65.6, 13107.0], [65.7, 13107.0], [65.8, 13107.0], [65.9, 13107.0], [66.0, 13107.0], [66.1, 13107.0], [66.2, 13107.0], [66.3, 13107.0], [66.4, 13107.0], [66.5, 13122.0], [66.6, 13122.0], [66.7, 13122.0], [66.8, 13122.0], [66.9, 13122.0], [67.0, 13122.0], [67.1, 13140.0], [67.2, 13140.0], [67.3, 13140.0], [67.4, 13140.0], [67.5, 13140.0], [67.6, 13140.0], [67.7, 13154.0], [67.8, 13154.0], [67.9, 13154.0], [68.0, 13154.0], [68.1, 13154.0], [68.2, 13154.0], [68.3, 13155.0], [68.4, 13155.0], [68.5, 13155.0], [68.6, 13155.0], [68.7, 13155.0], [68.8, 13155.0], [68.9, 13158.0], [69.0, 13158.0], [69.1, 13158.0], [69.2, 13158.0], [69.3, 13158.0], [69.4, 13158.0], [69.5, 13158.0], [69.6, 13158.0], [69.7, 13158.0], [69.8, 13158.0], [69.9, 13158.0], [70.0, 13160.0], [70.1, 13160.0], [70.2, 13160.0], [70.3, 13160.0], [70.4, 13160.0], [70.5, 13160.0], [70.6, 13160.0], [70.7, 13160.0], [70.8, 13160.0], [70.9, 13160.0], [71.0, 13160.0], [71.1, 13160.0], [71.2, 13161.0], [71.3, 13161.0], [71.4, 13161.0], [71.5, 13161.0], [71.6, 13161.0], [71.7, 13161.0], [71.8, 13162.0], [71.9, 13162.0], [72.0, 13162.0], [72.1, 13162.0], [72.2, 13162.0], [72.3, 13162.0], [72.4, 13168.0], [72.5, 13168.0], [72.6, 13168.0], [72.7, 13168.0], [72.8, 13168.0], [72.9, 13168.0], [73.0, 13186.0], [73.1, 13186.0], [73.2, 13186.0], [73.3, 13186.0], [73.4, 13186.0], [73.5, 13186.0], [73.6, 13189.0], [73.7, 13189.0], [73.8, 13189.0], [73.9, 13189.0], [74.0, 13189.0], [74.1, 13189.0], [74.2, 13203.0], [74.3, 13203.0], [74.4, 13203.0], [74.5, 13203.0], [74.6, 13203.0], [74.7, 13203.0], [74.8, 13206.0], [74.9, 13206.0], [75.0, 13206.0], [75.1, 13206.0], [75.2, 13206.0], [75.3, 13222.0], [75.4, 13222.0], [75.5, 13222.0], [75.6, 13222.0], [75.7, 13222.0], [75.8, 13222.0], [75.9, 13241.0], [76.0, 13241.0], [76.1, 13241.0], [76.2, 13241.0], [76.3, 13241.0], [76.4, 13241.0], [76.5, 13260.0], [76.6, 13260.0], [76.7, 13260.0], [76.8, 13260.0], [76.9, 13260.0], [77.0, 13260.0], [77.1, 13262.0], [77.2, 13262.0], [77.3, 13262.0], [77.4, 13262.0], [77.5, 13262.0], [77.6, 13262.0], [77.7, 13268.0], [77.8, 13268.0], [77.9, 13268.0], [78.0, 13268.0], [78.1, 13268.0], [78.2, 13268.0], [78.3, 13284.0], [78.4, 13284.0], [78.5, 13284.0], [78.6, 13284.0], [78.7, 13284.0], [78.8, 13284.0], [78.9, 13285.0], [79.0, 13285.0], [79.1, 13285.0], [79.2, 13285.0], [79.3, 13285.0], [79.4, 13285.0], [79.5, 13290.0], [79.6, 13290.0], [79.7, 13290.0], [79.8, 13290.0], [79.9, 13290.0], [80.0, 13290.0], [80.1, 13299.0], [80.2, 13299.0], [80.3, 13299.0], [80.4, 13299.0], [80.5, 13299.0], [80.6, 13305.0], [80.7, 13305.0], [80.8, 13305.0], [80.9, 13305.0], [81.0, 13305.0], [81.1, 13305.0], [81.2, 13310.0], [81.3, 13310.0], [81.4, 13310.0], [81.5, 13310.0], [81.6, 13310.0], [81.7, 13310.0], [81.8, 13316.0], [81.9, 13316.0], [82.0, 13316.0], [82.1, 13316.0], [82.2, 13316.0], [82.3, 13316.0], [82.4, 13320.0], [82.5, 13320.0], [82.6, 13320.0], [82.7, 13320.0], [82.8, 13320.0], [82.9, 13320.0], [83.0, 13328.0], [83.1, 13328.0], [83.2, 13328.0], [83.3, 13328.0], [83.4, 13328.0], [83.5, 13328.0], [83.6, 13331.0], [83.7, 13331.0], [83.8, 13331.0], [83.9, 13331.0], [84.0, 13331.0], [84.1, 13331.0], [84.2, 13337.0], [84.3, 13337.0], [84.4, 13337.0], [84.5, 13337.0], [84.6, 13337.0], [84.7, 13337.0], [84.8, 13345.0], [84.9, 13345.0], [85.0, 13345.0], [85.1, 13345.0], [85.2, 13345.0], [85.3, 13350.0], [85.4, 13350.0], [85.5, 13350.0], [85.6, 13350.0], [85.7, 13350.0], [85.8, 13350.0], [85.9, 13355.0], [86.0, 13355.0], [86.1, 13355.0], [86.2, 13355.0], [86.3, 13355.0], [86.4, 13355.0], [86.5, 13359.0], [86.6, 13359.0], [86.7, 13359.0], [86.8, 13359.0], [86.9, 13359.0], [87.0, 13359.0], [87.1, 13372.0], [87.2, 13372.0], [87.3, 13372.0], [87.4, 13372.0], [87.5, 13372.0], [87.6, 13372.0], [87.7, 13374.0], [87.8, 13374.0], [87.9, 13374.0], [88.0, 13374.0], [88.1, 13374.0], [88.2, 13374.0], [88.3, 13378.0], [88.4, 13378.0], [88.5, 13378.0], [88.6, 13378.0], [88.7, 13378.0], [88.8, 13378.0], [88.9, 13386.0], [89.0, 13386.0], [89.1, 13386.0], [89.2, 13386.0], [89.3, 13386.0], [89.4, 13386.0], [89.5, 13391.0], [89.6, 13391.0], [89.7, 13391.0], [89.8, 13391.0], [89.9, 13391.0], [90.0, 13391.0], [90.1, 13399.0], [90.2, 13399.0], [90.3, 13399.0], [90.4, 13399.0], [90.5, 13399.0], [90.6, 13405.0], [90.7, 13405.0], [90.8, 13405.0], [90.9, 13405.0], [91.0, 13405.0], [91.1, 13405.0], [91.2, 13411.0], [91.3, 13411.0], [91.4, 13411.0], [91.5, 13411.0], [91.6, 13411.0], [91.7, 13411.0], [91.8, 13413.0], [91.9, 13413.0], [92.0, 13413.0], [92.1, 13413.0], [92.2, 13413.0], [92.3, 13413.0], [92.4, 13418.0], [92.5, 13418.0], [92.6, 13418.0], [92.7, 13418.0], [92.8, 13418.0], [92.9, 13418.0], [93.0, 13428.0], [93.1, 13428.0], [93.2, 13428.0], [93.3, 13428.0], [93.4, 13428.0], [93.5, 13428.0], [93.6, 13437.0], [93.7, 13437.0], [93.8, 13437.0], [93.9, 13437.0], [94.0, 13437.0], [94.1, 13437.0], [94.2, 13446.0], [94.3, 13446.0], [94.4, 13446.0], [94.5, 13446.0], [94.6, 13446.0], [94.7, 13446.0], [94.8, 13452.0], [94.9, 13452.0], [95.0, 13452.0], [95.1, 13452.0], [95.2, 13452.0], [95.3, 13458.0], [95.4, 13458.0], [95.5, 13458.0], [95.6, 13458.0], [95.7, 13458.0], [95.8, 13458.0], [95.9, 13464.0], [96.0, 13464.0], [96.1, 13464.0], [96.2, 13464.0], [96.3, 13464.0], [96.4, 13464.0], [96.5, 13466.0], [96.6, 13466.0], [96.7, 13466.0], [96.8, 13466.0], [96.9, 13466.0], [97.0, 13466.0], [97.1, 13469.0], [97.2, 13469.0], [97.3, 13469.0], [97.4, 13469.0], [97.5, 13469.0], [97.6, 13469.0], [97.7, 13479.0], [97.8, 13479.0], [97.9, 13479.0], [98.0, 13479.0], [98.1, 13479.0], [98.2, 13479.0], [98.3, 13486.0], [98.4, 13486.0], [98.5, 13486.0], [98.6, 13486.0], [98.7, 13486.0], [98.8, 13486.0], [98.9, 13489.0], [99.0, 13489.0], [99.1, 13489.0], [99.2, 13489.0], [99.3, 13489.0], [99.4, 13489.0], [99.5, 13493.0], [99.6, 13493.0], [99.7, 13493.0], [99.8, 13493.0], [99.9, 13493.0], [100.0, 13493.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 60026.0], [0.1, 60026.0], [0.2, 60026.0], [0.3, 60026.0], [0.4, 60026.0], [0.5, 60026.0], [0.6, 60026.0], [0.7, 60026.0], [0.8, 60026.0], [0.9, 60026.0], [1.0, 60026.0], [1.1, 60026.0], [1.2, 60026.0], [1.3, 60026.0], [1.4, 60026.0], [1.5, 60026.0], [1.6, 60026.0], [1.7, 60026.0], [1.8, 60026.0], [1.9, 60026.0], [2.0, 60026.0], [2.1, 60026.0], [2.2, 60026.0], [2.3, 60026.0], [2.4, 60026.0], [2.5, 60026.0], [2.6, 60026.0], [2.7, 60026.0], [2.8, 60026.0], [2.9, 60026.0], [3.0, 60026.0], [3.1, 60026.0], [3.2, 60026.0], [3.3, 60026.0], [3.4, 60026.0], [3.5, 60026.0], [3.6, 60026.0], [3.7, 60026.0], [3.8, 60026.0], [3.9, 60026.0], [4.0, 60026.0], [4.1, 60026.0], [4.2, 60026.0], [4.3, 60026.0], [4.4, 60026.0], [4.5, 60026.0], [4.6, 60026.0], [4.7, 60026.0], [4.8, 60026.0], [4.9, 60026.0], [5.0, 60026.0], [5.1, 60026.0], [5.2, 60026.0], [5.3, 60026.0], [5.4, 60026.0], [5.5, 60026.0], [5.6, 60026.0], [5.7, 60026.0], [5.8, 60026.0], [5.9, 60026.0], [6.0, 60026.0], [6.1, 60026.0], [6.2, 60026.0], [6.3, 60026.0], [6.4, 60026.0], [6.5, 60026.0], [6.6, 60026.0], [6.7, 60026.0], [6.8, 60026.0], [6.9, 60026.0], [7.0, 60026.0], [7.1, 60026.0], [7.2, 60026.0], [7.3, 60026.0], [7.4, 60026.0], [7.5, 60026.0], [7.6, 60026.0], [7.7, 60027.0], [7.8, 60027.0], [7.9, 60027.0], [8.0, 60027.0], [8.1, 60027.0], [8.2, 60027.0], [8.3, 60027.0], [8.4, 60027.0], [8.5, 60027.0], [8.6, 60027.0], [8.7, 60027.0], [8.8, 60027.0], [8.9, 60027.0], [9.0, 60027.0], [9.1, 60027.0], [9.2, 60027.0], [9.3, 60027.0], [9.4, 60027.0], [9.5, 60027.0], [9.6, 60027.0], [9.7, 60027.0], [9.8, 60027.0], [9.9, 60027.0], [10.0, 60027.0], [10.1, 60027.0], [10.2, 60027.0], [10.3, 60027.0], [10.4, 60027.0], [10.5, 60027.0], [10.6, 60027.0], [10.7, 60027.0], [10.8, 60027.0], [10.9, 60027.0], [11.0, 60027.0], [11.1, 60027.0], [11.2, 60027.0], [11.3, 60027.0], [11.4, 60027.0], [11.5, 60027.0], [11.6, 60027.0], [11.7, 60027.0], [11.8, 60027.0], [11.9, 60027.0], [12.0, 60027.0], [12.1, 60027.0], [12.2, 60027.0], [12.3, 60027.0], [12.4, 60027.0], [12.5, 60027.0], [12.6, 60027.0], [12.7, 60027.0], [12.8, 60027.0], [12.9, 60027.0], [13.0, 60027.0], [13.1, 60027.0], [13.2, 60027.0], [13.3, 60027.0], [13.4, 60027.0], [13.5, 60027.0], [13.6, 60027.0], [13.7, 60027.0], [13.8, 60027.0], [13.9, 60027.0], [14.0, 60027.0], [14.1, 60027.0], [14.2, 60027.0], [14.3, 60027.0], [14.4, 60027.0], [14.5, 60027.0], [14.6, 60027.0], [14.7, 60027.0], [14.8, 60027.0], [14.9, 60027.0], [15.0, 60027.0], [15.1, 60027.0], [15.2, 60027.0], [15.3, 60027.0], [15.4, 60027.0], [15.5, 60027.0], [15.6, 60027.0], [15.7, 60027.0], [15.8, 60027.0], [15.9, 60027.0], [16.0, 60027.0], [16.1, 60027.0], [16.2, 60027.0], [16.3, 60027.0], [16.4, 60027.0], [16.5, 60027.0], [16.6, 60027.0], [16.7, 60027.0], [16.8, 60027.0], [16.9, 60027.0], [17.0, 60027.0], [17.1, 60027.0], [17.2, 60027.0], [17.3, 60027.0], [17.4, 60027.0], [17.5, 60027.0], [17.6, 60027.0], [17.7, 60027.0], [17.8, 60027.0], [17.9, 60027.0], [18.0, 60027.0], [18.1, 60027.0], [18.2, 60027.0], [18.3, 60027.0], [18.4, 60027.0], [18.5, 60027.0], [18.6, 60027.0], [18.7, 60027.0], [18.8, 60027.0], [18.9, 60027.0], [19.0, 60027.0], [19.1, 60027.0], [19.2, 60027.0], [19.3, 60027.0], [19.4, 60027.0], [19.5, 60027.0], [19.6, 60027.0], [19.7, 60027.0], [19.8, 60027.0], [19.9, 60027.0], [20.0, 60027.0], [20.1, 60027.0], [20.2, 60027.0], [20.3, 60027.0], [20.4, 60027.0], [20.5, 60027.0], [20.6, 60027.0], [20.7, 60027.0], [20.8, 60027.0], [20.9, 60027.0], [21.0, 60027.0], [21.1, 60027.0], [21.2, 60027.0], [21.3, 60027.0], [21.4, 60027.0], [21.5, 60027.0], [21.6, 60027.0], [21.7, 60027.0], [21.8, 60027.0], [21.9, 60027.0], [22.0, 60027.0], [22.1, 60027.0], [22.2, 60027.0], [22.3, 60027.0], [22.4, 60027.0], [22.5, 60027.0], [22.6, 60027.0], [22.7, 60027.0], [22.8, 60027.0], [22.9, 60027.0], [23.0, 60027.0], [23.1, 60027.0], [23.2, 60027.0], [23.3, 60027.0], [23.4, 60027.0], [23.5, 60027.0], [23.6, 60027.0], [23.7, 60027.0], [23.8, 60027.0], [23.9, 60027.0], [24.0, 60027.0], [24.1, 60027.0], [24.2, 60027.0], [24.3, 60027.0], [24.4, 60027.0], [24.5, 60027.0], [24.6, 60027.0], [24.7, 60027.0], [24.8, 60027.0], [24.9, 60027.0], [25.0, 60027.0], [25.1, 60027.0], [25.2, 60027.0], [25.3, 60027.0], [25.4, 60027.0], [25.5, 60027.0], [25.6, 60027.0], [25.7, 60027.0], [25.8, 60027.0], [25.9, 60027.0], [26.0, 60027.0], [26.1, 60027.0], [26.2, 60027.0], [26.3, 60027.0], [26.4, 60027.0], [26.5, 60027.0], [26.6, 60027.0], [26.7, 60027.0], [26.8, 60027.0], [26.9, 60027.0], [27.0, 60027.0], [27.1, 60027.0], [27.2, 60027.0], [27.3, 60027.0], [27.4, 60027.0], [27.5, 60027.0], [27.6, 60027.0], [27.7, 60027.0], [27.8, 60027.0], [27.9, 60027.0], [28.0, 60027.0], [28.1, 60027.0], [28.2, 60027.0], [28.3, 60027.0], [28.4, 60027.0], [28.5, 60027.0], [28.6, 60027.0], [28.7, 60027.0], [28.8, 60027.0], [28.9, 60027.0], [29.0, 60027.0], [29.1, 60027.0], [29.2, 60027.0], [29.3, 60027.0], [29.4, 60027.0], [29.5, 60027.0], [29.6, 60027.0], [29.7, 60027.0], [29.8, 60027.0], [29.9, 60027.0], [30.0, 60028.0], [30.1, 60028.0], [30.2, 60028.0], [30.3, 60028.0], [30.4, 60028.0], [30.5, 60028.0], [30.6, 60028.0], [30.7, 60028.0], [30.8, 60028.0], [30.9, 60028.0], [31.0, 60028.0], [31.1, 60028.0], [31.2, 60028.0], [31.3, 60028.0], [31.4, 60028.0], [31.5, 60028.0], [31.6, 60028.0], [31.7, 60028.0], [31.8, 60028.0], [31.9, 60028.0], [32.0, 60028.0], [32.1, 60028.0], [32.2, 60028.0], [32.3, 60028.0], [32.4, 60028.0], [32.5, 60028.0], [32.6, 60028.0], [32.7, 60028.0], [32.8, 60028.0], [32.9, 60028.0], [33.0, 60028.0], [33.1, 60028.0], [33.2, 60028.0], [33.3, 60028.0], [33.4, 60028.0], [33.5, 60028.0], [33.6, 60028.0], [33.7, 60028.0], [33.8, 60028.0], [33.9, 60028.0], [34.0, 60028.0], [34.1, 60028.0], [34.2, 60028.0], [34.3, 60028.0], [34.4, 60028.0], [34.5, 60028.0], [34.6, 60028.0], [34.7, 60028.0], [34.8, 60028.0], [34.9, 60028.0], [35.0, 60028.0], [35.1, 60028.0], [35.2, 60028.0], [35.3, 60028.0], [35.4, 60028.0], [35.5, 60028.0], [35.6, 60028.0], [35.7, 60028.0], [35.8, 60028.0], [35.9, 60028.0], [36.0, 60028.0], [36.1, 60028.0], [36.2, 60028.0], [36.3, 60028.0], [36.4, 60028.0], [36.5, 60028.0], [36.6, 60028.0], [36.7, 60028.0], [36.8, 60028.0], [36.9, 60028.0], [37.0, 60028.0], [37.1, 60028.0], [37.2, 60028.0], [37.3, 60028.0], [37.4, 60028.0], [37.5, 60028.0], [37.6, 60028.0], [37.7, 60028.0], [37.8, 60028.0], [37.9, 60028.0], [38.0, 60028.0], [38.1, 60028.0], [38.2, 60028.0], [38.3, 60028.0], [38.4, 60028.0], [38.5, 60028.0], [38.6, 60028.0], [38.7, 60028.0], [38.8, 60028.0], [38.9, 60028.0], [39.0, 60028.0], [39.1, 60028.0], [39.2, 60028.0], [39.3, 60028.0], [39.4, 60028.0], [39.5, 60028.0], [39.6, 60028.0], [39.7, 60028.0], [39.8, 60028.0], [39.9, 60028.0], [40.0, 60028.0], [40.1, 60028.0], [40.2, 60028.0], [40.3, 60028.0], [40.4, 60028.0], [40.5, 60028.0], [40.6, 60028.0], [40.7, 60028.0], [40.8, 60028.0], [40.9, 60028.0], [41.0, 60028.0], [41.1, 60028.0], [41.2, 60028.0], [41.3, 60028.0], [41.4, 60028.0], [41.5, 60028.0], [41.6, 60028.0], [41.7, 60028.0], [41.8, 60028.0], [41.9, 60028.0], [42.0, 60028.0], [42.1, 60028.0], [42.2, 60028.0], [42.3, 60028.0], [42.4, 60028.0], [42.5, 60028.0], [42.6, 60028.0], [42.7, 60028.0], [42.8, 60028.0], [42.9, 60028.0], [43.0, 60028.0], [43.1, 60028.0], [43.2, 60028.0], [43.3, 60028.0], [43.4, 60028.0], [43.5, 60028.0], [43.6, 60028.0], [43.7, 60028.0], [43.8, 60028.0], [43.9, 60028.0], [44.0, 60028.0], [44.1, 60028.0], [44.2, 60028.0], [44.3, 60028.0], [44.4, 60028.0], [44.5, 60028.0], [44.6, 60028.0], [44.7, 60028.0], [44.8, 60028.0], [44.9, 60028.0], [45.0, 60028.0], [45.1, 60028.0], [45.2, 60028.0], [45.3, 60028.0], [45.4, 60028.0], [45.5, 60028.0], [45.6, 60028.0], [45.7, 60028.0], [45.8, 60028.0], [45.9, 60028.0], [46.0, 60028.0], [46.1, 60028.0], [46.2, 60028.0], [46.3, 60028.0], [46.4, 60028.0], [46.5, 60028.0], [46.6, 60028.0], [46.7, 60028.0], [46.8, 60028.0], [46.9, 60028.0], [47.0, 60028.0], [47.1, 60028.0], [47.2, 60028.0], [47.3, 60028.0], [47.4, 60028.0], [47.5, 60028.0], [47.6, 60028.0], [47.7, 60028.0], [47.8, 60028.0], [47.9, 60028.0], [48.0, 60028.0], [48.1, 60028.0], [48.2, 60028.0], [48.3, 60028.0], [48.4, 60028.0], [48.5, 60028.0], [48.6, 60028.0], [48.7, 60028.0], [48.8, 60028.0], [48.9, 60028.0], [49.0, 60028.0], [49.1, 60028.0], [49.2, 60028.0], [49.3, 60028.0], [49.4, 60028.0], [49.5, 60028.0], [49.6, 60028.0], [49.7, 60028.0], [49.8, 60028.0], [49.9, 60028.0], [50.0, 60028.0], [50.1, 60028.0], [50.2, 60028.0], [50.3, 60028.0], [50.4, 60028.0], [50.5, 60028.0], [50.6, 60028.0], [50.7, 60028.0], [50.8, 60028.0], [50.9, 60028.0], [51.0, 60028.0], [51.1, 60028.0], [51.2, 60028.0], [51.3, 60028.0], [51.4, 60028.0], [51.5, 60028.0], [51.6, 60028.0], [51.7, 60028.0], [51.8, 60028.0], [51.9, 60028.0], [52.0, 60028.0], [52.1, 60028.0], [52.2, 60028.0], [52.3, 60028.0], [52.4, 60028.0], [52.5, 60028.0], [52.6, 60028.0], [52.7, 60028.0], [52.8, 60028.0], [52.9, 60028.0], [53.0, 60028.0], [53.1, 60028.0], [53.2, 60028.0], [53.3, 60028.0], [53.4, 60028.0], [53.5, 60028.0], [53.6, 60028.0], [53.7, 60028.0], [53.8, 60028.0], [53.9, 60028.0], [54.0, 60028.0], [54.1, 60028.0], [54.2, 60028.0], [54.3, 60028.0], [54.4, 60028.0], [54.5, 60028.0], [54.6, 60028.0], [54.7, 60028.0], [54.8, 60028.0], [54.9, 60028.0], [55.0, 60028.0], [55.1, 60028.0], [55.2, 60028.0], [55.3, 60028.0], [55.4, 60028.0], [55.5, 60028.0], [55.6, 60028.0], [55.7, 60028.0], [55.8, 60028.0], [55.9, 60028.0], [56.0, 60028.0], [56.1, 60028.0], [56.2, 60028.0], [56.3, 60028.0], [56.4, 60028.0], [56.5, 60028.0], [56.6, 60028.0], [56.7, 60028.0], [56.8, 60028.0], [56.9, 60028.0], [57.0, 60028.0], [57.1, 60028.0], [57.2, 60028.0], [57.3, 60028.0], [57.4, 60028.0], [57.5, 60028.0], [57.6, 60028.0], [57.7, 60028.0], [57.8, 60028.0], [57.9, 60028.0], [58.0, 60028.0], [58.1, 60028.0], [58.2, 60028.0], [58.3, 60028.0], [58.4, 60028.0], [58.5, 60028.0], [58.6, 60028.0], [58.7, 60028.0], [58.8, 60028.0], [58.9, 60028.0], [59.0, 60028.0], [59.1, 60028.0], [59.2, 60028.0], [59.3, 60028.0], [59.4, 60028.0], [59.5, 60028.0], [59.6, 60028.0], [59.7, 60028.0], [59.8, 60028.0], [59.9, 60028.0], [60.0, 60028.0], [60.1, 60028.0], [60.2, 60028.0], [60.3, 60028.0], [60.4, 60028.0], [60.5, 60028.0], [60.6, 60028.0], [60.7, 60028.0], [60.8, 60028.0], [60.9, 60028.0], [61.0, 60028.0], [61.1, 60028.0], [61.2, 60028.0], [61.3, 60028.0], [61.4, 60028.0], [61.5, 60028.0], [61.6, 60028.0], [61.7, 60028.0], [61.8, 60029.0], [61.9, 60029.0], [62.0, 60029.0], [62.1, 60029.0], [62.2, 60029.0], [62.3, 60029.0], [62.4, 60029.0], [62.5, 60029.0], [62.6, 60029.0], [62.7, 60029.0], [62.8, 60029.0], [62.9, 60029.0], [63.0, 60029.0], [63.1, 60029.0], [63.2, 60029.0], [63.3, 60029.0], [63.4, 60029.0], [63.5, 60029.0], [63.6, 60029.0], [63.7, 60029.0], [63.8, 60029.0], [63.9, 60029.0], [64.0, 60029.0], [64.1, 60029.0], [64.2, 60029.0], [64.3, 60029.0], [64.4, 60029.0], [64.5, 60029.0], [64.6, 60029.0], [64.7, 60029.0], [64.8, 60029.0], [64.9, 60029.0], [65.0, 60029.0], [65.1, 60029.0], [65.2, 60029.0], [65.3, 60029.0], [65.4, 60029.0], [65.5, 60029.0], [65.6, 60029.0], [65.7, 60029.0], [65.8, 60029.0], [65.9, 60029.0], [66.0, 60029.0], [66.1, 60029.0], [66.2, 60029.0], [66.3, 60029.0], [66.4, 60029.0], [66.5, 60029.0], [66.6, 60029.0], [66.7, 60029.0], [66.8, 60029.0], [66.9, 60029.0], [67.0, 60029.0], [67.1, 60029.0], [67.2, 60029.0], [67.3, 60029.0], [67.4, 60029.0], [67.5, 60029.0], [67.6, 60029.0], [67.7, 60029.0], [67.8, 60029.0], [67.9, 60029.0], [68.0, 60029.0], [68.1, 60029.0], [68.2, 60029.0], [68.3, 60029.0], [68.4, 60029.0], [68.5, 60029.0], [68.6, 60029.0], [68.7, 60029.0], [68.8, 60029.0], [68.9, 60029.0], [69.0, 60029.0], [69.1, 60029.0], [69.2, 60029.0], [69.3, 60029.0], [69.4, 60029.0], [69.5, 60029.0], [69.6, 60029.0], [69.7, 60029.0], [69.8, 60029.0], [69.9, 60029.0], [70.0, 60029.0], [70.1, 60029.0], [70.2, 60029.0], [70.3, 60029.0], [70.4, 60029.0], [70.5, 60029.0], [70.6, 60029.0], [70.7, 60029.0], [70.8, 60029.0], [70.9, 60029.0], [71.0, 60029.0], [71.1, 60029.0], [71.2, 60029.0], [71.3, 60029.0], [71.4, 60029.0], [71.5, 60029.0], [71.6, 60029.0], [71.7, 60029.0], [71.8, 60029.0], [71.9, 60029.0], [72.0, 60029.0], [72.1, 60029.0], [72.2, 60029.0], [72.3, 60029.0], [72.4, 60029.0], [72.5, 60029.0], [72.6, 60029.0], [72.7, 60029.0], [72.8, 60029.0], [72.9, 60029.0], [73.0, 60029.0], [73.1, 60029.0], [73.2, 60029.0], [73.3, 60029.0], [73.4, 60029.0], [73.5, 60029.0], [73.6, 60029.0], [73.7, 60029.0], [73.8, 60029.0], [73.9, 60029.0], [74.0, 60029.0], [74.1, 60029.0], [74.2, 60029.0], [74.3, 60029.0], [74.4, 60029.0], [74.5, 60029.0], [74.6, 60029.0], [74.7, 60029.0], [74.8, 60029.0], [74.9, 60029.0], [75.0, 60029.0], [75.1, 60029.0], [75.2, 60029.0], [75.3, 60029.0], [75.4, 60029.0], [75.5, 60029.0], [75.6, 60029.0], [75.7, 60029.0], [75.8, 60029.0], [75.9, 60030.0], [76.0, 60030.0], [76.1, 60030.0], [76.2, 60030.0], [76.3, 60030.0], [76.4, 60030.0], [76.5, 60030.0], [76.6, 60030.0], [76.7, 60030.0], [76.8, 60030.0], [76.9, 60030.0], [77.0, 60030.0], [77.1, 60030.0], [77.2, 60030.0], [77.3, 60030.0], [77.4, 60030.0], [77.5, 60030.0], [77.6, 60030.0], [77.7, 60030.0], [77.8, 60030.0], [77.9, 60030.0], [78.0, 60030.0], [78.1, 60030.0], [78.2, 60030.0], [78.3, 60030.0], [78.4, 60030.0], [78.5, 60030.0], [78.6, 60030.0], [78.7, 60030.0], [78.8, 60030.0], [78.9, 60030.0], [79.0, 60030.0], [79.1, 60030.0], [79.2, 60030.0], [79.3, 60030.0], [79.4, 60030.0], [79.5, 60030.0], [79.6, 60030.0], [79.7, 60030.0], [79.8, 60030.0], [79.9, 60030.0], [80.0, 60030.0], [80.1, 60030.0], [80.2, 60030.0], [80.3, 60030.0], [80.4, 60030.0], [80.5, 60030.0], [80.6, 60030.0], [80.7, 60030.0], [80.8, 60030.0], [80.9, 60030.0], [81.0, 60030.0], [81.1, 60030.0], [81.2, 60030.0], [81.3, 60030.0], [81.4, 60030.0], [81.5, 60030.0], [81.6, 60030.0], [81.7, 60030.0], [81.8, 60031.0], [81.9, 60031.0], [82.0, 60031.0], [82.1, 60031.0], [82.2, 60031.0], [82.3, 60031.0], [82.4, 60031.0], [82.5, 60031.0], [82.6, 60031.0], [82.7, 60031.0], [82.8, 60031.0], [82.9, 60031.0], [83.0, 60031.0], [83.1, 60031.0], [83.2, 60031.0], [83.3, 60031.0], [83.4, 60031.0], [83.5, 60031.0], [83.6, 60031.0], [83.7, 60031.0], [83.8, 60031.0], [83.9, 60031.0], [84.0, 60031.0], [84.1, 60031.0], [84.2, 60031.0], [84.3, 60031.0], [84.4, 60031.0], [84.5, 60031.0], [84.6, 60031.0], [84.7, 60031.0], [84.8, 60031.0], [84.9, 60031.0], [85.0, 60031.0], [85.1, 60031.0], [85.2, 60031.0], [85.3, 60031.0], [85.4, 60031.0], [85.5, 60031.0], [85.6, 60031.0], [85.7, 60031.0], [85.8, 60031.0], [85.9, 60032.0], [86.0, 60032.0], [86.1, 60032.0], [86.2, 60032.0], [86.3, 60032.0], [86.4, 60032.0], [86.5, 60033.0], [86.6, 60033.0], [86.7, 60033.0], [86.8, 60033.0], [86.9, 60033.0], [87.0, 60033.0], [87.1, 60033.0], [87.2, 60033.0], [87.3, 60033.0], [87.4, 60033.0], [87.5, 60033.0], [87.6, 60033.0], [87.7, 60033.0], [87.8, 60033.0], [87.9, 60033.0], [88.0, 60033.0], [88.1, 60033.0], [88.2, 60033.0], [88.3, 60036.0], [88.4, 60036.0], [88.5, 60036.0], [88.6, 60036.0], [88.7, 60036.0], [88.8, 60036.0], [88.9, 60036.0], [89.0, 60036.0], [89.1, 60036.0], [89.2, 60036.0], [89.3, 60036.0], [89.4, 60036.0], [89.5, 60037.0], [89.6, 60037.0], [89.7, 60037.0], [89.8, 60037.0], [89.9, 60037.0], [90.0, 60037.0], [90.1, 60037.0], [90.2, 60037.0], [90.3, 60037.0], [90.4, 60037.0], [90.5, 60037.0], [90.6, 60039.0], [90.7, 60039.0], [90.8, 60039.0], [90.9, 60039.0], [91.0, 60039.0], [91.1, 60039.0], [91.2, 60042.0], [91.3, 60042.0], [91.4, 60042.0], [91.5, 60042.0], [91.6, 60042.0], [91.7, 60042.0], [91.8, 60042.0], [91.9, 60042.0], [92.0, 60042.0], [92.1, 60042.0], [92.2, 60042.0], [92.3, 60042.0], [92.4, 60046.0], [92.5, 60046.0], [92.6, 60046.0], [92.7, 60046.0], [92.8, 60046.0], [92.9, 60046.0], [93.0, 60048.0], [93.1, 60048.0], [93.2, 60048.0], [93.3, 60048.0], [93.4, 60048.0], [93.5, 60048.0], [93.6, 60049.0], [93.7, 60049.0], [93.8, 60049.0], [93.9, 60049.0], [94.0, 60049.0], [94.1, 60049.0], [94.2, 60051.0], [94.3, 60051.0], [94.4, 60051.0], [94.5, 60051.0], [94.6, 60051.0], [94.7, 60051.0], [94.8, 60059.0], [94.9, 60059.0], [95.0, 60059.0], [95.1, 60059.0], [95.2, 60059.0], [95.3, 60066.0], [95.4, 60066.0], [95.5, 60066.0], [95.6, 60066.0], [95.7, 60066.0], [95.8, 60066.0], [95.9, 60072.0], [96.0, 60072.0], [96.1, 60072.0], [96.2, 60072.0], [96.3, 60072.0], [96.4, 60072.0], [96.5, 60072.0], [96.6, 60072.0], [96.7, 60072.0], [96.8, 60072.0], [96.9, 60072.0], [97.0, 60072.0], [97.1, 60075.0], [97.2, 60075.0], [97.3, 60075.0], [97.4, 60075.0], [97.5, 60075.0], [97.6, 60075.0], [97.7, 60081.0], [97.8, 60081.0], [97.9, 60081.0], [98.0, 60081.0], [98.1, 60081.0], [98.2, 60081.0], [98.3, 60087.0], [98.4, 60087.0], [98.5, 60087.0], [98.6, 60087.0], [98.7, 60087.0], [98.8, 60087.0], [98.9, 60090.0], [99.0, 60090.0], [99.1, 60090.0], [99.2, 60090.0], [99.3, 60090.0], [99.4, 60090.0], [99.5, 60091.0], [99.6, 60091.0], [99.7, 60091.0], [99.8, 60091.0], [99.9, 60091.0], [100.0, 60091.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 10093.0, "series": [{"data": [[0.0, 5701.0], [1100.0, 108.0], [300.0, 299.0], [600.0, 17.0], [100.0, 10093.0], [200.0, 304.0], [400.0, 52.0], [1000.0, 373.0], [500.0, 53.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[12500.0, 21.0], [12600.0, 15.0], [12400.0, 3.0], [12700.0, 23.0], [13300.0, 17.0], [12800.0, 15.0], [13000.0, 18.0], [13200.0, 11.0], [12900.0, 14.0], [13100.0, 17.0], [13400.0, 16.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[60000.0, 170.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 821.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 10775.0, "series": [{"data": [[0.0, 5744.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 10775.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 821.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 85.64705882352939, "minX": 1.61757504E12, "maxY": 153.91329411764687, "series": [{"data": [[1.61757504E12, 103.42941176470589]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61757504E12, 153.91329411764687]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.6175751E12, 85.64705882352939]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175751E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.0, "minX": 2.0, "maxY": 60091.0, "series": [{"data": [[175.0, 27.0], [174.0, 27.333333333333332], [173.0, 28.0], [172.0, 27.0], [171.0, 27.0], [183.0, 28.0], [182.0, 27.8], [181.0, 32.0], [180.0, 28.714285714285715], [179.0, 27.714285714285715], [178.0, 28.2], [177.0, 28.2], [176.0, 27.625], [191.0, 28.0], [190.0, 28.285714285714285], [189.0, 29.333333333333332], [188.0, 27.0], [187.0, 27.0], [186.0, 27.857142857142858], [185.0, 28.916666666666668], [184.0, 29.0], [199.0, 29.0], [198.0, 30.0], [197.0, 28.27272727272727], [196.0, 28.0], [195.0, 29.11111111111111], [194.0, 28.0], [193.0, 27.8], [192.0, 28.38461538461538], [207.0, 31.916666666666664], [206.0, 29.5], [205.0, 29.0], [204.0, 27.5], [203.0, 30.142857142857142], [202.0, 30.11111111111111], [201.0, 30.0], [200.0, 28.599999999999998], [215.0, 43.65384615384617], [214.0, 42.0], [213.0, 41.00000000000001], [212.0, 41.9], [211.0, 34.0], [210.0, 35.5], [209.0, 34.0], [208.0, 32.25], [223.0, 72.0], [222.0, 59.0], [221.0, 65.6], [220.0, 50.0], [219.0, 50.77777777777778], [218.0, 51.411764705882355], [217.0, 52.0], [216.0, 47.0], [231.0, 156.0], [230.0, 131.33333333333334], [229.0, 125.0], [228.0, 109.25], [227.0, 92.88235294117646], [226.0, 89.0], [225.0, 88.1], [224.0, 81.5], [239.0, 139.5], [238.0, 136.36363636363635], [237.0, 130.0], [236.0, 129.6428571428571], [234.0, 138.0], [233.0, 138.0], [232.0, 148.8], [247.0, 71.5], [246.0, 75.0], [245.0, 73.4], [244.0, 72.0], [243.0, 75.75], [242.0, 75.20000000000002], [241.0, 71.6], [240.0, 102.19230769230768], [255.0, 86.85714285714288], [253.0, 90.44444444444444], [252.0, 87.0], [251.0, 82.375], [250.0, 81.16], [249.0, 81.6], [248.0, 71.94117647058823], [270.0, 84.125], [271.0, 84.5], [269.0, 81.0], [268.0, 82.41176470588235], [267.0, 80.85000000000001], [266.0, 78.66666666666667], [265.0, 81.58064516129033], [264.0, 79.42857142857143], [263.0, 76.68181818181816], [257.0, 88.76190476190474], [256.0, 90.0], [259.0, 80.05555555555554], [258.0, 81.0], [262.0, 74.57142857142857], [261.0, 79.15384615384616], [260.0, 78.24489795918369], [286.0, 79.58695652173915], [287.0, 80.60396039603964], [285.0, 75.66666666666667], [284.0, 79.0], [283.0, 80.23728813559322], [282.0, 80.07142857142857], [281.0, 81.85714285714289], [280.0, 83.57142857142857], [279.0, 83.75675675675676], [273.0, 82.6857142857143], [272.0, 81.27272727272725], [275.0, 80.4], [274.0, 81.5], [278.0, 81.0], [277.0, 78.62500000000001], [276.0, 83.97183098591546], [302.0, 89.41666666666666], [303.0, 92.40540540540542], [301.0, 89.33333333333333], [300.0, 94.72131147540982], [299.0, 88.13333333333334], [298.0, 85.66666666666667], [297.0, 86.2], [296.0, 85.83333333333334], [295.0, 86.16666666666667], [289.0, 79.5], [288.0, 79.0], [291.0, 84.25], [290.0, 82.10000000000002], [294.0, 87.09036144578315], [293.0, 82.84337349397592], [292.0, 83.5151515151515], [318.0, 76.26666666666665], [319.0, 67.39999999999999], [317.0, 77.63125000000004], [316.0, 129.23949579831935], [315.0, 321.48275862068965], [314.0, 160.14814814814812], [313.0, 998.1250000000001], [312.0, 391.5952380952381], [311.0, 246.5454545454546], [305.0, 123.81818181818181], [304.0, 106.0], [307.0, 162.14529914529916], [306.0, 127.33333333333333], [309.0, 178.0], [308.0, 184.49999999999997], [334.0, 140.8474576271187], [335.0, 186.21428571428578], [333.0, 122.95294117647053], [332.0, 123.16818181818178], [331.0, 175.95121951219505], [330.0, 136.15415019762844], [329.0, 105.97142857142859], [328.0, 108.64285714285714], [327.0, 255.60256410256417], [321.0, 77.7142857142857], [320.0, 70.34444444444443], [323.0, 194.33333333333334], [322.0, 189.40000000000003], [326.0, 358.6842105263158], [325.0, 356.531914893617], [324.0, 183.2765957446808], [350.0, 41.83333333333333], [351.0, 28.0], [340.0, 166.9567834874227], [339.0, 138.0195852534564], [338.0, 115.26905829596411], [337.0, 120.01986754966893], [336.0, 132.33797909407664], [353.0, 28.0], [352.0, 28.0], [354.0, 28.0], [355.0, 28.571428571428573], [356.0, 27.5], [357.0, 27.0], [358.0, 27.0], [359.0, 27.666666666666668], [360.0, 29.0], [366.0, 27.8], [367.0, 27.333333333333332], [364.0, 27.57142857142857], [365.0, 28.142857142857142], [361.0, 28.666666666666668], [362.0, 28.25], [363.0, 27.0], [369.0, 28.75], [368.0, 27.5], [370.0, 27.666666666666668], [371.0, 27.5], [372.0, 38.38461538461539], [373.0, 29.625], [374.0, 28.2], [375.0, 27.5], [376.0, 27.666666666666668], [382.0, 29.555555555555557], [383.0, 30.999999999999996], [380.0, 29.2], [381.0, 28.0], [377.0, 29.916666666666664], [378.0, 30.88888888888889], [379.0, 30.0], [385.0, 29.857142857142858], [384.0, 30.875], [386.0, 29.125], [387.0, 29.099999999999998], [388.0, 29.7], [389.0, 30.09090909090909], [390.0, 29.77777777777778], [391.0, 28.428571428571427], [392.0, 28.700000000000003], [398.0, 33.0], [399.0, 33.38461538461539], [396.0, 32.25], [397.0, 31.250000000000004], [393.0, 30.0], [394.0, 30.636363636363637], [395.0, 31.857142857142858], [401.0, 33.7], [400.0, 33.0], [402.0, 34.5], [403.0, 37.166666666666664], [404.0, 38.5], [405.0, 42.25], [406.0, 43.66666666666667], [407.0, 46.6], [408.0, 49.400000000000006], [414.0, 59.2], [415.0, 61.142857142857146], [412.0, 55.875], [413.0, 58.25], [409.0, 49.625], [410.0, 52.375], [411.0, 54.0], [417.0, 58.53846153846154], [416.0, 61.5], [418.0, 57.36363636363637], [419.0, 57.57142857142857], [420.0, 59.2], [421.0, 60.4], [422.0, 61.0], [423.0, 62.0], [424.0, 57.388888888888886], [430.0, 57.307692307692314], [431.0, 55.57142857142857], [428.0, 59.0], [429.0, 60.8], [425.0, 51.18181818181818], [426.0, 53.0], [427.0, 56.0], [433.0, 56.1], [432.0, 55.0], [434.0, 59.214285714285715], [435.0, 61.22222222222222], [436.0, 61.666666666666664], [437.0, 60.36363636363637], [438.0, 60.75], [439.0, 59.41666666666667], [440.0, 60.0], [446.0, 61.833333333333336], [447.0, 60.57142857142858], [444.0, 62.1], [445.0, 63.454545454545446], [441.0, 62.0], [442.0, 62.333333333333336], [443.0, 61.72727272727273], [449.0, 62.3], [448.0, 63.33333333333333], [450.0, 61.54545454545454], [451.0, 60.61538461538461], [452.0, 60.5], [453.0, 59.99999999999999], [454.0, 64.625], [455.0, 64.76923076923079], [456.0, 64.27272727272727], [462.0, 90.0], [457.0, 63.4], [458.0, 63.25], [464.0, 102.0], [466.0, 120.0], [469.0, 123.0], [474.0, 152.5], [479.0, 183.0], [486.0, 233.66666666666666], [495.0, 38.0], [494.0, 41.666666666666664], [493.0, 35.6], [504.0, 336.0], [509.0, 223.0], [510.0, 148.79885057471324], [497.0, 28.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[387.902117647059, 139.45747058823463]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[381.0, 12871.0], [398.0, 12717.0], [399.0, 12783.0], [396.0, 13411.0], [393.0, 13020.0], [391.0, 13437.0], [390.0, 12934.0], [389.0, 12917.333333333334], [385.0, 13260.0], [384.0, 13036.25], [402.0, 13186.0], [414.0, 12970.0], [415.0, 12915.5], [412.0, 12936.8], [410.0, 12771.0], [408.0, 12897.0], [407.0, 12721.0], [405.0, 13056.0], [404.0, 13350.0], [401.0, 12931.0], [400.0, 12976.0], [426.0, 13000.25], [429.0, 12764.5], [427.0, 12849.333333333334], [423.0, 12992.0], [422.0, 13391.0], [421.0, 13095.333333333334], [420.0, 12972.4], [418.0, 13105.75], [417.0, 13163.5], [446.0, 12802.0], [447.0, 13355.0], [445.0, 12806.0], [444.0, 12972.0], [442.0, 12969.0], [441.0, 12888.5], [443.0, 12667.0], [439.0, 13060.5], [435.0, 13337.0], [434.0, 13358.666666666666], [432.0, 13040.0], [433.0, 13162.0], [437.0, 13036.25], [462.0, 12679.0], [463.0, 13104.0], [460.0, 12995.5], [459.0, 12724.0], [457.0, 12882.0], [456.0, 12558.0], [453.0, 12641.0], [452.0, 13027.666666666668], [451.0, 13378.0], [450.0, 13203.0], [448.0, 12894.0], [478.0, 12633.0], [477.0, 13062.0], [476.0, 13413.0], [475.0, 12549.0], [471.0, 12934.0], [467.0, 12711.0], [465.0, 13179.333333333334], [493.0, 12735.666666666666], [490.0, 12688.0], [489.0, 13316.0], [488.0, 12785.333333333334], [487.0, 12861.666666666666], [486.0, 12700.0], [484.0, 13011.333333333334], [481.0, 13031.0], [510.0, 12997.5], [497.0, 12912.666666666666]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[443.41764705882366, 12964.835294117653]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[2.0, 60034.0], [5.0, 60033.0], [6.0, 60026.0], [7.0, 60027.0], [8.0, 60027.0], [9.0, 60028.0], [10.0, 60031.0], [11.0, 60030.0], [12.0, 60029.0], [13.0, 60028.0], [14.0, 60030.0], [15.0, 60027.0], [16.0, 60029.0], [17.0, 60027.0], [18.0, 60028.0], [20.0, 60029.5], [21.0, 60026.0], [22.0, 60026.0], [23.0, 60028.0], [24.0, 60027.0], [25.0, 60028.0], [26.0, 60027.0], [27.0, 60028.0], [28.0, 60026.0], [29.0, 60027.0], [30.0, 60028.0], [31.0, 60026.0], [33.0, 60027.0], [32.0, 60028.0], [35.0, 60027.0], [34.0, 60029.0], [37.0, 60028.0], [36.0, 60028.0], [39.0, 60026.0], [38.0, 60029.0], [41.0, 60029.0], [40.0, 60026.0], [43.0, 60028.0], [42.0, 60027.0], [45.0, 60027.0], [44.0, 60027.0], [47.0, 60026.0], [46.0, 60027.0], [49.0, 60026.0], [48.0, 60028.0], [51.0, 60026.0], [50.0, 60026.0], [53.0, 60027.0], [52.0, 60028.0], [55.0, 60029.0], [54.0, 60026.0], [57.0, 60030.0], [56.0, 60027.0], [59.0, 60028.0], [58.0, 60027.0], [61.0, 60029.0], [60.0, 60028.0], [63.0, 60027.0], [62.0, 60027.0], [67.0, 60027.0], [66.0, 60027.0], [65.0, 60027.0], [64.0, 60027.0], [71.0, 60027.0], [70.0, 60027.0], [69.0, 60031.0], [68.0, 60029.0], [75.0, 60028.0], [74.0, 60030.0], [73.0, 60029.0], [72.0, 60029.0], [79.0, 60029.0], [78.0, 60028.0], [77.0, 60027.0], [76.0, 60028.0], [83.0, 60028.0], [82.0, 60029.0], [81.0, 60028.0], [80.0, 60029.0], [87.0, 60028.0], [86.0, 60027.0], [85.0, 60028.0], [84.0, 60033.0], [91.0, 60028.0], [90.0, 60029.0], [89.0, 60028.0], [88.0, 60028.0], [95.0, 60028.0], [94.0, 60028.0], [93.0, 60028.0], [92.0, 60028.0], [99.0, 60029.0], [98.0, 60028.0], [97.0, 60031.0], [96.0, 60029.0], [103.0, 60030.0], [102.0, 60029.0], [101.0, 60029.0], [100.0, 60027.0], [107.0, 60028.0], [106.0, 60027.0], [105.0, 60028.0], [104.0, 60028.0], [111.0, 60028.0], [110.0, 60028.0], [109.0, 60029.0], [108.0, 60031.0], [115.0, 60028.0], [114.0, 60028.0], [113.0, 60028.0], [112.0, 60028.0], [119.0, 60027.0], [118.0, 60026.0], [117.0, 60031.0], [116.0, 60028.0], [123.0, 60028.0], [122.0, 60028.0], [121.0, 60028.0], [120.0, 60027.0], [127.0, 60029.0], [126.0, 60031.0], [125.0, 60029.0], [124.0, 60027.0], [135.0, 60029.0], [134.0, 60052.0], [133.0, 60081.0], [129.0, 60029.0], [128.0, 60028.0], [143.0, 60028.0], [142.0, 60028.0], [141.0, 60084.0], [139.0, 60028.0], [138.0, 60027.0], [137.0, 60027.0], [136.0, 60091.0], [151.0, 60028.0], [150.0, 60030.0], [149.0, 60037.0], [148.0, 60028.0], [147.0, 60028.0], [146.0, 60027.0], [145.0, 60028.0], [144.0, 60075.0], [159.0, 60027.0], [158.0, 60027.0], [157.0, 60030.0], [156.0, 60042.0], [154.0, 60037.0], [152.0, 60028.0], [167.0, 60045.0], [165.0, 60059.0], [162.0, 60029.0], [161.0, 60030.0], [160.0, 60028.0], [170.0, 60036.0], [169.0, 60039.5]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[85.64705882352939, 60031.62352941179]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 510.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61757504E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757504E12, 0.0], [1.6175751E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61757504E12, 0.0], [1.6175751E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175751E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 139.45747058823463, "minX": 1.61757504E12, "maxY": 60031.62352941179, "series": [{"data": [[1.61757504E12, 139.45747058823463]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757504E12, 12964.835294117653]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175751E12, 60031.62352941179]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175751E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757504E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757504E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757504E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175751E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175751E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757504E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757504E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757504E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.6175751E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175751E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61757504E12, "maxY": 60091.0, "series": [{"data": [[1.61757504E12, 13493.0], [1.6175751E12, 60091.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61757504E12, 179.0], [1.6175751E12, 60037.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61757504E12, 1186.5800000000017], [1.6175751E12, 60090.29]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61757504E12, 377.4499999999989], [1.6175751E12, 60062.15]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61757504E12, 26.0], [1.6175751E12, 60026.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61757504E12, 112.0], [1.6175751E12, 60028.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175751E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 34.0, "minX": 46.0, "maxY": 60028.0, "series": [{"data": [[642.0, 119.5], [689.0, 34.0], [702.0, 72.0], [761.0, 91.0], [46.0, 60028.0], [804.0, 53.0], [821.0, 78.0], [957.0, 116.0], [1088.0, 78.0], [1195.0, 116.0], [1181.0, 120.0], [1164.0, 124.0], [1385.0, 117.0], [1395.0, 83.0], [1463.0, 116.0], [1411.0, 109.0], [1512.0, 111.0], [124.0, 60028.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1512.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 46.0, "maxY": 4.9E-324, "series": [{"data": [[642.0, 0.0], [689.0, 0.0], [702.0, 0.0], [761.0, 0.0], [46.0, 0.0], [804.0, 0.0], [821.0, 0.0], [957.0, 0.0], [1088.0, 0.0], [1195.0, 0.0], [1181.0, 0.0], [1164.0, 0.0], [1385.0, 0.0], [1395.0, 0.0], [1463.0, 0.0], [1411.0, 0.0], [1512.0, 0.0], [124.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1512.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 289.0, "minX": 1.61757504E12, "maxY": 289.0, "series": [{"data": [[1.61757504E12, 289.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757504E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.8333333333333335, "minX": 1.61757504E12, "maxY": 286.1666666666667, "series": [{"data": [[1.61757504E12, 286.1666666666667], [1.6175751E12, 2.8333333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6175751E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.8333333333333335, "minX": 1.61757504E12, "maxY": 283.3333333333333, "series": [{"data": [[1.6175751E12, 2.8333333333333335]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.61757504E12, 2.8333333333333335]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61757504E12, 283.3333333333333]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175751E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.8333333333333335, "minX": 1.61757504E12, "maxY": 286.1666666666667, "series": [{"data": [[1.61757504E12, 286.1666666666667], [1.6175751E12, 2.8333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6175751E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

