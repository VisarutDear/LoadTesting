/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 90078.0, "series": [{"data": [[0.0, 26.0], [0.1, 26.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 27.0], [1.4, 27.0], [1.5, 27.0], [1.6, 27.0], [1.7, 27.0], [1.8, 27.0], [1.9, 27.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 28.0], [3.6, 28.0], [3.7, 28.0], [3.8, 28.0], [3.9, 28.0], [4.0, 28.0], [4.1, 28.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 29.0], [4.6, 29.0], [4.7, 29.0], [4.8, 29.0], [4.9, 29.0], [5.0, 29.0], [5.1, 29.0], [5.2, 29.0], [5.3, 29.0], [5.4, 30.0], [5.5, 30.0], [5.6, 30.0], [5.7, 30.0], [5.8, 30.0], [5.9, 30.0], [6.0, 30.0], [6.1, 30.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 31.0], [6.6, 31.0], [6.7, 31.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 31.0], [7.2, 31.0], [7.3, 31.0], [7.4, 31.0], [7.5, 32.0], [7.6, 32.0], [7.7, 32.0], [7.8, 32.0], [7.9, 32.0], [8.0, 32.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 32.0], [8.5, 33.0], [8.6, 33.0], [8.7, 33.0], [8.8, 33.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 33.0], [9.5, 33.0], [9.6, 33.0], [9.7, 34.0], [9.8, 34.0], [9.9, 34.0], [10.0, 34.0], [10.1, 34.0], [10.2, 34.0], [10.3, 34.0], [10.4, 34.0], [10.5, 34.0], [10.6, 34.0], [10.7, 34.0], [10.8, 34.0], [10.9, 34.0], [11.0, 34.0], [11.1, 34.0], [11.2, 34.0], [11.3, 34.0], [11.4, 35.0], [11.5, 35.0], [11.6, 35.0], [11.7, 35.0], [11.8, 35.0], [11.9, 35.0], [12.0, 35.0], [12.1, 35.0], [12.2, 35.0], [12.3, 35.0], [12.4, 35.0], [12.5, 35.0], [12.6, 35.0], [12.7, 36.0], [12.8, 36.0], [12.9, 36.0], [13.0, 36.0], [13.1, 36.0], [13.2, 36.0], [13.3, 37.0], [13.4, 37.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 38.0], [14.1, 38.0], [14.2, 38.0], [14.3, 38.0], [14.4, 38.0], [14.5, 38.0], [14.6, 38.0], [14.7, 39.0], [14.8, 39.0], [14.9, 39.0], [15.0, 40.0], [15.1, 40.0], [15.2, 40.0], [15.3, 40.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 43.0], [16.5, 43.0], [16.6, 43.0], [16.7, 44.0], [16.8, 44.0], [16.9, 44.0], [17.0, 45.0], [17.1, 45.0], [17.2, 45.0], [17.3, 45.0], [17.4, 45.0], [17.5, 46.0], [17.6, 46.0], [17.7, 46.0], [17.8, 47.0], [17.9, 47.0], [18.0, 47.0], [18.1, 47.0], [18.2, 47.0], [18.3, 48.0], [18.4, 48.0], [18.5, 48.0], [18.6, 48.0], [18.7, 48.0], [18.8, 49.0], [18.9, 49.0], [19.0, 49.0], [19.1, 50.0], [19.2, 50.0], [19.3, 50.0], [19.4, 50.0], [19.5, 51.0], [19.6, 51.0], [19.7, 51.0], [19.8, 51.0], [19.9, 52.0], [20.0, 52.0], [20.1, 52.0], [20.2, 53.0], [20.3, 53.0], [20.4, 53.0], [20.5, 53.0], [20.6, 53.0], [20.7, 54.0], [20.8, 54.0], [20.9, 54.0], [21.0, 54.0], [21.1, 55.0], [21.2, 55.0], [21.3, 56.0], [21.4, 56.0], [21.5, 56.0], [21.6, 56.0], [21.7, 56.0], [21.8, 57.0], [21.9, 57.0], [22.0, 57.0], [22.1, 57.0], [22.2, 58.0], [22.3, 58.0], [22.4, 58.0], [22.5, 58.0], [22.6, 59.0], [22.7, 59.0], [22.8, 59.0], [22.9, 60.0], [23.0, 60.0], [23.1, 60.0], [23.2, 60.0], [23.3, 61.0], [23.4, 61.0], [23.5, 61.0], [23.6, 62.0], [23.7, 62.0], [23.8, 63.0], [23.9, 63.0], [24.0, 63.0], [24.1, 64.0], [24.2, 64.0], [24.3, 64.0], [24.4, 65.0], [24.5, 65.0], [24.6, 66.0], [24.7, 66.0], [24.8, 66.0], [24.9, 67.0], [25.0, 67.0], [25.1, 67.0], [25.2, 67.0], [25.3, 68.0], [25.4, 68.0], [25.5, 68.0], [25.6, 68.0], [25.7, 69.0], [25.8, 69.0], [25.9, 69.0], [26.0, 69.0], [26.1, 70.0], [26.2, 70.0], [26.3, 70.0], [26.4, 71.0], [26.5, 71.0], [26.6, 71.0], [26.7, 71.0], [26.8, 71.0], [26.9, 72.0], [27.0, 72.0], [27.1, 72.0], [27.2, 72.0], [27.3, 73.0], [27.4, 73.0], [27.5, 73.0], [27.6, 73.0], [27.7, 74.0], [27.8, 74.0], [27.9, 74.0], [28.0, 74.0], [28.1, 74.0], [28.2, 75.0], [28.3, 75.0], [28.4, 75.0], [28.5, 75.0], [28.6, 76.0], [28.7, 76.0], [28.8, 76.0], [28.9, 76.0], [29.0, 76.0], [29.1, 77.0], [29.2, 77.0], [29.3, 77.0], [29.4, 77.0], [29.5, 77.0], [29.6, 77.0], [29.7, 77.0], [29.8, 77.0], [29.9, 77.0], [30.0, 78.0], [30.1, 78.0], [30.2, 78.0], [30.3, 78.0], [30.4, 78.0], [30.5, 78.0], [30.6, 78.0], [30.7, 79.0], [30.8, 79.0], [30.9, 79.0], [31.0, 79.0], [31.1, 79.0], [31.2, 79.0], [31.3, 79.0], [31.4, 80.0], [31.5, 80.0], [31.6, 80.0], [31.7, 80.0], [31.8, 80.0], [31.9, 80.0], [32.0, 80.0], [32.1, 80.0], [32.2, 80.0], [32.3, 80.0], [32.4, 80.0], [32.5, 81.0], [32.6, 81.0], [32.7, 81.0], [32.8, 81.0], [32.9, 81.0], [33.0, 81.0], [33.1, 81.0], [33.2, 81.0], [33.3, 81.0], [33.4, 81.0], [33.5, 82.0], [33.6, 82.0], [33.7, 82.0], [33.8, 82.0], [33.9, 82.0], [34.0, 82.0], [34.1, 82.0], [34.2, 83.0], [34.3, 83.0], [34.4, 83.0], [34.5, 83.0], [34.6, 83.0], [34.7, 83.0], [34.8, 83.0], [34.9, 84.0], [35.0, 84.0], [35.1, 84.0], [35.2, 84.0], [35.3, 84.0], [35.4, 84.0], [35.5, 84.0], [35.6, 84.0], [35.7, 85.0], [35.8, 85.0], [35.9, 85.0], [36.0, 85.0], [36.1, 85.0], [36.2, 85.0], [36.3, 85.0], [36.4, 86.0], [36.5, 86.0], [36.6, 86.0], [36.7, 86.0], [36.8, 86.0], [36.9, 86.0], [37.0, 87.0], [37.1, 87.0], [37.2, 87.0], [37.3, 87.0], [37.4, 87.0], [37.5, 88.0], [37.6, 88.0], [37.7, 88.0], [37.8, 88.0], [37.9, 88.0], [38.0, 89.0], [38.1, 89.0], [38.2, 89.0], [38.3, 89.0], [38.4, 89.0], [38.5, 90.0], [38.6, 90.0], [38.7, 90.0], [38.8, 90.0], [38.9, 90.0], [39.0, 90.0], [39.1, 90.0], [39.2, 91.0], [39.3, 91.0], [39.4, 91.0], [39.5, 91.0], [39.6, 91.0], [39.7, 91.0], [39.8, 92.0], [39.9, 92.0], [40.0, 92.0], [40.1, 92.0], [40.2, 92.0], [40.3, 92.0], [40.4, 92.0], [40.5, 92.0], [40.6, 92.0], [40.7, 93.0], [40.8, 93.0], [40.9, 93.0], [41.0, 93.0], [41.1, 93.0], [41.2, 94.0], [41.3, 94.0], [41.4, 94.0], [41.5, 94.0], [41.6, 94.0], [41.7, 94.0], [41.8, 95.0], [41.9, 95.0], [42.0, 95.0], [42.1, 95.0], [42.2, 95.0], [42.3, 95.0], [42.4, 95.0], [42.5, 95.0], [42.6, 95.0], [42.7, 96.0], [42.8, 96.0], [42.9, 96.0], [43.0, 96.0], [43.1, 96.0], [43.2, 96.0], [43.3, 96.0], [43.4, 96.0], [43.5, 97.0], [43.6, 97.0], [43.7, 97.0], [43.8, 97.0], [43.9, 97.0], [44.0, 97.0], [44.1, 97.0], [44.2, 98.0], [44.3, 98.0], [44.4, 98.0], [44.5, 98.0], [44.6, 98.0], [44.7, 98.0], [44.8, 98.0], [44.9, 98.0], [45.0, 99.0], [45.1, 99.0], [45.2, 99.0], [45.3, 99.0], [45.4, 99.0], [45.5, 99.0], [45.6, 99.0], [45.7, 100.0], [45.8, 100.0], [45.9, 100.0], [46.0, 100.0], [46.1, 100.0], [46.2, 100.0], [46.3, 100.0], [46.4, 100.0], [46.5, 100.0], [46.6, 101.0], [46.7, 101.0], [46.8, 101.0], [46.9, 101.0], [47.0, 101.0], [47.1, 101.0], [47.2, 102.0], [47.3, 102.0], [47.4, 102.0], [47.5, 102.0], [47.6, 102.0], [47.7, 102.0], [47.8, 102.0], [47.9, 102.0], [48.0, 102.0], [48.1, 103.0], [48.2, 103.0], [48.3, 103.0], [48.4, 103.0], [48.5, 103.0], [48.6, 103.0], [48.7, 103.0], [48.8, 104.0], [48.9, 104.0], [49.0, 104.0], [49.1, 104.0], [49.2, 104.0], [49.3, 104.0], [49.4, 105.0], [49.5, 105.0], [49.6, 105.0], [49.7, 105.0], [49.8, 105.0], [49.9, 105.0], [50.0, 106.0], [50.1, 106.0], [50.2, 106.0], [50.3, 106.0], [50.4, 106.0], [50.5, 106.0], [50.6, 107.0], [50.7, 107.0], [50.8, 107.0], [50.9, 107.0], [51.0, 107.0], [51.1, 107.0], [51.2, 107.0], [51.3, 107.0], [51.4, 108.0], [51.5, 108.0], [51.6, 108.0], [51.7, 108.0], [51.8, 108.0], [51.9, 109.0], [52.0, 109.0], [52.1, 109.0], [52.2, 109.0], [52.3, 109.0], [52.4, 110.0], [52.5, 110.0], [52.6, 110.0], [52.7, 110.0], [52.8, 110.0], [52.9, 111.0], [53.0, 111.0], [53.1, 111.0], [53.2, 111.0], [53.3, 111.0], [53.4, 111.0], [53.5, 111.0], [53.6, 112.0], [53.7, 112.0], [53.8, 112.0], [53.9, 112.0], [54.0, 113.0], [54.1, 113.0], [54.2, 113.0], [54.3, 113.0], [54.4, 114.0], [54.5, 114.0], [54.6, 114.0], [54.7, 114.0], [54.8, 114.0], [54.9, 114.0], [55.0, 114.0], [55.1, 115.0], [55.2, 115.0], [55.3, 115.0], [55.4, 115.0], [55.5, 115.0], [55.6, 116.0], [55.7, 116.0], [55.8, 116.0], [55.9, 116.0], [56.0, 116.0], [56.1, 117.0], [56.2, 117.0], [56.3, 117.0], [56.4, 117.0], [56.5, 118.0], [56.6, 118.0], [56.7, 118.0], [56.8, 118.0], [56.9, 118.0], [57.0, 118.0], [57.1, 119.0], [57.2, 119.0], [57.3, 119.0], [57.4, 119.0], [57.5, 119.0], [57.6, 120.0], [57.7, 120.0], [57.8, 120.0], [57.9, 120.0], [58.0, 120.0], [58.1, 120.0], [58.2, 121.0], [58.3, 121.0], [58.4, 121.0], [58.5, 121.0], [58.6, 121.0], [58.7, 121.0], [58.8, 121.0], [58.9, 122.0], [59.0, 122.0], [59.1, 122.0], [59.2, 122.0], [59.3, 122.0], [59.4, 122.0], [59.5, 122.0], [59.6, 122.0], [59.7, 122.0], [59.8, 122.0], [59.9, 123.0], [60.0, 123.0], [60.1, 123.0], [60.2, 123.0], [60.3, 123.0], [60.4, 123.0], [60.5, 123.0], [60.6, 123.0], [60.7, 123.0], [60.8, 123.0], [60.9, 123.0], [61.0, 123.0], [61.1, 123.0], [61.2, 123.0], [61.3, 124.0], [61.4, 124.0], [61.5, 124.0], [61.6, 124.0], [61.7, 124.0], [61.8, 124.0], [61.9, 124.0], [62.0, 124.0], [62.1, 124.0], [62.2, 124.0], [62.3, 124.0], [62.4, 124.0], [62.5, 124.0], [62.6, 125.0], [62.7, 125.0], [62.8, 125.0], [62.9, 125.0], [63.0, 125.0], [63.1, 125.0], [63.2, 125.0], [63.3, 125.0], [63.4, 125.0], [63.5, 126.0], [63.6, 126.0], [63.7, 126.0], [63.8, 126.0], [63.9, 126.0], [64.0, 126.0], [64.1, 126.0], [64.2, 126.0], [64.3, 126.0], [64.4, 127.0], [64.5, 127.0], [64.6, 127.0], [64.7, 127.0], [64.8, 127.0], [64.9, 127.0], [65.0, 127.0], [65.1, 127.0], [65.2, 127.0], [65.3, 127.0], [65.4, 127.0], [65.5, 128.0], [65.6, 128.0], [65.7, 128.0], [65.8, 128.0], [65.9, 128.0], [66.0, 128.0], [66.1, 128.0], [66.2, 128.0], [66.3, 128.0], [66.4, 128.0], [66.5, 129.0], [66.6, 129.0], [66.7, 129.0], [66.8, 129.0], [66.9, 129.0], [67.0, 129.0], [67.1, 129.0], [67.2, 129.0], [67.3, 129.0], [67.4, 130.0], [67.5, 130.0], [67.6, 130.0], [67.7, 130.0], [67.8, 130.0], [67.9, 130.0], [68.0, 130.0], [68.1, 130.0], [68.2, 130.0], [68.3, 130.0], [68.4, 131.0], [68.5, 131.0], [68.6, 131.0], [68.7, 131.0], [68.8, 131.0], [68.9, 131.0], [69.0, 131.0], [69.1, 131.0], [69.2, 131.0], [69.3, 131.0], [69.4, 131.0], [69.5, 131.0], [69.6, 131.0], [69.7, 132.0], [69.8, 132.0], [69.9, 132.0], [70.0, 132.0], [70.1, 132.0], [70.2, 132.0], [70.3, 132.0], [70.4, 132.0], [70.5, 132.0], [70.6, 132.0], [70.7, 132.0], [70.8, 133.0], [70.9, 133.0], [71.0, 133.0], [71.1, 133.0], [71.2, 133.0], [71.3, 133.0], [71.4, 133.0], [71.5, 133.0], [71.6, 133.0], [71.7, 133.0], [71.8, 133.0], [71.9, 134.0], [72.0, 134.0], [72.1, 134.0], [72.2, 134.0], [72.3, 134.0], [72.4, 134.0], [72.5, 134.0], [72.6, 134.0], [72.7, 134.0], [72.8, 134.0], [72.9, 134.0], [73.0, 134.0], [73.1, 134.0], [73.2, 135.0], [73.3, 135.0], [73.4, 135.0], [73.5, 135.0], [73.6, 135.0], [73.7, 135.0], [73.8, 135.0], [73.9, 135.0], [74.0, 135.0], [74.1, 135.0], [74.2, 135.0], [74.3, 135.0], [74.4, 136.0], [74.5, 136.0], [74.6, 136.0], [74.7, 136.0], [74.8, 136.0], [74.9, 136.0], [75.0, 136.0], [75.1, 136.0], [75.2, 136.0], [75.3, 136.0], [75.4, 136.0], [75.5, 136.0], [75.6, 136.0], [75.7, 137.0], [75.8, 137.0], [75.9, 137.0], [76.0, 137.0], [76.1, 137.0], [76.2, 137.0], [76.3, 137.0], [76.4, 137.0], [76.5, 138.0], [76.6, 138.0], [76.7, 138.0], [76.8, 138.0], [76.9, 138.0], [77.0, 138.0], [77.1, 138.0], [77.2, 138.0], [77.3, 139.0], [77.4, 139.0], [77.5, 139.0], [77.6, 139.0], [77.7, 139.0], [77.8, 139.0], [77.9, 139.0], [78.0, 140.0], [78.1, 140.0], [78.2, 140.0], [78.3, 140.0], [78.4, 140.0], [78.5, 140.0], [78.6, 140.0], [78.7, 140.0], [78.8, 140.0], [78.9, 140.0], [79.0, 141.0], [79.1, 141.0], [79.2, 141.0], [79.3, 141.0], [79.4, 141.0], [79.5, 141.0], [79.6, 141.0], [79.7, 141.0], [79.8, 142.0], [79.9, 142.0], [80.0, 142.0], [80.1, 142.0], [80.2, 142.0], [80.3, 142.0], [80.4, 143.0], [80.5, 143.0], [80.6, 143.0], [80.7, 143.0], [80.8, 143.0], [80.9, 143.0], [81.0, 143.0], [81.1, 143.0], [81.2, 143.0], [81.3, 144.0], [81.4, 144.0], [81.5, 144.0], [81.6, 144.0], [81.7, 144.0], [81.8, 144.0], [81.9, 144.0], [82.0, 144.0], [82.1, 145.0], [82.2, 145.0], [82.3, 145.0], [82.4, 145.0], [82.5, 145.0], [82.6, 146.0], [82.7, 146.0], [82.8, 146.0], [82.9, 146.0], [83.0, 146.0], [83.1, 147.0], [83.2, 147.0], [83.3, 147.0], [83.4, 148.0], [83.5, 148.0], [83.6, 149.0], [83.7, 149.0], [83.8, 150.0], [83.9, 151.0], [84.0, 151.0], [84.1, 152.0], [84.2, 153.0], [84.3, 153.0], [84.4, 154.0], [84.5, 155.0], [84.6, 155.0], [84.7, 156.0], [84.8, 156.0], [84.9, 156.0], [85.0, 157.0], [85.1, 157.0], [85.2, 158.0], [85.3, 158.0], [85.4, 159.0], [85.5, 159.0], [85.6, 159.0], [85.7, 160.0], [85.8, 161.0], [85.9, 162.0], [86.0, 162.0], [86.1, 163.0], [86.2, 163.0], [86.3, 164.0], [86.4, 165.0], [86.5, 166.0], [86.6, 168.0], [86.7, 169.0], [86.8, 171.0], [86.9, 173.0], [87.0, 174.0], [87.1, 175.0], [87.2, 176.0], [87.3, 178.0], [87.4, 179.0], [87.5, 180.0], [87.6, 181.0], [87.7, 183.0], [87.8, 184.0], [87.9, 184.0], [88.0, 186.0], [88.1, 187.0], [88.2, 188.0], [88.3, 191.0], [88.4, 192.0], [88.5, 193.0], [88.6, 194.0], [88.7, 195.0], [88.8, 196.0], [88.9, 198.0], [89.0, 199.0], [89.1, 201.0], [89.2, 202.0], [89.3, 203.0], [89.4, 205.0], [89.5, 205.0], [89.6, 206.0], [89.7, 208.0], [89.8, 215.0], [89.9, 223.0], [90.0, 225.0], [90.1, 229.0], [90.2, 232.0], [90.3, 239.0], [90.4, 244.0], [90.5, 256.0], [90.6, 261.0], [90.7, 276.0], [90.8, 287.0], [90.9, 291.0], [91.0, 298.0], [91.1, 306.0], [91.2, 312.0], [91.3, 320.0], [91.4, 330.0], [91.5, 346.0], [91.6, 350.0], [91.7, 352.0], [91.8, 353.0], [91.9, 354.0], [92.0, 361.0], [92.1, 364.0], [92.2, 370.0], [92.3, 378.0], [92.4, 398.0], [92.5, 412.0], [92.6, 413.0], [92.7, 417.0], [92.8, 418.0], [92.9, 420.0], [93.0, 435.0], [93.1, 465.0], [93.2, 523.0], [93.3, 1031.0], [93.4, 1035.0], [93.5, 1039.0], [93.6, 1041.0], [93.7, 1044.0], [93.8, 1046.0], [93.9, 1048.0], [94.0, 1049.0], [94.1, 1052.0], [94.2, 1053.0], [94.3, 1056.0], [94.4, 1058.0], [94.5, 1064.0], [94.6, 1071.0], [94.7, 1077.0], [94.8, 1081.0], [94.9, 1083.0], [95.0, 1086.0], [95.1, 1093.0], [95.2, 1100.0], [95.3, 1104.0], [95.4, 1110.0], [95.5, 1116.0], [95.6, 1119.0], [95.7, 1123.0], [95.8, 1125.0], [95.9, 1154.0], [96.0, 1276.0], [96.1, 1359.0], [96.2, 2081.0], [96.3, 3035.0], [96.4, 3041.0], [96.5, 3046.0], [96.6, 3052.0], [96.7, 3055.0], [96.8, 3058.0], [96.9, 3061.0], [97.0, 3063.0], [97.1, 3066.0], [97.2, 3068.0], [97.3, 3070.0], [97.4, 3072.0], [97.5, 3074.0], [97.6, 3076.0], [97.7, 3081.0], [97.8, 3089.0], [97.9, 3092.0], [98.0, 3094.0], [98.1, 3097.0], [98.2, 3099.0], [98.3, 3102.0], [98.4, 3104.0], [98.5, 3109.0], [98.6, 3308.0], [98.7, 3366.0], [98.8, 3372.0], [98.9, 3430.0], [99.0, 7045.0], [99.1, 7051.0], [99.2, 7057.0], [99.3, 7068.0], [99.4, 7077.0], [99.5, 7080.0], [99.6, 7086.0], [99.7, 7090.0], [99.8, 15059.0], [99.9, 15064.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 72836.0], [0.1, 72836.0], [0.2, 72836.0], [0.3, 72836.0], [0.4, 72836.0], [0.5, 72836.0], [0.6, 72836.0], [0.7, 72836.0], [0.8, 72836.0], [0.9, 72836.0], [1.0, 72840.0], [1.1, 72840.0], [1.2, 72840.0], [1.3, 72840.0], [1.4, 72840.0], [1.5, 72846.0], [1.6, 72846.0], [1.7, 72846.0], [1.8, 72846.0], [1.9, 72846.0], [2.0, 72857.0], [2.1, 72857.0], [2.2, 72857.0], [2.3, 72857.0], [2.4, 72857.0], [2.5, 72860.0], [2.6, 72860.0], [2.7, 72860.0], [2.8, 72860.0], [2.9, 72860.0], [3.0, 72862.0], [3.1, 72862.0], [3.2, 72862.0], [3.3, 72862.0], [3.4, 72862.0], [3.5, 72865.0], [3.6, 72865.0], [3.7, 72865.0], [3.8, 72865.0], [3.9, 72865.0], [4.0, 72871.0], [4.1, 72871.0], [4.2, 72871.0], [4.3, 72871.0], [4.4, 72871.0], [4.5, 72874.0], [4.6, 72874.0], [4.7, 72874.0], [4.8, 72874.0], [4.9, 72874.0], [5.0, 72876.0], [5.1, 72876.0], [5.2, 72876.0], [5.3, 72876.0], [5.4, 72876.0], [5.5, 72876.0], [5.6, 72876.0], [5.7, 72876.0], [5.8, 72876.0], [5.9, 72876.0], [6.0, 72876.0], [6.1, 72876.0], [6.2, 72876.0], [6.3, 72876.0], [6.4, 72876.0], [6.5, 72876.0], [6.6, 72876.0], [6.7, 72876.0], [6.8, 72876.0], [6.9, 72876.0], [7.0, 72877.0], [7.1, 72877.0], [7.2, 72877.0], [7.3, 72877.0], [7.4, 72877.0], [7.5, 72879.0], [7.6, 72879.0], [7.7, 72879.0], [7.8, 72879.0], [7.9, 72879.0], [8.0, 72886.0], [8.1, 72886.0], [8.2, 72886.0], [8.3, 72886.0], [8.4, 72886.0], [8.5, 72887.0], [8.6, 72887.0], [8.7, 72887.0], [8.8, 72887.0], [8.9, 72887.0], [9.0, 72891.0], [9.1, 72891.0], [9.2, 72891.0], [9.3, 72891.0], [9.4, 72891.0], [9.5, 72891.0], [9.6, 72891.0], [9.7, 72891.0], [9.8, 72891.0], [9.9, 72891.0], [10.0, 72895.0], [10.1, 72895.0], [10.2, 72895.0], [10.3, 72895.0], [10.4, 72895.0], [10.5, 72905.0], [10.6, 72905.0], [10.7, 72905.0], [10.8, 72905.0], [10.9, 72905.0], [11.0, 72926.0], [11.1, 72926.0], [11.2, 72926.0], [11.3, 72926.0], [11.4, 72926.0], [11.5, 72946.0], [11.6, 72946.0], [11.7, 72946.0], [11.8, 72946.0], [11.9, 72946.0], [12.0, 72947.0], [12.1, 72947.0], [12.2, 72947.0], [12.3, 72947.0], [12.4, 72947.0], [12.5, 72949.0], [12.6, 72949.0], [12.7, 72949.0], [12.8, 72949.0], [12.9, 72949.0], [13.0, 72966.0], [13.1, 72966.0], [13.2, 72966.0], [13.3, 72966.0], [13.4, 72966.0], [13.5, 72973.0], [13.6, 72973.0], [13.7, 72973.0], [13.8, 72973.0], [13.9, 72973.0], [14.0, 72976.0], [14.1, 72976.0], [14.2, 72976.0], [14.3, 72976.0], [14.4, 72976.0], [14.5, 72981.0], [14.6, 72981.0], [14.7, 72981.0], [14.8, 72981.0], [14.9, 72981.0], [15.0, 72981.0], [15.1, 72981.0], [15.2, 72981.0], [15.3, 72981.0], [15.4, 72981.0], [15.5, 72984.0], [15.6, 72984.0], [15.7, 72984.0], [15.8, 72984.0], [15.9, 72984.0], [16.0, 72986.0], [16.1, 72986.0], [16.2, 72986.0], [16.3, 72986.0], [16.4, 72986.0], [16.5, 73002.0], [16.6, 73002.0], [16.7, 73002.0], [16.8, 73002.0], [16.9, 73002.0], [17.0, 73005.0], [17.1, 73005.0], [17.2, 73005.0], [17.3, 73005.0], [17.4, 73005.0], [17.5, 73005.0], [17.6, 73005.0], [17.7, 73005.0], [17.8, 73005.0], [17.9, 73005.0], [18.0, 73006.0], [18.1, 73006.0], [18.2, 73006.0], [18.3, 73006.0], [18.4, 73006.0], [18.5, 73006.0], [18.6, 73006.0], [18.7, 73006.0], [18.8, 73006.0], [18.9, 73006.0], [19.0, 73007.0], [19.1, 73007.0], [19.2, 73007.0], [19.3, 73007.0], [19.4, 73007.0], [19.5, 73011.0], [19.6, 73011.0], [19.7, 73011.0], [19.8, 73011.0], [19.9, 73011.0], [20.0, 73021.0], [20.1, 73021.0], [20.2, 73021.0], [20.3, 73021.0], [20.4, 73021.0], [20.5, 73022.0], [20.6, 73022.0], [20.7, 73022.0], [20.8, 73022.0], [20.9, 73022.0], [21.0, 73023.0], [21.1, 73023.0], [21.2, 73023.0], [21.3, 73023.0], [21.4, 73023.0], [21.5, 73023.0], [21.6, 73023.0], [21.7, 73023.0], [21.8, 73023.0], [21.9, 73023.0], [22.0, 73024.0], [22.1, 73024.0], [22.2, 73024.0], [22.3, 73024.0], [22.4, 73024.0], [22.5, 73025.0], [22.6, 73025.0], [22.7, 73025.0], [22.8, 73025.0], [22.9, 73025.0], [23.0, 73036.0], [23.1, 73036.0], [23.2, 73036.0], [23.3, 73036.0], [23.4, 73036.0], [23.5, 73041.0], [23.6, 73041.0], [23.7, 73041.0], [23.8, 73041.0], [23.9, 73041.0], [24.0, 73043.0], [24.1, 73043.0], [24.2, 73043.0], [24.3, 73043.0], [24.4, 73043.0], [24.5, 73044.0], [24.6, 73044.0], [24.7, 73044.0], [24.8, 73044.0], [24.9, 73044.0], [25.0, 73045.0], [25.1, 73045.0], [25.2, 73045.0], [25.3, 73045.0], [25.4, 73045.0], [25.5, 73052.0], [25.6, 73052.0], [25.7, 73052.0], [25.8, 73052.0], [25.9, 73052.0], [26.0, 73059.0], [26.1, 73059.0], [26.2, 73059.0], [26.3, 73059.0], [26.4, 73059.0], [26.5, 73063.0], [26.6, 73063.0], [26.7, 73063.0], [26.8, 73063.0], [26.9, 73063.0], [27.0, 73063.0], [27.1, 73063.0], [27.2, 73063.0], [27.3, 73063.0], [27.4, 73063.0], [27.5, 73064.0], [27.6, 73064.0], [27.7, 73064.0], [27.8, 73064.0], [27.9, 73064.0], [28.0, 73073.0], [28.1, 73073.0], [28.2, 73073.0], [28.3, 73073.0], [28.4, 73073.0], [28.5, 73078.0], [28.6, 73078.0], [28.7, 73078.0], [28.8, 73078.0], [28.9, 73078.0], [29.0, 73079.0], [29.1, 73079.0], [29.2, 73079.0], [29.3, 73079.0], [29.4, 73079.0], [29.5, 73079.0], [29.6, 73079.0], [29.7, 73079.0], [29.8, 73079.0], [29.9, 73079.0], [30.0, 73085.0], [30.1, 73085.0], [30.2, 73085.0], [30.3, 73085.0], [30.4, 73085.0], [30.5, 73088.0], [30.6, 73088.0], [30.7, 73088.0], [30.8, 73088.0], [30.9, 73088.0], [31.0, 73089.0], [31.1, 73089.0], [31.2, 73089.0], [31.3, 73089.0], [31.4, 73089.0], [31.5, 73089.0], [31.6, 73089.0], [31.7, 73089.0], [31.8, 73089.0], [31.9, 73089.0], [32.0, 73109.0], [32.1, 73109.0], [32.2, 73109.0], [32.3, 73109.0], [32.4, 73109.0], [32.5, 73121.0], [32.6, 73121.0], [32.7, 73121.0], [32.8, 73121.0], [32.9, 73121.0], [33.0, 73128.0], [33.1, 73128.0], [33.2, 73128.0], [33.3, 73128.0], [33.4, 73128.0], [33.5, 73129.0], [33.6, 73129.0], [33.7, 73129.0], [33.8, 73129.0], [33.9, 73129.0], [34.0, 73147.0], [34.1, 73147.0], [34.2, 73147.0], [34.3, 73147.0], [34.4, 73147.0], [34.5, 73147.0], [34.6, 73147.0], [34.7, 73147.0], [34.8, 73147.0], [34.9, 73147.0], [35.0, 73149.0], [35.1, 73149.0], [35.2, 73149.0], [35.3, 73149.0], [35.4, 73149.0], [35.5, 73150.0], [35.6, 73150.0], [35.7, 73150.0], [35.8, 73150.0], [35.9, 73150.0], [36.0, 73150.0], [36.1, 73150.0], [36.2, 73150.0], [36.3, 73150.0], [36.4, 73150.0], [36.5, 73167.0], [36.6, 73167.0], [36.7, 73167.0], [36.8, 73167.0], [36.9, 73167.0], [37.0, 73171.0], [37.1, 73171.0], [37.2, 73171.0], [37.3, 73171.0], [37.4, 73171.0], [37.5, 73187.0], [37.6, 73187.0], [37.7, 73187.0], [37.8, 73187.0], [37.9, 73187.0], [38.0, 73188.0], [38.1, 73188.0], [38.2, 73188.0], [38.3, 73188.0], [38.4, 73188.0], [38.5, 73195.0], [38.6, 73195.0], [38.7, 73195.0], [38.8, 73195.0], [38.9, 73195.0], [39.0, 73211.0], [39.1, 73211.0], [39.2, 73211.0], [39.3, 73211.0], [39.4, 73211.0], [39.5, 73212.0], [39.6, 73212.0], [39.7, 73212.0], [39.8, 73212.0], [39.9, 73212.0], [40.0, 73212.0], [40.1, 73212.0], [40.2, 73212.0], [40.3, 73212.0], [40.4, 73212.0], [40.5, 73214.0], [40.6, 73214.0], [40.7, 73214.0], [40.8, 73214.0], [40.9, 73214.0], [41.0, 73218.0], [41.1, 73218.0], [41.2, 73218.0], [41.3, 73218.0], [41.4, 73218.0], [41.5, 73224.0], [41.6, 73224.0], [41.7, 73224.0], [41.8, 73224.0], [41.9, 73224.0], [42.0, 73225.0], [42.1, 73225.0], [42.2, 73225.0], [42.3, 73225.0], [42.4, 73225.0], [42.5, 73225.0], [42.6, 73225.0], [42.7, 73225.0], [42.8, 73225.0], [42.9, 73225.0], [43.0, 73245.0], [43.1, 73245.0], [43.2, 73245.0], [43.3, 73245.0], [43.4, 73245.0], [43.5, 73261.0], [43.6, 73261.0], [43.7, 73261.0], [43.8, 73261.0], [43.9, 73261.0], [44.0, 73261.0], [44.1, 73261.0], [44.2, 73261.0], [44.3, 73261.0], [44.4, 73261.0], [44.5, 73261.0], [44.6, 73261.0], [44.7, 73261.0], [44.8, 73261.0], [44.9, 73261.0], [45.0, 73263.0], [45.1, 73263.0], [45.2, 73263.0], [45.3, 73263.0], [45.4, 73263.0], [45.5, 73269.0], [45.6, 73269.0], [45.7, 73269.0], [45.8, 73269.0], [45.9, 73269.0], [46.0, 73270.0], [46.1, 73270.0], [46.2, 73270.0], [46.3, 73270.0], [46.4, 73270.0], [46.5, 73274.0], [46.6, 73274.0], [46.7, 73274.0], [46.8, 73274.0], [46.9, 73274.0], [47.0, 73277.0], [47.1, 73277.0], [47.2, 73277.0], [47.3, 73277.0], [47.4, 73277.0], [47.5, 73280.0], [47.6, 73280.0], [47.7, 73280.0], [47.8, 73280.0], [47.9, 73280.0], [48.0, 73284.0], [48.1, 73284.0], [48.2, 73284.0], [48.3, 73284.0], [48.4, 73284.0], [48.5, 73285.0], [48.6, 73285.0], [48.7, 73285.0], [48.8, 73285.0], [48.9, 73285.0], [49.0, 73286.0], [49.1, 73286.0], [49.2, 73286.0], [49.3, 73286.0], [49.4, 73286.0], [49.5, 73286.0], [49.6, 73286.0], [49.7, 73286.0], [49.8, 73286.0], [49.9, 73286.0], [50.0, 73295.0], [50.1, 73295.0], [50.2, 73295.0], [50.3, 73295.0], [50.4, 73295.0], [50.5, 73295.0], [50.6, 73295.0], [50.7, 73295.0], [50.8, 73295.0], [50.9, 73295.0], [51.0, 73303.0], [51.1, 73303.0], [51.2, 73303.0], [51.3, 73303.0], [51.4, 73303.0], [51.5, 73303.0], [51.6, 73303.0], [51.7, 73303.0], [51.8, 73303.0], [51.9, 73303.0], [52.0, 73304.0], [52.1, 73304.0], [52.2, 73304.0], [52.3, 73304.0], [52.4, 73304.0], [52.5, 73304.0], [52.6, 73304.0], [52.7, 73304.0], [52.8, 73304.0], [52.9, 73304.0], [53.0, 73310.0], [53.1, 73310.0], [53.2, 73310.0], [53.3, 73310.0], [53.4, 73310.0], [53.5, 73316.0], [53.6, 73316.0], [53.7, 73316.0], [53.8, 73316.0], [53.9, 73316.0], [54.0, 73316.0], [54.1, 73316.0], [54.2, 73316.0], [54.3, 73316.0], [54.4, 73316.0], [54.5, 73320.0], [54.6, 73320.0], [54.7, 73320.0], [54.8, 73320.0], [54.9, 73320.0], [55.0, 73335.0], [55.1, 73335.0], [55.2, 73335.0], [55.3, 73335.0], [55.4, 73335.0], [55.5, 73361.0], [55.6, 73361.0], [55.7, 73361.0], [55.8, 73361.0], [55.9, 73361.0], [56.0, 73361.0], [56.1, 73361.0], [56.2, 73361.0], [56.3, 73361.0], [56.4, 73361.0], [56.5, 73377.0], [56.6, 73377.0], [56.7, 73377.0], [56.8, 73377.0], [56.9, 73377.0], [57.0, 73382.0], [57.1, 73382.0], [57.2, 73382.0], [57.3, 73382.0], [57.4, 73382.0], [57.5, 73383.0], [57.6, 73383.0], [57.7, 73383.0], [57.8, 73383.0], [57.9, 73383.0], [58.0, 73383.0], [58.1, 73383.0], [58.2, 73383.0], [58.3, 73383.0], [58.4, 73383.0], [58.5, 73397.0], [58.6, 73397.0], [58.7, 73397.0], [58.8, 73397.0], [58.9, 73397.0], [59.0, 73397.0], [59.1, 73397.0], [59.2, 73397.0], [59.3, 73397.0], [59.4, 73397.0], [59.5, 73397.0], [59.6, 73397.0], [59.7, 73397.0], [59.8, 73397.0], [59.9, 73397.0], [60.0, 73398.0], [60.1, 73398.0], [60.2, 73398.0], [60.3, 73398.0], [60.4, 73398.0], [60.5, 73398.0], [60.6, 73398.0], [60.7, 73398.0], [60.8, 73398.0], [60.9, 73398.0], [61.0, 73398.0], [61.1, 73398.0], [61.2, 73398.0], [61.3, 73398.0], [61.4, 73398.0], [61.5, 73399.0], [61.6, 73399.0], [61.7, 73399.0], [61.8, 73399.0], [61.9, 73399.0], [62.0, 73399.0], [62.1, 73399.0], [62.2, 73399.0], [62.3, 73399.0], [62.4, 73399.0], [62.5, 73400.0], [62.6, 73400.0], [62.7, 73400.0], [62.8, 73400.0], [62.9, 73400.0], [63.0, 73400.0], [63.1, 73400.0], [63.2, 73400.0], [63.3, 73400.0], [63.4, 73400.0], [63.5, 73403.0], [63.6, 73403.0], [63.7, 73403.0], [63.8, 73403.0], [63.9, 73403.0], [64.0, 73412.0], [64.1, 73412.0], [64.2, 73412.0], [64.3, 73412.0], [64.4, 73412.0], [64.5, 73413.0], [64.6, 73413.0], [64.7, 73413.0], [64.8, 73413.0], [64.9, 73413.0], [65.0, 73418.0], [65.1, 73418.0], [65.2, 73418.0], [65.3, 73418.0], [65.4, 73418.0], [65.5, 73439.0], [65.6, 73439.0], [65.7, 73439.0], [65.8, 73439.0], [65.9, 73439.0], [66.0, 73450.0], [66.1, 73450.0], [66.2, 73450.0], [66.3, 73450.0], [66.4, 73450.0], [66.5, 73462.0], [66.6, 73462.0], [66.7, 73462.0], [66.8, 73462.0], [66.9, 73462.0], [67.0, 73468.0], [67.1, 73468.0], [67.2, 73468.0], [67.3, 73468.0], [67.4, 73468.0], [67.5, 73468.0], [67.6, 73468.0], [67.7, 73468.0], [67.8, 73468.0], [67.9, 73468.0], [68.0, 73468.0], [68.1, 73468.0], [68.2, 73468.0], [68.3, 73468.0], [68.4, 73468.0], [68.5, 73469.0], [68.6, 73469.0], [68.7, 73469.0], [68.8, 73469.0], [68.9, 73469.0], [69.0, 73469.0], [69.1, 73469.0], [69.2, 73469.0], [69.3, 73469.0], [69.4, 73469.0], [69.5, 73472.0], [69.6, 73472.0], [69.7, 73472.0], [69.8, 73472.0], [69.9, 73472.0], [70.0, 73480.0], [70.1, 73480.0], [70.2, 73480.0], [70.3, 73480.0], [70.4, 73480.0], [70.5, 73484.0], [70.6, 73484.0], [70.7, 73484.0], [70.8, 73484.0], [70.9, 73484.0], [71.0, 73485.0], [71.1, 73485.0], [71.2, 73485.0], [71.3, 73485.0], [71.4, 73485.0], [71.5, 73485.0], [71.6, 73485.0], [71.7, 73485.0], [71.8, 73485.0], [71.9, 73485.0], [72.0, 73485.0], [72.1, 73485.0], [72.2, 73485.0], [72.3, 73485.0], [72.4, 73485.0], [72.5, 73486.0], [72.6, 73486.0], [72.7, 73486.0], [72.8, 73486.0], [72.9, 73486.0], [73.0, 73486.0], [73.1, 73486.0], [73.2, 73486.0], [73.3, 73486.0], [73.4, 73486.0], [73.5, 73487.0], [73.6, 73487.0], [73.7, 73487.0], [73.8, 73487.0], [73.9, 73487.0], [74.0, 73501.0], [74.1, 73501.0], [74.2, 73501.0], [74.3, 73501.0], [74.4, 73501.0], [74.5, 73516.0], [74.6, 73516.0], [74.7, 73516.0], [74.8, 73516.0], [74.9, 73516.0], [75.0, 73531.0], [75.1, 73531.0], [75.2, 73531.0], [75.3, 73531.0], [75.4, 73531.0], [75.5, 73531.0], [75.6, 73531.0], [75.7, 73531.0], [75.8, 73531.0], [75.9, 73531.0], [76.0, 73565.0], [76.1, 73565.0], [76.2, 73565.0], [76.3, 73565.0], [76.4, 73565.0], [76.5, 73592.0], [76.6, 73592.0], [76.7, 73592.0], [76.8, 73592.0], [76.9, 73592.0], [77.0, 73603.0], [77.1, 73603.0], [77.2, 73603.0], [77.3, 73603.0], [77.4, 73603.0], [77.5, 73610.0], [77.6, 73610.0], [77.7, 73610.0], [77.8, 73610.0], [77.9, 73610.0], [78.0, 73615.0], [78.1, 73615.0], [78.2, 73615.0], [78.3, 73615.0], [78.4, 73615.0], [78.5, 73616.0], [78.6, 73616.0], [78.7, 73616.0], [78.8, 73616.0], [78.9, 73616.0], [79.0, 73617.0], [79.1, 73617.0], [79.2, 73617.0], [79.3, 73617.0], [79.4, 73617.0], [79.5, 73619.0], [79.6, 73619.0], [79.7, 73619.0], [79.8, 73619.0], [79.9, 73619.0], [80.0, 73624.0], [80.1, 73624.0], [80.2, 73624.0], [80.3, 73624.0], [80.4, 73624.0], [80.5, 73626.0], [80.6, 73626.0], [80.7, 73626.0], [80.8, 73626.0], [80.9, 73626.0], [81.0, 73646.0], [81.1, 73646.0], [81.2, 73646.0], [81.3, 73646.0], [81.4, 73646.0], [81.5, 73651.0], [81.6, 73651.0], [81.7, 73651.0], [81.8, 73651.0], [81.9, 73651.0], [82.0, 73656.0], [82.1, 73656.0], [82.2, 73656.0], [82.3, 73656.0], [82.4, 73656.0], [82.5, 73657.0], [82.6, 73657.0], [82.7, 73657.0], [82.8, 73657.0], [82.9, 73657.0], [83.0, 73661.0], [83.1, 73661.0], [83.2, 73661.0], [83.3, 73661.0], [83.4, 73661.0], [83.5, 73668.0], [83.6, 73668.0], [83.7, 73668.0], [83.8, 73668.0], [83.9, 73668.0], [84.0, 73671.0], [84.1, 73671.0], [84.2, 73671.0], [84.3, 73671.0], [84.4, 73671.0], [84.5, 73677.0], [84.6, 73677.0], [84.7, 73677.0], [84.8, 73677.0], [84.9, 73677.0], [85.0, 73677.0], [85.1, 73677.0], [85.2, 73677.0], [85.3, 73677.0], [85.4, 73677.0], [85.5, 73680.0], [85.6, 73680.0], [85.7, 73680.0], [85.8, 73680.0], [85.9, 73680.0], [86.0, 73682.0], [86.1, 73682.0], [86.2, 73682.0], [86.3, 73682.0], [86.4, 73682.0], [86.5, 73692.0], [86.6, 73692.0], [86.7, 73692.0], [86.8, 73692.0], [86.9, 73692.0], [87.0, 73702.0], [87.1, 73702.0], [87.2, 73702.0], [87.3, 73702.0], [87.4, 73702.0], [87.5, 73705.0], [87.6, 73705.0], [87.7, 73705.0], [87.8, 73705.0], [87.9, 73705.0], [88.0, 73712.0], [88.1, 73712.0], [88.2, 73712.0], [88.3, 73712.0], [88.4, 73712.0], [88.5, 73716.0], [88.6, 73716.0], [88.7, 73716.0], [88.8, 73716.0], [88.9, 73716.0], [89.0, 73727.0], [89.1, 73727.0], [89.2, 73727.0], [89.3, 73727.0], [89.4, 73727.0], [89.5, 73732.0], [89.6, 73732.0], [89.7, 73732.0], [89.8, 73732.0], [89.9, 73732.0], [90.0, 73735.0], [90.1, 73735.0], [90.2, 73735.0], [90.3, 73735.0], [90.4, 73735.0], [90.5, 73742.0], [90.6, 73742.0], [90.7, 73742.0], [90.8, 73742.0], [90.9, 73742.0], [91.0, 73746.0], [91.1, 73746.0], [91.2, 73746.0], [91.3, 73746.0], [91.4, 73746.0], [91.5, 73746.0], [91.6, 73746.0], [91.7, 73746.0], [91.8, 73746.0], [91.9, 73746.0], [92.0, 73752.0], [92.1, 73752.0], [92.2, 73752.0], [92.3, 73752.0], [92.4, 73752.0], [92.5, 73757.0], [92.6, 73757.0], [92.7, 73757.0], [92.8, 73757.0], [92.9, 73757.0], [93.0, 73761.0], [93.1, 73761.0], [93.2, 73761.0], [93.3, 73761.0], [93.4, 73761.0], [93.5, 73767.0], [93.6, 73767.0], [93.7, 73767.0], [93.8, 73767.0], [93.9, 73767.0], [94.0, 73769.0], [94.1, 73769.0], [94.2, 73769.0], [94.3, 73769.0], [94.4, 73769.0], [94.5, 73781.0], [94.6, 73781.0], [94.7, 73781.0], [94.8, 73781.0], [94.9, 73781.0], [95.0, 73786.0], [95.1, 73786.0], [95.2, 73786.0], [95.3, 73786.0], [95.4, 73786.0], [95.5, 73786.0], [95.6, 73786.0], [95.7, 73786.0], [95.8, 73786.0], [95.9, 73786.0], [96.0, 73792.0], [96.1, 73792.0], [96.2, 73792.0], [96.3, 73792.0], [96.4, 73792.0], [96.5, 73796.0], [96.6, 73796.0], [96.7, 73796.0], [96.8, 73796.0], [96.9, 73796.0], [97.0, 73796.0], [97.1, 73796.0], [97.2, 73796.0], [97.3, 73796.0], [97.4, 73796.0], [97.5, 73800.0], [97.6, 73800.0], [97.7, 73800.0], [97.8, 73800.0], [97.9, 73800.0], [98.0, 73816.0], [98.1, 73816.0], [98.2, 73816.0], [98.3, 73816.0], [98.4, 73816.0], [98.5, 73821.0], [98.6, 73821.0], [98.7, 73821.0], [98.8, 73821.0], [98.9, 73821.0], [99.0, 73823.0], [99.1, 73823.0], [99.2, 73823.0], [99.3, 73823.0], [99.4, 73823.0], [99.5, 73823.0], [99.6, 73823.0], [99.7, 73823.0], [99.8, 73823.0], [99.9, 73823.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 90027.0], [0.1, 90027.0], [0.2, 90027.0], [0.3, 90027.0], [0.4, 90027.0], [0.5, 90027.0], [0.6, 90027.0], [0.7, 90027.0], [0.8, 90027.0], [0.9, 90027.0], [1.0, 90027.0], [1.1, 90027.0], [1.2, 90027.0], [1.3, 90027.0], [1.4, 90027.0], [1.5, 90028.0], [1.6, 90028.0], [1.7, 90028.0], [1.8, 90028.0], [1.9, 90028.0], [2.0, 90028.0], [2.1, 90028.0], [2.2, 90028.0], [2.3, 90028.0], [2.4, 90028.0], [2.5, 90028.0], [2.6, 90028.0], [2.7, 90028.0], [2.8, 90028.0], [2.9, 90028.0], [3.0, 90028.0], [3.1, 90028.0], [3.2, 90028.0], [3.3, 90028.0], [3.4, 90028.0], [3.5, 90028.0], [3.6, 90028.0], [3.7, 90028.0], [3.8, 90028.0], [3.9, 90028.0], [4.0, 90029.0], [4.1, 90029.0], [4.2, 90029.0], [4.3, 90029.0], [4.4, 90029.0], [4.5, 90029.0], [4.6, 90029.0], [4.7, 90029.0], [4.8, 90029.0], [4.9, 90029.0], [5.0, 90029.0], [5.1, 90029.0], [5.2, 90029.0], [5.3, 90029.0], [5.4, 90029.0], [5.5, 90029.0], [5.6, 90029.0], [5.7, 90029.0], [5.8, 90029.0], [5.9, 90029.0], [6.0, 90029.0], [6.1, 90029.0], [6.2, 90029.0], [6.3, 90029.0], [6.4, 90029.0], [6.5, 90029.0], [6.6, 90029.0], [6.7, 90029.0], [6.8, 90029.0], [6.9, 90029.0], [7.0, 90029.0], [7.1, 90029.0], [7.2, 90029.0], [7.3, 90029.0], [7.4, 90029.0], [7.5, 90029.0], [7.6, 90029.0], [7.7, 90029.0], [7.8, 90029.0], [7.9, 90029.0], [8.0, 90030.0], [8.1, 90030.0], [8.2, 90030.0], [8.3, 90030.0], [8.4, 90030.0], [8.5, 90030.0], [8.6, 90030.0], [8.7, 90030.0], [8.8, 90030.0], [8.9, 90030.0], [9.0, 90030.0], [9.1, 90030.0], [9.2, 90030.0], [9.3, 90030.0], [9.4, 90030.0], [9.5, 90030.0], [9.6, 90030.0], [9.7, 90030.0], [9.8, 90030.0], [9.9, 90030.0], [10.0, 90030.0], [10.1, 90030.0], [10.2, 90030.0], [10.3, 90030.0], [10.4, 90030.0], [10.5, 90030.0], [10.6, 90030.0], [10.7, 90030.0], [10.8, 90030.0], [10.9, 90030.0], [11.0, 90030.0], [11.1, 90030.0], [11.2, 90030.0], [11.3, 90030.0], [11.4, 90030.0], [11.5, 90030.0], [11.6, 90030.0], [11.7, 90030.0], [11.8, 90030.0], [11.9, 90030.0], [12.0, 90030.0], [12.1, 90030.0], [12.2, 90030.0], [12.3, 90030.0], [12.4, 90030.0], [12.5, 90030.0], [12.6, 90030.0], [12.7, 90030.0], [12.8, 90030.0], [12.9, 90030.0], [13.0, 90030.0], [13.1, 90030.0], [13.2, 90030.0], [13.3, 90030.0], [13.4, 90030.0], [13.5, 90030.0], [13.6, 90030.0], [13.7, 90030.0], [13.8, 90030.0], [13.9, 90030.0], [14.0, 90030.0], [14.1, 90030.0], [14.2, 90030.0], [14.3, 90030.0], [14.4, 90030.0], [14.5, 90030.0], [14.6, 90030.0], [14.7, 90030.0], [14.8, 90030.0], [14.9, 90030.0], [15.0, 90030.0], [15.1, 90030.0], [15.2, 90030.0], [15.3, 90030.0], [15.4, 90030.0], [15.5, 90030.0], [15.6, 90030.0], [15.7, 90030.0], [15.8, 90030.0], [15.9, 90030.0], [16.0, 90030.0], [16.1, 90030.0], [16.2, 90030.0], [16.3, 90030.0], [16.4, 90030.0], [16.5, 90031.0], [16.6, 90031.0], [16.7, 90031.0], [16.8, 90031.0], [16.9, 90031.0], [17.0, 90031.0], [17.1, 90031.0], [17.2, 90031.0], [17.3, 90031.0], [17.4, 90031.0], [17.5, 90031.0], [17.6, 90031.0], [17.7, 90031.0], [17.8, 90031.0], [17.9, 90031.0], [18.0, 90031.0], [18.1, 90031.0], [18.2, 90031.0], [18.3, 90031.0], [18.4, 90031.0], [18.5, 90031.0], [18.6, 90031.0], [18.7, 90031.0], [18.8, 90031.0], [18.9, 90031.0], [19.0, 90031.0], [19.1, 90031.0], [19.2, 90031.0], [19.3, 90031.0], [19.4, 90031.0], [19.5, 90031.0], [19.6, 90031.0], [19.7, 90031.0], [19.8, 90031.0], [19.9, 90031.0], [20.0, 90032.0], [20.1, 90032.0], [20.2, 90032.0], [20.3, 90032.0], [20.4, 90032.0], [20.5, 90032.0], [20.6, 90032.0], [20.7, 90032.0], [20.8, 90032.0], [20.9, 90032.0], [21.0, 90032.0], [21.1, 90032.0], [21.2, 90032.0], [21.3, 90032.0], [21.4, 90032.0], [21.5, 90032.0], [21.6, 90032.0], [21.7, 90032.0], [21.8, 90032.0], [21.9, 90032.0], [22.0, 90032.0], [22.1, 90032.0], [22.2, 90032.0], [22.3, 90032.0], [22.4, 90032.0], [22.5, 90032.0], [22.6, 90032.0], [22.7, 90032.0], [22.8, 90032.0], [22.9, 90032.0], [23.0, 90032.0], [23.1, 90032.0], [23.2, 90032.0], [23.3, 90032.0], [23.4, 90032.0], [23.5, 90032.0], [23.6, 90032.0], [23.7, 90032.0], [23.8, 90032.0], [23.9, 90032.0], [24.0, 90032.0], [24.1, 90032.0], [24.2, 90032.0], [24.3, 90032.0], [24.4, 90032.0], [24.5, 90033.0], [24.6, 90033.0], [24.7, 90033.0], [24.8, 90033.0], [24.9, 90033.0], [25.0, 90033.0], [25.1, 90033.0], [25.2, 90033.0], [25.3, 90033.0], [25.4, 90033.0], [25.5, 90033.0], [25.6, 90033.0], [25.7, 90033.0], [25.8, 90033.0], [25.9, 90033.0], [26.0, 90033.0], [26.1, 90033.0], [26.2, 90033.0], [26.3, 90033.0], [26.4, 90033.0], [26.5, 90033.0], [26.6, 90033.0], [26.7, 90033.0], [26.8, 90033.0], [26.9, 90033.0], [27.0, 90033.0], [27.1, 90033.0], [27.2, 90033.0], [27.3, 90033.0], [27.4, 90033.0], [27.5, 90033.0], [27.6, 90033.0], [27.7, 90033.0], [27.8, 90033.0], [27.9, 90033.0], [28.0, 90033.0], [28.1, 90033.0], [28.2, 90033.0], [28.3, 90033.0], [28.4, 90033.0], [28.5, 90033.0], [28.6, 90033.0], [28.7, 90033.0], [28.8, 90033.0], [28.9, 90033.0], [29.0, 90033.0], [29.1, 90033.0], [29.2, 90033.0], [29.3, 90033.0], [29.4, 90033.0], [29.5, 90033.0], [29.6, 90033.0], [29.7, 90033.0], [29.8, 90033.0], [29.9, 90033.0], [30.0, 90033.0], [30.1, 90033.0], [30.2, 90033.0], [30.3, 90033.0], [30.4, 90033.0], [30.5, 90034.0], [30.6, 90034.0], [30.7, 90034.0], [30.8, 90034.0], [30.9, 90034.0], [31.0, 90034.0], [31.1, 90034.0], [31.2, 90034.0], [31.3, 90034.0], [31.4, 90034.0], [31.5, 90034.0], [31.6, 90034.0], [31.7, 90034.0], [31.8, 90034.0], [31.9, 90034.0], [32.0, 90034.0], [32.1, 90034.0], [32.2, 90034.0], [32.3, 90034.0], [32.4, 90034.0], [32.5, 90034.0], [32.6, 90034.0], [32.7, 90034.0], [32.8, 90034.0], [32.9, 90034.0], [33.0, 90034.0], [33.1, 90034.0], [33.2, 90034.0], [33.3, 90034.0], [33.4, 90034.0], [33.5, 90034.0], [33.6, 90034.0], [33.7, 90034.0], [33.8, 90034.0], [33.9, 90034.0], [34.0, 90035.0], [34.1, 90035.0], [34.2, 90035.0], [34.3, 90035.0], [34.4, 90035.0], [34.5, 90035.0], [34.6, 90035.0], [34.7, 90035.0], [34.8, 90035.0], [34.9, 90035.0], [35.0, 90035.0], [35.1, 90035.0], [35.2, 90035.0], [35.3, 90035.0], [35.4, 90035.0], [35.5, 90035.0], [35.6, 90035.0], [35.7, 90035.0], [35.8, 90035.0], [35.9, 90035.0], [36.0, 90035.0], [36.1, 90035.0], [36.2, 90035.0], [36.3, 90035.0], [36.4, 90035.0], [36.5, 90035.0], [36.6, 90035.0], [36.7, 90035.0], [36.8, 90035.0], [36.9, 90035.0], [37.0, 90035.0], [37.1, 90035.0], [37.2, 90035.0], [37.3, 90035.0], [37.4, 90035.0], [37.5, 90035.0], [37.6, 90035.0], [37.7, 90035.0], [37.8, 90035.0], [37.9, 90035.0], [38.0, 90035.0], [38.1, 90035.0], [38.2, 90035.0], [38.3, 90035.0], [38.4, 90035.0], [38.5, 90035.0], [38.6, 90035.0], [38.7, 90035.0], [38.8, 90035.0], [38.9, 90035.0], [39.0, 90035.0], [39.1, 90035.0], [39.2, 90035.0], [39.3, 90035.0], [39.4, 90035.0], [39.5, 90035.0], [39.6, 90035.0], [39.7, 90035.0], [39.8, 90035.0], [39.9, 90035.0], [40.0, 90035.0], [40.1, 90035.0], [40.2, 90035.0], [40.3, 90035.0], [40.4, 90035.0], [40.5, 90035.0], [40.6, 90035.0], [40.7, 90035.0], [40.8, 90035.0], [40.9, 90035.0], [41.0, 90035.0], [41.1, 90035.0], [41.2, 90035.0], [41.3, 90035.0], [41.4, 90035.0], [41.5, 90035.0], [41.6, 90035.0], [41.7, 90035.0], [41.8, 90035.0], [41.9, 90035.0], [42.0, 90035.0], [42.1, 90035.0], [42.2, 90035.0], [42.3, 90035.0], [42.4, 90035.0], [42.5, 90035.0], [42.6, 90035.0], [42.7, 90035.0], [42.8, 90035.0], [42.9, 90035.0], [43.0, 90035.0], [43.1, 90035.0], [43.2, 90035.0], [43.3, 90035.0], [43.4, 90035.0], [43.5, 90035.0], [43.6, 90035.0], [43.7, 90035.0], [43.8, 90035.0], [43.9, 90035.0], [44.0, 90035.0], [44.1, 90035.0], [44.2, 90035.0], [44.3, 90035.0], [44.4, 90035.0], [44.5, 90036.0], [44.6, 90036.0], [44.7, 90036.0], [44.8, 90036.0], [44.9, 90036.0], [45.0, 90036.0], [45.1, 90036.0], [45.2, 90036.0], [45.3, 90036.0], [45.4, 90036.0], [45.5, 90036.0], [45.6, 90036.0], [45.7, 90036.0], [45.8, 90036.0], [45.9, 90036.0], [46.0, 90036.0], [46.1, 90036.0], [46.2, 90036.0], [46.3, 90036.0], [46.4, 90036.0], [46.5, 90036.0], [46.6, 90036.0], [46.7, 90036.0], [46.8, 90036.0], [46.9, 90036.0], [47.0, 90036.0], [47.1, 90036.0], [47.2, 90036.0], [47.3, 90036.0], [47.4, 90036.0], [47.5, 90036.0], [47.6, 90036.0], [47.7, 90036.0], [47.8, 90036.0], [47.9, 90036.0], [48.0, 90036.0], [48.1, 90036.0], [48.2, 90036.0], [48.3, 90036.0], [48.4, 90036.0], [48.5, 90036.0], [48.6, 90036.0], [48.7, 90036.0], [48.8, 90036.0], [48.9, 90036.0], [49.0, 90036.0], [49.1, 90036.0], [49.2, 90036.0], [49.3, 90036.0], [49.4, 90036.0], [49.5, 90036.0], [49.6, 90036.0], [49.7, 90036.0], [49.8, 90036.0], [49.9, 90036.0], [50.0, 90037.0], [50.1, 90037.0], [50.2, 90037.0], [50.3, 90037.0], [50.4, 90037.0], [50.5, 90037.0], [50.6, 90037.0], [50.7, 90037.0], [50.8, 90037.0], [50.9, 90037.0], [51.0, 90037.0], [51.1, 90037.0], [51.2, 90037.0], [51.3, 90037.0], [51.4, 90037.0], [51.5, 90037.0], [51.6, 90037.0], [51.7, 90037.0], [51.8, 90037.0], [51.9, 90037.0], [52.0, 90037.0], [52.1, 90037.0], [52.2, 90037.0], [52.3, 90037.0], [52.4, 90037.0], [52.5, 90037.0], [52.6, 90037.0], [52.7, 90037.0], [52.8, 90037.0], [52.9, 90037.0], [53.0, 90037.0], [53.1, 90037.0], [53.2, 90037.0], [53.3, 90037.0], [53.4, 90037.0], [53.5, 90037.0], [53.6, 90037.0], [53.7, 90037.0], [53.8, 90037.0], [53.9, 90037.0], [54.0, 90038.0], [54.1, 90038.0], [54.2, 90038.0], [54.3, 90038.0], [54.4, 90038.0], [54.5, 90038.0], [54.6, 90038.0], [54.7, 90038.0], [54.8, 90038.0], [54.9, 90038.0], [55.0, 90038.0], [55.1, 90038.0], [55.2, 90038.0], [55.3, 90038.0], [55.4, 90038.0], [55.5, 90038.0], [55.6, 90038.0], [55.7, 90038.0], [55.8, 90038.0], [55.9, 90038.0], [56.0, 90038.0], [56.1, 90038.0], [56.2, 90038.0], [56.3, 90038.0], [56.4, 90038.0], [56.5, 90038.0], [56.6, 90038.0], [56.7, 90038.0], [56.8, 90038.0], [56.9, 90038.0], [57.0, 90038.0], [57.1, 90038.0], [57.2, 90038.0], [57.3, 90038.0], [57.4, 90038.0], [57.5, 90038.0], [57.6, 90038.0], [57.7, 90038.0], [57.8, 90038.0], [57.9, 90038.0], [58.0, 90038.0], [58.1, 90038.0], [58.2, 90038.0], [58.3, 90038.0], [58.4, 90038.0], [58.5, 90038.0], [58.6, 90038.0], [58.7, 90038.0], [58.8, 90038.0], [58.9, 90038.0], [59.0, 90038.0], [59.1, 90038.0], [59.2, 90038.0], [59.3, 90038.0], [59.4, 90038.0], [59.5, 90038.0], [59.6, 90038.0], [59.7, 90038.0], [59.8, 90038.0], [59.9, 90038.0], [60.0, 90038.0], [60.1, 90038.0], [60.2, 90038.0], [60.3, 90038.0], [60.4, 90038.0], [60.5, 90038.0], [60.6, 90038.0], [60.7, 90038.0], [60.8, 90038.0], [60.9, 90038.0], [61.0, 90039.0], [61.1, 90039.0], [61.2, 90039.0], [61.3, 90039.0], [61.4, 90039.0], [61.5, 90039.0], [61.6, 90039.0], [61.7, 90039.0], [61.8, 90039.0], [61.9, 90039.0], [62.0, 90039.0], [62.1, 90039.0], [62.2, 90039.0], [62.3, 90039.0], [62.4, 90039.0], [62.5, 90039.0], [62.6, 90039.0], [62.7, 90039.0], [62.8, 90039.0], [62.9, 90039.0], [63.0, 90039.0], [63.1, 90039.0], [63.2, 90039.0], [63.3, 90039.0], [63.4, 90039.0], [63.5, 90039.0], [63.6, 90039.0], [63.7, 90039.0], [63.8, 90039.0], [63.9, 90039.0], [64.0, 90040.0], [64.1, 90040.0], [64.2, 90040.0], [64.3, 90040.0], [64.4, 90040.0], [64.5, 90040.0], [64.6, 90040.0], [64.7, 90040.0], [64.8, 90040.0], [64.9, 90040.0], [65.0, 90040.0], [65.1, 90040.0], [65.2, 90040.0], [65.3, 90040.0], [65.4, 90040.0], [65.5, 90040.0], [65.6, 90040.0], [65.7, 90040.0], [65.8, 90040.0], [65.9, 90040.0], [66.0, 90040.0], [66.1, 90040.0], [66.2, 90040.0], [66.3, 90040.0], [66.4, 90040.0], [66.5, 90040.0], [66.6, 90040.0], [66.7, 90040.0], [66.8, 90040.0], [66.9, 90040.0], [67.0, 90040.0], [67.1, 90040.0], [67.2, 90040.0], [67.3, 90040.0], [67.4, 90040.0], [67.5, 90040.0], [67.6, 90040.0], [67.7, 90040.0], [67.8, 90040.0], [67.9, 90040.0], [68.0, 90040.0], [68.1, 90040.0], [68.2, 90040.0], [68.3, 90040.0], [68.4, 90040.0], [68.5, 90040.0], [68.6, 90040.0], [68.7, 90040.0], [68.8, 90040.0], [68.9, 90040.0], [69.0, 90040.0], [69.1, 90040.0], [69.2, 90040.0], [69.3, 90040.0], [69.4, 90040.0], [69.5, 90040.0], [69.6, 90040.0], [69.7, 90040.0], [69.8, 90040.0], [69.9, 90040.0], [70.0, 90040.0], [70.1, 90040.0], [70.2, 90040.0], [70.3, 90040.0], [70.4, 90040.0], [70.5, 90040.0], [70.6, 90040.0], [70.7, 90040.0], [70.8, 90040.0], [70.9, 90040.0], [71.0, 90040.0], [71.1, 90040.0], [71.2, 90040.0], [71.3, 90040.0], [71.4, 90040.0], [71.5, 90040.0], [71.6, 90040.0], [71.7, 90040.0], [71.8, 90040.0], [71.9, 90040.0], [72.0, 90040.0], [72.1, 90040.0], [72.2, 90040.0], [72.3, 90040.0], [72.4, 90040.0], [72.5, 90040.0], [72.6, 90040.0], [72.7, 90040.0], [72.8, 90040.0], [72.9, 90040.0], [73.0, 90040.0], [73.1, 90040.0], [73.2, 90040.0], [73.3, 90040.0], [73.4, 90040.0], [73.5, 90041.0], [73.6, 90041.0], [73.7, 90041.0], [73.8, 90041.0], [73.9, 90041.0], [74.0, 90041.0], [74.1, 90041.0], [74.2, 90041.0], [74.3, 90041.0], [74.4, 90041.0], [74.5, 90041.0], [74.6, 90041.0], [74.7, 90041.0], [74.8, 90041.0], [74.9, 90041.0], [75.0, 90041.0], [75.1, 90041.0], [75.2, 90041.0], [75.3, 90041.0], [75.4, 90041.0], [75.5, 90041.0], [75.6, 90041.0], [75.7, 90041.0], [75.8, 90041.0], [75.9, 90041.0], [76.0, 90041.0], [76.1, 90041.0], [76.2, 90041.0], [76.3, 90041.0], [76.4, 90041.0], [76.5, 90041.0], [76.6, 90041.0], [76.7, 90041.0], [76.8, 90041.0], [76.9, 90041.0], [77.0, 90041.0], [77.1, 90041.0], [77.2, 90041.0], [77.3, 90041.0], [77.4, 90041.0], [77.5, 90041.0], [77.6, 90041.0], [77.7, 90041.0], [77.8, 90041.0], [77.9, 90041.0], [78.0, 90041.0], [78.1, 90041.0], [78.2, 90041.0], [78.3, 90041.0], [78.4, 90041.0], [78.5, 90041.0], [78.6, 90041.0], [78.7, 90041.0], [78.8, 90041.0], [78.9, 90041.0], [79.0, 90042.0], [79.1, 90042.0], [79.2, 90042.0], [79.3, 90042.0], [79.4, 90042.0], [79.5, 90042.0], [79.6, 90042.0], [79.7, 90042.0], [79.8, 90042.0], [79.9, 90042.0], [80.0, 90042.0], [80.1, 90042.0], [80.2, 90042.0], [80.3, 90042.0], [80.4, 90042.0], [80.5, 90042.0], [80.6, 90042.0], [80.7, 90042.0], [80.8, 90042.0], [80.9, 90042.0], [81.0, 90042.0], [81.1, 90042.0], [81.2, 90042.0], [81.3, 90042.0], [81.4, 90042.0], [81.5, 90042.0], [81.6, 90042.0], [81.7, 90042.0], [81.8, 90042.0], [81.9, 90042.0], [82.0, 90042.0], [82.1, 90042.0], [82.2, 90042.0], [82.3, 90042.0], [82.4, 90042.0], [82.5, 90042.0], [82.6, 90042.0], [82.7, 90042.0], [82.8, 90042.0], [82.9, 90042.0], [83.0, 90042.0], [83.1, 90042.0], [83.2, 90042.0], [83.3, 90042.0], [83.4, 90042.0], [83.5, 90043.0], [83.6, 90043.0], [83.7, 90043.0], [83.8, 90043.0], [83.9, 90043.0], [84.0, 90043.0], [84.1, 90043.0], [84.2, 90043.0], [84.3, 90043.0], [84.4, 90043.0], [84.5, 90043.0], [84.6, 90043.0], [84.7, 90043.0], [84.8, 90043.0], [84.9, 90043.0], [85.0, 90043.0], [85.1, 90043.0], [85.2, 90043.0], [85.3, 90043.0], [85.4, 90043.0], [85.5, 90043.0], [85.6, 90043.0], [85.7, 90043.0], [85.8, 90043.0], [85.9, 90043.0], [86.0, 90043.0], [86.1, 90043.0], [86.2, 90043.0], [86.3, 90043.0], [86.4, 90043.0], [86.5, 90043.0], [86.6, 90043.0], [86.7, 90043.0], [86.8, 90043.0], [86.9, 90043.0], [87.0, 90043.0], [87.1, 90043.0], [87.2, 90043.0], [87.3, 90043.0], [87.4, 90043.0], [87.5, 90043.0], [87.6, 90043.0], [87.7, 90043.0], [87.8, 90043.0], [87.9, 90043.0], [88.0, 90044.0], [88.1, 90044.0], [88.2, 90044.0], [88.3, 90044.0], [88.4, 90044.0], [88.5, 90044.0], [88.6, 90044.0], [88.7, 90044.0], [88.8, 90044.0], [88.9, 90044.0], [89.0, 90044.0], [89.1, 90044.0], [89.2, 90044.0], [89.3, 90044.0], [89.4, 90044.0], [89.5, 90045.0], [89.6, 90045.0], [89.7, 90045.0], [89.8, 90045.0], [89.9, 90045.0], [90.0, 90045.0], [90.1, 90045.0], [90.2, 90045.0], [90.3, 90045.0], [90.4, 90045.0], [90.5, 90045.0], [90.6, 90045.0], [90.7, 90045.0], [90.8, 90045.0], [90.9, 90045.0], [91.0, 90045.0], [91.1, 90045.0], [91.2, 90045.0], [91.3, 90045.0], [91.4, 90045.0], [91.5, 90045.0], [91.6, 90045.0], [91.7, 90045.0], [91.8, 90045.0], [91.9, 90045.0], [92.0, 90045.0], [92.1, 90045.0], [92.2, 90045.0], [92.3, 90045.0], [92.4, 90045.0], [92.5, 90046.0], [92.6, 90046.0], [92.7, 90046.0], [92.8, 90046.0], [92.9, 90046.0], [93.0, 90046.0], [93.1, 90046.0], [93.2, 90046.0], [93.3, 90046.0], [93.4, 90046.0], [93.5, 90046.0], [93.6, 90046.0], [93.7, 90046.0], [93.8, 90046.0], [93.9, 90046.0], [94.0, 90049.0], [94.1, 90049.0], [94.2, 90049.0], [94.3, 90049.0], [94.4, 90049.0], [94.5, 90051.0], [94.6, 90051.0], [94.7, 90051.0], [94.8, 90051.0], [94.9, 90051.0], [95.0, 90054.0], [95.1, 90054.0], [95.2, 90054.0], [95.3, 90054.0], [95.4, 90054.0], [95.5, 90055.0], [95.6, 90055.0], [95.7, 90055.0], [95.8, 90055.0], [95.9, 90055.0], [96.0, 90056.0], [96.1, 90056.0], [96.2, 90056.0], [96.3, 90056.0], [96.4, 90056.0], [96.5, 90058.0], [96.6, 90058.0], [96.7, 90058.0], [96.8, 90058.0], [96.9, 90058.0], [97.0, 90060.0], [97.1, 90060.0], [97.2, 90060.0], [97.3, 90060.0], [97.4, 90060.0], [97.5, 90060.0], [97.6, 90060.0], [97.7, 90060.0], [97.8, 90060.0], [97.9, 90060.0], [98.0, 90060.0], [98.1, 90060.0], [98.2, 90060.0], [98.3, 90060.0], [98.4, 90060.0], [98.5, 90061.0], [98.6, 90061.0], [98.7, 90061.0], [98.8, 90061.0], [98.9, 90061.0], [99.0, 90065.0], [99.1, 90065.0], [99.2, 90065.0], [99.3, 90065.0], [99.4, 90065.0], [99.5, 90078.0], [99.6, 90078.0], [99.7, 90078.0], [99.8, 90078.0], [99.9, 90078.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9128.0, "series": [{"data": [[0.0, 9128.0], [600.0, 1.0], [15000.0, 51.0], [1000.0, 387.0], [1100.0, 148.0], [1200.0, 28.0], [1300.0, 13.0], [1400.0, 10.0], [100.0, 8672.0], [2000.0, 9.0], [2100.0, 4.0], [2300.0, 2.0], [2200.0, 5.0], [3000.0, 388.0], [3100.0, 71.0], [200.0, 407.0], [3200.0, 5.0], [3300.0, 52.0], [3400.0, 26.0], [4100.0, 1.0], [300.0, 273.0], [400.0, 156.0], [7000.0, 150.0], [7100.0, 1.0], [500.0, 12.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[73400.0, 23.0], [73600.0, 20.0], [72800.0, 21.0], [73000.0, 31.0], [73300.0, 23.0], [72900.0, 12.0], [73100.0, 14.0], [73700.0, 21.0], [73200.0, 24.0], [73500.0, 6.0], [73800.0, 5.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[90000.0, 200.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 90000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1751.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 9348.0, "series": [{"data": [[0.0, 9301.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 9348.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1751.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 101.77000000000007, "minX": 1.61757822E12, "maxY": 173.04650000000007, "series": [{"data": [[1.61757828E12, 152.46499999999997]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61757822E12, 173.04650000000007]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.61757828E12, 101.77000000000007]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757828E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.0, "minX": 2.0, "maxY": 90053.5, "series": [{"data": [[414.0, 28.57142857142857], [413.0, 41.9], [415.0, 29.0], [412.0, 27.625], [411.0, 28.5], [410.0, 28.25], [409.0, 28.666666666666668], [408.0, 28.333333333333332], [407.0, 29.4], [401.0, 28.363636363636363], [403.0, 27.666666666666668], [402.0, 27.75], [406.0, 27.0], [405.0, 28.0], [404.0, 27.666666666666668], [428.0, 29.375], [416.0, 28.266666666666666], [419.0, 29.000000000000004], [418.0, 27.0], [417.0, 28.0], [421.0, 27.6], [420.0, 27.25], [422.0, 36.2], [423.0, 29.0], [424.0, 28.2], [425.0, 28.307692307692307], [426.0, 28.4], [427.0, 28.375000000000004], [429.0, 28.31578947368421], [430.0, 28.187500000000004], [431.0, 29.500000000000004], [433.0, 28.5], [432.0, 29.66666666666667], [434.0, 29.384615384615383], [435.0, 31.86842105263157], [436.0, 96.15254237288134], [437.0, 62.00000000000001], [438.0, 40.25], [439.0, 38.363636363636374], [440.0, 31.647058823529413], [446.0, 33.303030303030305], [447.0, 34.15555555555557], [444.0, 31.41935483870968], [445.0, 32.35185185185186], [441.0, 30.211538461538463], [442.0, 30.415384615384617], [443.0, 31.5], [449.0, 33.49242424242425], [448.0, 32.291666666666664], [450.0, 34.58064516129032], [451.0, 907.1514124293777], [452.0, 32.5], [453.0, 31.750000000000007], [454.0, 31.428571428571427], [455.0, 36.285714285714285], [456.0, 32.5], [462.0, 38.81818181818182], [463.0, 35.285714285714285], [460.0, 34.0], [461.0, 39.0], [457.0, 30.14285714285714], [458.0, 36.83333333333333], [459.0, 30.424242424242422], [465.0, 42.2608695652174], [464.0, 43.5], [466.0, 51.22222222222222], [467.0, 163.88888888888889], [468.0, 254.42307692307693], [469.0, 50.57142857142857], [470.0, 39.42857142857143], [471.0, 37.49999999999999], [472.0, 46.30769230769231], [478.0, 54.357142857142854], [479.0, 46.333333333333336], [476.0, 36.12499999999999], [477.0, 45.5], [473.0, 42.0], [474.0, 42.5], [475.0, 48.5], [481.0, 44.666666666666664], [480.0, 33.61904761904761], [482.0, 38.0909090909091], [483.0, 45.6875], [484.0, 45.81818181818182], [485.0, 45.24999999999999], [486.0, 40.2], [487.0, 32.70588235294118], [488.0, 45.9], [494.0, 48.333333333333336], [495.0, 55.0], [492.0, 35.43478260869566], [493.0, 37.36363636363636], [489.0, 46.300000000000004], [490.0, 34.38461538461538], [491.0, 46.559999999999995], [497.0, 43.7], [496.0, 41.27499999999999], [498.0, 58.49999999999999], [499.0, 38.892857142857146], [500.0, 51.85], [501.0, 59.75], [502.0, 63.00000000000001], [503.0, 53.0], [504.0, 90.60714285714285], [510.0, 126.4], [511.0, 212.36585365853657], [508.0, 365.972972972973], [509.0, 199.0909090909091], [505.0, 265.14285714285717], [506.0, 286.46666666666664], [507.0, 289.00000000000006], [515.0, 73.0], [512.0, 62.81818181818182], [526.0, 74.0], [527.0, 68.9], [524.0, 60.43478260869565], [525.0, 63.69230769230769], [522.0, 68.14285714285714], [523.0, 57.23076923076923], [513.0, 53.91176470588234], [514.0, 55.888888888888886], [516.0, 53.666666666666664], [517.0, 60.1764705882353], [518.0, 72.27272727272727], [519.0, 60.82608695652174], [528.0, 64.99999999999999], [542.0, 82.36363636363637], [543.0, 70.84615384615385], [540.0, 69.96875], [541.0, 68.21875], [538.0, 82.75], [539.0, 78.62500000000003], [536.0, 69.3], [537.0, 78.58620689655172], [529.0, 72.89999999999999], [530.0, 68.64285714285714], [531.0, 81.22222222222223], [532.0, 63.41379310344826], [533.0, 60.12903225806451], [534.0, 64.02222222222223], [535.0, 63.10666666666668], [520.0, 66.5625], [521.0, 71.46153846153848], [547.0, 88.66666666666667], [544.0, 75.41666666666667], [558.0, 84.5], [559.0, 87.81818181818181], [556.0, 80.13541666666669], [557.0, 81.81481481481482], [554.0, 169.4230769230769], [555.0, 118.76829268292681], [545.0, 71.65671641791046], [546.0, 84.57894736842104], [548.0, 107.17525773195875], [549.0, 154.11764705882354], [550.0, 209.1666666666667], [551.0, 227.8], [560.0, 80.11235955056183], [574.0, 87.12605042016803], [575.0, 88.8813559322034], [572.0, 83.17187499999999], [573.0, 93.0], [570.0, 97.593984962406], [571.0, 90.77777777777777], [568.0, 80.66666666666667], [569.0, 90.00000000000001], [561.0, 82.79310344827584], [562.0, 85.5], [563.0, 91.72727272727272], [564.0, 82.14583333333333], [565.0, 94.64285714285714], [566.0, 81.21641791044775], [567.0, 82.65217391304348], [552.0, 168.41666666666666], [553.0, 229.58333333333334], [579.0, 95.35714285714285], [576.0, 94.67105263157895], [590.0, 99.0], [591.0, 90.6470588235294], [588.0, 105.4375], [589.0, 32.37142857142857], [577.0, 98.13793103448275], [578.0, 94.17647058823529], [580.0, 92.5068493150685], [581.0, 89.81081081081082], [582.0, 96.06521739130436], [583.0, 193.1994047619049], [592.0, 77.57142857142857], [600.0, 299.91400790033236], [593.0, 39.03846153846155], [594.0, 45.77499999999999], [595.0, 62.39999999999999], [596.0, 33.73684210526316], [597.0, 37.375], [598.0, 40.177777777777784], [599.0, 73.42857142857142], [584.0, 115.69230769230768], [586.0, 27.666666666666668], [585.0, 1223.0546583850937], [587.0, 94.08333333333333]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[573.0465000000012, 308.115500000004]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[332.0, 73349.4705882353], [322.0, 73264.08333333333], [323.0, 73143.0], [324.0, 73089.0], [329.0, 73411.0], [326.0, 73259.0], [327.0, 73161.18181818182], [328.0, 73145.0], [330.0, 73276.8], [334.0, 73310.77777777777], [335.0, 73276.42857142857], [333.0, 73342.0], [340.0, 73389.03333333335], [338.0, 73255.23076923075], [336.0, 73292.6], [337.0, 73403.0], [339.0, 72846.0], [399.0, 73218.25], [395.0, 73335.0], [396.0, 73265.66666666667], [397.0, 73423.125], [394.0, 73295.55555555556], [398.0, 73347.8], [400.0, 73313.17857142858]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[352.44, 73306.00499999999]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[2.0, 90053.5], [5.0, 90049.66666666667], [6.0, 90044.0], [9.0, 90038.0], [12.0, 90037.66666666667], [15.0, 90036.0], [18.0, 90035.0], [21.0, 90035.0], [25.0, 90036.75], [28.0, 90037.0], [31.0, 90036.0], [34.0, 90035.0], [37.0, 90034.66666666667], [40.0, 90034.66666666667], [44.0, 90037.25], [46.0, 90037.5], [50.0, 90036.0], [53.0, 90037.0], [56.0, 90035.33333333333], [59.0, 90035.0], [62.0, 90033.33333333333], [66.0, 90034.25], [69.0, 90036.33333333333], [72.0, 90035.33333333333], [78.0, 90038.0], [77.0, 90033.0], [76.0, 90035.5], [83.0, 90036.8], [85.0, 90037.5], [91.0, 90037.5], [89.0, 90036.75], [94.0, 90034.0], [98.0, 90034.5], [101.0, 90036.0], [107.0, 90035.0], [104.0, 90035.66666666667], [111.0, 90035.75], [114.0, 90038.33333333333], [117.0, 90036.66666666667], [123.0, 90038.5], [121.0, 90039.0], [126.0, 90035.66666666667], [132.0, 90035.66666666667], [129.0, 90035.0], [142.0, 90034.75], [138.0, 90035.5], [136.0, 90036.0], [151.0, 90035.0], [148.0, 90035.0], [145.0, 90035.66666666667], [158.0, 90035.5], [154.0, 90033.33333333333], [165.0, 90037.5], [161.0, 90037.33333333333], [173.0, 90035.5], [171.0, 90041.5], [169.0, 90034.0], [168.0, 90040.0], [180.0, 90037.5], [178.0, 90036.6], [191.0, 90049.75], [187.0, 90039.0], [184.0, 90037.5], [200.0, 90052.33333333333]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}, {"data": [[101.77000000000007, 90037.59000000005]], "isOverall": false, "label": "JoinRoom&Wait30sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61757822E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757828E12, 0.0], [1.61757822E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61757828E12, 0.0], [1.61757822E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757828E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 308.115500000004, "minX": 1.61757822E12, "maxY": 90037.59000000005, "series": [{"data": [[1.61757822E12, 308.115500000004]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757828E12, 73306.00499999999]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757828E12, 90037.59000000005]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757828E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757822E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757822E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757828E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757828E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757828E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61757822E12, "maxY": 4.9E-324, "series": [{"data": [[1.61757822E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61757828E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61757828E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait30sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757828E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61757822E12, "maxY": 90078.0, "series": [{"data": [[1.61757828E12, 90078.0], [1.61757822E12, 15075.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61757828E12, 90042.0], [1.61757822E12, 225.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61757828E12, 90060.0], [1.61757822E12, 7044.990000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61757828E12, 90045.0], [1.61757822E12, 1086.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61757828E12, 72836.0], [1.61757822E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61757828E12, 81925.0], [1.61757822E12, 106.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757828E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 3.0, "maxY": 90038.0, "series": [{"data": [[612.0, 50.5], [639.0, 131.0], [698.0, 124.0], [758.0, 66.0], [3.0, 27.0], [863.0, 157.0], [872.0, 137.0], [918.0, 64.0], [1020.0, 104.0], [1069.0, 118.0], [1077.0, 134.0], [1078.0, 92.0], [1121.0, 82.0], [76.0, 366.0], [1257.0, 34.0], [77.0, 90038.0], [1352.0, 91.0], [1347.0, 143.0], [1414.0, 116.0], [1501.0, 129.0], [7.0, 27.0], [117.0, 3065.0], [123.0, 46542.0], [149.0, 166.0], [200.0, 73290.5], [297.0, 28.0], [315.0, 43.0], [375.0, 36.0], [448.0, 29.0], [494.0, 30.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1501.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 4.9E-324, "series": [{"data": [[612.0, 0.0], [639.0, 0.0], [698.0, 0.0], [758.0, 0.0], [3.0, 0.0], [863.0, 0.0], [872.0, 0.0], [918.0, 0.0], [1020.0, 0.0], [1069.0, 0.0], [1077.0, 0.0], [1078.0, 0.0], [1121.0, 0.0], [76.0, 0.0], [1257.0, 0.0], [77.0, 0.0], [1352.0, 0.0], [1347.0, 0.0], [1414.0, 0.0], [1501.0, 0.0], [7.0, 0.0], [117.0, 0.0], [123.0, 0.0], [149.0, 0.0], [200.0, 0.0], [297.0, 0.0], [315.0, 0.0], [375.0, 0.0], [448.0, 0.0], [494.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1501.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.61757816E12, "maxY": 333.3333333333333, "series": [{"data": [[1.61757822E12, 333.3333333333333], [1.61757816E12, 6.666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757822E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.61757822E12, "maxY": 333.3333333333333, "series": [{"data": [[1.61757828E12, 6.666666666666667], [1.61757822E12, 333.3333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61757828E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.61757822E12, "maxY": 333.3333333333333, "series": [{"data": [[1.61757828E12, 3.3333333333333335]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61757822E12, 333.3333333333333]], "isOverall": false, "label": "JoinRoom-success", "isController": false}, {"data": [[1.61757828E12, 3.3333333333333335]], "isOverall": false, "label": "JoinRoom&Wait30sec-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757828E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.61757822E12, "maxY": 333.3333333333333, "series": [{"data": [[1.61757828E12, 6.666666666666667], [1.61757822E12, 333.3333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61757828E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

