/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 61851.0, "series": [{"data": [[0.0, 27.0], [0.1, 29.0], [0.2, 30.0], [0.3, 31.0], [0.4, 32.0], [0.5, 32.0], [0.6, 33.0], [0.7, 33.0], [0.8, 34.0], [0.9, 34.0], [1.0, 35.0], [1.1, 36.0], [1.2, 37.0], [1.3, 40.0], [1.4, 42.0], [1.5, 46.0], [1.6, 47.0], [1.7, 49.0], [1.8, 51.0], [1.9, 52.0], [2.0, 52.0], [2.1, 54.0], [2.2, 54.0], [2.3, 55.0], [2.4, 56.0], [2.5, 57.0], [2.6, 59.0], [2.7, 60.0], [2.8, 62.0], [2.9, 68.0], [3.0, 71.0], [3.1, 73.0], [3.2, 75.0], [3.3, 79.0], [3.4, 81.0], [3.5, 83.0], [3.6, 84.0], [3.7, 85.0], [3.8, 89.0], [3.9, 92.0], [4.0, 93.0], [4.1, 96.0], [4.2, 98.0], [4.3, 100.0], [4.4, 102.0], [4.5, 104.0], [4.6, 105.0], [4.7, 105.0], [4.8, 106.0], [4.9, 107.0], [5.0, 107.0], [5.1, 108.0], [5.2, 109.0], [5.3, 111.0], [5.4, 114.0], [5.5, 116.0], [5.6, 117.0], [5.7, 118.0], [5.8, 119.0], [5.9, 120.0], [6.0, 121.0], [6.1, 121.0], [6.2, 125.0], [6.3, 126.0], [6.4, 128.0], [6.5, 129.0], [6.6, 130.0], [6.7, 131.0], [6.8, 131.0], [6.9, 134.0], [7.0, 135.0], [7.1, 138.0], [7.2, 139.0], [7.3, 140.0], [7.4, 142.0], [7.5, 144.0], [7.6, 146.0], [7.7, 147.0], [7.8, 149.0], [7.9, 149.0], [8.0, 151.0], [8.1, 153.0], [8.2, 154.0], [8.3, 157.0], [8.4, 162.0], [8.5, 164.0], [8.6, 165.0], [8.7, 165.0], [8.8, 166.0], [8.9, 166.0], [9.0, 168.0], [9.1, 169.0], [9.2, 169.0], [9.3, 171.0], [9.4, 172.0], [9.5, 176.0], [9.6, 180.0], [9.7, 183.0], [9.8, 184.0], [9.9, 186.0], [10.0, 187.0], [10.1, 188.0], [10.2, 190.0], [10.3, 191.0], [10.4, 191.0], [10.5, 192.0], [10.6, 193.0], [10.7, 196.0], [10.8, 198.0], [10.9, 201.0], [11.0, 203.0], [11.1, 206.0], [11.2, 207.0], [11.3, 208.0], [11.4, 209.0], [11.5, 211.0], [11.6, 212.0], [11.7, 213.0], [11.8, 214.0], [11.9, 217.0], [12.0, 219.0], [12.1, 220.0], [12.2, 221.0], [12.3, 221.0], [12.4, 222.0], [12.5, 223.0], [12.6, 224.0], [12.7, 224.0], [12.8, 226.0], [12.9, 228.0], [13.0, 229.0], [13.1, 230.0], [13.2, 231.0], [13.3, 231.0], [13.4, 232.0], [13.5, 233.0], [13.6, 234.0], [13.7, 235.0], [13.8, 236.0], [13.9, 237.0], [14.0, 237.0], [14.1, 238.0], [14.2, 239.0], [14.3, 240.0], [14.4, 240.0], [14.5, 240.0], [14.6, 241.0], [14.7, 241.0], [14.8, 241.0], [14.9, 242.0], [15.0, 243.0], [15.1, 243.0], [15.2, 244.0], [15.3, 244.0], [15.4, 244.0], [15.5, 244.0], [15.6, 245.0], [15.7, 245.0], [15.8, 245.0], [15.9, 246.0], [16.0, 246.0], [16.1, 247.0], [16.2, 247.0], [16.3, 247.0], [16.4, 247.0], [16.5, 247.0], [16.6, 248.0], [16.7, 248.0], [16.8, 249.0], [16.9, 249.0], [17.0, 249.0], [17.1, 250.0], [17.2, 250.0], [17.3, 250.0], [17.4, 251.0], [17.5, 251.0], [17.6, 251.0], [17.7, 251.0], [17.8, 251.0], [17.9, 252.0], [18.0, 252.0], [18.1, 253.0], [18.2, 253.0], [18.3, 253.0], [18.4, 253.0], [18.5, 254.0], [18.6, 254.0], [18.7, 254.0], [18.8, 254.0], [18.9, 255.0], [19.0, 255.0], [19.1, 255.0], [19.2, 255.0], [19.3, 256.0], [19.4, 256.0], [19.5, 256.0], [19.6, 256.0], [19.7, 257.0], [19.8, 257.0], [19.9, 257.0], [20.0, 258.0], [20.1, 258.0], [20.2, 258.0], [20.3, 258.0], [20.4, 258.0], [20.5, 258.0], [20.6, 259.0], [20.7, 259.0], [20.8, 259.0], [20.9, 259.0], [21.0, 259.0], [21.1, 259.0], [21.2, 260.0], [21.3, 260.0], [21.4, 260.0], [21.5, 260.0], [21.6, 261.0], [21.7, 261.0], [21.8, 261.0], [21.9, 261.0], [22.0, 261.0], [22.1, 262.0], [22.2, 262.0], [22.3, 262.0], [22.4, 262.0], [22.5, 262.0], [22.6, 262.0], [22.7, 262.0], [22.8, 262.0], [22.9, 262.0], [23.0, 263.0], [23.1, 263.0], [23.2, 263.0], [23.3, 263.0], [23.4, 263.0], [23.5, 263.0], [23.6, 263.0], [23.7, 264.0], [23.8, 264.0], [23.9, 264.0], [24.0, 264.0], [24.1, 264.0], [24.2, 265.0], [24.3, 265.0], [24.4, 265.0], [24.5, 265.0], [24.6, 266.0], [24.7, 266.0], [24.8, 266.0], [24.9, 267.0], [25.0, 267.0], [25.1, 267.0], [25.2, 268.0], [25.3, 268.0], [25.4, 268.0], [25.5, 269.0], [25.6, 269.0], [25.7, 269.0], [25.8, 270.0], [25.9, 270.0], [26.0, 270.0], [26.1, 270.0], [26.2, 271.0], [26.3, 271.0], [26.4, 271.0], [26.5, 272.0], [26.6, 272.0], [26.7, 272.0], [26.8, 273.0], [26.9, 273.0], [27.0, 273.0], [27.1, 273.0], [27.2, 274.0], [27.3, 274.0], [27.4, 274.0], [27.5, 275.0], [27.6, 275.0], [27.7, 275.0], [27.8, 275.0], [27.9, 276.0], [28.0, 276.0], [28.1, 276.0], [28.2, 277.0], [28.3, 277.0], [28.4, 277.0], [28.5, 277.0], [28.6, 278.0], [28.7, 278.0], [28.8, 278.0], [28.9, 279.0], [29.0, 280.0], [29.1, 280.0], [29.2, 282.0], [29.3, 283.0], [29.4, 284.0], [29.5, 285.0], [29.6, 286.0], [29.7, 286.0], [29.8, 287.0], [29.9, 288.0], [30.0, 289.0], [30.1, 290.0], [30.2, 291.0], [30.3, 291.0], [30.4, 292.0], [30.5, 293.0], [30.6, 294.0], [30.7, 298.0], [30.8, 300.0], [30.9, 302.0], [31.0, 304.0], [31.1, 305.0], [31.2, 307.0], [31.3, 312.0], [31.4, 321.0], [31.5, 325.0], [31.6, 333.0], [31.7, 338.0], [31.8, 345.0], [31.9, 352.0], [32.0, 356.0], [32.1, 358.0], [32.2, 359.0], [32.3, 360.0], [32.4, 361.0], [32.5, 361.0], [32.6, 362.0], [32.7, 362.0], [32.8, 364.0], [32.9, 365.0], [33.0, 366.0], [33.1, 367.0], [33.2, 367.0], [33.3, 368.0], [33.4, 369.0], [33.5, 369.0], [33.6, 370.0], [33.7, 370.0], [33.8, 372.0], [33.9, 374.0], [34.0, 376.0], [34.1, 377.0], [34.2, 378.0], [34.3, 381.0], [34.4, 383.0], [34.5, 386.0], [34.6, 395.0], [34.7, 402.0], [34.8, 405.0], [34.9, 409.0], [35.0, 411.0], [35.1, 414.0], [35.2, 428.0], [35.3, 437.0], [35.4, 437.0], [35.5, 438.0], [35.6, 440.0], [35.7, 442.0], [35.8, 444.0], [35.9, 446.0], [36.0, 447.0], [36.1, 448.0], [36.2, 449.0], [36.3, 449.0], [36.4, 450.0], [36.5, 451.0], [36.6, 454.0], [36.7, 456.0], [36.8, 460.0], [36.9, 461.0], [37.0, 462.0], [37.1, 464.0], [37.2, 464.0], [37.3, 465.0], [37.4, 465.0], [37.5, 466.0], [37.6, 467.0], [37.7, 468.0], [37.8, 468.0], [37.9, 469.0], [38.0, 470.0], [38.1, 470.0], [38.2, 471.0], [38.3, 471.0], [38.4, 471.0], [38.5, 472.0], [38.6, 472.0], [38.7, 473.0], [38.8, 473.0], [38.9, 473.0], [39.0, 474.0], [39.1, 476.0], [39.2, 476.0], [39.3, 477.0], [39.4, 480.0], [39.5, 492.0], [39.6, 499.0], [39.7, 530.0], [39.8, 532.0], [39.9, 537.0], [40.0, 540.0], [40.1, 543.0], [40.2, 559.0], [40.3, 592.0], [40.4, 648.0], [40.5, 673.0], [40.6, 1248.0], [40.7, 1256.0], [40.8, 1266.0], [40.9, 2144.0], [41.0, 2145.0], [41.1, 2146.0], [41.2, 2146.0], [41.3, 2146.0], [41.4, 2147.0], [41.5, 2147.0], [41.6, 2147.0], [41.7, 2147.0], [41.8, 2148.0], [41.9, 2148.0], [42.0, 2148.0], [42.1, 2148.0], [42.2, 2148.0], [42.3, 2148.0], [42.4, 2149.0], [42.5, 2149.0], [42.6, 2149.0], [42.7, 2149.0], [42.8, 2149.0], [42.9, 2149.0], [43.0, 2150.0], [43.1, 2150.0], [43.2, 2150.0], [43.3, 2150.0], [43.4, 2150.0], [43.5, 2150.0], [43.6, 2150.0], [43.7, 2150.0], [43.8, 2151.0], [43.9, 2151.0], [44.0, 2151.0], [44.1, 2151.0], [44.2, 2151.0], [44.3, 2151.0], [44.4, 2151.0], [44.5, 2151.0], [44.6, 2151.0], [44.7, 2152.0], [44.8, 2152.0], [44.9, 2152.0], [45.0, 2152.0], [45.1, 2152.0], [45.2, 2152.0], [45.3, 2152.0], [45.4, 2152.0], [45.5, 2152.0], [45.6, 2152.0], [45.7, 2152.0], [45.8, 2152.0], [45.9, 2153.0], [46.0, 2153.0], [46.1, 2153.0], [46.2, 2153.0], [46.3, 2153.0], [46.4, 2153.0], [46.5, 2153.0], [46.6, 2153.0], [46.7, 2153.0], [46.8, 2153.0], [46.9, 2153.0], [47.0, 2153.0], [47.1, 2153.0], [47.2, 2153.0], [47.3, 2154.0], [47.4, 2154.0], [47.5, 2154.0], [47.6, 2154.0], [47.7, 2154.0], [47.8, 2154.0], [47.9, 2154.0], [48.0, 2154.0], [48.1, 2154.0], [48.2, 2154.0], [48.3, 2154.0], [48.4, 2154.0], [48.5, 2154.0], [48.6, 2154.0], [48.7, 2154.0], [48.8, 2154.0], [48.9, 2154.0], [49.0, 2154.0], [49.1, 2155.0], [49.2, 2155.0], [49.3, 2155.0], [49.4, 2155.0], [49.5, 2155.0], [49.6, 2155.0], [49.7, 2155.0], [49.8, 2155.0], [49.9, 2155.0], [50.0, 2155.0], [50.1, 2155.0], [50.2, 2155.0], [50.3, 2155.0], [50.4, 2155.0], [50.5, 2155.0], [50.6, 2155.0], [50.7, 2155.0], [50.8, 2155.0], [50.9, 2155.0], [51.0, 2155.0], [51.1, 2155.0], [51.2, 2155.0], [51.3, 2155.0], [51.4, 2156.0], [51.5, 2156.0], [51.6, 2156.0], [51.7, 2156.0], [51.8, 2156.0], [51.9, 2156.0], [52.0, 2156.0], [52.1, 2156.0], [52.2, 2156.0], [52.3, 2156.0], [52.4, 2156.0], [52.5, 2156.0], [52.6, 2156.0], [52.7, 2156.0], [52.8, 2156.0], [52.9, 2156.0], [53.0, 2156.0], [53.1, 2156.0], [53.2, 2156.0], [53.3, 2156.0], [53.4, 2156.0], [53.5, 2156.0], [53.6, 2156.0], [53.7, 2157.0], [53.8, 2157.0], [53.9, 2157.0], [54.0, 2157.0], [54.1, 2157.0], [54.2, 2157.0], [54.3, 2157.0], [54.4, 2157.0], [54.5, 2157.0], [54.6, 2157.0], [54.7, 2157.0], [54.8, 2157.0], [54.9, 2157.0], [55.0, 2157.0], [55.1, 2157.0], [55.2, 2157.0], [55.3, 2157.0], [55.4, 2157.0], [55.5, 2157.0], [55.6, 2157.0], [55.7, 2157.0], [55.8, 2157.0], [55.9, 2157.0], [56.0, 2157.0], [56.1, 2158.0], [56.2, 2158.0], [56.3, 2158.0], [56.4, 2158.0], [56.5, 2158.0], [56.6, 2158.0], [56.7, 2158.0], [56.8, 2158.0], [56.9, 2158.0], [57.0, 2158.0], [57.1, 2158.0], [57.2, 2158.0], [57.3, 2158.0], [57.4, 2158.0], [57.5, 2158.0], [57.6, 2158.0], [57.7, 2158.0], [57.8, 2158.0], [57.9, 2158.0], [58.0, 2158.0], [58.1, 2158.0], [58.2, 2158.0], [58.3, 2158.0], [58.4, 2158.0], [58.5, 2159.0], [58.6, 2159.0], [58.7, 2159.0], [58.8, 2159.0], [58.9, 2159.0], [59.0, 2159.0], [59.1, 2159.0], [59.2, 2159.0], [59.3, 2159.0], [59.4, 2159.0], [59.5, 2159.0], [59.6, 2159.0], [59.7, 2159.0], [59.8, 2159.0], [59.9, 2159.0], [60.0, 2159.0], [60.1, 2159.0], [60.2, 2159.0], [60.3, 2159.0], [60.4, 2159.0], [60.5, 2159.0], [60.6, 2159.0], [60.7, 2159.0], [60.8, 2159.0], [60.9, 2160.0], [61.0, 2160.0], [61.1, 2160.0], [61.2, 2160.0], [61.3, 2160.0], [61.4, 2160.0], [61.5, 2160.0], [61.6, 2160.0], [61.7, 2160.0], [61.8, 2160.0], [61.9, 2160.0], [62.0, 2160.0], [62.1, 2160.0], [62.2, 2160.0], [62.3, 2160.0], [62.4, 2160.0], [62.5, 2160.0], [62.6, 2160.0], [62.7, 2160.0], [62.8, 2160.0], [62.9, 2160.0], [63.0, 2161.0], [63.1, 2161.0], [63.2, 2161.0], [63.3, 2161.0], [63.4, 2161.0], [63.5, 2161.0], [63.6, 2161.0], [63.7, 2161.0], [63.8, 2161.0], [63.9, 2161.0], [64.0, 2161.0], [64.1, 2161.0], [64.2, 2161.0], [64.3, 2161.0], [64.4, 2161.0], [64.5, 2161.0], [64.6, 2161.0], [64.7, 2161.0], [64.8, 2161.0], [64.9, 2161.0], [65.0, 2161.0], [65.1, 2162.0], [65.2, 2162.0], [65.3, 2162.0], [65.4, 2162.0], [65.5, 2162.0], [65.6, 2162.0], [65.7, 2162.0], [65.8, 2162.0], [65.9, 2162.0], [66.0, 2162.0], [66.1, 2162.0], [66.2, 2162.0], [66.3, 2162.0], [66.4, 2162.0], [66.5, 2162.0], [66.6, 2162.0], [66.7, 2162.0], [66.8, 2163.0], [66.9, 2163.0], [67.0, 2163.0], [67.1, 2163.0], [67.2, 2163.0], [67.3, 2163.0], [67.4, 2163.0], [67.5, 2163.0], [67.6, 2163.0], [67.7, 2163.0], [67.8, 2163.0], [67.9, 2163.0], [68.0, 2163.0], [68.1, 2163.0], [68.2, 2163.0], [68.3, 2163.0], [68.4, 2164.0], [68.5, 2164.0], [68.6, 2164.0], [68.7, 2164.0], [68.8, 2164.0], [68.9, 2164.0], [69.0, 2164.0], [69.1, 2164.0], [69.2, 2164.0], [69.3, 2164.0], [69.4, 2164.0], [69.5, 2164.0], [69.6, 2164.0], [69.7, 2164.0], [69.8, 2164.0], [69.9, 2164.0], [70.0, 2165.0], [70.1, 2165.0], [70.2, 2165.0], [70.3, 2165.0], [70.4, 2165.0], [70.5, 2165.0], [70.6, 2165.0], [70.7, 2165.0], [70.8, 2165.0], [70.9, 2165.0], [71.0, 2165.0], [71.1, 2165.0], [71.2, 2165.0], [71.3, 2165.0], [71.4, 2166.0], [71.5, 2166.0], [71.6, 2166.0], [71.7, 2166.0], [71.8, 2166.0], [71.9, 2166.0], [72.0, 2166.0], [72.1, 2166.0], [72.2, 2166.0], [72.3, 2166.0], [72.4, 2166.0], [72.5, 2166.0], [72.6, 2167.0], [72.7, 2167.0], [72.8, 2167.0], [72.9, 2167.0], [73.0, 2167.0], [73.1, 2167.0], [73.2, 2167.0], [73.3, 2167.0], [73.4, 2167.0], [73.5, 2167.0], [73.6, 2167.0], [73.7, 2167.0], [73.8, 2167.0], [73.9, 2168.0], [74.0, 2168.0], [74.1, 2168.0], [74.2, 2168.0], [74.3, 2168.0], [74.4, 2168.0], [74.5, 2168.0], [74.6, 2168.0], [74.7, 2168.0], [74.8, 2168.0], [74.9, 2168.0], [75.0, 2168.0], [75.1, 2169.0], [75.2, 2169.0], [75.3, 2169.0], [75.4, 2169.0], [75.5, 2169.0], [75.6, 2169.0], [75.7, 2169.0], [75.8, 2169.0], [75.9, 2169.0], [76.0, 2169.0], [76.1, 2169.0], [76.2, 2169.0], [76.3, 2170.0], [76.4, 2170.0], [76.5, 2170.0], [76.6, 2170.0], [76.7, 2170.0], [76.8, 2170.0], [76.9, 2170.0], [77.0, 2170.0], [77.1, 2170.0], [77.2, 2170.0], [77.3, 2170.0], [77.4, 2170.0], [77.5, 2170.0], [77.6, 2171.0], [77.7, 2171.0], [77.8, 2171.0], [77.9, 2171.0], [78.0, 2171.0], [78.1, 2171.0], [78.2, 2171.0], [78.3, 2171.0], [78.4, 2171.0], [78.5, 2171.0], [78.6, 2171.0], [78.7, 2171.0], [78.8, 2171.0], [78.9, 2171.0], [79.0, 2172.0], [79.1, 2172.0], [79.2, 2172.0], [79.3, 2172.0], [79.4, 2172.0], [79.5, 2172.0], [79.6, 2172.0], [79.7, 2172.0], [79.8, 2172.0], [79.9, 2172.0], [80.0, 2172.0], [80.1, 2172.0], [80.2, 2173.0], [80.3, 2173.0], [80.4, 2173.0], [80.5, 2173.0], [80.6, 2173.0], [80.7, 2173.0], [80.8, 2173.0], [80.9, 2173.0], [81.0, 2173.0], [81.1, 2173.0], [81.2, 2173.0], [81.3, 2173.0], [81.4, 2173.0], [81.5, 2174.0], [81.6, 2174.0], [81.7, 2174.0], [81.8, 2174.0], [81.9, 2174.0], [82.0, 2174.0], [82.1, 2174.0], [82.2, 2174.0], [82.3, 2174.0], [82.4, 2174.0], [82.5, 2174.0], [82.6, 2175.0], [82.7, 2175.0], [82.8, 2175.0], [82.9, 2175.0], [83.0, 2175.0], [83.1, 2175.0], [83.2, 2175.0], [83.3, 2175.0], [83.4, 2175.0], [83.5, 2175.0], [83.6, 2175.0], [83.7, 2175.0], [83.8, 2176.0], [83.9, 2176.0], [84.0, 2176.0], [84.1, 2176.0], [84.2, 2176.0], [84.3, 2176.0], [84.4, 2176.0], [84.5, 2176.0], [84.6, 2176.0], [84.7, 2176.0], [84.8, 2177.0], [84.9, 2177.0], [85.0, 2177.0], [85.1, 2177.0], [85.2, 2177.0], [85.3, 2177.0], [85.4, 2177.0], [85.5, 2177.0], [85.6, 2177.0], [85.7, 2177.0], [85.8, 2178.0], [85.9, 2178.0], [86.0, 2178.0], [86.1, 2178.0], [86.2, 2178.0], [86.3, 2178.0], [86.4, 2178.0], [86.5, 2178.0], [86.6, 2178.0], [86.7, 2178.0], [86.8, 2179.0], [86.9, 2179.0], [87.0, 2179.0], [87.1, 2179.0], [87.2, 2179.0], [87.3, 2179.0], [87.4, 2179.0], [87.5, 2179.0], [87.6, 2180.0], [87.7, 2180.0], [87.8, 2180.0], [87.9, 2180.0], [88.0, 2180.0], [88.1, 2180.0], [88.2, 2180.0], [88.3, 2180.0], [88.4, 2181.0], [88.5, 2181.0], [88.6, 2181.0], [88.7, 2181.0], [88.8, 2181.0], [88.9, 2181.0], [89.0, 2182.0], [89.1, 2182.0], [89.2, 2182.0], [89.3, 2182.0], [89.4, 2182.0], [89.5, 2183.0], [89.6, 2183.0], [89.7, 2183.0], [89.8, 2183.0], [89.9, 2184.0], [90.0, 2184.0], [90.1, 2184.0], [90.2, 2184.0], [90.3, 2184.0], [90.4, 2185.0], [90.5, 2185.0], [90.6, 2185.0], [90.7, 2185.0], [90.8, 2186.0], [90.9, 2186.0], [91.0, 2186.0], [91.1, 2186.0], [91.2, 2187.0], [91.3, 2187.0], [91.4, 2187.0], [91.5, 2188.0], [91.6, 2188.0], [91.7, 2188.0], [91.8, 2188.0], [91.9, 2189.0], [92.0, 2189.0], [92.1, 2189.0], [92.2, 2190.0], [92.3, 2190.0], [92.4, 2190.0], [92.5, 2191.0], [92.6, 2191.0], [92.7, 2191.0], [92.8, 2192.0], [92.9, 2192.0], [93.0, 2193.0], [93.1, 2193.0], [93.2, 2193.0], [93.3, 2194.0], [93.4, 2194.0], [93.5, 2195.0], [93.6, 2195.0], [93.7, 2196.0], [93.8, 2196.0], [93.9, 2197.0], [94.0, 2198.0], [94.1, 2198.0], [94.2, 2199.0], [94.3, 2200.0], [94.4, 2201.0], [94.5, 2202.0], [94.6, 2203.0], [94.7, 2204.0], [94.8, 2205.0], [94.9, 2207.0], [95.0, 2208.0], [95.1, 2209.0], [95.2, 2211.0], [95.3, 2212.0], [95.4, 2214.0], [95.5, 2216.0], [95.6, 2218.0], [95.7, 2221.0], [95.8, 2226.0], [95.9, 2229.0], [96.0, 2235.0], [96.1, 2241.0], [96.2, 2248.0], [96.3, 2404.0], [96.4, 2435.0], [96.5, 2461.0], [96.6, 2545.0], [96.7, 2606.0], [96.8, 2611.0], [96.9, 2615.0], [97.0, 2620.0], [97.1, 2624.0], [97.2, 2629.0], [97.3, 2631.0], [97.4, 2635.0], [97.5, 2641.0], [97.6, 2646.0], [97.7, 2652.0], [97.8, 2660.0], [97.9, 2666.0], [98.0, 2674.0], [98.1, 2685.0], [98.2, 2699.0], [98.3, 2718.0], [98.4, 2899.0], [98.5, 2920.0], [98.6, 2941.0], [98.7, 3054.0], [98.8, 3633.0], [98.9, 3642.0], [99.0, 4116.0], [99.1, 4129.0], [99.2, 5623.0], [99.3, 5636.0], [99.4, 5640.0], [99.5, 5648.0], [99.6, 8138.0], [99.7, 8155.0], [99.8, 9633.0], [99.9, 9639.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 15702.0], [0.1, 15702.0], [0.2, 15702.0], [0.3, 15706.0], [0.4, 15706.0], [0.5, 15709.0], [0.6, 15709.0], [0.7, 15709.0], [0.8, 15715.0], [0.9, 15715.0], [1.0, 15722.0], [1.1, 15722.0], [1.2, 15722.0], [1.3, 15725.0], [1.4, 15725.0], [1.5, 15725.0], [1.6, 15725.0], [1.7, 15725.0], [1.8, 15727.0], [1.9, 15727.0], [2.0, 15732.0], [2.1, 15732.0], [2.2, 15732.0], [2.3, 15736.0], [2.4, 15736.0], [2.5, 15740.0], [2.6, 15740.0], [2.7, 15740.0], [2.8, 15745.0], [2.9, 15745.0], [3.0, 15748.0], [3.1, 15748.0], [3.2, 15748.0], [3.3, 15752.0], [3.4, 15752.0], [3.5, 15753.0], [3.6, 15753.0], [3.7, 15753.0], [3.8, 15754.0], [3.9, 15754.0], [4.0, 15760.0], [4.1, 15760.0], [4.2, 15760.0], [4.3, 15761.0], [4.4, 15761.0], [4.5, 15762.0], [4.6, 15762.0], [4.7, 15762.0], [4.8, 15768.0], [4.9, 15768.0], [5.0, 15769.0], [5.1, 15769.0], [5.2, 15769.0], [5.3, 15770.0], [5.4, 15770.0], [5.5, 15775.0], [5.6, 15775.0], [5.7, 15775.0], [5.8, 15777.0], [5.9, 15777.0], [6.0, 15777.0], [6.1, 15777.0], [6.2, 15777.0], [6.3, 15778.0], [6.4, 15778.0], [6.5, 15779.0], [6.6, 15779.0], [6.7, 15779.0], [6.8, 15780.0], [6.9, 15780.0], [7.0, 15781.0], [7.1, 15781.0], [7.2, 15781.0], [7.3, 15786.0], [7.4, 15786.0], [7.5, 15786.0], [7.6, 15786.0], [7.7, 15786.0], [7.8, 15786.0], [7.9, 15786.0], [8.0, 15786.0], [8.1, 15786.0], [8.2, 15786.0], [8.3, 15787.0], [8.4, 15787.0], [8.5, 15795.0], [8.6, 15795.0], [8.7, 15795.0], [8.8, 15795.0], [8.9, 15795.0], [9.0, 15800.0], [9.1, 15800.0], [9.2, 15800.0], [9.3, 15803.0], [9.4, 15803.0], [9.5, 15806.0], [9.6, 15806.0], [9.7, 15806.0], [9.8, 15814.0], [9.9, 15814.0], [10.0, 15815.0], [10.1, 15815.0], [10.2, 15815.0], [10.3, 15818.0], [10.4, 15818.0], [10.5, 15821.0], [10.6, 15821.0], [10.7, 15821.0], [10.8, 15822.0], [10.9, 15822.0], [11.0, 15824.0], [11.1, 15824.0], [11.2, 15824.0], [11.3, 15824.0], [11.4, 15824.0], [11.5, 15829.0], [11.6, 15829.0], [11.7, 15829.0], [11.8, 15829.0], [11.9, 15829.0], [12.0, 15829.0], [12.1, 15829.0], [12.2, 15829.0], [12.3, 15836.0], [12.4, 15836.0], [12.5, 15842.0], [12.6, 15842.0], [12.7, 15842.0], [12.8, 15844.0], [12.9, 15844.0], [13.0, 15855.0], [13.1, 15855.0], [13.2, 15855.0], [13.3, 15857.0], [13.4, 15857.0], [13.5, 15861.0], [13.6, 15861.0], [13.7, 15861.0], [13.8, 15868.0], [13.9, 15868.0], [14.0, 15869.0], [14.1, 15869.0], [14.2, 15869.0], [14.3, 15870.0], [14.4, 15870.0], [14.5, 15894.0], [14.6, 15894.0], [14.7, 15894.0], [14.8, 15897.0], [14.9, 15897.0], [15.0, 15910.0], [15.1, 15910.0], [15.2, 15910.0], [15.3, 15915.0], [15.4, 15915.0], [15.5, 15917.0], [15.6, 15917.0], [15.7, 15917.0], [15.8, 15918.0], [15.9, 15918.0], [16.0, 15919.0], [16.1, 15919.0], [16.2, 15919.0], [16.3, 15929.0], [16.4, 15929.0], [16.5, 15929.0], [16.6, 15929.0], [16.7, 15929.0], [16.8, 15940.0], [16.9, 15940.0], [17.0, 15942.0], [17.1, 15942.0], [17.2, 15942.0], [17.3, 15942.0], [17.4, 15942.0], [17.5, 15944.0], [17.6, 15944.0], [17.7, 15944.0], [17.8, 15944.0], [17.9, 15944.0], [18.0, 15951.0], [18.1, 15951.0], [18.2, 15951.0], [18.3, 15952.0], [18.4, 15952.0], [18.5, 15952.0], [18.6, 15952.0], [18.7, 15952.0], [18.8, 15952.0], [18.9, 15952.0], [19.0, 15954.0], [19.1, 15954.0], [19.2, 15954.0], [19.3, 15957.0], [19.4, 15957.0], [19.5, 15959.0], [19.6, 15959.0], [19.7, 15959.0], [19.8, 15959.0], [19.9, 15959.0], [20.0, 15960.0], [20.1, 15960.0], [20.2, 15960.0], [20.3, 15967.0], [20.4, 15967.0], [20.5, 15974.0], [20.6, 15974.0], [20.7, 15974.0], [20.8, 15974.0], [20.9, 15974.0], [21.0, 15977.0], [21.1, 15977.0], [21.2, 15977.0], [21.3, 15978.0], [21.4, 15978.0], [21.5, 15981.0], [21.6, 15981.0], [21.7, 15981.0], [21.8, 15982.0], [21.9, 15982.0], [22.0, 15982.0], [22.1, 15982.0], [22.2, 15982.0], [22.3, 15985.0], [22.4, 15985.0], [22.5, 15986.0], [22.6, 15986.0], [22.7, 15986.0], [22.8, 15987.0], [22.9, 15987.0], [23.0, 15988.0], [23.1, 15988.0], [23.2, 15988.0], [23.3, 15989.0], [23.4, 15989.0], [23.5, 15990.0], [23.6, 15990.0], [23.7, 15990.0], [23.8, 15992.0], [23.9, 15992.0], [24.0, 15994.0], [24.1, 15994.0], [24.2, 15994.0], [24.3, 15994.0], [24.4, 15994.0], [24.5, 15997.0], [24.6, 15997.0], [24.7, 15997.0], [24.8, 15997.0], [24.9, 15997.0], [25.0, 15998.0], [25.1, 15998.0], [25.2, 15998.0], [25.3, 16003.0], [25.4, 16003.0], [25.5, 16004.0], [25.6, 16004.0], [25.7, 16004.0], [25.8, 16005.0], [25.9, 16005.0], [26.0, 16005.0], [26.1, 16005.0], [26.2, 16005.0], [26.3, 16007.0], [26.4, 16007.0], [26.5, 16009.0], [26.6, 16009.0], [26.7, 16009.0], [26.8, 16019.0], [26.9, 16019.0], [27.0, 16019.0], [27.1, 16019.0], [27.2, 16019.0], [27.3, 16020.0], [27.4, 16020.0], [27.5, 16020.0], [27.6, 16020.0], [27.7, 16020.0], [27.8, 16024.0], [27.9, 16024.0], [28.0, 16027.0], [28.1, 16027.0], [28.2, 16027.0], [28.3, 16033.0], [28.4, 16033.0], [28.5, 16034.0], [28.6, 16034.0], [28.7, 16034.0], [28.8, 16035.0], [28.9, 16035.0], [29.0, 16041.0], [29.1, 16041.0], [29.2, 16041.0], [29.3, 16042.0], [29.4, 16042.0], [29.5, 16046.0], [29.6, 16046.0], [29.7, 16046.0], [29.8, 16047.0], [29.9, 16047.0], [30.0, 16050.0], [30.1, 16050.0], [30.2, 16050.0], [30.3, 16051.0], [30.4, 16051.0], [30.5, 16062.0], [30.6, 16062.0], [30.7, 16062.0], [30.8, 16063.0], [30.9, 16063.0], [31.0, 16065.0], [31.1, 16065.0], [31.2, 16065.0], [31.3, 16065.0], [31.4, 16065.0], [31.5, 16067.0], [31.6, 16067.0], [31.7, 16067.0], [31.8, 16067.0], [31.9, 16067.0], [32.0, 16069.0], [32.1, 16069.0], [32.2, 16069.0], [32.3, 16071.0], [32.4, 16071.0], [32.5, 16072.0], [32.6, 16072.0], [32.7, 16072.0], [32.8, 16081.0], [32.9, 16081.0], [33.0, 16085.0], [33.1, 16085.0], [33.2, 16085.0], [33.3, 16086.0], [33.4, 16086.0], [33.5, 16087.0], [33.6, 16087.0], [33.7, 16087.0], [33.8, 16089.0], [33.9, 16089.0], [34.0, 16114.0], [34.1, 16114.0], [34.2, 16114.0], [34.3, 16117.0], [34.4, 16117.0], [34.5, 16119.0], [34.6, 16119.0], [34.7, 16119.0], [34.8, 16127.0], [34.9, 16127.0], [35.0, 16134.0], [35.1, 16134.0], [35.2, 16134.0], [35.3, 16136.0], [35.4, 16136.0], [35.5, 16136.0], [35.6, 16136.0], [35.7, 16136.0], [35.8, 16147.0], [35.9, 16147.0], [36.0, 16157.0], [36.1, 16157.0], [36.2, 16157.0], [36.3, 16164.0], [36.4, 16164.0], [36.5, 16165.0], [36.6, 16165.0], [36.7, 16165.0], [36.8, 16168.0], [36.9, 16168.0], [37.0, 16171.0], [37.1, 16171.0], [37.2, 16171.0], [37.3, 16176.0], [37.4, 16176.0], [37.5, 16179.0], [37.6, 16179.0], [37.7, 16179.0], [37.8, 16179.0], [37.9, 16179.0], [38.0, 16180.0], [38.1, 16180.0], [38.2, 16180.0], [38.3, 16181.0], [38.4, 16181.0], [38.5, 16190.0], [38.6, 16190.0], [38.7, 16190.0], [38.8, 16191.0], [38.9, 16191.0], [39.0, 16191.0], [39.1, 16191.0], [39.2, 16191.0], [39.3, 16194.0], [39.4, 16194.0], [39.5, 16196.0], [39.6, 16196.0], [39.7, 16196.0], [39.8, 16196.0], [39.9, 16196.0], [40.0, 16199.0], [40.1, 16199.0], [40.2, 16199.0], [40.3, 16200.0], [40.4, 16200.0], [40.5, 16210.0], [40.6, 16210.0], [40.7, 16210.0], [40.8, 16210.0], [40.9, 16210.0], [41.0, 16210.0], [41.1, 16210.0], [41.2, 16210.0], [41.3, 16210.0], [41.4, 16210.0], [41.5, 16211.0], [41.6, 16211.0], [41.7, 16211.0], [41.8, 16212.0], [41.9, 16212.0], [42.0, 16217.0], [42.1, 16217.0], [42.2, 16217.0], [42.3, 16220.0], [42.4, 16220.0], [42.5, 16221.0], [42.6, 16221.0], [42.7, 16221.0], [42.8, 16221.0], [42.9, 16221.0], [43.0, 16225.0], [43.1, 16225.0], [43.2, 16225.0], [43.3, 16227.0], [43.4, 16227.0], [43.5, 16228.0], [43.6, 16228.0], [43.7, 16228.0], [43.8, 16239.0], [43.9, 16239.0], [44.0, 16250.0], [44.1, 16250.0], [44.2, 16250.0], [44.3, 16254.0], [44.4, 16254.0], [44.5, 16255.0], [44.6, 16255.0], [44.7, 16255.0], [44.8, 16255.0], [44.9, 16255.0], [45.0, 16256.0], [45.1, 16256.0], [45.2, 16256.0], [45.3, 16256.0], [45.4, 16256.0], [45.5, 16257.0], [45.6, 16257.0], [45.7, 16257.0], [45.8, 16258.0], [45.9, 16258.0], [46.0, 16266.0], [46.1, 16266.0], [46.2, 16266.0], [46.3, 16268.0], [46.4, 16268.0], [46.5, 16268.0], [46.6, 16268.0], [46.7, 16268.0], [46.8, 16270.0], [46.9, 16270.0], [47.0, 16271.0], [47.1, 16271.0], [47.2, 16271.0], [47.3, 16286.0], [47.4, 16286.0], [47.5, 16295.0], [47.6, 16295.0], [47.7, 16295.0], [47.8, 16295.0], [47.9, 16295.0], [48.0, 16299.0], [48.1, 16299.0], [48.2, 16299.0], [48.3, 16305.0], [48.4, 16305.0], [48.5, 16313.0], [48.6, 16313.0], [48.7, 16313.0], [48.8, 16314.0], [48.9, 16314.0], [49.0, 16314.0], [49.1, 16314.0], [49.2, 16314.0], [49.3, 16316.0], [49.4, 16316.0], [49.5, 16326.0], [49.6, 16326.0], [49.7, 16326.0], [49.8, 16330.0], [49.9, 16330.0], [50.0, 16332.0], [50.1, 16332.0], [50.2, 16332.0], [50.3, 16333.0], [50.4, 16333.0], [50.5, 16334.0], [50.6, 16334.0], [50.7, 16334.0], [50.8, 16340.0], [50.9, 16340.0], [51.0, 16341.0], [51.1, 16341.0], [51.2, 16341.0], [51.3, 16342.0], [51.4, 16342.0], [51.5, 16342.0], [51.6, 16342.0], [51.7, 16342.0], [51.8, 16345.0], [51.9, 16345.0], [52.0, 16347.0], [52.1, 16347.0], [52.2, 16347.0], [52.3, 16360.0], [52.4, 16360.0], [52.5, 16366.0], [52.6, 16366.0], [52.7, 16366.0], [52.8, 16367.0], [52.9, 16367.0], [53.0, 16369.0], [53.1, 16369.0], [53.2, 16369.0], [53.3, 16370.0], [53.4, 16370.0], [53.5, 16371.0], [53.6, 16371.0], [53.7, 16371.0], [53.8, 16376.0], [53.9, 16376.0], [54.0, 16386.0], [54.1, 16386.0], [54.2, 16386.0], [54.3, 16386.0], [54.4, 16386.0], [54.5, 16386.0], [54.6, 16386.0], [54.7, 16386.0], [54.8, 16387.0], [54.9, 16387.0], [55.0, 16387.0], [55.1, 16387.0], [55.2, 16387.0], [55.3, 16387.0], [55.4, 16387.0], [55.5, 16387.0], [55.6, 16387.0], [55.7, 16387.0], [55.8, 16388.0], [55.9, 16388.0], [56.0, 16388.0], [56.1, 16388.0], [56.2, 16388.0], [56.3, 16389.0], [56.4, 16389.0], [56.5, 16395.0], [56.6, 16395.0], [56.7, 16395.0], [56.8, 16398.0], [56.9, 16398.0], [57.0, 16402.0], [57.1, 16402.0], [57.2, 16402.0], [57.3, 16407.0], [57.4, 16407.0], [57.5, 16408.0], [57.6, 16408.0], [57.7, 16408.0], [57.8, 16409.0], [57.9, 16409.0], [58.0, 16411.0], [58.1, 16411.0], [58.2, 16411.0], [58.3, 16416.0], [58.4, 16416.0], [58.5, 16416.0], [58.6, 16416.0], [58.7, 16416.0], [58.8, 16417.0], [58.9, 16417.0], [59.0, 16418.0], [59.1, 16418.0], [59.2, 16418.0], [59.3, 16421.0], [59.4, 16421.0], [59.5, 16421.0], [59.6, 16421.0], [59.7, 16421.0], [59.8, 16423.0], [59.9, 16423.0], [60.0, 16427.0], [60.1, 16427.0], [60.2, 16427.0], [60.3, 16432.0], [60.4, 16432.0], [60.5, 16433.0], [60.6, 16433.0], [60.7, 16433.0], [60.8, 16443.0], [60.9, 16443.0], [61.0, 16447.0], [61.1, 16447.0], [61.2, 16447.0], [61.3, 16450.0], [61.4, 16450.0], [61.5, 16457.0], [61.6, 16457.0], [61.7, 16457.0], [61.8, 16462.0], [61.9, 16462.0], [62.0, 16463.0], [62.1, 16463.0], [62.2, 16463.0], [62.3, 16463.0], [62.4, 16463.0], [62.5, 16463.0], [62.6, 16463.0], [62.7, 16463.0], [62.8, 16465.0], [62.9, 16465.0], [63.0, 16466.0], [63.1, 16466.0], [63.2, 16466.0], [63.3, 16467.0], [63.4, 16467.0], [63.5, 16470.0], [63.6, 16470.0], [63.7, 16470.0], [63.8, 16474.0], [63.9, 16474.0], [64.0, 16478.0], [64.1, 16478.0], [64.2, 16478.0], [64.3, 16478.0], [64.4, 16478.0], [64.5, 16480.0], [64.6, 16480.0], [64.7, 16480.0], [64.8, 16481.0], [64.9, 16481.0], [65.0, 16481.0], [65.1, 16481.0], [65.2, 16481.0], [65.3, 16481.0], [65.4, 16481.0], [65.5, 16482.0], [65.6, 16482.0], [65.7, 16482.0], [65.8, 16484.0], [65.9, 16484.0], [66.0, 16508.0], [66.1, 16508.0], [66.2, 16508.0], [66.3, 16508.0], [66.4, 16508.0], [66.5, 16509.0], [66.6, 16509.0], [66.7, 16509.0], [66.8, 16511.0], [66.9, 16511.0], [67.0, 16512.0], [67.1, 16512.0], [67.2, 16512.0], [67.3, 16515.0], [67.4, 16515.0], [67.5, 16520.0], [67.6, 16520.0], [67.7, 16520.0], [67.8, 16521.0], [67.9, 16521.0], [68.0, 16521.0], [68.1, 16521.0], [68.2, 16521.0], [68.3, 16522.0], [68.4, 16522.0], [68.5, 16523.0], [68.6, 16523.0], [68.7, 16523.0], [68.8, 16524.0], [68.9, 16524.0], [69.0, 16526.0], [69.1, 16526.0], [69.2, 16526.0], [69.3, 16529.0], [69.4, 16529.0], [69.5, 16530.0], [69.6, 16530.0], [69.7, 16530.0], [69.8, 16538.0], [69.9, 16538.0], [70.0, 16540.0], [70.1, 16540.0], [70.2, 16540.0], [70.3, 16545.0], [70.4, 16545.0], [70.5, 16546.0], [70.6, 16546.0], [70.7, 16546.0], [70.8, 16553.0], [70.9, 16553.0], [71.0, 16553.0], [71.1, 16553.0], [71.2, 16553.0], [71.3, 16558.0], [71.4, 16558.0], [71.5, 16580.0], [71.6, 16580.0], [71.7, 16580.0], [71.8, 16583.0], [71.9, 16583.0], [72.0, 16583.0], [72.1, 16583.0], [72.2, 16583.0], [72.3, 16585.0], [72.4, 16585.0], [72.5, 16588.0], [72.6, 16588.0], [72.7, 16588.0], [72.8, 16590.0], [72.9, 16590.0], [73.0, 16590.0], [73.1, 16590.0], [73.2, 16590.0], [73.3, 16591.0], [73.4, 16591.0], [73.5, 16591.0], [73.6, 16591.0], [73.7, 16591.0], [73.8, 16605.0], [73.9, 16605.0], [74.0, 16606.0], [74.1, 16606.0], [74.2, 16606.0], [74.3, 16608.0], [74.4, 16608.0], [74.5, 16611.0], [74.6, 16611.0], [74.7, 16611.0], [74.8, 16616.0], [74.9, 16616.0], [75.0, 16620.0], [75.1, 16620.0], [75.2, 16620.0], [75.3, 16620.0], [75.4, 16620.0], [75.5, 16621.0], [75.6, 16621.0], [75.7, 16621.0], [75.8, 16626.0], [75.9, 16626.0], [76.0, 16633.0], [76.1, 16633.0], [76.2, 16633.0], [76.3, 16634.0], [76.4, 16634.0], [76.5, 16634.0], [76.6, 16634.0], [76.7, 16634.0], [76.8, 16635.0], [76.9, 16635.0], [77.0, 16636.0], [77.1, 16636.0], [77.2, 16636.0], [77.3, 16636.0], [77.4, 16636.0], [77.5, 16640.0], [77.6, 16640.0], [77.7, 16640.0], [77.8, 16652.0], [77.9, 16652.0], [78.0, 16653.0], [78.1, 16653.0], [78.2, 16653.0], [78.3, 16661.0], [78.4, 16661.0], [78.5, 16665.0], [78.6, 16665.0], [78.7, 16665.0], [78.8, 16670.0], [78.9, 16670.0], [79.0, 16673.0], [79.1, 16673.0], [79.2, 16673.0], [79.3, 16680.0], [79.4, 16680.0], [79.5, 16685.0], [79.6, 16685.0], [79.7, 16685.0], [79.8, 16692.0], [79.9, 16692.0], [80.0, 16699.0], [80.1, 16699.0], [80.2, 16699.0], [80.3, 16699.0], [80.4, 16699.0], [80.5, 16703.0], [80.6, 16703.0], [80.7, 16703.0], [80.8, 16703.0], [80.9, 16703.0], [81.0, 16711.0], [81.1, 16711.0], [81.2, 16711.0], [81.3, 16713.0], [81.4, 16713.0], [81.5, 16716.0], [81.6, 16716.0], [81.7, 16716.0], [81.8, 16717.0], [81.9, 16717.0], [82.0, 16717.0], [82.1, 16717.0], [82.2, 16717.0], [82.3, 16719.0], [82.4, 16719.0], [82.5, 16720.0], [82.6, 16720.0], [82.7, 16720.0], [82.8, 16723.0], [82.9, 16723.0], [83.0, 16724.0], [83.1, 16724.0], [83.2, 16724.0], [83.3, 16731.0], [83.4, 16731.0], [83.5, 16731.0], [83.6, 16731.0], [83.7, 16731.0], [83.8, 16732.0], [83.9, 16732.0], [84.0, 16737.0], [84.1, 16737.0], [84.2, 16737.0], [84.3, 16741.0], [84.4, 16741.0], [84.5, 16748.0], [84.6, 16748.0], [84.7, 16748.0], [84.8, 16760.0], [84.9, 16760.0], [85.0, 16765.0], [85.1, 16765.0], [85.2, 16765.0], [85.3, 16765.0], [85.4, 16765.0], [85.5, 16767.0], [85.6, 16767.0], [85.7, 16767.0], [85.8, 16769.0], [85.9, 16769.0], [86.0, 16774.0], [86.1, 16774.0], [86.2, 16774.0], [86.3, 16779.0], [86.4, 16779.0], [86.5, 16780.0], [86.6, 16780.0], [86.7, 16780.0], [86.8, 16784.0], [86.9, 16784.0], [87.0, 16792.0], [87.1, 16792.0], [87.2, 16792.0], [87.3, 16792.0], [87.4, 16792.0], [87.5, 16795.0], [87.6, 16795.0], [87.7, 16795.0], [87.8, 16798.0], [87.9, 16798.0], [88.0, 16798.0], [88.1, 16798.0], [88.2, 16798.0], [88.3, 16801.0], [88.4, 16801.0], [88.5, 16803.0], [88.6, 16803.0], [88.7, 16803.0], [88.8, 16806.0], [88.9, 16806.0], [89.0, 16813.0], [89.1, 16813.0], [89.2, 16813.0], [89.3, 16817.0], [89.4, 16817.0], [89.5, 16820.0], [89.6, 16820.0], [89.7, 16820.0], [89.8, 16825.0], [89.9, 16825.0], [90.0, 16826.0], [90.1, 16826.0], [90.2, 16826.0], [90.3, 16828.0], [90.4, 16828.0], [90.5, 16836.0], [90.6, 16836.0], [90.7, 16836.0], [90.8, 16836.0], [90.9, 16836.0], [91.0, 16840.0], [91.1, 16840.0], [91.2, 16840.0], [91.3, 16843.0], [91.4, 16843.0], [91.5, 16844.0], [91.6, 16844.0], [91.7, 16844.0], [91.8, 16847.0], [91.9, 16847.0], [92.0, 16849.0], [92.1, 16849.0], [92.2, 16849.0], [92.3, 16850.0], [92.4, 16850.0], [92.5, 16855.0], [92.6, 16855.0], [92.7, 16855.0], [92.8, 16861.0], [92.9, 16861.0], [93.0, 16863.0], [93.1, 16863.0], [93.2, 16863.0], [93.3, 16864.0], [93.4, 16864.0], [93.5, 16864.0], [93.6, 16864.0], [93.7, 16864.0], [93.8, 16869.0], [93.9, 16869.0], [94.0, 16870.0], [94.1, 16870.0], [94.2, 16870.0], [94.3, 16876.0], [94.4, 16876.0], [94.5, 16886.0], [94.6, 16886.0], [94.7, 16886.0], [94.8, 16886.0], [94.9, 16886.0], [95.0, 16888.0], [95.1, 16888.0], [95.2, 16888.0], [95.3, 16888.0], [95.4, 16888.0], [95.5, 16892.0], [95.6, 16892.0], [95.7, 16892.0], [95.8, 16894.0], [95.9, 16894.0], [96.0, 16896.0], [96.1, 16896.0], [96.2, 16896.0], [96.3, 16900.0], [96.4, 16900.0], [96.5, 16903.0], [96.6, 16903.0], [96.7, 16903.0], [96.8, 16910.0], [96.9, 16910.0], [97.0, 16912.0], [97.1, 16912.0], [97.2, 16912.0], [97.3, 16913.0], [97.4, 16913.0], [97.5, 16920.0], [97.6, 16920.0], [97.7, 16920.0], [97.8, 16923.0], [97.9, 16923.0], [98.0, 16923.0], [98.1, 16923.0], [98.2, 16923.0], [98.3, 16931.0], [98.4, 16931.0], [98.5, 16939.0], [98.6, 16939.0], [98.7, 16939.0], [98.8, 16944.0], [98.9, 16944.0], [99.0, 16955.0], [99.1, 16955.0], [99.2, 16955.0], [99.3, 16965.0], [99.4, 16965.0], [99.5, 16988.0], [99.6, 16988.0], [99.7, 16988.0], [99.8, 17011.0], [99.9, 17011.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 60595.0], [0.1, 60595.0], [0.2, 60595.0], [0.3, 60602.0], [0.4, 60602.0], [0.5, 60605.0], [0.6, 60605.0], [0.7, 60605.0], [0.8, 60608.0], [0.9, 60608.0], [1.0, 60627.0], [1.1, 60627.0], [1.2, 60627.0], [1.3, 60650.0], [1.4, 60650.0], [1.5, 60655.0], [1.6, 60655.0], [1.7, 60655.0], [1.8, 60658.0], [1.9, 60658.0], [2.0, 60660.0], [2.1, 60660.0], [2.2, 60660.0], [2.3, 60663.0], [2.4, 60663.0], [2.5, 60667.0], [2.6, 60667.0], [2.7, 60667.0], [2.8, 60669.0], [2.9, 60669.0], [3.0, 60672.0], [3.1, 60672.0], [3.2, 60672.0], [3.3, 60673.0], [3.4, 60673.0], [3.5, 60676.0], [3.6, 60676.0], [3.7, 60676.0], [3.8, 60676.0], [3.9, 60676.0], [4.0, 60679.0], [4.1, 60679.0], [4.2, 60679.0], [4.3, 60685.0], [4.4, 60685.0], [4.5, 60689.0], [4.6, 60689.0], [4.7, 60689.0], [4.8, 60694.0], [4.9, 60694.0], [5.0, 60694.0], [5.1, 60694.0], [5.2, 60694.0], [5.3, 60696.0], [5.4, 60696.0], [5.5, 60698.0], [5.6, 60698.0], [5.7, 60698.0], [5.8, 60702.0], [5.9, 60702.0], [6.0, 60703.0], [6.1, 60703.0], [6.2, 60703.0], [6.3, 60705.0], [6.4, 60705.0], [6.5, 60705.0], [6.6, 60705.0], [6.7, 60705.0], [6.8, 60706.0], [6.9, 60706.0], [7.0, 60712.0], [7.1, 60712.0], [7.2, 60712.0], [7.3, 60712.0], [7.4, 60712.0], [7.5, 60714.0], [7.6, 60714.0], [7.7, 60714.0], [7.8, 60716.0], [7.9, 60716.0], [8.0, 60719.0], [8.1, 60719.0], [8.2, 60719.0], [8.3, 60719.0], [8.4, 60719.0], [8.5, 60721.0], [8.6, 60721.0], [8.7, 60721.0], [8.8, 60728.0], [8.9, 60728.0], [9.0, 60730.0], [9.1, 60730.0], [9.2, 60730.0], [9.3, 60731.0], [9.4, 60731.0], [9.5, 60733.0], [9.6, 60733.0], [9.7, 60733.0], [9.8, 60742.0], [9.9, 60742.0], [10.0, 60743.0], [10.1, 60743.0], [10.2, 60743.0], [10.3, 60743.0], [10.4, 60743.0], [10.5, 60745.0], [10.6, 60745.0], [10.7, 60745.0], [10.8, 60748.0], [10.9, 60748.0], [11.0, 60760.0], [11.1, 60760.0], [11.2, 60760.0], [11.3, 60762.0], [11.4, 60762.0], [11.5, 60762.0], [11.6, 60762.0], [11.7, 60762.0], [11.8, 60762.0], [11.9, 60762.0], [12.0, 60770.0], [12.1, 60770.0], [12.2, 60770.0], [12.3, 60771.0], [12.4, 60771.0], [12.5, 60774.0], [12.6, 60774.0], [12.7, 60774.0], [12.8, 60776.0], [12.9, 60776.0], [13.0, 60777.0], [13.1, 60777.0], [13.2, 60777.0], [13.3, 60778.0], [13.4, 60778.0], [13.5, 60782.0], [13.6, 60782.0], [13.7, 60782.0], [13.8, 60786.0], [13.9, 60786.0], [14.0, 60790.0], [14.1, 60790.0], [14.2, 60790.0], [14.3, 60792.0], [14.4, 60792.0], [14.5, 60795.0], [14.6, 60795.0], [14.7, 60795.0], [14.8, 60797.0], [14.9, 60797.0], [15.0, 60797.0], [15.1, 60797.0], [15.2, 60797.0], [15.3, 60800.0], [15.4, 60800.0], [15.5, 60802.0], [15.6, 60802.0], [15.7, 60802.0], [15.8, 60804.0], [15.9, 60804.0], [16.0, 60808.0], [16.1, 60808.0], [16.2, 60808.0], [16.3, 60809.0], [16.4, 60809.0], [16.5, 60810.0], [16.6, 60810.0], [16.7, 60810.0], [16.8, 60817.0], [16.9, 60817.0], [17.0, 60818.0], [17.1, 60818.0], [17.2, 60818.0], [17.3, 60819.0], [17.4, 60819.0], [17.5, 60821.0], [17.6, 60821.0], [17.7, 60821.0], [17.8, 60825.0], [17.9, 60825.0], [18.0, 60831.0], [18.1, 60831.0], [18.2, 60831.0], [18.3, 60839.0], [18.4, 60839.0], [18.5, 60842.0], [18.6, 60842.0], [18.7, 60842.0], [18.8, 60843.0], [18.9, 60843.0], [19.0, 60848.0], [19.1, 60848.0], [19.2, 60848.0], [19.3, 60852.0], [19.4, 60852.0], [19.5, 60860.0], [19.6, 60860.0], [19.7, 60860.0], [19.8, 60864.0], [19.9, 60864.0], [20.0, 60866.0], [20.1, 60866.0], [20.2, 60866.0], [20.3, 60869.0], [20.4, 60869.0], [20.5, 60870.0], [20.6, 60870.0], [20.7, 60870.0], [20.8, 60870.0], [20.9, 60870.0], [21.0, 60870.0], [21.1, 60870.0], [21.2, 60870.0], [21.3, 60871.0], [21.4, 60871.0], [21.5, 60874.0], [21.6, 60874.0], [21.7, 60874.0], [21.8, 60882.0], [21.9, 60882.0], [22.0, 60893.0], [22.1, 60893.0], [22.2, 60893.0], [22.3, 60894.0], [22.4, 60894.0], [22.5, 60898.0], [22.6, 60898.0], [22.7, 60898.0], [22.8, 60900.0], [22.9, 60900.0], [23.0, 60900.0], [23.1, 60900.0], [23.2, 60900.0], [23.3, 60902.0], [23.4, 60902.0], [23.5, 60917.0], [23.6, 60917.0], [23.7, 60917.0], [23.8, 60923.0], [23.9, 60923.0], [24.0, 60925.0], [24.1, 60925.0], [24.2, 60925.0], [24.3, 60926.0], [24.4, 60926.0], [24.5, 60926.0], [24.6, 60926.0], [24.7, 60926.0], [24.8, 60930.0], [24.9, 60930.0], [25.0, 60932.0], [25.1, 60932.0], [25.2, 60932.0], [25.3, 60935.0], [25.4, 60935.0], [25.5, 60935.0], [25.6, 60935.0], [25.7, 60935.0], [25.8, 60937.0], [25.9, 60937.0], [26.0, 60939.0], [26.1, 60939.0], [26.2, 60939.0], [26.3, 60942.0], [26.4, 60942.0], [26.5, 60943.0], [26.6, 60943.0], [26.7, 60943.0], [26.8, 60943.0], [26.9, 60943.0], [27.0, 60945.0], [27.1, 60945.0], [27.2, 60945.0], [27.3, 60946.0], [27.4, 60946.0], [27.5, 60946.0], [27.6, 60946.0], [27.7, 60946.0], [27.8, 60953.0], [27.9, 60953.0], [28.0, 60954.0], [28.1, 60954.0], [28.2, 60954.0], [28.3, 60956.0], [28.4, 60956.0], [28.5, 60962.0], [28.6, 60962.0], [28.7, 60962.0], [28.8, 60970.0], [28.9, 60970.0], [29.0, 60972.0], [29.1, 60972.0], [29.2, 60972.0], [29.3, 60976.0], [29.4, 60976.0], [29.5, 60978.0], [29.6, 60978.0], [29.7, 60978.0], [29.8, 60979.0], [29.9, 60979.0], [30.0, 60982.0], [30.1, 60982.0], [30.2, 60982.0], [30.3, 60986.0], [30.4, 60986.0], [30.5, 60996.0], [30.6, 60996.0], [30.7, 60996.0], [30.8, 60997.0], [30.9, 60997.0], [31.0, 61004.0], [31.1, 61004.0], [31.2, 61004.0], [31.3, 61005.0], [31.4, 61005.0], [31.5, 61007.0], [31.6, 61007.0], [31.7, 61007.0], [31.8, 61008.0], [31.9, 61008.0], [32.0, 61010.0], [32.1, 61010.0], [32.2, 61010.0], [32.3, 61011.0], [32.4, 61011.0], [32.5, 61011.0], [32.6, 61011.0], [32.7, 61011.0], [32.8, 61012.0], [32.9, 61012.0], [33.0, 61015.0], [33.1, 61015.0], [33.2, 61015.0], [33.3, 61017.0], [33.4, 61017.0], [33.5, 61019.0], [33.6, 61019.0], [33.7, 61019.0], [33.8, 61025.0], [33.9, 61025.0], [34.0, 61027.0], [34.1, 61027.0], [34.2, 61027.0], [34.3, 61030.0], [34.4, 61030.0], [34.5, 61031.0], [34.6, 61031.0], [34.7, 61031.0], [34.8, 61037.0], [34.9, 61037.0], [35.0, 61039.0], [35.1, 61039.0], [35.2, 61039.0], [35.3, 61044.0], [35.4, 61044.0], [35.5, 61048.0], [35.6, 61048.0], [35.7, 61048.0], [35.8, 61054.0], [35.9, 61054.0], [36.0, 61056.0], [36.1, 61056.0], [36.2, 61056.0], [36.3, 61057.0], [36.4, 61057.0], [36.5, 61060.0], [36.6, 61060.0], [36.7, 61060.0], [36.8, 61063.0], [36.9, 61063.0], [37.0, 61075.0], [37.1, 61075.0], [37.2, 61075.0], [37.3, 61077.0], [37.4, 61077.0], [37.5, 61079.0], [37.6, 61079.0], [37.7, 61079.0], [37.8, 61080.0], [37.9, 61080.0], [38.0, 61082.0], [38.1, 61082.0], [38.2, 61082.0], [38.3, 61084.0], [38.4, 61084.0], [38.5, 61087.0], [38.6, 61087.0], [38.7, 61087.0], [38.8, 61096.0], [38.9, 61096.0], [39.0, 61111.0], [39.1, 61111.0], [39.2, 61111.0], [39.3, 61116.0], [39.4, 61116.0], [39.5, 61122.0], [39.6, 61122.0], [39.7, 61122.0], [39.8, 61122.0], [39.9, 61122.0], [40.0, 61126.0], [40.1, 61126.0], [40.2, 61126.0], [40.3, 61131.0], [40.4, 61131.0], [40.5, 61131.0], [40.6, 61131.0], [40.7, 61131.0], [40.8, 61132.0], [40.9, 61132.0], [41.0, 61134.0], [41.1, 61134.0], [41.2, 61134.0], [41.3, 61136.0], [41.4, 61136.0], [41.5, 61137.0], [41.6, 61137.0], [41.7, 61137.0], [41.8, 61143.0], [41.9, 61143.0], [42.0, 61152.0], [42.1, 61152.0], [42.2, 61152.0], [42.3, 61163.0], [42.4, 61163.0], [42.5, 61165.0], [42.6, 61165.0], [42.7, 61165.0], [42.8, 61168.0], [42.9, 61168.0], [43.0, 61170.0], [43.1, 61170.0], [43.2, 61170.0], [43.3, 61173.0], [43.4, 61173.0], [43.5, 61174.0], [43.6, 61174.0], [43.7, 61174.0], [43.8, 61179.0], [43.9, 61179.0], [44.0, 61183.0], [44.1, 61183.0], [44.2, 61183.0], [44.3, 61185.0], [44.4, 61185.0], [44.5, 61185.0], [44.6, 61185.0], [44.7, 61185.0], [44.8, 61188.0], [44.9, 61188.0], [45.0, 61191.0], [45.1, 61191.0], [45.2, 61191.0], [45.3, 61191.0], [45.4, 61191.0], [45.5, 61194.0], [45.6, 61194.0], [45.7, 61194.0], [45.8, 61197.0], [45.9, 61197.0], [46.0, 61197.0], [46.1, 61197.0], [46.2, 61197.0], [46.3, 61197.0], [46.4, 61197.0], [46.5, 61197.0], [46.6, 61197.0], [46.7, 61197.0], [46.8, 61198.0], [46.9, 61198.0], [47.0, 61198.0], [47.1, 61198.0], [47.2, 61198.0], [47.3, 61200.0], [47.4, 61200.0], [47.5, 61210.0], [47.6, 61210.0], [47.7, 61210.0], [47.8, 61219.0], [47.9, 61219.0], [48.0, 61222.0], [48.1, 61222.0], [48.2, 61222.0], [48.3, 61231.0], [48.4, 61231.0], [48.5, 61237.0], [48.6, 61237.0], [48.7, 61237.0], [48.8, 61239.0], [48.9, 61239.0], [49.0, 61240.0], [49.1, 61240.0], [49.2, 61240.0], [49.3, 61243.0], [49.4, 61243.0], [49.5, 61246.0], [49.6, 61246.0], [49.7, 61246.0], [49.8, 61248.0], [49.9, 61248.0], [50.0, 61252.0], [50.1, 61252.0], [50.2, 61252.0], [50.3, 61255.0], [50.4, 61255.0], [50.5, 61257.0], [50.6, 61257.0], [50.7, 61257.0], [50.8, 61261.0], [50.9, 61261.0], [51.0, 61264.0], [51.1, 61264.0], [51.2, 61264.0], [51.3, 61264.0], [51.4, 61264.0], [51.5, 61267.0], [51.6, 61267.0], [51.7, 61267.0], [51.8, 61272.0], [51.9, 61272.0], [52.0, 61273.0], [52.1, 61273.0], [52.2, 61273.0], [52.3, 61275.0], [52.4, 61275.0], [52.5, 61279.0], [52.6, 61279.0], [52.7, 61279.0], [52.8, 61281.0], [52.9, 61281.0], [53.0, 61283.0], [53.1, 61283.0], [53.2, 61283.0], [53.3, 61284.0], [53.4, 61284.0], [53.5, 61289.0], [53.6, 61289.0], [53.7, 61289.0], [53.8, 61293.0], [53.9, 61293.0], [54.0, 61295.0], [54.1, 61295.0], [54.2, 61295.0], [54.3, 61299.0], [54.4, 61299.0], [54.5, 61302.0], [54.6, 61302.0], [54.7, 61302.0], [54.8, 61302.0], [54.9, 61302.0], [55.0, 61309.0], [55.1, 61309.0], [55.2, 61309.0], [55.3, 61312.0], [55.4, 61312.0], [55.5, 61314.0], [55.6, 61314.0], [55.7, 61314.0], [55.8, 61317.0], [55.9, 61317.0], [56.0, 61322.0], [56.1, 61322.0], [56.2, 61322.0], [56.3, 61323.0], [56.4, 61323.0], [56.5, 61332.0], [56.6, 61332.0], [56.7, 61332.0], [56.8, 61335.0], [56.9, 61335.0], [57.0, 61336.0], [57.1, 61336.0], [57.2, 61336.0], [57.3, 61340.0], [57.4, 61340.0], [57.5, 61341.0], [57.6, 61341.0], [57.7, 61341.0], [57.8, 61344.0], [57.9, 61344.0], [58.0, 61345.0], [58.1, 61345.0], [58.2, 61345.0], [58.3, 61347.0], [58.4, 61347.0], [58.5, 61348.0], [58.6, 61348.0], [58.7, 61348.0], [58.8, 61349.0], [58.9, 61349.0], [59.0, 61351.0], [59.1, 61351.0], [59.2, 61351.0], [59.3, 61352.0], [59.4, 61352.0], [59.5, 61353.0], [59.6, 61353.0], [59.7, 61353.0], [59.8, 61356.0], [59.9, 61356.0], [60.0, 61356.0], [60.1, 61356.0], [60.2, 61356.0], [60.3, 61360.0], [60.4, 61360.0], [60.5, 61365.0], [60.6, 61365.0], [60.7, 61365.0], [60.8, 61377.0], [60.9, 61377.0], [61.0, 61383.0], [61.1, 61383.0], [61.2, 61383.0], [61.3, 61386.0], [61.4, 61386.0], [61.5, 61386.0], [61.6, 61386.0], [61.7, 61386.0], [61.8, 61386.0], [61.9, 61386.0], [62.0, 61389.0], [62.1, 61389.0], [62.2, 61389.0], [62.3, 61395.0], [62.4, 61395.0], [62.5, 61396.0], [62.6, 61396.0], [62.7, 61396.0], [62.8, 61397.0], [62.9, 61397.0], [63.0, 61402.0], [63.1, 61402.0], [63.2, 61402.0], [63.3, 61407.0], [63.4, 61407.0], [63.5, 61411.0], [63.6, 61411.0], [63.7, 61411.0], [63.8, 61411.0], [63.9, 61411.0], [64.0, 61413.0], [64.1, 61413.0], [64.2, 61413.0], [64.3, 61416.0], [64.4, 61416.0], [64.5, 61418.0], [64.6, 61418.0], [64.7, 61418.0], [64.8, 61419.0], [64.9, 61419.0], [65.0, 61432.0], [65.1, 61432.0], [65.2, 61432.0], [65.3, 61432.0], [65.4, 61432.0], [65.5, 61434.0], [65.6, 61434.0], [65.7, 61434.0], [65.8, 61437.0], [65.9, 61437.0], [66.0, 61437.0], [66.1, 61437.0], [66.2, 61437.0], [66.3, 61438.0], [66.4, 61438.0], [66.5, 61440.0], [66.6, 61440.0], [66.7, 61440.0], [66.8, 61443.0], [66.9, 61443.0], [67.0, 61443.0], [67.1, 61443.0], [67.2, 61443.0], [67.3, 61446.0], [67.4, 61446.0], [67.5, 61449.0], [67.6, 61449.0], [67.7, 61449.0], [67.8, 61450.0], [67.9, 61450.0], [68.0, 61453.0], [68.1, 61453.0], [68.2, 61453.0], [68.3, 61453.0], [68.4, 61453.0], [68.5, 61456.0], [68.6, 61456.0], [68.7, 61456.0], [68.8, 61458.0], [68.9, 61458.0], [69.0, 61458.0], [69.1, 61458.0], [69.2, 61458.0], [69.3, 61459.0], [69.4, 61459.0], [69.5, 61461.0], [69.6, 61461.0], [69.7, 61461.0], [69.8, 61465.0], [69.9, 61465.0], [70.0, 61468.0], [70.1, 61468.0], [70.2, 61468.0], [70.3, 61472.0], [70.4, 61472.0], [70.5, 61474.0], [70.6, 61474.0], [70.7, 61474.0], [70.8, 61482.0], [70.9, 61482.0], [71.0, 61484.0], [71.1, 61484.0], [71.2, 61484.0], [71.3, 61489.0], [71.4, 61489.0], [71.5, 61499.0], [71.6, 61499.0], [71.7, 61499.0], [71.8, 61500.0], [71.9, 61500.0], [72.0, 61501.0], [72.1, 61501.0], [72.2, 61501.0], [72.3, 61504.0], [72.4, 61504.0], [72.5, 61506.0], [72.6, 61506.0], [72.7, 61506.0], [72.8, 61509.0], [72.9, 61509.0], [73.0, 61512.0], [73.1, 61512.0], [73.2, 61512.0], [73.3, 61515.0], [73.4, 61515.0], [73.5, 61522.0], [73.6, 61522.0], [73.7, 61522.0], [73.8, 61524.0], [73.9, 61524.0], [74.0, 61535.0], [74.1, 61535.0], [74.2, 61535.0], [74.3, 61539.0], [74.4, 61539.0], [74.5, 61542.0], [74.6, 61542.0], [74.7, 61542.0], [74.8, 61546.0], [74.9, 61546.0], [75.0, 61550.0], [75.1, 61550.0], [75.2, 61550.0], [75.3, 61552.0], [75.4, 61552.0], [75.5, 61553.0], [75.6, 61553.0], [75.7, 61553.0], [75.8, 61554.0], [75.9, 61554.0], [76.0, 61558.0], [76.1, 61558.0], [76.2, 61558.0], [76.3, 61560.0], [76.4, 61560.0], [76.5, 61566.0], [76.6, 61566.0], [76.7, 61566.0], [76.8, 61574.0], [76.9, 61574.0], [77.0, 61576.0], [77.1, 61576.0], [77.2, 61576.0], [77.3, 61577.0], [77.4, 61577.0], [77.5, 61586.0], [77.6, 61586.0], [77.7, 61586.0], [77.8, 61587.0], [77.9, 61587.0], [78.0, 61588.0], [78.1, 61588.0], [78.2, 61588.0], [78.3, 61589.0], [78.4, 61589.0], [78.5, 61594.0], [78.6, 61594.0], [78.7, 61594.0], [78.8, 61595.0], [78.9, 61595.0], [79.0, 61597.0], [79.1, 61597.0], [79.2, 61597.0], [79.3, 61598.0], [79.4, 61598.0], [79.5, 61599.0], [79.6, 61599.0], [79.7, 61599.0], [79.8, 61599.0], [79.9, 61599.0], [80.0, 61602.0], [80.1, 61602.0], [80.2, 61602.0], [80.3, 61607.0], [80.4, 61607.0], [80.5, 61608.0], [80.6, 61608.0], [80.7, 61608.0], [80.8, 61612.0], [80.9, 61612.0], [81.0, 61613.0], [81.1, 61613.0], [81.2, 61613.0], [81.3, 61614.0], [81.4, 61614.0], [81.5, 61616.0], [81.6, 61616.0], [81.7, 61616.0], [81.8, 61621.0], [81.9, 61621.0], [82.0, 61623.0], [82.1, 61623.0], [82.2, 61623.0], [82.3, 61623.0], [82.4, 61623.0], [82.5, 61624.0], [82.6, 61624.0], [82.7, 61624.0], [82.8, 61625.0], [82.9, 61625.0], [83.0, 61627.0], [83.1, 61627.0], [83.2, 61627.0], [83.3, 61632.0], [83.4, 61632.0], [83.5, 61633.0], [83.6, 61633.0], [83.7, 61633.0], [83.8, 61635.0], [83.9, 61635.0], [84.0, 61635.0], [84.1, 61635.0], [84.2, 61635.0], [84.3, 61638.0], [84.4, 61638.0], [84.5, 61638.0], [84.6, 61638.0], [84.7, 61638.0], [84.8, 61645.0], [84.9, 61645.0], [85.0, 61650.0], [85.1, 61650.0], [85.2, 61650.0], [85.3, 61655.0], [85.4, 61655.0], [85.5, 61674.0], [85.6, 61674.0], [85.7, 61674.0], [85.8, 61677.0], [85.9, 61677.0], [86.0, 61686.0], [86.1, 61686.0], [86.2, 61686.0], [86.3, 61689.0], [86.4, 61689.0], [86.5, 61693.0], [86.6, 61693.0], [86.7, 61693.0], [86.8, 61696.0], [86.9, 61696.0], [87.0, 61699.0], [87.1, 61699.0], [87.2, 61699.0], [87.3, 61702.0], [87.4, 61702.0], [87.5, 61704.0], [87.6, 61704.0], [87.7, 61704.0], [87.8, 61706.0], [87.9, 61706.0], [88.0, 61707.0], [88.1, 61707.0], [88.2, 61707.0], [88.3, 61711.0], [88.4, 61711.0], [88.5, 61714.0], [88.6, 61714.0], [88.7, 61714.0], [88.8, 61718.0], [88.9, 61718.0], [89.0, 61719.0], [89.1, 61719.0], [89.2, 61719.0], [89.3, 61731.0], [89.4, 61731.0], [89.5, 61734.0], [89.6, 61734.0], [89.7, 61734.0], [89.8, 61739.0], [89.9, 61739.0], [90.0, 61741.0], [90.1, 61741.0], [90.2, 61741.0], [90.3, 61743.0], [90.4, 61743.0], [90.5, 61745.0], [90.6, 61745.0], [90.7, 61745.0], [90.8, 61746.0], [90.9, 61746.0], [91.0, 61747.0], [91.1, 61747.0], [91.2, 61747.0], [91.3, 61748.0], [91.4, 61748.0], [91.5, 61748.0], [91.6, 61748.0], [91.7, 61748.0], [91.8, 61748.0], [91.9, 61748.0], [92.0, 61751.0], [92.1, 61751.0], [92.2, 61751.0], [92.3, 61751.0], [92.4, 61751.0], [92.5, 61752.0], [92.6, 61752.0], [92.7, 61752.0], [92.8, 61753.0], [92.9, 61753.0], [93.0, 61754.0], [93.1, 61754.0], [93.2, 61754.0], [93.3, 61755.0], [93.4, 61755.0], [93.5, 61757.0], [93.6, 61757.0], [93.7, 61757.0], [93.8, 61758.0], [93.9, 61758.0], [94.0, 61761.0], [94.1, 61761.0], [94.2, 61761.0], [94.3, 61761.0], [94.4, 61761.0], [94.5, 61761.0], [94.6, 61761.0], [94.7, 61761.0], [94.8, 61770.0], [94.9, 61770.0], [95.0, 61777.0], [95.1, 61777.0], [95.2, 61777.0], [95.3, 61777.0], [95.4, 61777.0], [95.5, 61779.0], [95.6, 61779.0], [95.7, 61779.0], [95.8, 61788.0], [95.9, 61788.0], [96.0, 61793.0], [96.1, 61793.0], [96.2, 61793.0], [96.3, 61793.0], [96.4, 61793.0], [96.5, 61794.0], [96.6, 61794.0], [96.7, 61794.0], [96.8, 61803.0], [96.9, 61803.0], [97.0, 61806.0], [97.1, 61806.0], [97.2, 61806.0], [97.3, 61806.0], [97.4, 61806.0], [97.5, 61813.0], [97.6, 61813.0], [97.7, 61813.0], [97.8, 61819.0], [97.9, 61819.0], [98.0, 61820.0], [98.1, 61820.0], [98.2, 61820.0], [98.3, 61824.0], [98.4, 61824.0], [98.5, 61827.0], [98.6, 61827.0], [98.7, 61827.0], [98.8, 61830.0], [98.9, 61830.0], [99.0, 61840.0], [99.1, 61840.0], [99.2, 61840.0], [99.3, 61846.0], [99.4, 61846.0], [99.5, 61849.0], [99.6, 61849.0], [99.7, 61849.0], [99.8, 61851.0], [99.9, 61851.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8861.0, "series": [{"data": [[0.0, 710.0], [600.0, 45.0], [9600.0, 41.0], [13100.0, 6.0], [13000.0, 1.0], [1200.0, 43.0], [100.0, 1092.0], [2100.0, 8861.0], [2300.0, 2.0], [2200.0, 336.0], [2400.0, 44.0], [2500.0, 19.0], [2600.0, 253.0], [2800.0, 15.0], [2700.0, 18.0], [2900.0, 41.0], [3000.0, 9.0], [200.0, 3305.0], [3600.0, 46.0], [4100.0, 30.0], [300.0, 641.0], [5600.0, 67.0], [400.0, 823.0], [500.0, 118.0], [8100.0, 24.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[15700.0, 36.0], [15800.0, 24.0], [16100.0, 25.0], [16300.0, 35.0], [16200.0, 32.0], [15900.0, 41.0], [16000.0, 35.0], [16700.0, 31.0], [16500.0, 31.0], [16400.0, 36.0], [16600.0, 27.0], [16800.0, 32.0], [16900.0, 14.0], [17000.0, 1.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[61200.0, 29.0], [61000.0, 32.0], [61400.0, 35.0], [60700.0, 38.0], [60800.0, 30.0], [60600.0, 22.0], [61300.0, 34.0], [61100.0, 33.0], [60500.0, 1.0], [60900.0, 33.0], [61500.0, 33.0], [61600.0, 29.0], [61700.0, 38.0], [61800.0, 13.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 61800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 718.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 9813.0, "series": [{"data": [[0.0, 718.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 6016.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 843.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [[3.0, 9813.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 231.32249999999976, "minX": 1.6175823E12, "maxY": 387.5335794405797, "series": [{"data": [[1.6175823E12, 231.32249999999976]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.6175823E12, 366.1164763800148], [1.61758236E12, 387.5335794405797]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.61758236E12, 243.5275000000001]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61758236E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 61577.0, "series": [{"data": [[2.0, 9633.0], [3.0, 3644.0], [4.0, 2654.0], [5.0, 2166.0], [6.0, 2162.0], [7.0, 2175.0], [8.0, 2644.0], [9.0, 2175.0], [10.0, 2164.0], [11.0, 2170.0], [12.0, 2158.0], [13.0, 2162.0], [14.0, 2162.0], [15.0, 2160.0], [16.0, 2160.0], [17.0, 2178.0], [18.0, 2162.0], [19.0, 2176.0], [20.0, 2176.0], [21.0, 2175.0], [22.0, 2173.0], [23.0, 2173.0], [24.0, 2160.0], [25.0, 2161.0], [26.0, 2159.0], [27.0, 2175.0], [28.0, 2163.0], [29.0, 2162.0], [30.0, 2170.0], [31.0, 2159.0], [33.0, 2175.0], [32.0, 2174.0], [35.0, 2175.0], [34.0, 2173.0], [37.0, 2159.0], [36.0, 2161.0], [39.0, 2173.0], [38.0, 2176.0], [41.0, 2172.0], [40.0, 2177.0], [43.0, 2161.0], [42.0, 2160.0], [45.0, 2161.0], [44.0, 2159.0], [47.0, 2159.0], [46.0, 2176.0], [49.0, 2173.0], [48.0, 2172.0], [51.0, 2160.0], [50.0, 2160.0], [53.0, 2161.0], [52.0, 2173.0], [55.0, 2174.0], [54.0, 2160.0], [57.0, 2161.0], [56.0, 2160.0], [59.0, 2159.0], [58.0, 2176.0], [61.0, 2172.0], [60.0, 2173.0], [63.0, 2159.0], [62.0, 2174.0], [67.0, 2174.0], [66.0, 2160.0], [65.0, 2161.0], [64.0, 2160.0], [71.0, 2159.0], [70.0, 2160.0], [69.0, 2162.0], [68.0, 2164.0], [75.0, 2161.0], [74.0, 2161.0], [73.0, 2162.0], [72.0, 2161.0], [79.0, 2162.0], [78.0, 2161.0], [77.0, 2175.0], [76.0, 2178.0], [83.0, 2174.0], [82.0, 2162.0], [81.0, 2163.0], [80.0, 2178.0], [87.0, 2161.0], [86.0, 2171.0], [85.0, 2159.0], [84.0, 2175.0], [91.0, 2159.0], [90.0, 2158.0], [89.0, 2174.0], [88.0, 2169.0], [95.0, 2161.0], [94.0, 2173.0], [93.0, 2163.0], [92.0, 2162.0], [99.0, 2161.0], [98.0, 2161.0], [97.0, 2161.0], [96.0, 2163.0], [103.0, 2159.0], [102.0, 2160.0], [101.0, 2161.0], [100.0, 2161.0], [107.0, 2161.0], [106.0, 2158.0], [105.0, 2160.0], [104.0, 2172.0], [111.0, 2173.0], [110.0, 2176.0], [109.0, 2177.0], [108.0, 2179.0], [115.0, 2176.0], [114.0, 2176.0], [113.0, 2176.0], [112.0, 2174.0], [119.0, 2160.0], [118.0, 2170.0], [117.0, 2177.0], [116.0, 2176.0], [123.0, 2178.0], [122.0, 2189.0], [121.0, 2178.0], [120.0, 2181.0], [127.0, 2179.0], [126.0, 2174.0], [125.0, 2175.0], [124.0, 2159.0], [135.0, 2176.0], [134.0, 2159.0], [133.0, 2174.0], [132.0, 2176.0], [131.0, 2176.0], [130.0, 2175.0], [129.0, 2175.0], [128.0, 2178.0], [143.0, 2175.0], [142.0, 2174.0], [141.0, 2161.0], [140.0, 2176.0], [139.0, 2159.0], [138.0, 2185.0], [137.0, 2187.0], [136.0, 2175.0], [151.0, 2175.0], [150.0, 2164.0], [149.0, 2169.0], [148.0, 2171.0], [147.0, 2176.0], [146.0, 2172.0], [145.0, 2172.0], [144.0, 2172.0], [159.0, 2160.0], [158.0, 2161.0], [157.0, 2175.0], [156.0, 2158.0], [155.0, 2174.0], [154.0, 2157.0], [153.0, 2175.0], [152.0, 2161.0], [167.0, 2157.0], [166.0, 2156.0], [165.0, 2157.0], [164.0, 2170.0], [163.0, 2174.0], [162.0, 2174.0], [161.0, 2158.0], [160.0, 2174.0], [175.0, 2158.0], [174.0, 2172.0], [173.0, 2156.0], [172.0, 2157.0], [171.0, 2156.0], [170.0, 2174.0], [169.0, 2157.0], [168.0, 2152.0], [183.0, 2154.0], [182.0, 2170.0], [181.0, 2156.0], [180.0, 2170.0], [179.0, 2170.0], [178.0, 2158.0], [177.0, 2157.0], [176.0, 2156.0], [191.0, 2160.0], [190.0, 2160.0], [189.0, 2155.0], [188.0, 2172.0], [187.0, 2154.0], [186.0, 2155.0], [185.0, 2173.0], [184.0, 2176.0], [199.0, 2174.0], [198.0, 2171.0], [197.0, 2157.0], [196.0, 2158.0], [195.0, 2162.0], [194.0, 2169.0], [193.0, 2171.0], [192.0, 2172.0], [207.0, 2157.0], [206.0, 2161.0], [205.0, 2159.0], [204.0, 2173.0], [203.0, 2160.0], [202.0, 2171.0], [201.0, 2157.0], [200.0, 2159.0], [215.0, 2172.0], [214.0, 2155.0], [213.0, 2170.0], [212.0, 2171.0], [211.0, 2156.0], [210.0, 2156.0], [209.0, 2156.0], [208.0, 2171.0], [223.0, 2172.0], [222.0, 2155.0], [221.0, 2153.0], [220.0, 2169.0], [219.0, 2170.0], [218.0, 2158.0], [217.0, 2170.0], [216.0, 2172.0], [231.0, 2156.0], [230.0, 2171.0], [229.0, 2171.0], [228.0, 2173.0], [227.0, 2151.0], [226.0, 2168.0], [225.0, 2153.0], [224.0, 2156.0], [239.0, 2155.0], [238.0, 2155.0], [237.0, 2153.0], [236.0, 2157.0], [235.0, 2154.0], [234.0, 2155.0], [233.0, 2169.0], [232.0, 2171.0], [247.0, 2168.0], [246.0, 2156.0], [245.0, 2149.0], [244.0, 2153.0], [243.0, 2165.0], [242.0, 2188.0], [241.0, 2173.0], [240.0, 2154.0], [255.0, 2148.0], [254.0, 2184.0], [253.0, 2151.0], [252.0, 2154.0], [251.0, 2169.0], [250.0, 2155.0], [249.0, 2170.0], [248.0, 2171.0], [270.0, 2150.0], [271.0, 2179.0], [269.0, 2161.0], [268.0, 2196.0], [267.0, 2162.0], [266.0, 2167.0], [265.0, 2175.0], [264.0, 2176.0], [263.0, 2176.0], [257.0, 2166.0], [256.0, 2167.0], [259.0, 2169.0], [258.0, 2169.0], [262.0, 2170.0], [261.0, 2153.0], [260.0, 2151.0], [286.0, 2149.0], [287.0, 2168.0], [285.0, 2169.0], [284.0, 2154.0], [283.0, 2165.0], [282.0, 2167.0], [281.0, 2166.0], [280.0, 2184.0], [279.0, 2169.0], [273.0, 2168.5], [275.0, 2168.0], [274.0, 2166.0], [278.0, 2153.0], [277.0, 2169.0], [276.0, 2168.0], [302.0, 2167.0], [303.0, 2153.0], [301.0, 2160.0], [300.0, 2151.0], [299.0, 2167.0], [298.0, 2167.0], [297.0, 2163.0], [296.0, 2165.0], [295.0, 2152.0], [288.0, 2149.0], [290.0, 2170.0], [289.0, 2167.0], [294.0, 2164.0], [293.0, 2168.0], [292.0, 2167.0], [318.0, 2167.0], [319.0, 2175.0], [317.0, 2164.0], [316.0, 2171.0], [315.0, 2166.5], [313.0, 2169.0], [312.0, 2180.5], [310.0, 2182.0], [305.0, 2154.0], [304.0, 2152.0], [307.0, 2180.0], [306.0, 2155.0], [309.0, 2177.0], [308.0, 2178.0], [333.0, 2171.0], [335.0, 2159.5], [332.0, 2158.0], [323.0, 2184.0], [322.0, 2173.0], [321.0, 2155.0], [320.0, 2171.0], [331.0, 2166.0], [330.0, 2149.0], [329.0, 2163.0], [328.0, 2152.0], [327.0, 2182.0], [326.0, 2167.0], [325.0, 2152.0], [324.0, 2169.0], [350.0, 2166.0], [351.0, 2170.0], [349.0, 2153.0], [348.0, 2152.0], [347.0, 2166.0], [346.0, 2154.0], [345.0, 2168.0], [344.0, 2154.0], [343.0, 2154.0], [337.0, 2162.0], [336.0, 2152.0], [339.0, 2166.0], [338.0, 2149.0], [342.0, 2171.0], [341.0, 2152.0], [340.0, 2153.0], [366.0, 2155.0], [367.0, 2153.0], [365.0, 2171.0], [364.0, 2167.0], [363.0, 2153.0], [362.0, 2153.0], [361.0, 2153.0], [360.0, 2155.0], [359.0, 2154.0], [353.0, 2167.0], [352.0, 2154.0], [355.0, 2151.0], [354.0, 2151.0], [358.0, 2171.0], [357.0, 2154.0], [356.0, 2167.0], [382.0, 2155.3333333333335], [383.0, 2164.9999999999995], [381.0, 2156.8947368421054], [380.0, 2161.280701754385], [378.0, 2154.0], [377.0, 2152.0], [376.0, 2191.0], [375.0, 2156.0], [369.0, 2155.0], [368.0, 2164.0], [371.0, 2154.0], [370.0, 2156.0], [374.0, 2154.0], [373.0, 2151.0], [372.0, 2156.0], [397.0, 2161.4999999999995], [398.0, 2175.0], [396.0, 2160.7019230769233], [387.0, 2167.354838709677], [386.0, 2164.3712121212116], [385.0, 2162.3636363636365], [384.0, 2160.9898989899], [395.0, 2156.0], [394.0, 2166.3333333333335], [393.0, 2161.4166666666665], [392.0, 2160.8399999999992], [391.0, 2157.2727272727275], [390.0, 2158.933333333334], [389.0, 2153.0], [388.0, 2154.0], [401.0, 2176.0], [596.0, 2161.0], [697.0, 2163.0], [799.0, 2165.433333333334], [798.0, 2162.8392857142867], [797.0, 2160.8666666666663], [796.0, 2163.4206896551714], [800.0, 2292.3996735455344], [856.0, 31.5], [845.0, 29.88888888888889], [834.0, 84.83333333333333], [835.0, 61.333333333333336], [836.0, 49.333333333333336], [857.0, 32.85714285714286], [858.0, 34.0], [859.0, 35.2], [860.0, 34.0], [862.0, 33.2], [863.0, 31.428571428571427], [842.0, 28.0], [843.0, 28.75], [844.0, 30.0], [846.0, 31.6], [847.0, 33.42857142857142], [848.0, 36.0], [849.0, 33.0], [850.0, 28.0], [852.0, 28.25], [853.0, 28.285714285714285], [854.0, 29.25], [855.0, 30.333333333333332], [871.0, 36.166666666666664], [867.0, 33.0], [864.0, 31.75], [878.0, 34.5], [879.0, 45.625], [875.0, 34.0], [877.0, 34.8], [865.0, 32.25], [866.0, 32.2], [868.0, 34.0], [869.0, 34.75], [870.0, 34.0], [880.0, 33.5], [895.0, 36.0], [893.0, 39.6], [894.0, 40.57142857142857], [890.0, 37.0], [891.0, 39.333333333333336], [888.0, 47.41666666666667], [889.0, 36.0], [882.0, 33.0], [883.0, 31.333333333333332], [884.0, 49.0], [885.0, 31.0], [886.0, 57.583333333333336], [887.0, 55.89473684210526], [873.0, 35.5], [874.0, 39.77777777777778], [899.0, 51.90909090909091], [896.0, 34.0], [910.0, 47.333333333333336], [911.0, 50.333333333333336], [908.0, 44.0], [909.0, 48.5], [906.0, 49.0], [907.0, 44.900000000000006], [897.0, 34.5], [898.0, 36.5], [900.0, 48.00000000000001], [901.0, 42.0], [902.0, 44.5], [903.0, 47.0], [912.0, 52.0], [927.0, 57.83333333333333], [925.0, 75.16666666666667], [926.0, 60.5], [923.0, 55.6], [924.0, 57.8], [920.0, 56.285714285714285], [922.0, 53.5], [913.0, 51.6], [914.0, 48.833333333333336], [915.0, 48.0], [916.0, 50.33333333333333], [917.0, 52.25], [918.0, 54.0], [919.0, 55.0], [904.0, 51.800000000000004], [905.0, 52.8235294117647], [930.0, 84.57142857142857], [928.0, 57.333333333333336], [942.0, 55.0], [943.0, 96.15], [940.0, 66.25], [941.0, 52.75], [931.0, 55.25], [933.0, 58.0], [934.0, 59.2], [935.0, 98.75], [944.0, 73.9230769230769], [959.0, 85.33333333333333], [952.0, 67.0], [955.0, 74.5], [945.0, 100.76000000000003], [946.0, 56.86666666666667], [936.0, 58.25], [937.0, 54.66666666666667], [938.0, 55.0], [939.0, 55.0], [967.0, 72.83333333333333], [963.0, 80.83333333333331], [960.0, 85.0], [971.0, 82.66666666666667], [972.0, 83.5], [961.0, 83.0], [962.0, 83.625], [964.0, 77.57142857142857], [965.0, 71.91666666666666], [966.0, 70.0], [978.0, 100.6], [990.0, 83.0], [991.0, 85.2], [988.0, 82.33333333333334], [989.0, 84.0], [986.0, 87.5], [987.0, 82.83333333333334], [984.0, 106.0], [985.0, 95.71428571428571], [979.0, 104.88888888888889], [980.0, 106.10000000000001], [981.0, 108.18181818181817], [982.0, 108.94117647058825], [983.0, 110.0], [969.0, 77.33333333333333], [970.0, 80.83333333333333], [998.0, 100.42857142857143], [994.0, 93.4], [992.0, 90.0], [1006.0, 104.92307692307693], [1007.0, 105.0], [1004.0, 105.33333333333333], [1005.0, 104.57142857142857], [1002.0, 105.5], [1003.0, 106.5], [995.0, 96.4], [996.0, 98.0], [997.0, 99.2], [999.0, 104.0], [1016.0, 105.0], [1017.0, 106.54545454545455], [1018.0, 108.0], [1019.0, 108.5], [1020.0, 108.33333333333333], [1021.0, 110.5], [1023.0, 112.33333333333333], [1008.0, 100.5], [1009.0, 92.42857142857143], [1010.0, 93.0], [1011.0, 96.0], [1012.0, 95.6], [1013.0, 97.71428571428571], [1014.0, 100.0], [1015.0, 104.33333333333333], [1000.0, 104.75], [1001.0, 105.0], [1035.0, 116.25], [1027.0, 120.00000000000001], [1024.0, 116.33333333333334], [1055.0, 126.66666666666667], [1052.0, 129.0], [1053.0, 126.2], [1050.0, 127.8], [1051.0, 128.0], [1048.0, 125.0], [1049.0, 127.0], [1046.0, 122.5], [1047.0, 122.14285714285715], [1044.0, 120.0], [1045.0, 121.125], [1042.0, 120.0], [1043.0, 119.83333333333334], [1040.0, 119.0], [1041.0, 119.63636363636364], [1025.0, 119.66666666666667], [1026.0, 120.0], [1028.0, 120.85714285714285], [1029.0, 119.0], [1030.0, 119.5], [1031.0, 115.87500000000001], [1032.0, 114.4], [1033.0, 115.5], [1034.0, 114.25], [1036.0, 118.75], [1037.0, 120.5], [1038.0, 120.25], [1039.0, 119.57142857142857], [1056.0, 136.41176470588232], [1085.0, 139.0], [1086.0, 139.99999999999997], [1082.0, 138.5], [1084.0, 139.25], [1080.0, 136.6], [1081.0, 136.4], [1078.0, 138.83333333333334], [1079.0, 136.6], [1076.0, 135.0], [1077.0, 139.0], [1072.0, 129.625], [1073.0, 130.14285714285714], [1057.0, 130.53846153846152], [1058.0, 125.5], [1059.0, 126.25], [1060.0, 127.66666666666667], [1061.0, 130.88888888888886], [1062.0, 132.16666666666666], [1063.0, 132.75], [1064.0, 133.5], [1065.0, 132.5], [1067.0, 133.66666666666666], [1068.0, 129.2], [1069.0, 133.38461538461542], [1070.0, 129.63636363636365], [1071.0, 129.0], [1100.0, 147.0], [1092.0, 145.66666666666666], [1088.0, 142.66666666666666], [1119.0, 156.33333333333334], [1117.0, 157.0], [1118.0, 157.0], [1114.0, 155.5], [1115.0, 160.16666666666666], [1112.0, 155.0], [1113.0, 156.8], [1110.0, 152.0], [1111.0, 154.25], [1108.0, 152.7142857142857], [1109.0, 152.99999999999997], [1106.0, 149.75], [1107.0, 151.66666666666666], [1104.0, 146.2], [1105.0, 148.4], [1089.0, 143.83333333333334], [1091.0, 145.0], [1093.0, 147.0], [1094.0, 147.875], [1095.0, 148.66666666666666], [1096.0, 149.75], [1097.0, 149.0], [1098.0, 148.2], [1099.0, 146.33333333333334], [1101.0, 145.0], [1102.0, 149.0], [1103.0, 147.0], [1136.0, 181.57142857142858], [1137.0, 188.6774193548387], [1138.0, 187.16666666666663], [1139.0, 167.25], [1140.0, 169.0], [1141.0, 168.66666666666666], [1142.0, 170.25000000000003], [1143.0, 167.9], [1144.0, 167.85714285714286], [1145.0, 168.2], [1146.0, 163.75], [1147.0, 163.99999999999997], [1148.0, 163.66666666666666], [1149.0, 165.5], [1150.0, 164.44444444444446], [1151.0, 165.5], [1120.0, 157.66666666666666], [1121.0, 173.8], [1122.0, 159.0], [1123.0, 162.33333333333334], [1124.0, 165.0], [1125.0, 166.0], [1126.0, 174.66666666666669], [1127.0, 166.0], [1128.0, 168.0], [1130.0, 167.8], [1131.0, 186.66666666666666], [1132.0, 166.0], [1134.0, 166.33333333333334], [1135.0, 170.0], [1155.0, 165.66666666666666], [1176.0, 194.0], [1152.0, 166.0], [1183.0, 191.0], [1181.0, 190.4], [1182.0, 189.71428571428572], [1179.0, 191.0], [1180.0, 190.2], [1177.0, 188.5], [1178.0, 190.0], [1175.0, 189.0], [1173.0, 189.8], [1174.0, 190.28571428571428], [1170.0, 185.6], [1171.0, 187.6], [1168.0, 184.0], [1169.0, 183.0], [1153.0, 167.8], [1154.0, 166.46153846153842], [1156.0, 165.0], [1157.0, 164.33333333333334], [1158.0, 166.0], [1161.0, 173.5], [1163.0, 179.5], [1164.0, 180.5], [1165.0, 178.5], [1166.0, 182.0], [1167.0, 182.9], [1200.0, 320.4335734293714], [1184.0, 188.6], [1185.0, 192.33333333333334], [1186.0, 191.0], [1187.0, 192.6], [1188.0, 190.0], [1189.0, 191.83333333333334], [1190.0, 191.33333333333334], [1191.0, 190.99999999999997], [1192.0, 185.58333333333331], [1193.0, 181.9], [1195.0, 178.125], [1196.0, 179.0], [1197.0, 183.0], [1199.0, 187.66666666666666], [1.0, 9643.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[914.7883062085579, 1455.7610006027676]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[824.0, 16398.809523809523], [803.0, 16289.0], [851.0, 16429.235294117647], [850.0, 16298.099999999999], [888.0, 16295.25], [880.0, 16302.16666666667], [879.0, 16259.4], [910.0, 16315.909090909092], [1020.0, 16350.0], [1023.0, 16455.57142857143], [1008.0, 16176.88888888889], [1010.0, 16299.714285714286], [1009.0, 16334.75], [1013.0, 16614.75], [1012.0, 16115.666666666668], [1022.0, 15985.0], [1021.0, 16303.25], [1019.0, 16480.3], [1018.0, 16396.0], [1017.0, 16097.166666666668], [1016.0, 15897.333333333334], [1015.0, 16033.666666666666], [1014.0, 16122.666666666666], [1079.0, 16521.44444444444], [1078.0, 15824.0], [1069.0, 16284.37037037037], [1068.0, 15973.75], [1067.0, 16854.0], [1065.0, 16303.600000000002], [1066.0, 15959.0], [1024.0, 16348.344827586212], [1189.0, 16497.0], [1200.0, 16151.733333333332], [1167.0, 16289.0], [1166.0, 16310.5], [1165.0, 15963.0], [1164.0, 16232.2], [1195.0, 16191.0], [1192.0, 16271.0], [1190.0, 16275.5], [1188.0, 16669.5], [1187.0, 16680.0], [1173.0, 16309.454545454544], [1172.0, 16257.666666666668], [1171.0, 16348.333333333334], [1170.0, 16125.42857142857], [1168.0, 16446.375], [1169.0, 16471.444444444445]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1031.2974999999997, 16316.807499999992]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[596.0, 61150.61111111111], [595.0, 60884.625], [594.0, 61132.909090909096], [593.0, 61286.8888888889], [591.0, 61055.5], [692.0, 61155.0], [697.0, 61318.40740740741], [696.0, 61480.8888888889], [687.0, 60969.666666666664], [686.0, 61577.0], [695.0, 61369.25], [694.0, 61154.5], [693.0, 61530.8], [691.0, 61152.4], [690.0, 61144.74999999999], [689.0, 61239.76923076923], [688.0, 61342.0], [721.0, 61069.00000000001], [720.0, 60754.5], [796.0, 61159.13999999999], [795.0, 61250.55555555555], [794.0, 61285.375], [397.0, 60804.0], [501.0, 61365.666666666664], [500.0, 61308.0], [499.0, 61315.174999999996], [498.0, 60977.0], [497.0, 60960.5]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[639.5050000000001, 61235.04250000001]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6175823E12, "maxY": 4.9E-324, "series": [{"data": [[1.6175823E12, 0.0], [1.61758236E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6175823E12, 0.0], [1.61758236E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61758236E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 845.4749135854183, "minX": 1.6175823E12, "maxY": 61235.04250000001, "series": [{"data": [[1.6175823E12, 845.4749135854183], [1.61758236E12, 2283.0222916370835]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.6175823E12, 16316.807499999992]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61758236E12, 61235.04250000001]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61758236E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6175823E12, "maxY": 4.9E-324, "series": [{"data": [[1.6175823E12, 0.0], [1.61758236E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.6175823E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61758236E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61758236E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6175823E12, "maxY": 4.9E-324, "series": [{"data": [[1.6175823E12, 0.0], [1.61758236E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.6175823E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61758236E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61758236E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.6175823E12, "maxY": 61851.0, "series": [{"data": [[1.6175823E12, 17011.0], [1.61758236E12, 61851.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6175823E12, 474.0], [1.61758236E12, 61740.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6175823E12, 16717.440000000002], [1.61758236E12, 61839.9]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6175823E12, 15818.3], [1.61758236E12, 61776.65]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6175823E12, 27.0], [1.61758236E12, 60595.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6175823E12, 261.0], [1.61758236E12, 61250.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61758236E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 32.0, "minX": 2.0, "maxY": 61250.0, "series": [{"data": [[1058.0, 275.0], [259.0, 292.0], [518.0, 61250.0], [143.0, 32.0], [1127.0, 244.0], [1275.0, 263.0], [1274.0, 276.0], [1641.0, 119.0], [400.0, 16331.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[518.0, 2156.0], [2.0, 6638.5], [38.0, 2159.5], [43.0, 2164.0], [51.0, 2161.0], [52.0, 2166.0], [63.0, 2165.0], [65.0, 2179.0], [72.0, 2164.5], [89.0, 2201.0], [95.0, 2160.0], [97.0, 2165.0], [96.0, 2166.5], [106.0, 2157.5], [132.0, 2180.5], [134.0, 2159.5], [131.0, 2157.0], [144.0, 2160.0], [156.0, 2167.0], [166.0, 2164.0], [161.0, 2158.0], [164.0, 2162.5], [192.0, 2170.5], [199.0, 2166.0], [209.0, 2157.0], [217.0, 2163.0], [230.0, 2157.0], [224.0, 2164.0], [234.0, 2160.0], [235.0, 2165.0], [233.0, 2154.0], [241.0, 2163.0], [240.0, 2161.0], [248.0, 2160.0], [268.0, 2188.0], [263.0, 2165.0], [18.0, 5623.0], [311.0, 2188.0], [307.0, 2164.0], [335.0, 2177.0], [326.0, 2164.0], [334.0, 2160.0], [348.0, 2169.0], [370.0, 2170.0], [30.0, 2175.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1641.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 4.9E-324, "series": [{"data": [[1058.0, 0.0], [259.0, 0.0], [518.0, 0.0], [143.0, 0.0], [1127.0, 0.0], [1275.0, 0.0], [1274.0, 0.0], [1641.0, 0.0], [400.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[518.0, 0.0], [2.0, 0.0], [38.0, 0.0], [43.0, 0.0], [51.0, 0.0], [52.0, 0.0], [63.0, 0.0], [65.0, 0.0], [72.0, 0.0], [89.0, 0.0], [95.0, 0.0], [97.0, 0.0], [96.0, 0.0], [106.0, 0.0], [132.0, 0.0], [134.0, 0.0], [131.0, 0.0], [144.0, 0.0], [156.0, 0.0], [166.0, 0.0], [161.0, 0.0], [164.0, 0.0], [192.0, 0.0], [199.0, 0.0], [209.0, 0.0], [217.0, 0.0], [230.0, 0.0], [224.0, 0.0], [234.0, 0.0], [235.0, 0.0], [233.0, 0.0], [241.0, 0.0], [240.0, 0.0], [248.0, 0.0], [268.0, 0.0], [263.0, 0.0], [18.0, 0.0], [311.0, 0.0], [307.0, 0.0], [335.0, 0.0], [326.0, 0.0], [334.0, 0.0], [348.0, 0.0], [370.0, 0.0], [30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1641.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 110.71666666666667, "minX": 1.6175823E12, "maxY": 179.11666666666667, "series": [{"data": [[1.6175823E12, 179.11666666666667], [1.61758236E12, 110.71666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61758236E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.6175823E12, "maxY": 119.61666666666666, "series": [{"data": [[1.6175823E12, 119.61666666666666], [1.61758236E12, 6.666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6175823E12, 46.166666666666664], [1.61758236E12, 117.38333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61758236E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.6175823E12, "maxY": 117.38333333333334, "series": [{"data": [[1.61758236E12, 6.666666666666667]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.6175823E12, 6.666666666666667]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.6175823E12, 112.95]], "isOverall": false, "label": "JoinRoom-success", "isController": false}, {"data": [[1.6175823E12, 46.166666666666664], [1.61758236E12, 117.38333333333334]], "isOverall": false, "label": "JoinRoom-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61758236E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.6175823E12, "maxY": 119.61666666666666, "series": [{"data": [[1.6175823E12, 119.61666666666666], [1.61758236E12, 6.666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6175823E12, 46.166666666666664], [1.61758236E12, 117.38333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61758236E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

