/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 15060.0, "series": [{"data": [[0.0, 25.0], [0.1, 26.0], [0.2, 26.0], [0.3, 26.0], [0.4, 26.0], [0.5, 26.0], [0.6, 26.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 27.0], [1.4, 27.0], [1.5, 27.0], [1.6, 27.0], [1.7, 27.0], [1.8, 27.0], [1.9, 27.0], [2.0, 27.0], [2.1, 27.0], [2.2, 27.0], [2.3, 27.0], [2.4, 27.0], [2.5, 27.0], [2.6, 27.0], [2.7, 27.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 28.0], [3.6, 28.0], [3.7, 28.0], [3.8, 28.0], [3.9, 28.0], [4.0, 28.0], [4.1, 28.0], [4.2, 28.0], [4.3, 28.0], [4.4, 28.0], [4.5, 28.0], [4.6, 28.0], [4.7, 28.0], [4.8, 28.0], [4.9, 28.0], [5.0, 29.0], [5.1, 29.0], [5.2, 29.0], [5.3, 29.0], [5.4, 29.0], [5.5, 29.0], [5.6, 29.0], [5.7, 29.0], [5.8, 29.0], [5.9, 29.0], [6.0, 29.0], [6.1, 29.0], [6.2, 29.0], [6.3, 29.0], [6.4, 29.0], [6.5, 29.0], [6.6, 29.0], [6.7, 29.0], [6.8, 29.0], [6.9, 29.0], [7.0, 29.0], [7.1, 29.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 30.0], [8.2, 30.0], [8.3, 30.0], [8.4, 30.0], [8.5, 30.0], [8.6, 30.0], [8.7, 30.0], [8.8, 30.0], [8.9, 30.0], [9.0, 31.0], [9.1, 31.0], [9.2, 31.0], [9.3, 31.0], [9.4, 31.0], [9.5, 31.0], [9.6, 31.0], [9.7, 31.0], [9.8, 31.0], [9.9, 31.0], [10.0, 31.0], [10.1, 31.0], [10.2, 31.0], [10.3, 32.0], [10.4, 32.0], [10.5, 32.0], [10.6, 32.0], [10.7, 32.0], [10.8, 32.0], [10.9, 32.0], [11.0, 32.0], [11.1, 32.0], [11.2, 32.0], [11.3, 33.0], [11.4, 33.0], [11.5, 33.0], [11.6, 33.0], [11.7, 33.0], [11.8, 33.0], [11.9, 33.0], [12.0, 33.0], [12.1, 33.0], [12.2, 34.0], [12.3, 34.0], [12.4, 34.0], [12.5, 34.0], [12.6, 34.0], [12.7, 34.0], [12.8, 34.0], [12.9, 34.0], [13.0, 34.0], [13.1, 34.0], [13.2, 34.0], [13.3, 34.0], [13.4, 35.0], [13.5, 35.0], [13.6, 35.0], [13.7, 35.0], [13.8, 35.0], [13.9, 35.0], [14.0, 35.0], [14.1, 35.0], [14.2, 35.0], [14.3, 36.0], [14.4, 36.0], [14.5, 36.0], [14.6, 36.0], [14.7, 36.0], [14.8, 36.0], [14.9, 36.0], [15.0, 37.0], [15.1, 37.0], [15.2, 37.0], [15.3, 37.0], [15.4, 37.0], [15.5, 37.0], [15.6, 38.0], [15.7, 38.0], [15.8, 38.0], [15.9, 38.0], [16.0, 38.0], [16.1, 38.0], [16.2, 38.0], [16.3, 39.0], [16.4, 39.0], [16.5, 39.0], [16.6, 39.0], [16.7, 39.0], [16.8, 39.0], [16.9, 39.0], [17.0, 39.0], [17.1, 39.0], [17.2, 40.0], [17.3, 40.0], [17.4, 40.0], [17.5, 40.0], [17.6, 40.0], [17.7, 40.0], [17.8, 40.0], [17.9, 40.0], [18.0, 40.0], [18.1, 41.0], [18.2, 41.0], [18.3, 41.0], [18.4, 41.0], [18.5, 41.0], [18.6, 41.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 43.0], [19.3, 43.0], [19.4, 43.0], [19.5, 43.0], [19.6, 43.0], [19.7, 43.0], [19.8, 43.0], [19.9, 44.0], [20.0, 44.0], [20.1, 44.0], [20.2, 44.0], [20.3, 44.0], [20.4, 44.0], [20.5, 44.0], [20.6, 45.0], [20.7, 45.0], [20.8, 45.0], [20.9, 45.0], [21.0, 45.0], [21.1, 46.0], [21.2, 46.0], [21.3, 46.0], [21.4, 46.0], [21.5, 46.0], [21.6, 47.0], [21.7, 47.0], [21.8, 47.0], [21.9, 47.0], [22.0, 47.0], [22.1, 47.0], [22.2, 47.0], [22.3, 47.0], [22.4, 48.0], [22.5, 48.0], [22.6, 48.0], [22.7, 48.0], [22.8, 48.0], [22.9, 48.0], [23.0, 49.0], [23.1, 49.0], [23.2, 49.0], [23.3, 49.0], [23.4, 50.0], [23.5, 50.0], [23.6, 50.0], [23.7, 50.0], [23.8, 51.0], [23.9, 51.0], [24.0, 51.0], [24.1, 51.0], [24.2, 51.0], [24.3, 52.0], [24.4, 52.0], [24.5, 52.0], [24.6, 52.0], [24.7, 52.0], [24.8, 52.0], [24.9, 53.0], [25.0, 53.0], [25.1, 53.0], [25.2, 53.0], [25.3, 53.0], [25.4, 53.0], [25.5, 54.0], [25.6, 54.0], [25.7, 54.0], [25.8, 54.0], [25.9, 55.0], [26.0, 55.0], [26.1, 55.0], [26.2, 56.0], [26.3, 56.0], [26.4, 56.0], [26.5, 57.0], [26.6, 57.0], [26.7, 57.0], [26.8, 57.0], [26.9, 57.0], [27.0, 57.0], [27.1, 57.0], [27.2, 57.0], [27.3, 58.0], [27.4, 58.0], [27.5, 58.0], [27.6, 58.0], [27.7, 58.0], [27.8, 58.0], [27.9, 58.0], [28.0, 58.0], [28.1, 59.0], [28.2, 59.0], [28.3, 59.0], [28.4, 59.0], [28.5, 59.0], [28.6, 59.0], [28.7, 59.0], [28.8, 60.0], [28.9, 60.0], [29.0, 60.0], [29.1, 60.0], [29.2, 60.0], [29.3, 61.0], [29.4, 61.0], [29.5, 61.0], [29.6, 61.0], [29.7, 61.0], [29.8, 61.0], [29.9, 61.0], [30.0, 61.0], [30.1, 62.0], [30.2, 62.0], [30.3, 62.0], [30.4, 62.0], [30.5, 62.0], [30.6, 62.0], [30.7, 62.0], [30.8, 62.0], [30.9, 62.0], [31.0, 62.0], [31.1, 62.0], [31.2, 63.0], [31.3, 63.0], [31.4, 63.0], [31.5, 63.0], [31.6, 63.0], [31.7, 63.0], [31.8, 63.0], [31.9, 63.0], [32.0, 63.0], [32.1, 63.0], [32.2, 64.0], [32.3, 64.0], [32.4, 64.0], [32.5, 64.0], [32.6, 64.0], [32.7, 64.0], [32.8, 64.0], [32.9, 65.0], [33.0, 65.0], [33.1, 65.0], [33.2, 65.0], [33.3, 65.0], [33.4, 65.0], [33.5, 66.0], [33.6, 66.0], [33.7, 66.0], [33.8, 66.0], [33.9, 67.0], [34.0, 67.0], [34.1, 67.0], [34.2, 67.0], [34.3, 68.0], [34.4, 68.0], [34.5, 68.0], [34.6, 68.0], [34.7, 68.0], [34.8, 69.0], [34.9, 69.0], [35.0, 69.0], [35.1, 70.0], [35.2, 70.0], [35.3, 70.0], [35.4, 71.0], [35.5, 71.0], [35.6, 72.0], [35.7, 72.0], [35.8, 73.0], [35.9, 73.0], [36.0, 74.0], [36.1, 74.0], [36.2, 75.0], [36.3, 75.0], [36.4, 76.0], [36.5, 76.0], [36.6, 77.0], [36.7, 78.0], [36.8, 78.0], [36.9, 79.0], [37.0, 79.0], [37.1, 79.0], [37.2, 80.0], [37.3, 80.0], [37.4, 80.0], [37.5, 81.0], [37.6, 81.0], [37.7, 81.0], [37.8, 82.0], [37.9, 82.0], [38.0, 83.0], [38.1, 83.0], [38.2, 83.0], [38.3, 83.0], [38.4, 84.0], [38.5, 84.0], [38.6, 85.0], [38.7, 85.0], [38.8, 85.0], [38.9, 86.0], [39.0, 86.0], [39.1, 86.0], [39.2, 87.0], [39.3, 87.0], [39.4, 87.0], [39.5, 87.0], [39.6, 88.0], [39.7, 88.0], [39.8, 88.0], [39.9, 88.0], [40.0, 88.0], [40.1, 89.0], [40.2, 89.0], [40.3, 89.0], [40.4, 89.0], [40.5, 90.0], [40.6, 90.0], [40.7, 90.0], [40.8, 90.0], [40.9, 90.0], [41.0, 91.0], [41.1, 91.0], [41.2, 91.0], [41.3, 91.0], [41.4, 91.0], [41.5, 92.0], [41.6, 92.0], [41.7, 92.0], [41.8, 92.0], [41.9, 93.0], [42.0, 93.0], [42.1, 93.0], [42.2, 93.0], [42.3, 93.0], [42.4, 93.0], [42.5, 94.0], [42.6, 94.0], [42.7, 94.0], [42.8, 94.0], [42.9, 94.0], [43.0, 94.0], [43.1, 94.0], [43.2, 95.0], [43.3, 95.0], [43.4, 95.0], [43.5, 95.0], [43.6, 95.0], [43.7, 95.0], [43.8, 95.0], [43.9, 96.0], [44.0, 96.0], [44.1, 96.0], [44.2, 96.0], [44.3, 96.0], [44.4, 96.0], [44.5, 96.0], [44.6, 97.0], [44.7, 97.0], [44.8, 97.0], [44.9, 97.0], [45.0, 97.0], [45.1, 97.0], [45.2, 97.0], [45.3, 98.0], [45.4, 98.0], [45.5, 98.0], [45.6, 98.0], [45.7, 98.0], [45.8, 98.0], [45.9, 98.0], [46.0, 98.0], [46.1, 99.0], [46.2, 99.0], [46.3, 99.0], [46.4, 99.0], [46.5, 99.0], [46.6, 99.0], [46.7, 99.0], [46.8, 99.0], [46.9, 100.0], [47.0, 100.0], [47.1, 100.0], [47.2, 100.0], [47.3, 100.0], [47.4, 100.0], [47.5, 100.0], [47.6, 100.0], [47.7, 101.0], [47.8, 101.0], [47.9, 101.0], [48.0, 101.0], [48.1, 101.0], [48.2, 101.0], [48.3, 101.0], [48.4, 101.0], [48.5, 102.0], [48.6, 102.0], [48.7, 102.0], [48.8, 102.0], [48.9, 102.0], [49.0, 102.0], [49.1, 102.0], [49.2, 103.0], [49.3, 103.0], [49.4, 103.0], [49.5, 103.0], [49.6, 103.0], [49.7, 103.0], [49.8, 103.0], [49.9, 103.0], [50.0, 104.0], [50.1, 104.0], [50.2, 104.0], [50.3, 104.0], [50.4, 104.0], [50.5, 104.0], [50.6, 104.0], [50.7, 105.0], [50.8, 105.0], [50.9, 105.0], [51.0, 105.0], [51.1, 105.0], [51.2, 105.0], [51.3, 105.0], [51.4, 106.0], [51.5, 106.0], [51.6, 106.0], [51.7, 106.0], [51.8, 106.0], [51.9, 106.0], [52.0, 106.0], [52.1, 107.0], [52.2, 107.0], [52.3, 107.0], [52.4, 107.0], [52.5, 107.0], [52.6, 108.0], [52.7, 108.0], [52.8, 108.0], [52.9, 108.0], [53.0, 108.0], [53.1, 108.0], [53.2, 108.0], [53.3, 109.0], [53.4, 109.0], [53.5, 109.0], [53.6, 109.0], [53.7, 109.0], [53.8, 109.0], [53.9, 110.0], [54.0, 110.0], [54.1, 110.0], [54.2, 110.0], [54.3, 110.0], [54.4, 110.0], [54.5, 110.0], [54.6, 111.0], [54.7, 111.0], [54.8, 111.0], [54.9, 111.0], [55.0, 111.0], [55.1, 112.0], [55.2, 112.0], [55.3, 112.0], [55.4, 112.0], [55.5, 113.0], [55.6, 113.0], [55.7, 113.0], [55.8, 113.0], [55.9, 113.0], [56.0, 114.0], [56.1, 114.0], [56.2, 114.0], [56.3, 114.0], [56.4, 114.0], [56.5, 115.0], [56.6, 115.0], [56.7, 115.0], [56.8, 115.0], [56.9, 116.0], [57.0, 116.0], [57.1, 116.0], [57.2, 116.0], [57.3, 116.0], [57.4, 117.0], [57.5, 117.0], [57.6, 117.0], [57.7, 117.0], [57.8, 118.0], [57.9, 118.0], [58.0, 118.0], [58.1, 118.0], [58.2, 119.0], [58.3, 119.0], [58.4, 119.0], [58.5, 119.0], [58.6, 120.0], [58.7, 120.0], [58.8, 120.0], [58.9, 120.0], [59.0, 120.0], [59.1, 121.0], [59.2, 121.0], [59.3, 121.0], [59.4, 121.0], [59.5, 122.0], [59.6, 122.0], [59.7, 122.0], [59.8, 122.0], [59.9, 123.0], [60.0, 123.0], [60.1, 123.0], [60.2, 123.0], [60.3, 124.0], [60.4, 124.0], [60.5, 124.0], [60.6, 124.0], [60.7, 124.0], [60.8, 125.0], [60.9, 125.0], [61.0, 125.0], [61.1, 126.0], [61.2, 126.0], [61.3, 126.0], [61.4, 126.0], [61.5, 126.0], [61.6, 127.0], [61.7, 127.0], [61.8, 127.0], [61.9, 127.0], [62.0, 127.0], [62.1, 128.0], [62.2, 128.0], [62.3, 128.0], [62.4, 128.0], [62.5, 128.0], [62.6, 128.0], [62.7, 129.0], [62.8, 129.0], [62.9, 129.0], [63.0, 129.0], [63.1, 129.0], [63.2, 129.0], [63.3, 130.0], [63.4, 130.0], [63.5, 130.0], [63.6, 131.0], [63.7, 131.0], [63.8, 131.0], [63.9, 132.0], [64.0, 132.0], [64.1, 132.0], [64.2, 132.0], [64.3, 133.0], [64.4, 133.0], [64.5, 133.0], [64.6, 133.0], [64.7, 134.0], [64.8, 134.0], [64.9, 134.0], [65.0, 134.0], [65.1, 135.0], [65.2, 135.0], [65.3, 135.0], [65.4, 136.0], [65.5, 136.0], [65.6, 136.0], [65.7, 137.0], [65.8, 137.0], [65.9, 137.0], [66.0, 138.0], [66.1, 138.0], [66.2, 138.0], [66.3, 138.0], [66.4, 139.0], [66.5, 139.0], [66.6, 140.0], [66.7, 140.0], [66.8, 140.0], [66.9, 141.0], [67.0, 141.0], [67.1, 142.0], [67.2, 142.0], [67.3, 142.0], [67.4, 143.0], [67.5, 143.0], [67.6, 144.0], [67.7, 144.0], [67.8, 145.0], [67.9, 145.0], [68.0, 146.0], [68.1, 147.0], [68.2, 147.0], [68.3, 148.0], [68.4, 149.0], [68.5, 150.0], [68.6, 150.0], [68.7, 151.0], [68.8, 152.0], [68.9, 153.0], [69.0, 153.0], [69.1, 154.0], [69.2, 155.0], [69.3, 155.0], [69.4, 156.0], [69.5, 157.0], [69.6, 158.0], [69.7, 158.0], [69.8, 159.0], [69.9, 160.0], [70.0, 160.0], [70.1, 162.0], [70.2, 163.0], [70.3, 164.0], [70.4, 165.0], [70.5, 166.0], [70.6, 167.0], [70.7, 168.0], [70.8, 169.0], [70.9, 171.0], [71.0, 173.0], [71.1, 174.0], [71.2, 175.0], [71.3, 177.0], [71.4, 178.0], [71.5, 181.0], [71.6, 188.0], [71.7, 191.0], [71.8, 193.0], [71.9, 196.0], [72.0, 200.0], [72.1, 207.0], [72.2, 213.0], [72.3, 219.0], [72.4, 222.0], [72.5, 224.0], [72.6, 227.0], [72.7, 229.0], [72.8, 237.0], [72.9, 242.0], [73.0, 244.0], [73.1, 252.0], [73.2, 256.0], [73.3, 260.0], [73.4, 263.0], [73.5, 267.0], [73.6, 268.0], [73.7, 274.0], [73.8, 277.0], [73.9, 280.0], [74.0, 284.0], [74.1, 287.0], [74.2, 291.0], [74.3, 298.0], [74.4, 305.0], [74.5, 308.0], [74.6, 310.0], [74.7, 313.0], [74.8, 319.0], [74.9, 323.0], [75.0, 326.0], [75.1, 329.0], [75.2, 334.0], [75.3, 339.0], [75.4, 343.0], [75.5, 346.0], [75.6, 349.0], [75.7, 351.0], [75.8, 356.0], [75.9, 359.0], [76.0, 362.0], [76.1, 364.0], [76.2, 366.0], [76.3, 368.0], [76.4, 369.0], [76.5, 371.0], [76.6, 372.0], [76.7, 373.0], [76.8, 375.0], [76.9, 378.0], [77.0, 381.0], [77.1, 382.0], [77.2, 384.0], [77.3, 388.0], [77.4, 393.0], [77.5, 399.0], [77.6, 402.0], [77.7, 406.0], [77.8, 413.0], [77.9, 419.0], [78.0, 425.0], [78.1, 438.0], [78.2, 443.0], [78.3, 444.0], [78.4, 445.0], [78.5, 446.0], [78.6, 448.0], [78.7, 450.0], [78.8, 454.0], [78.9, 467.0], [79.0, 471.0], [79.1, 475.0], [79.2, 478.0], [79.3, 480.0], [79.4, 483.0], [79.5, 486.0], [79.6, 489.0], [79.7, 495.0], [79.8, 501.0], [79.9, 507.0], [80.0, 514.0], [80.1, 526.0], [80.2, 537.0], [80.3, 543.0], [80.4, 549.0], [80.5, 557.0], [80.6, 563.0], [80.7, 569.0], [80.8, 576.0], [80.9, 584.0], [81.0, 590.0], [81.1, 599.0], [81.2, 601.0], [81.3, 602.0], [81.4, 604.0], [81.5, 607.0], [81.6, 609.0], [81.7, 610.0], [81.8, 610.0], [81.9, 612.0], [82.0, 613.0], [82.1, 615.0], [82.2, 616.0], [82.3, 620.0], [82.4, 622.0], [82.5, 624.0], [82.6, 625.0], [82.7, 626.0], [82.8, 627.0], [82.9, 629.0], [83.0, 630.0], [83.1, 632.0], [83.2, 637.0], [83.3, 647.0], [83.4, 660.0], [83.5, 671.0], [83.6, 684.0], [83.7, 686.0], [83.8, 687.0], [83.9, 689.0], [84.0, 691.0], [84.1, 692.0], [84.2, 694.0], [84.3, 695.0], [84.4, 697.0], [84.5, 700.0], [84.6, 704.0], [84.7, 707.0], [84.8, 708.0], [84.9, 712.0], [85.0, 714.0], [85.1, 718.0], [85.2, 720.0], [85.3, 722.0], [85.4, 724.0], [85.5, 728.0], [85.6, 730.0], [85.7, 731.0], [85.8, 733.0], [85.9, 735.0], [86.0, 736.0], [86.1, 738.0], [86.2, 739.0], [86.3, 741.0], [86.4, 743.0], [86.5, 746.0], [86.6, 748.0], [86.7, 752.0], [86.8, 756.0], [86.9, 761.0], [87.0, 772.0], [87.1, 775.0], [87.2, 777.0], [87.3, 778.0], [87.4, 779.0], [87.5, 781.0], [87.6, 783.0], [87.7, 786.0], [87.8, 790.0], [87.9, 794.0], [88.0, 799.0], [88.1, 803.0], [88.2, 805.0], [88.3, 807.0], [88.4, 807.0], [88.5, 810.0], [88.6, 812.0], [88.7, 817.0], [88.8, 827.0], [88.9, 839.0], [89.0, 843.0], [89.1, 844.0], [89.2, 846.0], [89.3, 849.0], [89.4, 854.0], [89.5, 865.0], [89.6, 873.0], [89.7, 879.0], [89.8, 885.0], [89.9, 892.0], [90.0, 896.0], [90.1, 902.0], [90.2, 915.0], [90.3, 926.0], [90.4, 943.0], [90.5, 956.0], [90.6, 962.0], [90.7, 973.0], [90.8, 988.0], [90.9, 996.0], [91.0, 1008.0], [91.1, 1015.0], [91.2, 1019.0], [91.3, 1024.0], [91.4, 1028.0], [91.5, 1029.0], [91.6, 1031.0], [91.7, 1033.0], [91.8, 1034.0], [91.9, 1036.0], [92.0, 1038.0], [92.1, 1040.0], [92.2, 1042.0], [92.3, 1046.0], [92.4, 1049.0], [92.5, 1052.0], [92.6, 1054.0], [92.7, 1059.0], [92.8, 1063.0], [92.9, 1067.0], [93.0, 1071.0], [93.1, 1074.0], [93.2, 1077.0], [93.3, 1080.0], [93.4, 1083.0], [93.5, 1087.0], [93.6, 1091.0], [93.7, 1094.0], [93.8, 1098.0], [93.9, 1101.0], [94.0, 1105.0], [94.1, 1108.0], [94.2, 1112.0], [94.3, 1116.0], [94.4, 1122.0], [94.5, 1125.0], [94.6, 1132.0], [94.7, 1139.0], [94.8, 1152.0], [94.9, 1171.0], [95.0, 1244.0], [95.1, 1372.0], [95.2, 1477.0], [95.3, 1494.0], [95.4, 1508.0], [95.5, 1538.0], [95.6, 1557.0], [95.7, 1592.0], [95.8, 1618.0], [95.9, 1628.0], [96.0, 1640.0], [96.1, 1673.0], [96.2, 1695.0], [96.3, 1710.0], [96.4, 1725.0], [96.5, 1734.0], [96.6, 1741.0], [96.7, 1756.0], [96.8, 1778.0], [96.9, 1826.0], [97.0, 1880.0], [97.1, 1928.0], [97.2, 1949.0], [97.3, 1966.0], [97.4, 1980.0], [97.5, 1995.0], [97.6, 2009.0], [97.7, 2022.0], [97.8, 2033.0], [97.9, 2040.0], [98.0, 2051.0], [98.1, 2768.0], [98.2, 2890.0], [98.3, 3046.0], [98.4, 3159.0], [98.5, 3543.0], [98.6, 3697.0], [98.7, 3703.0], [98.8, 3707.0], [98.9, 3710.0], [99.0, 3713.0], [99.1, 3718.0], [99.2, 3724.0], [99.3, 3731.0], [99.4, 3739.0], [99.5, 3747.0], [99.6, 3759.0], [99.7, 5670.0], [99.8, 7047.0], [99.9, 7055.0], [100.0, 15060.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 20535.0, "series": [{"data": [[0.0, 20535.0], [600.0, 1477.0], [700.0, 1547.0], [800.0, 884.0], [900.0, 387.0], [15000.0, 14.0], [1000.0, 1278.0], [1100.0, 483.0], [1200.0, 41.0], [1300.0, 42.0], [1400.0, 87.0], [1500.0, 172.0], [100.0, 10989.0], [1600.0, 217.0], [1700.0, 280.0], [1800.0, 74.0], [1900.0, 226.0], [2000.0, 236.0], [2100.0, 5.0], [2800.0, 42.0], [2700.0, 7.0], [2900.0, 16.0], [3000.0, 48.0], [3100.0, 23.0], [200.0, 1011.0], [3300.0, 11.0], [3200.0, 11.0], [3400.0, 11.0], [3500.0, 18.0], [3700.0, 457.0], [3600.0, 48.0], [4000.0, 1.0], [4100.0, 3.0], [300.0, 1409.0], [4700.0, 2.0], [4900.0, 1.0], [5100.0, 1.0], [5600.0, 2.0], [400.0, 981.0], [7000.0, 111.0], [7200.0, 5.0], [500.0, 592.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3972.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 20869.0, "series": [{"data": [[0.0, 20869.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 18944.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 3972.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 163.8008154566077, "minX": 1.61636424E12, "maxY": 548.5739122601548, "series": [{"data": [[1.61636442E12, 163.8008154566077], [1.61636424E12, 548.5739122601548]], "isOverall": false, "label": "Spike Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61636442E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 37.49541284403669, "minX": 1.0, "maxY": 11053.5, "series": [{"data": [[2.0, 7372.333333333333], [3.0, 5537.5], [4.0, 3637.8], [5.0, 2700.333333333333], [6.0, 196.5], [7.0, 3479.0000000000005], [8.0, 153.875], [9.0, 1808.1111111111113], [10.0, 1098.9032258064517], [11.0, 668.48], [12.0, 499.47058823529414], [13.0, 55.297297297297305], [14.0, 785.4390243902437], [15.0, 239.7368421052632], [16.0, 214.3720930232559], [17.0, 206.48888888888894], [18.0, 211.04545454545453], [19.0, 192.44897959183677], [20.0, 175.4], [21.0, 189.24], [22.0, 152.265306122449], [23.0, 221.32692307692304], [24.0, 174.56363636363628], [25.0, 198.3728813559322], [26.0, 154.50000000000003], [27.0, 215.94444444444449], [28.0, 133.38805970149255], [29.0, 127.04225352112672], [30.0, 155.03124999999994], [31.0, 177.86885245901638], [32.0, 160.32857142857142], [33.0, 144.15714285714284], [34.0, 154.00000000000003], [35.0, 141.94444444444443], [36.0, 130.5696202531646], [37.0, 135.79999999999998], [38.0, 104.1063829787234], [39.0, 180.26470588235293], [41.0, 192.63157894736844], [40.0, 83.16071428571425], [42.0, 258.59999999999997], [43.0, 234.34374999999994], [44.0, 172.37500000000003], [45.0, 118.75892857142858], [46.0, 96.33613445378151], [47.0, 121.20833333333333], [48.0, 111.86065573770495], [49.0, 97.1932773109244], [50.0, 38.76271186440677], [51.0, 150.912], [52.0, 85.01550387596899], [53.0, 104.53658536585364], [54.0, 86.9375], [55.0, 109.85211267605634], [56.0, 123.22556390977442], [57.0, 85.93529411764709], [58.0, 100.61904761904762], [59.0, 124.22429906542055], [60.0, 102.24545454545454], [61.0, 115.8240740740741], [62.0, 123.13043478260872], [63.0, 54.217054263565885], [64.0, 186.26984126984124], [65.0, 76.88429752066116], [66.0, 124.37391304347828], [67.0, 121.60465116279069], [68.0, 43.1858407079646], [69.0, 181.9724770642201], [70.0, 159.53947368421052], [71.0, 174.6666666666667], [73.0, 176.49152542372892], [74.0, 196.35714285714292], [75.0, 230.18749999999994], [72.0, 147.29824561403507], [76.0, 264.6867469879518], [77.0, 215.15555555555562], [78.0, 116.54887218045114], [79.0, 128.66666666666666], [80.0, 115.00757575757578], [81.0, 124.49999999999996], [82.0, 107.17241379310346], [83.0, 76.52272727272727], [84.0, 110.4015748031496], [85.0, 92.57031250000001], [86.0, 96.66666666666673], [87.0, 73.41599999999998], [88.0, 105.34074074074076], [89.0, 37.49541284403669], [90.0, 68.76530612244898], [91.0, 48.1], [92.0, 78.15909090909089], [93.0, 76.83950617283953], [94.0, 59.4078947368421], [95.0, 99.79411764705881], [96.0, 104.42105263157893], [97.0, 107.92405063291139], [98.0, 154.24657534246572], [99.0, 60.19117647058823], [100.0, 86.65373538878563], [101.0, 220.76], [103.0, 162.2830188679245], [102.0, 265.4821428571429], [107.0, 315.77272727272725], [106.0, 368.23333333333335], [105.0, 271.0357142857142], [104.0, 127.06250000000001], [111.0, 189.39999999999998], [109.0, 505.94999999999993], [108.0, 670.3846153846152], [110.0, 254.47058823529412], [113.0, 236.76923076923075], [112.0, 98.7], [114.0, 186.5], [115.0, 283.79999999999995], [119.0, 383.12499999999994], [118.0, 153.28205128205127], [117.0, 214.42857142857142], [116.0, 189.9], [122.0, 135.84337349397592], [120.0, 242.07500000000007], [121.0, 212.6610169491525], [123.0, 55.87499999999999], [125.0, 183.72857142857143], [126.0, 76.21951219512192], [124.0, 142.15555555555554], [127.0, 106.52054794520548], [130.0, 183.09374999999991], [134.0, 119.5694444444445], [135.0, 75.97014925373138], [133.0, 157.23076923076923], [128.0, 103.29310344827584], [129.0, 53.524390243902445], [131.0, 62.28431372549022], [132.0, 114.65517241379311], [138.0, 136.01538461538462], [139.0, 119.96226415094338], [143.0, 127.29166666666666], [142.0, 264.62500000000006], [141.0, 284.01612903225816], [140.0, 167.54545454545453], [137.0, 95.72916666666667], [136.0, 90.82608695652172], [147.0, 422.5308641975307], [150.0, 179.73793103448273], [151.0, 198.51937984496124], [149.0, 190.72413793103445], [148.0, 170.16666666666663], [146.0, 373.35593220338995], [145.0, 146.9459459459459], [144.0, 318.975], [152.0, 240.8958333333334], [153.0, 111.2909090909091], [155.0, 255.48387096774198], [156.0, 175.07462686567163], [157.0, 253.6842105263158], [159.0, 151.0384615384615], [158.0, 259.4897959183673], [154.0, 351.93103448275866], [160.0, 218.59740259740258], [162.0, 249.29729729729723], [163.0, 231.70175438596493], [165.0, 170.077922077922], [166.0, 207.4117647058824], [167.0, 236.32653061224488], [164.0, 157.23437500000003], [161.0, 124.82954545454547], [168.0, 160.22033898305085], [169.0, 109.98437499999997], [170.0, 191.4180790960451], [171.0, 112.80357142857144], [173.0, 130.76666666666665], [174.0, 285.9622641509433], [175.0, 139.48484848484847], [172.0, 503.2884615384615], [177.0, 132.945945945946], [178.0, 313.5892857142856], [179.0, 155.3795620437957], [180.0, 172.75268817204295], [181.0, 144.45945945945948], [182.0, 221.23728813559313], [183.0, 125.40828402366864], [176.0, 152.9068322981367], [185.0, 203.97222222222226], [186.0, 186.7222222222222], [188.0, 356.28571428571433], [189.0, 235.93693693693703], [190.0, 332.1451612903227], [191.0, 203.8947368421052], [187.0, 148.5057471264368], [184.0, 249.62745098039218], [192.0, 171.66101694915247], [194.0, 223.64705882352933], [195.0, 206.75167785234893], [196.0, 156.66346153846155], [197.0, 198.5384615384615], [198.0, 110.71929824561403], [199.0, 248.37037037037055], [193.0, 201.859375], [200.0, 167.23265622310137], [201.0, 434.6363636363636], [202.0, 1817.25], [203.0, 1070.6666666666665], [204.0, 411.44444444444446], [205.0, 79.83333333333333], [207.0, 79.0], [206.0, 570.5], [208.0, 458.375], [209.0, 74.0], [210.0, 81.41666666666667], [211.0, 1587.5], [212.0, 464.75], [213.0, 386.2], [214.0, 88.4], [215.0, 692.6], [216.0, 524.8571428571429], [217.0, 478.76923076923083], [219.0, 86.14285714285715], [220.0, 88.0], [221.0, 88.85714285714285], [222.0, 946.2727272727273], [223.0, 354.75], [218.0, 187.0], [225.0, 610.75], [226.0, 809.0], [228.0, 193.5], [229.0, 2373.1111111111113], [231.0, 818.6000000000001], [230.0, 3258.0], [224.0, 211.0], [232.0, 97.88888888888889], [234.0, 99.0], [235.0, 822.1538461538462], [237.0, 668.076923076923], [238.0, 390.45454545454544], [239.0, 323.0], [233.0, 1774.5], [240.0, 475.875], [241.0, 131.0], [242.0, 215.25], [243.0, 103.0], [244.0, 153.44444444444446], [246.0, 231.1], [247.0, 122.46153846153845], [245.0, 323.0], [249.0, 160.0], [250.0, 147.54545454545456], [252.0, 513.75], [253.0, 313.5], [254.0, 191.4], [255.0, 647.1666666666667], [251.0, 313.0], [248.0, 321.0], [257.0, 113.875], [256.0, 114.33333333333331], [258.0, 260.0], [259.0, 149.0], [260.0, 146.33333333333334], [261.0, 114.0], [263.0, 183.0], [262.0, 308.0], [264.0, 118.3076923076923], [270.0, 173.28571428571428], [271.0, 120.0], [268.0, 182.16666666666666], [269.0, 123.0], [265.0, 173.0], [266.0, 119.0], [267.0, 118.5], [274.0, 164.66666666666666], [272.0, 152.83333333333331], [275.0, 197.6], [284.0, 229.1818181818182], [285.0, 131.73333333333332], [287.0, 127.58333333333334], [286.0, 114.0], [276.0, 153.7142857142857], [277.0, 157.16666666666669], [278.0, 139.91666666666669], [279.0, 281.0], [280.0, 918.5], [281.0, 154.21428571428572], [282.0, 181.0], [283.0, 165.125], [291.0, 132.4], [289.0, 498.75], [288.0, 126.33333333333331], [295.0, 169.0], [290.0, 417.95238095238096], [293.0, 351.2142857142857], [292.0, 144.2], [294.0, 158.3333333333333], [296.0, 289.14285714285717], [303.0, 141.6], [300.0, 138.5], [301.0, 143.9090909090909], [297.0, 136.63636363636365], [299.0, 147.57142857142856], [298.0, 666.125], [305.0, 366.78571428571433], [304.0, 144.16666666666669], [306.0, 241.0], [307.0, 148.33333333333334], [309.0, 142.83333333333334], [308.0, 427.0], [310.0, 151.88888888888889], [311.0, 169.28571428571428], [312.0, 159.08333333333334], [319.0, 232.61538461538464], [318.0, 194.66666666666666], [316.0, 144.28571428571428], [317.0, 164.85714285714286], [313.0, 156.50000000000003], [314.0, 157.7058823529412], [315.0, 154.2], [321.0, 160.875], [320.0, 149.0], [322.0, 154.6], [323.0, 163.6], [324.0, 157.22222222222223], [325.0, 160.88888888888889], [327.0, 160.57142857142858], [326.0, 204.0], [329.0, 161.88888888888886], [332.0, 172.125], [333.0, 185.85714285714283], [334.0, 186.72727272727272], [335.0, 168.33333333333334], [328.0, 211.0], [330.0, 257.6363636363637], [331.0, 217.0], [337.0, 186.6], [336.0, 192.25], [339.0, 252.38461538461542], [338.0, 223.0], [348.0, 240.0], [349.0, 181.7], [350.0, 165.14285714285714], [351.0, 247.2857142857143], [340.0, 182.0], [341.0, 230.5], [342.0, 167.0], [343.0, 377.4117647058824], [344.0, 187.25], [345.0, 190.5], [346.0, 175.44444444444446], [347.0, 183.21428571428572], [354.0, 438.875], [352.0, 176.44444444444446], [355.0, 167.9], [364.0, 775.5], [365.0, 276.0], [366.0, 176.85714285714286], [367.0, 441.6666666666667], [356.0, 711.0], [357.0, 168.6], [358.0, 402.4], [359.0, 206.42857142857142], [360.0, 188.16666666666669], [361.0, 410.6], [362.0, 321.125], [363.0, 222.06666666666663], [369.0, 321.0], [368.0, 287.0], [370.0, 349.3636363636364], [371.0, 507.09999999999997], [373.0, 504.42857142857144], [372.0, 1288.0], [374.0, 1106.625], [375.0, 586.1363636363636], [376.0, 818.8], [382.0, 1038.8], [383.0, 202.90909090909093], [380.0, 226.41666666666669], [381.0, 194.0], [377.0, 394.0], [378.0, 226.5], [379.0, 215.25], [385.0, 583.0], [384.0, 223.0909090909091], [386.0, 223.42857142857142], [387.0, 251.5], [388.0, 208.53333333333336], [389.0, 517.6], [390.0, 445.4], [391.0, 193.60000000000002], [393.0, 301.8], [396.0, 215.11111111111111], [397.0, 221.66666666666666], [398.0, 271.25], [399.0, 247.33333333333334], [392.0, 619.4285714285714], [394.0, 221.5], [395.0, 515.8333333333334], [413.0, 433.79999999999995], [400.0, 344.75], [402.0, 365.55555555555554], [401.0, 354.0], [412.0, 368.0], [403.0, 360.0], [404.0, 311.0], [405.0, 304.6666666666667], [407.0, 375.71428571428567], [406.0, 3366.0], [408.0, 212.0], [410.0, 240.00000000000003], [409.0, 1611.75], [411.0, 232.875], [414.0, 257.0], [415.0, 257.0], [419.0, 248.63636363636365], [417.0, 607.4444444444445], [416.0, 221.5], [423.0, 629.75], [418.0, 241.25], [421.0, 223.0], [420.0, 372.5], [422.0, 224.53846153846155], [424.0, 263.375], [430.0, 330.3333333333333], [431.0, 257.2], [428.0, 1093.0], [429.0, 243.0], [425.0, 265.6363636363636], [426.0, 373.8125], [427.0, 238.39999999999998], [433.0, 461.2], [432.0, 374.8888888888889], [434.0, 274.0], [435.0, 247.55555555555554], [436.0, 253.15384615384616], [437.0, 311.0], [438.0, 521.75], [439.0, 228.2222222222222], [440.0, 541.25], [446.0, 238.5], [447.0, 275.22222222222223], [444.0, 334.0], [445.0, 258.7142857142857], [441.0, 349.8181818181818], [442.0, 257.0], [443.0, 288.0], [450.0, 474.8181818181818], [448.0, 361.72727272727275], [451.0, 528.1428571428571], [460.0, 838.0], [461.0, 432.0], [462.0, 878.5], [463.0, 1010.0], [453.0, 242.77777777777777], [452.0, 1129.3333333333333], [454.0, 344.9166666666667], [455.0, 927.0], [456.0, 521.0], [458.0, 606.4444444444445], [457.0, 514.0], [459.0, 455.8333333333333], [465.0, 394.33333333333337], [464.0, 322.0], [466.0, 554.090909090909], [467.0, 320.75], [468.0, 255.28571428571428], [469.0, 467.1666666666667], [470.0, 1426.6], [471.0, 682.5], [472.0, 636.0], [477.0, 832.875], [478.0, 555.0], [479.0, 320.5], [473.0, 260.0], [474.0, 256.16666666666663], [475.0, 497.6666666666667], [482.0, 1811.6666666666665], [480.0, 391.8], [481.0, 1569.0], [483.0, 261.6666666666667], [492.0, 461.28571428571433], [494.0, 313.0], [493.0, 952.0], [495.0, 312.87500000000006], [488.0, 1598.0], [484.0, 866.4545454545455], [485.0, 419.5], [486.0, 512.4], [487.0, 509.62500000000006], [489.0, 398.0], [490.0, 332.5], [491.0, 1111.0], [497.0, 303.7], [496.0, 1176.3333333333333], [498.0, 300.5454545454545], [499.0, 369.5714285714286], [500.0, 355.75], [501.0, 305.22222222222223], [502.0, 778.3000000000001], [503.0, 624.0], [504.0, 334.09090909090907], [511.0, 452.5], [508.0, 418.1111111111111], [509.0, 1546.0], [510.0, 308.54545454545456], [505.0, 448.0], [506.0, 271.5], [507.0, 414.1000000000001], [516.0, 503.16666666666663], [518.0, 555.2], [512.0, 365.0], [526.0, 624.0], [524.0, 612.6666666666666], [514.0, 1133.0], [536.0, 393.1538461538462], [538.0, 291.3333333333333], [540.0, 294.83333333333337], [542.0, 431.0], [528.0, 332.7142857142857], [530.0, 360.3333333333333], [532.0, 626.6666666666666], [534.0, 472.0], [520.0, 624.0], [522.0, 280.5454545454545], [546.0, 388.25], [550.0, 387.75], [544.0, 330.4166666666667], [558.0, 436.8571428571429], [554.0, 468.8], [556.0, 658.3636363636364], [548.0, 416.0], [568.0, 642.0], [570.0, 493.8], [572.0, 689.2857142857142], [574.0, 390.75], [560.0, 424.24999999999994], [562.0, 379.8888888888889], [564.0, 423.54545454545456], [566.0, 373.2], [552.0, 397.0], [580.0, 447.7857142857143], [578.0, 396.0], [576.0, 417.0], [590.0, 362.125], [582.0, 420.0], [592.0, 397.74999999999994], [606.0, 855.4], [604.0, 388.1666666666667], [600.0, 463.6], [602.0, 444.8], [594.0, 362.625], [596.0, 1109.0], [598.0, 608.0], [584.0, 1614.5], [586.0, 563.0], [588.0, 374.0], [610.0, 376.625], [608.0, 649.090909090909], [622.0, 1373.5], [620.0, 719.9230769230769], [612.0, 770.3333333333333], [614.0, 348.25], [624.0, 514.125], [638.0, 506.8888888888889], [634.0, 648.3333333333334], [636.0, 646.7857142857142], [632.0, 413.50000000000006], [626.0, 399.15384615384613], [628.0, 1139.5], [630.0, 753.375], [616.0, 471.05882352941177], [618.0, 442.3636363636363], [644.0, 1146.0], [646.0, 583.6666666666666], [640.0, 686.75], [654.0, 422.8888888888889], [652.0, 559.8571428571429], [642.0, 478.2], [656.0, 1248.1666666666667], [670.0, 892.125], [666.0, 711.4444444444445], [668.0, 505.0], [664.0, 420.75], [658.0, 1513.0], [660.0, 398.25], [662.0, 389.5454545454545], [648.0, 515.9], [650.0, 434.0], [674.0, 411.5], [672.0, 393.6], [686.0, 885.0], [682.0, 425.55555555555554], [684.0, 387.8571428571429], [676.0, 588.9], [678.0, 623.2173913043479], [688.0, 1028.6666666666665], [702.0, 402.5454545454545], [698.0, 431.5], [696.0, 398.6666666666667], [690.0, 411.1428571428571], [694.0, 1465.0], [680.0, 429.8], [708.0, 391.75], [710.0, 515.4545454545455], [704.0, 402.1666666666667], [718.0, 1528.0], [706.0, 611.0], [720.0, 560.2857142857142], [732.0, 547.4444444444445], [734.0, 431.0909090909091], [730.0, 405.6666666666667], [728.0, 516.1249999999999], [722.0, 411.99999999999994], [724.0, 460.6666666666667], [726.0, 685.125], [712.0, 671.1111111111111], [714.0, 420.8181818181818], [716.0, 876.5555555555555], [740.0, 698.0], [738.0, 540.5454545454546], [736.0, 561.6363636363636], [750.0, 549.5454545454545], [742.0, 1536.0], [752.0, 586.5], [764.0, 721.0], [760.0, 819.75], [766.0, 460.0], [758.0, 523.0], [756.0, 1067.0], [744.0, 1208.8333333333333], [746.0, 460.3333333333333], [748.0, 583.5000000000002], [794.0, 924.3333333333333], [770.0, 473.0], [774.0, 555.6666666666666], [792.0, 1624.5], [784.0, 1592.0], [786.0, 1599.0], [798.0, 1619.0], [796.0, 617.0], [778.0, 1587.5], [776.0, 584.0], [780.0, 584.0], [782.0, 577.75], [768.0, 1593.0], [788.0, 1038.8181818181818], [790.0, 1164.857142857143], [802.0, 608.25], [824.0, 612.3000000000001], [800.0, 2094.0], [806.0, 2126.0], [814.0, 1620.0], [812.0, 615.8], [808.0, 608.5], [810.0, 948.6666666666666], [816.0, 2872.0], [818.0, 2116.0], [820.0, 1735.875], [822.0, 606.8571428571429], [826.0, 1115.0], [828.0, 669.9999999999999], [830.0, 1622.5], [836.0, 623.3636363636364], [838.0, 623.8181818181818], [832.0, 617.5], [846.0, 612.5], [844.0, 792.1666666666666], [834.0, 951.0833333333334], [856.0, 627.0000000000001], [858.0, 990.7777777777778], [860.0, 1698.6666666666665], [862.0, 651.6153846153846], [848.0, 812.4166666666666], [850.0, 630.4285714285714], [852.0, 681.8181818181819], [854.0, 793.3333333333333], [840.0, 763.9375], [870.0, 633.2105263157896], [866.0, 1238.6], [864.0, 626.5], [878.0, 656.0], [868.0, 1044.5333333333335], [882.0, 688.25], [880.0, 700.5], [892.0, 977.6363636363635], [894.0, 694.2727272727273], [890.0, 1213.888888888889], [888.0, 1172.0], [886.0, 3728.0], [884.0, 707.3333333333334], [872.0, 1124.142857142857], [876.0, 703.7857142857143], [874.0, 706.4], [898.0, 1406.0], [896.0, 665.6363636363636], [910.0, 729.0], [908.0, 1177.5], [900.0, 1515.7142857142858], [902.0, 650.8181818181819], [912.0, 1147.3333333333335], [926.0, 1355.375], [924.0, 664.6666666666666], [922.0, 677.8181818181819], [920.0, 627.5714285714286], [914.0, 921.0], [916.0, 1741.0], [918.0, 751.0], [904.0, 725.5], [906.0, 646.5555555555557], [934.0, 1340.6666666666665], [930.0, 626.2222222222222], [928.0, 626.75], [942.0, 694.8125], [932.0, 1168.5], [944.0, 720.1333333333332], [958.0, 438.25], [956.0, 711.1111111111111], [952.0, 807.7241379310345], [954.0, 680.2307692307692], [946.0, 551.9000000000001], [948.0, 525.4482758620691], [950.0, 1551.3333333333333], [936.0, 676.8], [940.0, 859.6], [962.0, 916.8571428571429], [966.0, 860.875], [960.0, 809.4444444444445], [974.0, 1468.6000000000001], [970.0, 3752.0], [972.0, 566.1428571428571], [964.0, 621.8], [984.0, 603.7692307692308], [986.0, 838.6153846153845], [988.0, 680.6], [990.0, 506.8], [976.0, 500.6], [978.0, 528.4285714285714], [980.0, 813.6666666666667], [982.0, 3157.0], [968.0, 446.2], [996.0, 516.75], [992.0, 1100.2727272727273], [1004.0, 532.4285714285714], [994.0, 528.2857142857143], [998.0, 1412.75], [1008.0, 946.8888888888888], [1020.0, 724.0], [1022.0, 730.0], [1018.0, 913.7272727272727], [1010.0, 513.0], [1012.0, 728.5], [1014.0, 948.7142857142858], [1000.0, 737.3333333333334], [1002.0, 737.0], [1032.0, 631.8181818181819], [1036.0, 469.6666666666667], [1024.0, 588.4], [1052.0, 478.6], [1048.0, 967.3333333333333], [1028.0, 728.0], [1072.0, 565.8181818181819], [1076.0, 675.3333333333334], [1080.0, 992.9999999999999], [1084.0, 649.8461538461538], [1056.0, 712.0], [1060.0, 1388.2], [1064.0, 584.9090909090909], [1068.0, 752.8333333333333], [1040.0, 614.1428571428571], [1044.0, 1038.25], [1100.0, 512.6], [1092.0, 596.3999999999999], [1088.0, 698.0], [1116.0, 1380.5], [1096.0, 1208.235294117647], [1120.0, 828.4666666666666], [1148.0, 2539.2500000000005], [1144.0, 575.0], [1140.0, 1322.3846153846152], [1136.0, 2137.5], [1124.0, 687.0], [1128.0, 1111.4117647058824], [1132.0, 890.6999999999999], [1104.0, 838.3846153846154], [1108.0, 1115.1428571428569], [1112.0, 1013.125], [1160.0, 2700.75], [1164.0, 597.0], [1152.0, 1135.8235294117646], [1176.0, 654.75], [1180.0, 1438.3636363636363], [1156.0, 586.2222222222222], [1184.0, 1136.625], [1208.0, 2948.5], [1212.0, 1819.0], [1200.0, 685.0], [1204.0, 1272.2], [1188.0, 883.4782608695652], [1192.0, 1069.5714285714287], [1168.0, 604.5], [1172.0, 915.3], [1224.0, 1758.2857142857144], [1228.0, 1113.7142857142858], [1216.0, 676.8333333333334], [1240.0, 768.4615384615385], [1244.0, 694.4], [1236.0, 688.0], [1220.0, 3699.5], [1264.0, 801.1666666666666], [1268.0, 711.6], [1272.0, 823.8], [1276.0, 3708.0], [1248.0, 1133.5714285714287], [1252.0, 705.4444444444443], [1256.0, 3209.25], [1260.0, 712.6], [1232.0, 1599.5], [1288.0, 1165.5714285714284], [1284.0, 1278.090909090909], [1280.0, 1126.9411764705883], [1308.0, 1243.8333333333333], [1292.0, 1719.3333333333333], [1312.0, 1045.7142857142856], [1340.0, 1360.5], [1332.0, 843.4545454545455], [1336.0, 1064.7000000000003], [1328.0, 2081.0], [1316.0, 3728.625], [1320.0, 1602.7142857142856], [1324.0, 720.0], [1296.0, 1350.4615384615386], [1300.0, 2221.5], [1304.0, 737.0], [1352.0, 1347.1666666666665], [1344.0, 1346.6666666666665], [1348.0, 734.0], [1372.0, 961.8695652173914], [1368.0, 1039.5], [1356.0, 1562.1], [1392.0, 1309.5833333333335], [1396.0, 1172.375], [1400.0, 790.2], [1404.0, 926.1428571428571], [1376.0, 1299.2], [1380.0, 799.3], [1384.0, 955.8333333333334], [1388.0, 1236.1818181818182], [1360.0, 783.0], [1364.0, 1345.142857142857], [1416.0, 981.4545454545455], [1412.0, 1489.8461538461538], [1408.0, 1761.0], [1436.0, 1065.25], [1432.0, 790.6], [1420.0, 801.0], [1440.0, 827.6666666666666], [1468.0, 847.4], [1464.0, 1157.5], [1460.0, 1855.0], [1456.0, 2303.0], [1444.0, 1348.5384615384614], [1452.0, 1330.75], [1424.0, 811.5], [1428.0, 795.8], [1480.0, 842.8], [1496.0, 1073.6], [1476.0, 1190.6666666666667], [1472.0, 1860.0], [1500.0, 1030.9166666666667], [1484.0, 1384.3333333333335], [1520.0, 1068.2499999999998], [1524.0, 869.3333333333334], [1528.0, 923.6], [1532.0, 1254.25], [1508.0, 865.2222222222222], [1512.0, 1256.4545454545453], [1516.0, 955.5], [1488.0, 993.3124999999999], [1492.0, 853.0], [1548.0, 1741.75], [1588.0, 1128.8], [1544.0, 1221.222222222222], [1584.0, 1459.8333333333333], [1592.0, 1503.1111111111109], [1596.0, 1220.0000000000002], [1552.0, 1167.4], [1556.0, 898.3333333333334], [1560.0, 1041.7142857142858], [1536.0, 975.0], [1540.0, 1488.0], [1564.0, 1005.0], [1568.0, 1262.0], [1572.0, 1225.75], [1576.0, 1173.2500000000002], [1580.0, 1359.1818181818182], [1600.0, 983.3302325581392], [1033.0, 1014.6666666666667], [1029.0, 518.5], [1025.0, 531.6], [1053.0, 900.1578947368422], [1049.0, 570.9], [1037.0, 971.5], [1057.0, 479.5], [1085.0, 2611.6470588235293], [1081.0, 2046.8571428571427], [1077.0, 565.3636363636364], [1073.0, 2468.0], [1061.0, 1374.625], [1065.0, 484.0], [1069.0, 3727.0], [1041.0, 571.1], [1045.0, 863.5555555555555], [1093.0, 1260.9090909090912], [1089.0, 1475.2857142857142], [1117.0, 1080.076923076923], [1113.0, 563.5714285714286], [1109.0, 1737.9999999999998], [1097.0, 508.75], [1101.0, 907.1111111111111], [1121.0, 870.5454545454545], [1145.0, 3720.0], [1149.0, 579.0], [1141.0, 816.75], [1137.0, 568.9090909090909], [1125.0, 588.2222222222222], [1129.0, 2701.3333333333335], [1133.0, 695.0], [1105.0, 1002.0], [1161.0, 1215.4], [1153.0, 903.5], [1177.0, 609.0], [1157.0, 2085.8571428571427], [1165.0, 1362.5714285714287], [1189.0, 1763.3157894736842], [1185.0, 3717.0], [1209.0, 758.6999999999999], [1213.0, 662.75], [1201.0, 3099.6], [1205.0, 2032.6666666666665], [1193.0, 1150.5], [1197.0, 1855.8181818181818], [1169.0, 603.75], [1173.0, 1349.0], [1225.0, 680.8], [1217.0, 666.3333333333334], [1245.0, 2208.0], [1221.0, 923.0], [1229.0, 2445.0], [1249.0, 2060.4705882352937], [1277.0, 1621.6666666666667], [1273.0, 720.7142857142857], [1269.0, 1677.1666666666665], [1253.0, 3207.0], [1257.0, 2374.777777777778], [1261.0, 714.2], [1233.0, 1361.888888888889], [1237.0, 3707.0], [1241.0, 692.375], [1285.0, 737.3333333333334], [1281.0, 732.4545454545455], [1309.0, 1393.6666666666667], [1305.0, 741.9166666666669], [1289.0, 742.0], [1293.0, 1601.6], [1329.0, 778.6666666666666], [1333.0, 909.8421052631577], [1337.0, 750.6153846153845], [1341.0, 1026.1666666666667], [1313.0, 718.0], [1317.0, 778.4615384615385], [1321.0, 766.0833333333333], [1325.0, 774.0], [1297.0, 3459.0], [1301.0, 990.5], [1349.0, 912.6428571428571], [1345.0, 1074.157894736842], [1373.0, 732.2], [1369.0, 1834.3], [1353.0, 1017.2499999999999], [1357.0, 1269.0833333333335], [1377.0, 1835.5999999999997], [1405.0, 1380.230769230769], [1397.0, 1252.0], [1401.0, 803.625], [1393.0, 778.5], [1381.0, 1241.0], [1385.0, 1758.2], [1389.0, 871.0714285714286], [1361.0, 1688.0], [1365.0, 1733.0], [1413.0, 893.8], [1409.0, 1076.4545454545455], [1437.0, 917.7], [1433.0, 1371.2857142857142], [1429.0, 1182.2], [1417.0, 1827.875], [1421.0, 1535.25], [1457.0, 1120.142857142857], [1461.0, 1854.0], [1469.0, 985.0], [1465.0, 840.0], [1441.0, 1125.2142857142856], [1445.0, 1148.0], [1449.0, 1829.0], [1453.0, 1030.6], [1425.0, 1202.7333333333333], [1477.0, 1264.8], [1497.0, 998.875], [1473.0, 854.4444444444445], [1501.0, 1299.0], [1481.0, 880.75], [1485.0, 947.1818181818182], [1521.0, 1541.3], [1525.0, 958.6666666666666], [1529.0, 1119.2727272727273], [1533.0, 994.0769230769231], [1505.0, 1115.625], [1509.0, 932.0], [1513.0, 934.8000000000001], [1517.0, 1180.5], [1489.0, 858.75], [1493.0, 866.2], [1545.0, 1043.75], [1537.0, 1065.5833333333333], [1565.0, 880.5], [1541.0, 1081.4285714285713], [1549.0, 1436.1666666666667], [1569.0, 1369.2], [1597.0, 1303.0857142857137], [1593.0, 1549.7538461538454], [1585.0, 1399.111111111111], [1573.0, 951.1428571428572], [1577.0, 954.8333333333334], [1581.0, 1501.75], [1553.0, 1355.857142857143], [1557.0, 1103.2222222222222], [1561.0, 1071.3333333333335], [515.0, 280.22222222222223], [513.0, 278.55555555555554], [527.0, 398.5], [523.0, 1005.8], [525.0, 381.8571428571429], [517.0, 407.38461538461536], [519.0, 321.0], [537.0, 459.5], [539.0, 623.75], [541.0, 622.75], [543.0, 381.75], [529.0, 622.0], [531.0, 286.37499999999994], [533.0, 379.20000000000005], [535.0, 561.0], [521.0, 358.22222222222223], [547.0, 354.71428571428567], [545.0, 962.0], [559.0, 352.7142857142857], [557.0, 346.74999999999994], [555.0, 1129.5], [549.0, 379.8888888888889], [551.0, 310.83333333333337], [569.0, 442.42857142857144], [571.0, 369.0], [573.0, 384.22222222222223], [575.0, 405.40000000000003], [561.0, 580.3333333333334], [563.0, 785.8333333333333], [565.0, 493.8], [567.0, 364.66666666666663], [553.0, 578.2857142857142], [581.0, 388.6666666666667], [583.0, 503.0], [577.0, 606.0], [591.0, 515.6666666666666], [589.0, 470.2307692307692], [579.0, 601.3333333333334], [593.0, 614.0], [607.0, 342.71428571428567], [603.0, 945.6666666666667], [605.0, 373.22222222222223], [601.0, 606.0], [595.0, 326.92307692307696], [597.0, 458.3846153846154], [599.0, 387.6], [585.0, 369.42857142857144], [587.0, 443.4], [611.0, 479.0], [615.0, 510.81818181818187], [623.0, 512.875], [619.0, 776.1666666666666], [621.0, 370.84615384615387], [609.0, 411.25], [613.0, 517.5555555555555], [625.0, 630.0], [637.0, 649.0], [639.0, 364.0], [635.0, 383.33333333333337], [633.0, 357.125], [627.0, 497.4545454545455], [629.0, 408.9090909090909], [631.0, 412.6], [617.0, 610.0], [643.0, 461.0], [641.0, 1334.25], [655.0, 1156.5], [653.0, 363.3], [645.0, 530.875], [671.0, 402.90000000000003], [669.0, 734.0], [667.0, 3468.0], [647.0, 1118.75], [665.0, 477.5], [657.0, 664.7272727272727], [659.0, 414.85714285714283], [661.0, 740.6666666666667], [663.0, 396.3333333333333], [649.0, 392.88888888888886], [651.0, 506.07142857142856], [675.0, 374.6], [679.0, 771.2222222222222], [685.0, 381.86666666666673], [687.0, 821.0999999999999], [683.0, 468.0], [673.0, 425.25], [677.0, 400.0], [689.0, 485.0], [703.0, 494.0], [701.0, 956.0], [699.0, 388.79999999999995], [697.0, 402.9285714285714], [691.0, 864.9090909090909], [693.0, 502.5555555555556], [695.0, 395.28571428571433], [681.0, 395.625], [707.0, 499.0], [705.0, 578.125], [717.0, 664.25], [719.0, 713.6999999999999], [709.0, 493.38461538461536], [721.0, 1525.0], [735.0, 680.4285714285714], [733.0, 531.5], [731.0, 676.5555555555555], [711.0, 1511.0], [729.0, 406.375], [723.0, 447.2], [725.0, 2544.5], [727.0, 428.40000000000003], [713.0, 520.25], [715.0, 401.0], [741.0, 557.5555555555557], [743.0, 418.8], [737.0, 543.0], [749.0, 2063.5], [751.0, 1558.0], [739.0, 481.16666666666663], [763.0, 1576.5], [761.0, 569.8], [765.0, 1590.5], [753.0, 599.0769230769231], [757.0, 730.1666666666667], [755.0, 1568.5], [759.0, 1010.0], [745.0, 444.0], [747.0, 634.7857142857143], [793.0, 1619.0], [771.0, 902.8333333333334], [773.0, 3137.5], [775.0, 587.5], [799.0, 3625.0], [785.0, 1592.0], [797.0, 946.0], [795.0, 863.25], [779.0, 1564.6666666666665], [781.0, 546.0], [769.0, 1335.0], [789.0, 1375.6], [791.0, 822.6666666666666], [801.0, 604.75], [811.0, 609.0], [805.0, 2292.6666666666665], [803.0, 1281.8333333333333], [807.0, 616.1666666666667], [815.0, 3630.0], [813.0, 3628.0], [809.0, 593.5], [819.0, 1032.0], [821.0, 609.3333333333334], [823.0, 1623.0], [825.0, 840.3846153846155], [827.0, 605.3333333333334], [829.0, 1026.0], [831.0, 708.2], [835.0, 1295.6666666666667], [833.0, 1185.2857142857144], [847.0, 610.1666666666667], [845.0, 1048.0], [843.0, 631.75], [837.0, 883.25], [839.0, 611.25], [857.0, 3704.0], [859.0, 613.2], [861.0, 655.25], [863.0, 702.0], [849.0, 920.0], [851.0, 629.9090909090909], [853.0, 791.1666666666667], [855.0, 880.4444444444446], [841.0, 627.125], [869.0, 610.6], [865.0, 3722.0], [879.0, 684.25], [867.0, 615.6666666666666], [895.0, 646.0], [881.0, 705.0], [891.0, 1221.8235294117646], [871.0, 700.3333333333334], [889.0, 623.5], [883.0, 691.8], [887.0, 675.5000000000001], [885.0, 3727.5], [873.0, 627.3333333333334], [875.0, 1211.8333333333333], [877.0, 642.0], [899.0, 1145.0], [903.0, 648.6363636363636], [911.0, 890.1333333333332], [907.0, 723.3333333333334], [909.0, 745.090909090909], [897.0, 1349.4444444444443], [901.0, 690.4000000000001], [927.0, 890.8666666666667], [925.0, 907.25], [923.0, 706.0], [921.0, 1412.25], [913.0, 718.2857142857143], [915.0, 905.75], [917.0, 1075.2857142857142], [919.0, 1541.2], [905.0, 1545.0], [931.0, 674.3], [929.0, 746.0], [943.0, 2791.0], [941.0, 630.2727272727273], [933.0, 1053.6], [959.0, 3762.0], [957.0, 1009.3333333333335], [955.0, 460.91666666666674], [935.0, 1256.25], [953.0, 756.0], [945.0, 912.9230769230769], [947.0, 1138.0], [949.0, 565.25], [951.0, 565.3846153846154], [937.0, 643.0], [939.0, 1888.4], [963.0, 609.1666666666667], [961.0, 2247.8333333333335], [975.0, 764.6428571428571], [973.0, 591.0], [971.0, 588.9], [965.0, 652.5714285714287], [967.0, 907.2], [985.0, 481.22222222222223], [987.0, 1199.2], [989.0, 734.0], [991.0, 531.2857142857142], [977.0, 641.0], [979.0, 1272.875], [981.0, 1211.05], [983.0, 995.5], [969.0, 1044.2727272727273], [999.0, 1045.9545454545453], [995.0, 493.8333333333333], [1007.0, 595.5], [1005.0, 527.5], [993.0, 1040.5714285714284], [997.0, 542.4166666666666], [1009.0, 2234.0], [1021.0, 896.5], [1019.0, 2735.0], [1023.0, 486.6], [1017.0, 868.625], [1011.0, 726.3333333333334], [1013.0, 2239.3333333333335], [1015.0, 606.5], [1001.0, 496.6666666666667], [1003.0, 493.14285714285717], [1030.0, 501.3333333333333], [1026.0, 981.0], [1054.0, 612.2857142857143], [1050.0, 479.8], [1046.0, 612.1428571428571], [1034.0, 973.875], [1038.0, 958.8823529411765], [1074.0, 1497.7], [1078.0, 633.4], [1082.0, 1441.0666666666664], [1086.0, 690.0], [1058.0, 480.87499999999994], [1062.0, 842.0714285714286], [1066.0, 1132.5], [1070.0, 2639.3333333333335], [1042.0, 711.0], [1094.0, 1115.0833333333333], [1090.0, 555.3636363636364], [1118.0, 692.2], [1114.0, 587.0], [1098.0, 509.5], [1150.0, 578.0], [1146.0, 1026.7142857142858], [1142.0, 1422.2727272727273], [1102.0, 687.25], [1138.0, 617.7], [1122.0, 1056.1000000000001], [1126.0, 563.0], [1130.0, 562.8888888888889], [1134.0, 942.4444444444443], [1106.0, 632.3333333333334], [1110.0, 829.9285714285714], [1158.0, 587.3333333333334], [1154.0, 1369.0], [1182.0, 1628.0], [1178.0, 1286.0], [1162.0, 1994.6666666666667], [1214.0, 2984.285714285714], [1206.0, 658.0], [1210.0, 2695.5], [1202.0, 1330.75], [1166.0, 2198.0], [1186.0, 1864.0], [1190.0, 1644.7199999999998], [1198.0, 1175.0], [1170.0, 603.5555555555555], [1174.0, 2095.5714285714284], [1222.0, 2186.6666666666665], [1218.0, 2127.0], [1246.0, 1703.6666666666665], [1242.0, 1773.0], [1238.0, 1789.0909090909092], [1226.0, 2029.5714285714287], [1230.0, 1693.6666666666667], [1266.0, 1183.7826086956522], [1270.0, 1702.0], [1274.0, 1481.5], [1278.0, 1062.3333333333335], [1250.0, 1128.5714285714284], [1254.0, 1139.7142857142858], [1258.0, 1378.111111111111], [1262.0, 1539.818181818182], [1234.0, 2200.0], [1290.0, 1389.111111111111], [1294.0, 1105.8333333333335], [1282.0, 1138.4], [1310.0, 745.8333333333334], [1306.0, 744.0], [1286.0, 1731.8181818181818], [1342.0, 776.8888888888888], [1338.0, 764.4545454545455], [1334.0, 3730.0], [1330.0, 914.4285714285714], [1314.0, 753.3333333333334], [1318.0, 3136.7], [1322.0, 858.0999999999999], [1298.0, 1108.2727272727273], [1302.0, 744.9090909090909], [1358.0, 1336.0], [1350.0, 1377.5714285714287], [1366.0, 1138.5625], [1346.0, 729.0], [1374.0, 1191.1176470588234], [1370.0, 1230.6666666666665], [1394.0, 1062.7272727272727], [1398.0, 791.6666666666666], [1402.0, 1170.6923076923076], [1406.0, 797.7142857142857], [1378.0, 943.8], [1382.0, 904.7777777777778], [1386.0, 803.6], [1362.0, 794.047619047619], [1418.0, 1183.2], [1422.0, 793.8], [1410.0, 1233.4444444444443], [1438.0, 854.6666666666667], [1434.0, 933.4666666666667], [1414.0, 793.9230769230769], [1470.0, 1016.6666666666666], [1458.0, 1444.4], [1466.0, 1118.5454545454547], [1442.0, 820.5555555555554], [1450.0, 1826.0], [1446.0, 1595.0], [1454.0, 1834.5], [1426.0, 1264.6470588235295], [1430.0, 797.9999999999999], [1482.0, 1367.3749999999998], [1478.0, 923.3333333333334], [1502.0, 1052.0769230769233], [1474.0, 865.0], [1498.0, 873.875], [1486.0, 1029.1666666666667], [1522.0, 957.0], [1526.0, 1294.6666666666665], [1530.0, 1416.75], [1506.0, 1156.9200000000003], [1510.0, 1320.942857142857], [1514.0, 893.5714285714286], [1518.0, 986.6666666666666], [1490.0, 894.0], [1494.0, 854.1250000000001], [1546.0, 989.2], [1542.0, 1598.5], [1550.0, 1796.0], [1586.0, 1523.111111111111], [1590.0, 1498.25], [1594.0, 1111.3055555555554], [1598.0, 1359.7801418439715], [1554.0, 1315.0625000000002], [1558.0, 1071.0], [1562.0, 1901.0000000000002], [1566.0, 1220.857142857143], [1538.0, 1834.5714285714287], [1570.0, 1167.111111111111], [1578.0, 1142.1666666666663], [1574.0, 1533.0], [1582.0, 1656.1249999999998], [1035.0, 598.0], [1039.0, 1449.2222222222222], [1027.0, 731.0], [1055.0, 501.3], [1051.0, 475.0], [1031.0, 2652.0], [1087.0, 629.1666666666666], [1083.0, 1441.4848484848485], [1079.0, 626.6666666666666], [1075.0, 548.5714285714286], [1063.0, 842.8888888888889], [1067.0, 1229.5], [1071.0, 1124.5], [1043.0, 1120.142857142857], [1047.0, 504.88888888888886], [1095.0, 901.5], [1119.0, 633.5833333333334], [1115.0, 702.6666666666665], [1111.0, 541.4285714285714], [1091.0, 719.9000000000001], [1099.0, 3066.6], [1103.0, 546.8571428571428], [1123.0, 597.4615384615386], [1151.0, 1699.4444444444443], [1147.0, 576.8571428571429], [1143.0, 1432.2727272727273], [1139.0, 1152.1666666666667], [1127.0, 561.0], [1131.0, 1158.6363636363637], [1135.0, 3716.5], [1107.0, 1117.5000000000002], [1159.0, 592.1666666666667], [1167.0, 602.1428571428572], [1179.0, 1113.1000000000001], [1183.0, 2374.5555555555557], [1175.0, 1145.0], [1155.0, 1205.0], [1163.0, 594.2], [1191.0, 2707.0], [1215.0, 1369.8461538461538], [1187.0, 3714.5], [1211.0, 3702.0], [1203.0, 1440.2727272727273], [1207.0, 1876.5], [1195.0, 1782.3333333333333], [1199.0, 650.0], [1171.0, 3709.75], [1227.0, 3701.0], [1231.0, 688.0], [1219.0, 1533.7142857142856], [1247.0, 3694.0], [1243.0, 695.5], [1223.0, 1538.5714285714284], [1279.0, 3126.4], [1275.0, 1273.6153846153845], [1271.0, 1055.5], [1267.0, 708.5], [1251.0, 1074.090909090909], [1255.0, 1140.4285714285716], [1259.0, 1900.2], [1263.0, 2049.3333333333335], [1235.0, 1694.4545454545455], [1239.0, 1027.9166666666667], [1291.0, 738.4285714285714], [1283.0, 1249.1000000000001], [1311.0, 1224.0], [1307.0, 2059.3333333333335], [1303.0, 738.0], [1287.0, 1148.142857142857], [1295.0, 2308.0], [1331.0, 1000.25], [1335.0, 1303.181818181818], [1339.0, 1923.5000000000002], [1343.0, 1614.6], [1315.0, 1610.5714285714287], [1319.0, 1515.8333333333333], [1323.0, 787.3695652173913], [1327.0, 2063.166666666667], [1299.0, 1808.142857142857], [1359.0, 1554.7857142857142], [1351.0, 1425.8181818181818], [1375.0, 2735.0], [1371.0, 904.0666666666666], [1347.0, 756.5], [1355.0, 1019.0909090909091], [1407.0, 990.85], [1403.0, 792.1111111111111], [1399.0, 803.8750000000001], [1395.0, 987.6], [1379.0, 986.5333333333333], [1383.0, 1106.5], [1387.0, 1319.5714285714287], [1391.0, 1787.7], [1363.0, 1742.0], [1367.0, 1122.3333333333333], [1419.0, 801.5833333333334], [1411.0, 1740.52], [1439.0, 811.0], [1435.0, 1137.7777777777778], [1431.0, 948.5384615384617], [1415.0, 1537.25], [1423.0, 1259.8181818181818], [1459.0, 1097.25], [1463.0, 1348.5], [1471.0, 1075.5555555555557], [1467.0, 957.3333333333334], [1443.0, 1861.5], [1447.0, 1822.0], [1451.0, 992.0], [1427.0, 798.75], [1483.0, 842.75], [1475.0, 1004.1428571428571], [1503.0, 1216.7894736842104], [1499.0, 1940.6666666666667], [1479.0, 1217.8333333333333], [1487.0, 1895.5], [1523.0, 1341.2499999999998], [1527.0, 1223.3846153846155], [1531.0, 1104.4], [1535.0, 1416.8636363636363], [1507.0, 849.0], [1511.0, 1230.2857142857144], [1515.0, 868.4], [1519.0, 1169.2222222222222], [1491.0, 974.0], [1495.0, 905.0000000000001], [1551.0, 924.7777777777778], [1543.0, 1076.909090909091], [1567.0, 1199.5], [1563.0, 1171.8461538461538], [1539.0, 1094.3333333333333], [1547.0, 1436.5], [1571.0, 1186.8235294117646], [1599.0, 1199.7831858407078], [1595.0, 1262.25], [1591.0, 1430.0], [1587.0, 1508.9999999999995], [1575.0, 893.1666666666666], [1579.0, 995.5], [1583.0, 948.0], [1555.0, 1653.6666666666667], [1559.0, 1675.3333333333333], [1.0, 11053.5]], "isOverall": false, "label": "JoinServer", "isController": false}, {"data": [[358.907000114193, 344.35573826652956]], "isOverall": false, "label": "JoinServer-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1600.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61636424E12, "maxY": 4.9E-324, "series": [{"data": [[1.61636442E12, 0.0], [1.61636424E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61636442E12, 0.0], [1.61636424E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61636442E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 142.7982671547063, "minX": 1.61636424E12, "maxY": 540.2937122781739, "series": [{"data": [[1.61636442E12, 142.7982671547063], [1.61636424E12, 540.2937122781739]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61636442E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61636424E12, "maxY": 4.9E-324, "series": [{"data": [[1.61636442E12, 0.0], [1.61636424E12, 0.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61636442E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61636424E12, "maxY": 4.9E-324, "series": [{"data": [[1.61636442E12, 0.0], [1.61636424E12, 0.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61636442E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61636424E12, "maxY": 15060.0, "series": [{"data": [[1.61636442E12, 7097.0], [1.61636424E12, 15060.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61636442E12, 156.0], [1.61636424E12, 1502.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61636442E12, 1129.0], [1.61636424E12, 3751.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61636442E12, 380.0], [1.61636424E12, 2015.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61636442E12, 25.0], [1.61636424E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61636442E12, 103.0], [1.61636424E12, 301.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61636442E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 11058.5, "series": [{"data": [[2.0, 11058.5], [636.0, 28.0], [688.0, 1091.0], [731.0, 83.0], [707.0, 940.0], [739.0, 128.0], [3.0, 11045.5], [829.0, 608.0], [804.0, 60.5], [855.0, 121.0], [52.0, 1030.0], [881.0, 29.0], [950.0, 969.5], [959.0, 718.0], [1009.0, 30.0], [1066.0, 104.0], [1031.0, 122.0], [71.0, 28.0], [1112.0, 39.0], [1103.0, 398.0], [1121.0, 58.0], [1132.0, 101.0], [1098.0, 109.0], [1214.0, 44.0], [1233.0, 37.0], [1236.0, 734.0], [79.0, 7046.0], [1260.0, 117.0], [1228.0, 89.0], [1343.0, 785.0], [1312.0, 127.0], [1402.0, 73.0], [1355.0, 130.0], [1457.0, 533.0], [1414.0, 31.0], [1523.0, 59.0], [1514.0, 97.0], [1545.0, 243.0], [1554.0, 50.0], [1612.0, 57.0], [1628.0, 99.0], [9.0, 11052.5], [193.0, 3037.0], [236.0, 29.0], [1.0, 7048.0], [297.0, 28.0], [481.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1628.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[2.0, 0.0], [636.0, 0.0], [688.0, 0.0], [731.0, 0.0], [707.0, 0.0], [739.0, 0.0], [3.0, 0.0], [829.0, 0.0], [804.0, 0.0], [855.0, 0.0], [52.0, 0.0], [881.0, 0.0], [950.0, 0.0], [959.0, 0.0], [1009.0, 0.0], [1066.0, 0.0], [1031.0, 0.0], [71.0, 0.0], [1112.0, 0.0], [1103.0, 0.0], [1121.0, 0.0], [1132.0, 0.0], [1098.0, 0.0], [1214.0, 0.0], [1233.0, 0.0], [1236.0, 0.0], [79.0, 0.0], [1260.0, 0.0], [1228.0, 0.0], [1343.0, 0.0], [1312.0, 0.0], [1402.0, 0.0], [1355.0, 0.0], [1457.0, 0.0], [1414.0, 0.0], [1523.0, 0.0], [1514.0, 0.0], [1545.0, 0.0], [1554.0, 0.0], [1612.0, 0.0], [1628.0, 0.0], [9.0, 0.0], [193.0, 0.0], [236.0, 0.0], [1.0, 0.0], [297.0, 0.0], [481.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1628.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 359.71666666666664, "minX": 1.61636424E12, "maxY": 370.03333333333336, "series": [{"data": [[1.61636442E12, 359.71666666666664], [1.61636424E12, 370.03333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61636442E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 359.71666666666664, "minX": 1.61636424E12, "maxY": 370.03333333333336, "series": [{"data": [[1.61636442E12, 359.71666666666664], [1.61636424E12, 370.03333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61636442E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 359.71666666666664, "minX": 1.61636424E12, "maxY": 370.03333333333336, "series": [{"data": [[1.61636442E12, 359.71666666666664], [1.61636424E12, 370.03333333333336]], "isOverall": false, "label": "JoinServer-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61636442E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 359.71666666666664, "minX": 1.61636424E12, "maxY": 370.03333333333336, "series": [{"data": [[1.61636442E12, 359.71666666666664], [1.61636424E12, 370.03333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61636442E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

