/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 19061.0, "minX": 0.0, "maxY": 20624.0, "series": [{"data": [[0.0, 19061.0], [0.1, 19062.0], [0.2, 19069.0], [0.3, 19071.0], [0.4, 19075.0], [0.5, 19075.0], [0.6, 19076.0], [0.7, 19077.0], [0.8, 19085.0], [0.9, 19086.0], [1.0, 19087.0], [1.1, 19088.0], [1.2, 19091.0], [1.3, 19091.0], [1.4, 19093.0], [1.5, 19093.0], [1.6, 19095.0], [1.7, 19095.0], [1.8, 19095.0], [1.9, 19096.0], [2.0, 19099.0], [2.1, 19100.0], [2.2, 19101.0], [2.3, 19103.0], [2.4, 19104.0], [2.5, 19105.0], [2.6, 19107.0], [2.7, 19111.0], [2.8, 19112.0], [2.9, 19115.0], [3.0, 19117.0], [3.1, 19121.0], [3.2, 19121.0], [3.3, 19124.0], [3.4, 19125.0], [3.5, 19126.0], [3.6, 19129.0], [3.7, 19132.0], [3.8, 19138.0], [3.9, 19140.0], [4.0, 19143.0], [4.1, 19145.0], [4.2, 19146.0], [4.3, 19147.0], [4.4, 19148.0], [4.5, 19150.0], [4.6, 19152.0], [4.7, 19154.0], [4.8, 19155.0], [4.9, 19160.0], [5.0, 19160.0], [5.1, 19161.0], [5.2, 19162.0], [5.3, 19163.0], [5.4, 19164.0], [5.5, 19167.0], [5.6, 19168.0], [5.7, 19169.0], [5.8, 19170.0], [5.9, 19174.0], [6.0, 19175.0], [6.1, 19188.0], [6.2, 19193.0], [6.3, 19200.0], [6.4, 19203.0], [6.5, 19204.0], [6.6, 19205.0], [6.7, 19212.0], [6.8, 19216.0], [6.9, 19217.0], [7.0, 19219.0], [7.1, 19220.0], [7.2, 19222.0], [7.3, 19223.0], [7.4, 19228.0], [7.5, 19228.0], [7.6, 19230.0], [7.7, 19230.0], [7.8, 19233.0], [7.9, 19236.0], [8.0, 19239.0], [8.1, 19241.0], [8.2, 19242.0], [8.3, 19248.0], [8.4, 19251.0], [8.5, 19252.0], [8.6, 19254.0], [8.7, 19255.0], [8.8, 19259.0], [8.9, 19262.0], [9.0, 19262.0], [9.1, 19266.0], [9.2, 19270.0], [9.3, 19271.0], [9.4, 19271.0], [9.5, 19272.0], [9.6, 19272.0], [9.7, 19273.0], [9.8, 19275.0], [9.9, 19275.0], [10.0, 19276.0], [10.1, 19277.0], [10.2, 19278.0], [10.3, 19279.0], [10.4, 19280.0], [10.5, 19280.0], [10.6, 19280.0], [10.7, 19280.0], [10.8, 19281.0], [10.9, 19281.0], [11.0, 19282.0], [11.1, 19282.0], [11.2, 19283.0], [11.3, 19284.0], [11.4, 19285.0], [11.5, 19285.0], [11.6, 19287.0], [11.7, 19288.0], [11.8, 19288.0], [11.9, 19288.0], [12.0, 19289.0], [12.1, 19290.0], [12.2, 19291.0], [12.3, 19292.0], [12.4, 19293.0], [12.5, 19294.0], [12.6, 19294.0], [12.7, 19295.0], [12.8, 19298.0], [12.9, 19299.0], [13.0, 19300.0], [13.1, 19301.0], [13.2, 19302.0], [13.3, 19303.0], [13.4, 19304.0], [13.5, 19304.0], [13.6, 19304.0], [13.7, 19305.0], [13.8, 19305.0], [13.9, 19305.0], [14.0, 19309.0], [14.1, 19310.0], [14.2, 19310.0], [14.3, 19311.0], [14.4, 19314.0], [14.5, 19314.0], [14.6, 19315.0], [14.7, 19316.0], [14.8, 19316.0], [14.9, 19316.0], [15.0, 19318.0], [15.1, 19319.0], [15.2, 19320.0], [15.3, 19320.0], [15.4, 19322.0], [15.5, 19323.0], [15.6, 19324.0], [15.7, 19325.0], [15.8, 19326.0], [15.9, 19327.0], [16.0, 19330.0], [16.1, 19330.0], [16.2, 19331.0], [16.3, 19331.0], [16.4, 19332.0], [16.5, 19332.0], [16.6, 19333.0], [16.7, 19333.0], [16.8, 19333.0], [16.9, 19333.0], [17.0, 19334.0], [17.1, 19335.0], [17.2, 19338.0], [17.3, 19338.0], [17.4, 19338.0], [17.5, 19339.0], [17.6, 19341.0], [17.7, 19342.0], [17.8, 19342.0], [17.9, 19342.0], [18.0, 19344.0], [18.1, 19344.0], [18.2, 19346.0], [18.3, 19347.0], [18.4, 19353.0], [18.5, 19354.0], [18.6, 19355.0], [18.7, 19355.0], [18.8, 19356.0], [18.9, 19356.0], [19.0, 19356.0], [19.1, 19357.0], [19.2, 19359.0], [19.3, 19359.0], [19.4, 19359.0], [19.5, 19359.0], [19.6, 19360.0], [19.7, 19360.0], [19.8, 19360.0], [19.9, 19360.0], [20.0, 19365.0], [20.1, 19366.0], [20.2, 19366.0], [20.3, 19366.0], [20.4, 19367.0], [20.5, 19367.0], [20.6, 19367.0], [20.7, 19367.0], [20.8, 19368.0], [20.9, 19368.0], [21.0, 19368.0], [21.1, 19369.0], [21.2, 19369.0], [21.3, 19369.0], [21.4, 19370.0], [21.5, 19370.0], [21.6, 19371.0], [21.7, 19371.0], [21.8, 19371.0], [21.9, 19371.0], [22.0, 19372.0], [22.1, 19373.0], [22.2, 19373.0], [22.3, 19375.0], [22.4, 19376.0], [22.5, 19378.0], [22.6, 19379.0], [22.7, 19380.0], [22.8, 19384.0], [22.9, 19389.0], [23.0, 19390.0], [23.1, 19392.0], [23.2, 19398.0], [23.3, 19399.0], [23.4, 19400.0], [23.5, 19400.0], [23.6, 19403.0], [23.7, 19403.0], [23.8, 19405.0], [23.9, 19406.0], [24.0, 19409.0], [24.1, 19409.0], [24.2, 19410.0], [24.3, 19411.0], [24.4, 19414.0], [24.5, 19415.0], [24.6, 19417.0], [24.7, 19418.0], [24.8, 19424.0], [24.9, 19425.0], [25.0, 19427.0], [25.1, 19429.0], [25.2, 19430.0], [25.3, 19430.0], [25.4, 19430.0], [25.5, 19432.0], [25.6, 19433.0], [25.7, 19438.0], [25.8, 19439.0], [25.9, 19442.0], [26.0, 19444.0], [26.1, 19444.0], [26.2, 19446.0], [26.3, 19446.0], [26.4, 19453.0], [26.5, 19455.0], [26.6, 19456.0], [26.7, 19457.0], [26.8, 19457.0], [26.9, 19458.0], [27.0, 19458.0], [27.1, 19459.0], [27.2, 19460.0], [27.3, 19460.0], [27.4, 19461.0], [27.5, 19462.0], [27.6, 19462.0], [27.7, 19462.0], [27.8, 19463.0], [27.9, 19464.0], [28.0, 19464.0], [28.1, 19464.0], [28.2, 19466.0], [28.3, 19466.0], [28.4, 19467.0], [28.5, 19467.0], [28.6, 19468.0], [28.7, 19468.0], [28.8, 19469.0], [28.9, 19469.0], [29.0, 19469.0], [29.1, 19470.0], [29.2, 19471.0], [29.3, 19472.0], [29.4, 19472.0], [29.5, 19473.0], [29.6, 19474.0], [29.7, 19474.0], [29.8, 19475.0], [29.9, 19475.0], [30.0, 19476.0], [30.1, 19476.0], [30.2, 19476.0], [30.3, 19476.0], [30.4, 19477.0], [30.5, 19477.0], [30.6, 19478.0], [30.7, 19479.0], [30.8, 19480.0], [30.9, 19480.0], [31.0, 19481.0], [31.1, 19481.0], [31.2, 19482.0], [31.3, 19483.0], [31.4, 19484.0], [31.5, 19484.0], [31.6, 19486.0], [31.7, 19487.0], [31.8, 19488.0], [31.9, 19489.0], [32.0, 19490.0], [32.1, 19490.0], [32.2, 19491.0], [32.3, 19491.0], [32.4, 19492.0], [32.5, 19493.0], [32.6, 19494.0], [32.7, 19494.0], [32.8, 19494.0], [32.9, 19495.0], [33.0, 19495.0], [33.1, 19496.0], [33.2, 19496.0], [33.3, 19496.0], [33.4, 19498.0], [33.5, 19498.0], [33.6, 19498.0], [33.7, 19500.0], [33.8, 19500.0], [33.9, 19500.0], [34.0, 19501.0], [34.1, 19501.0], [34.2, 19502.0], [34.3, 19502.0], [34.4, 19503.0], [34.5, 19503.0], [34.6, 19503.0], [34.7, 19503.0], [34.8, 19505.0], [34.9, 19505.0], [35.0, 19506.0], [35.1, 19507.0], [35.2, 19508.0], [35.3, 19508.0], [35.4, 19508.0], [35.5, 19511.0], [35.6, 19512.0], [35.7, 19512.0], [35.8, 19513.0], [35.9, 19513.0], [36.0, 19515.0], [36.1, 19515.0], [36.2, 19515.0], [36.3, 19515.0], [36.4, 19516.0], [36.5, 19517.0], [36.6, 19518.0], [36.7, 19518.0], [36.8, 19519.0], [36.9, 19520.0], [37.0, 19520.0], [37.1, 19520.0], [37.2, 19521.0], [37.3, 19522.0], [37.4, 19522.0], [37.5, 19523.0], [37.6, 19523.0], [37.7, 19525.0], [37.8, 19526.0], [37.9, 19526.0], [38.0, 19528.0], [38.1, 19528.0], [38.2, 19533.0], [38.3, 19533.0], [38.4, 19533.0], [38.5, 19534.0], [38.6, 19534.0], [38.7, 19534.0], [38.8, 19535.0], [38.9, 19535.0], [39.0, 19536.0], [39.1, 19536.0], [39.2, 19536.0], [39.3, 19537.0], [39.4, 19539.0], [39.5, 19539.0], [39.6, 19540.0], [39.7, 19540.0], [39.8, 19541.0], [39.9, 19542.0], [40.0, 19543.0], [40.1, 19544.0], [40.2, 19544.0], [40.3, 19545.0], [40.4, 19546.0], [40.5, 19547.0], [40.6, 19547.0], [40.7, 19547.0], [40.8, 19548.0], [40.9, 19550.0], [41.0, 19551.0], [41.1, 19551.0], [41.2, 19551.0], [41.3, 19552.0], [41.4, 19552.0], [41.5, 19552.0], [41.6, 19554.0], [41.7, 19554.0], [41.8, 19554.0], [41.9, 19555.0], [42.0, 19555.0], [42.1, 19555.0], [42.2, 19557.0], [42.3, 19558.0], [42.4, 19558.0], [42.5, 19558.0], [42.6, 19559.0], [42.7, 19559.0], [42.8, 19561.0], [42.9, 19561.0], [43.0, 19561.0], [43.1, 19561.0], [43.2, 19563.0], [43.3, 19563.0], [43.4, 19564.0], [43.5, 19564.0], [43.6, 19564.0], [43.7, 19565.0], [43.8, 19566.0], [43.9, 19567.0], [44.0, 19568.0], [44.1, 19568.0], [44.2, 19569.0], [44.3, 19569.0], [44.4, 19570.0], [44.5, 19570.0], [44.6, 19571.0], [44.7, 19571.0], [44.8, 19572.0], [44.9, 19574.0], [45.0, 19575.0], [45.1, 19575.0], [45.2, 19576.0], [45.3, 19576.0], [45.4, 19577.0], [45.5, 19577.0], [45.6, 19577.0], [45.7, 19580.0], [45.8, 19582.0], [45.9, 19584.0], [46.0, 19584.0], [46.1, 19585.0], [46.2, 19585.0], [46.3, 19592.0], [46.4, 19592.0], [46.5, 19593.0], [46.6, 19593.0], [46.7, 19594.0], [46.8, 19594.0], [46.9, 19599.0], [47.0, 19603.0], [47.1, 19604.0], [47.2, 19606.0], [47.3, 19606.0], [47.4, 19607.0], [47.5, 19608.0], [47.6, 19608.0], [47.7, 19617.0], [47.8, 19617.0], [47.9, 19620.0], [48.0, 19621.0], [48.1, 19622.0], [48.2, 19622.0], [48.3, 19624.0], [48.4, 19624.0], [48.5, 19626.0], [48.6, 19627.0], [48.7, 19629.0], [48.8, 19629.0], [48.9, 19631.0], [49.0, 19632.0], [49.1, 19633.0], [49.2, 19633.0], [49.3, 19634.0], [49.4, 19635.0], [49.5, 19636.0], [49.6, 19638.0], [49.7, 19638.0], [49.8, 19639.0], [49.9, 19639.0], [50.0, 19640.0], [50.1, 19641.0], [50.2, 19642.0], [50.3, 19642.0], [50.4, 19642.0], [50.5, 19643.0], [50.6, 19643.0], [50.7, 19644.0], [50.8, 19644.0], [50.9, 19644.0], [51.0, 19645.0], [51.1, 19646.0], [51.2, 19646.0], [51.3, 19646.0], [51.4, 19646.0], [51.5, 19647.0], [51.6, 19647.0], [51.7, 19648.0], [51.8, 19648.0], [51.9, 19649.0], [52.0, 19650.0], [52.1, 19651.0], [52.2, 19651.0], [52.3, 19652.0], [52.4, 19653.0], [52.5, 19654.0], [52.6, 19656.0], [52.7, 19658.0], [52.8, 19658.0], [52.9, 19660.0], [53.0, 19662.0], [53.1, 19663.0], [53.2, 19663.0], [53.3, 19664.0], [53.4, 19664.0], [53.5, 19666.0], [53.6, 19666.0], [53.7, 19667.0], [53.8, 19667.0], [53.9, 19669.0], [54.0, 19669.0], [54.1, 19670.0], [54.2, 19671.0], [54.3, 19671.0], [54.4, 19671.0], [54.5, 19673.0], [54.6, 19674.0], [54.7, 19674.0], [54.8, 19675.0], [54.9, 19675.0], [55.0, 19676.0], [55.1, 19677.0], [55.2, 19678.0], [55.3, 19680.0], [55.4, 19680.0], [55.5, 19680.0], [55.6, 19681.0], [55.7, 19682.0], [55.8, 19683.0], [55.9, 19684.0], [56.0, 19684.0], [56.1, 19686.0], [56.2, 19686.0], [56.3, 19688.0], [56.4, 19689.0], [56.5, 19689.0], [56.6, 19690.0], [56.7, 19690.0], [56.8, 19691.0], [56.9, 19692.0], [57.0, 19692.0], [57.1, 19695.0], [57.2, 19695.0], [57.3, 19696.0], [57.4, 19698.0], [57.5, 19699.0], [57.6, 19701.0], [57.7, 19704.0], [57.8, 19704.0], [57.9, 19705.0], [58.0, 19706.0], [58.1, 19706.0], [58.2, 19706.0], [58.3, 19707.0], [58.4, 19707.0], [58.5, 19709.0], [58.6, 19710.0], [58.7, 19710.0], [58.8, 19712.0], [58.9, 19713.0], [59.0, 19714.0], [59.1, 19714.0], [59.2, 19715.0], [59.3, 19717.0], [59.4, 19718.0], [59.5, 19721.0], [59.6, 19721.0], [59.7, 19722.0], [59.8, 19722.0], [59.9, 19723.0], [60.0, 19726.0], [60.1, 19726.0], [60.2, 19727.0], [60.3, 19729.0], [60.4, 19729.0], [60.5, 19729.0], [60.6, 19730.0], [60.7, 19730.0], [60.8, 19730.0], [60.9, 19731.0], [61.0, 19731.0], [61.1, 19731.0], [61.2, 19732.0], [61.3, 19733.0], [61.4, 19734.0], [61.5, 19736.0], [61.6, 19737.0], [61.7, 19738.0], [61.8, 19738.0], [61.9, 19741.0], [62.0, 19741.0], [62.1, 19741.0], [62.2, 19742.0], [62.3, 19745.0], [62.4, 19745.0], [62.5, 19745.0], [62.6, 19746.0], [62.7, 19746.0], [62.8, 19747.0], [62.9, 19747.0], [63.0, 19747.0], [63.1, 19748.0], [63.2, 19748.0], [63.3, 19749.0], [63.4, 19749.0], [63.5, 19752.0], [63.6, 19752.0], [63.7, 19753.0], [63.8, 19754.0], [63.9, 19754.0], [64.0, 19755.0], [64.1, 19756.0], [64.2, 19756.0], [64.3, 19757.0], [64.4, 19757.0], [64.5, 19759.0], [64.6, 19759.0], [64.7, 19763.0], [64.8, 19764.0], [64.9, 19765.0], [65.0, 19767.0], [65.1, 19768.0], [65.2, 19768.0], [65.3, 19768.0], [65.4, 19769.0], [65.5, 19769.0], [65.6, 19769.0], [65.7, 19771.0], [65.8, 19771.0], [65.9, 19772.0], [66.0, 19772.0], [66.1, 19773.0], [66.2, 19774.0], [66.3, 19775.0], [66.4, 19775.0], [66.5, 19775.0], [66.6, 19775.0], [66.7, 19778.0], [66.8, 19778.0], [66.9, 19778.0], [67.0, 19780.0], [67.1, 19780.0], [67.2, 19780.0], [67.3, 19781.0], [67.4, 19781.0], [67.5, 19781.0], [67.6, 19781.0], [67.7, 19782.0], [67.8, 19782.0], [67.9, 19784.0], [68.0, 19785.0], [68.1, 19786.0], [68.2, 19787.0], [68.3, 19788.0], [68.4, 19788.0], [68.5, 19789.0], [68.6, 19789.0], [68.7, 19791.0], [68.8, 19791.0], [68.9, 19793.0], [69.0, 19795.0], [69.1, 19795.0], [69.2, 19797.0], [69.3, 19797.0], [69.4, 19797.0], [69.5, 19798.0], [69.6, 19798.0], [69.7, 19798.0], [69.8, 19799.0], [69.9, 19801.0], [70.0, 19802.0], [70.1, 19802.0], [70.2, 19803.0], [70.3, 19803.0], [70.4, 19803.0], [70.5, 19804.0], [70.6, 19804.0], [70.7, 19804.0], [70.8, 19805.0], [70.9, 19805.0], [71.0, 19805.0], [71.1, 19806.0], [71.2, 19807.0], [71.3, 19808.0], [71.4, 19809.0], [71.5, 19811.0], [71.6, 19812.0], [71.7, 19813.0], [71.8, 19813.0], [71.9, 19815.0], [72.0, 19815.0], [72.1, 19816.0], [72.2, 19816.0], [72.3, 19816.0], [72.4, 19817.0], [72.5, 19817.0], [72.6, 19817.0], [72.7, 19818.0], [72.8, 19818.0], [72.9, 19819.0], [73.0, 19819.0], [73.1, 19820.0], [73.2, 19820.0], [73.3, 19821.0], [73.4, 19821.0], [73.5, 19822.0], [73.6, 19823.0], [73.7, 19823.0], [73.8, 19824.0], [73.9, 19825.0], [74.0, 19825.0], [74.1, 19826.0], [74.2, 19826.0], [74.3, 19827.0], [74.4, 19827.0], [74.5, 19827.0], [74.6, 19828.0], [74.7, 19829.0], [74.8, 19829.0], [74.9, 19830.0], [75.0, 19830.0], [75.1, 19830.0], [75.2, 19830.0], [75.3, 19831.0], [75.4, 19831.0], [75.5, 19832.0], [75.6, 19832.0], [75.7, 19832.0], [75.8, 19833.0], [75.9, 19834.0], [76.0, 19834.0], [76.1, 19834.0], [76.2, 19836.0], [76.3, 19837.0], [76.4, 19839.0], [76.5, 19842.0], [76.6, 19846.0], [76.7, 19854.0], [76.8, 19855.0], [76.9, 19858.0], [77.0, 19858.0], [77.1, 19859.0], [77.2, 19860.0], [77.3, 19861.0], [77.4, 19861.0], [77.5, 19863.0], [77.6, 19863.0], [77.7, 19866.0], [77.8, 19867.0], [77.9, 19869.0], [78.0, 19870.0], [78.1, 19875.0], [78.2, 19876.0], [78.3, 19877.0], [78.4, 19878.0], [78.5, 19881.0], [78.6, 19882.0], [78.7, 19883.0], [78.8, 19883.0], [78.9, 19885.0], [79.0, 19886.0], [79.1, 19887.0], [79.2, 19889.0], [79.3, 19889.0], [79.4, 19889.0], [79.5, 19892.0], [79.6, 19893.0], [79.7, 19895.0], [79.8, 19895.0], [79.9, 19896.0], [80.0, 19896.0], [80.1, 19896.0], [80.2, 19897.0], [80.3, 19898.0], [80.4, 19899.0], [80.5, 19899.0], [80.6, 19899.0], [80.7, 19900.0], [80.8, 19901.0], [80.9, 19903.0], [81.0, 19903.0], [81.1, 19904.0], [81.2, 19904.0], [81.3, 19905.0], [81.4, 19905.0], [81.5, 19906.0], [81.6, 19907.0], [81.7, 19908.0], [81.8, 19908.0], [81.9, 19908.0], [82.0, 19909.0], [82.1, 19911.0], [82.2, 19911.0], [82.3, 19912.0], [82.4, 19913.0], [82.5, 19914.0], [82.6, 19915.0], [82.7, 19916.0], [82.8, 19916.0], [82.9, 19916.0], [83.0, 19918.0], [83.1, 19921.0], [83.2, 19923.0], [83.3, 19925.0], [83.4, 19926.0], [83.5, 19927.0], [83.6, 19927.0], [83.7, 19930.0], [83.8, 19930.0], [83.9, 19930.0], [84.0, 19930.0], [84.1, 19932.0], [84.2, 19933.0], [84.3, 19938.0], [84.4, 19939.0], [84.5, 19940.0], [84.6, 19941.0], [84.7, 19951.0], [84.8, 19952.0], [84.9, 19957.0], [85.0, 19958.0], [85.1, 19960.0], [85.2, 19964.0], [85.3, 19973.0], [85.4, 19977.0], [85.5, 19983.0], [85.6, 19993.0], [85.7, 20005.0], [85.8, 20006.0], [85.9, 20015.0], [86.0, 20015.0], [86.1, 20024.0], [86.2, 20027.0], [86.3, 20029.0], [86.4, 20031.0], [86.5, 20032.0], [86.6, 20033.0], [86.7, 20035.0], [86.8, 20036.0], [86.9, 20038.0], [87.0, 20039.0], [87.1, 20051.0], [87.2, 20067.0], [87.3, 20069.0], [87.4, 20073.0], [87.5, 20076.0], [87.6, 20076.0], [87.7, 20078.0], [87.8, 20079.0], [87.9, 20080.0], [88.0, 20081.0], [88.1, 20084.0], [88.2, 20084.0], [88.3, 20086.0], [88.4, 20089.0], [88.5, 20092.0], [88.6, 20093.0], [88.7, 20095.0], [88.8, 20097.0], [88.9, 20100.0], [89.0, 20101.0], [89.1, 20102.0], [89.2, 20103.0], [89.3, 20107.0], [89.4, 20107.0], [89.5, 20109.0], [89.6, 20110.0], [89.7, 20111.0], [89.8, 20114.0], [89.9, 20114.0], [90.0, 20114.0], [90.1, 20116.0], [90.2, 20120.0], [90.3, 20121.0], [90.4, 20121.0], [90.5, 20123.0], [90.6, 20125.0], [90.7, 20133.0], [90.8, 20135.0], [90.9, 20136.0], [91.0, 20137.0], [91.1, 20138.0], [91.2, 20141.0], [91.3, 20141.0], [91.4, 20142.0], [91.5, 20143.0], [91.6, 20144.0], [91.7, 20145.0], [91.8, 20145.0], [91.9, 20148.0], [92.0, 20149.0], [92.1, 20150.0], [92.2, 20152.0], [92.3, 20155.0], [92.4, 20155.0], [92.5, 20157.0], [92.6, 20158.0], [92.7, 20159.0], [92.8, 20160.0], [92.9, 20164.0], [93.0, 20164.0], [93.1, 20165.0], [93.2, 20165.0], [93.3, 20166.0], [93.4, 20166.0], [93.5, 20168.0], [93.6, 20168.0], [93.7, 20169.0], [93.8, 20170.0], [93.9, 20171.0], [94.0, 20172.0], [94.1, 20173.0], [94.2, 20174.0], [94.3, 20174.0], [94.4, 20176.0], [94.5, 20177.0], [94.6, 20177.0], [94.7, 20179.0], [94.8, 20180.0], [94.9, 20182.0], [95.0, 20183.0], [95.1, 20183.0], [95.2, 20184.0], [95.3, 20185.0], [95.4, 20185.0], [95.5, 20186.0], [95.6, 20186.0], [95.7, 20187.0], [95.8, 20188.0], [95.9, 20188.0], [96.0, 20189.0], [96.1, 20193.0], [96.2, 20196.0], [96.3, 20205.0], [96.4, 20223.0], [96.5, 20227.0], [96.6, 20231.0], [96.7, 20237.0], [96.8, 20247.0], [96.9, 20260.0], [97.0, 20261.0], [97.1, 20268.0], [97.2, 20271.0], [97.3, 20287.0], [97.4, 20300.0], [97.5, 20396.0], [97.6, 20401.0], [97.7, 20404.0], [97.8, 20417.0], [97.9, 20432.0], [98.0, 20444.0], [98.1, 20466.0], [98.2, 20467.0], [98.3, 20483.0], [98.4, 20487.0], [98.5, 20493.0], [98.6, 20503.0], [98.7, 20518.0], [98.8, 20518.0], [98.9, 20530.0], [99.0, 20533.0], [99.1, 20540.0], [99.2, 20541.0], [99.3, 20557.0], [99.4, 20569.0], [99.5, 20577.0], [99.6, 20579.0], [99.7, 20597.0], [99.8, 20602.0], [99.9, 20618.0], [100.0, 20624.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 19000.0, "maxY": 199.0, "series": [{"data": [[19200.0, 101.0], [19400.0, 154.0], [19000.0, 31.0], [19100.0, 63.0], [19300.0, 156.0], [19700.0, 184.0], [20100.0, 110.0], [19500.0, 199.0], [19800.0, 162.0], [19900.0, 75.0], [20000.0, 49.0], [19600.0, 159.0], [20200.0, 17.0], [20300.0, 3.0], [20400.0, 15.0], [20500.0, 18.0], [20600.0, 4.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 1500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 751.590666666666, "minX": 1.61626728E12, "maxY": 751.590666666666, "series": [{"data": [[1.61626728E12, 751.590666666666]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626728E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19068.0, "minX": 2.0, "maxY": 20602.0, "series": [{"data": [[2.0, 19836.0], [7.0, 20193.0], [8.0, 20057.666666666668], [9.0, 20080.0], [10.0, 19729.0], [12.0, 20054.0], [13.0, 20082.5], [14.0, 19964.0], [15.0, 19732.0], [16.0, 19730.0], [17.0, 19646.0], [19.0, 19583.0], [20.0, 20487.0], [21.0, 20187.0], [23.0, 19730.5], [24.0, 20185.0], [25.0, 19734.0], [27.0, 19789.0], [30.0, 20179.5], [31.0, 20185.0], [33.0, 20356.5], [32.0, 20027.0], [35.0, 20230.0], [34.0, 20176.0], [37.0, 20267.0], [36.0, 19730.0], [39.0, 20064.5], [41.0, 19600.0], [43.0, 20176.5], [45.0, 19930.0], [44.0, 20518.0], [47.0, 19726.0], [46.0, 20186.0], [51.0, 20067.666666666668], [52.0, 19621.0], [55.0, 19930.0], [54.0, 19946.0], [57.0, 20183.0], [58.0, 20078.0], [61.0, 20059.666666666668], [67.0, 19751.333333333332], [65.0, 19849.5], [64.0, 20185.0], [71.0, 19938.0], [69.0, 19960.0], [68.0, 19927.0], [73.0, 19781.0], [79.0, 19866.0], [76.0, 20067.666666666668], [83.0, 20072.0], [82.0, 19924.0], [80.0, 19719.0], [87.0, 19689.0], [85.0, 20184.0], [84.0, 19916.0], [90.0, 20179.0], [89.0, 19916.0], [88.0, 19639.0], [95.0, 20128.333333333332], [93.0, 19507.0], [92.0, 19714.0], [98.0, 20169.0], [97.0, 19914.0], [96.0, 20579.0], [103.0, 19815.5], [101.0, 20045.666666666668], [107.0, 19700.0], [104.0, 19503.0], [111.0, 19711.5], [110.0, 20602.0], [109.0, 20177.0], [108.0, 19669.0], [114.0, 20174.0], [113.0, 19908.0], [112.0, 19681.0], [118.0, 19893.0], [117.0, 19704.0], [116.0, 19854.0], [121.0, 20168.0], [120.0, 19697.5], [127.0, 20130.2], [124.0, 20165.0], [135.0, 19778.5], [134.0, 20169.0], [132.0, 20432.0], [131.0, 20161.0], [129.0, 20537.0], [128.0, 20167.0], [143.0, 20174.5], [142.0, 19704.0], [141.0, 20173.0], [139.0, 19670.5], [137.0, 19678.5], [151.0, 19939.0], [149.0, 19893.0], [148.0, 19706.0], [147.0, 20260.0], [145.0, 20166.0], [144.0, 19634.0], [159.0, 19913.0], [157.0, 20271.5], [155.0, 20321.5], [153.0, 20597.0], [152.0, 19897.0], [167.0, 19492.0], [166.0, 19990.666666666668], [163.0, 19909.0], [162.0, 20014.666666666668], [160.0, 19908.0], [173.0, 19908.0], [172.0, 20157.0], [171.0, 20226.0], [169.0, 19642.0], [168.0, 19904.0], [183.0, 20150.0], [182.0, 19899.0], [181.0, 19883.0], [180.0, 20221.0], [178.0, 20187.0], [177.0, 19892.0], [176.0, 19500.0], [191.0, 19644.0], [190.0, 20020.5], [188.0, 20001.333333333332], [185.0, 19903.5], [199.0, 20030.5], [197.0, 19889.0], [196.0, 19737.5], [194.0, 19701.0], [193.0, 20031.5], [207.0, 19617.0], [206.0, 19883.0], [205.0, 20342.5], [204.0, 20158.0], [202.0, 19661.5], [201.0, 19904.0], [215.0, 20024.5], [213.0, 20152.0], [212.0, 19824.5], [210.0, 20152.0], [209.0, 20159.0], [208.0, 19494.0], [222.0, 19897.0], [221.0, 19885.0], [220.0, 19769.0], [219.0, 19917.0], [218.0, 20141.0], [216.0, 19481.0], [231.0, 19684.0], [230.0, 20145.0], [229.0, 19685.0], [228.0, 19689.0], [227.0, 19939.0], [226.0, 20144.0], [225.0, 19686.0], [224.0, 19617.0], [238.0, 20149.0], [237.0, 19476.0], [236.0, 19667.0], [234.0, 19683.0], [233.0, 19658.0], [232.0, 19684.0], [247.0, 19950.5], [245.0, 19891.0], [244.0, 19882.0], [243.0, 19808.0], [241.0, 20142.0], [240.0, 19874.0], [255.0, 19478.0], [253.0, 20396.0], [252.0, 19472.0], [251.0, 19472.0], [250.0, 19886.0], [248.0, 19892.0], [271.0, 19711.0], [267.0, 20140.0], [265.0, 20091.5], [263.0, 20136.0], [262.0, 19674.0], [261.0, 20138.666666666668], [258.0, 19663.0], [275.0, 20545.0], [284.0, 19878.0], [283.0, 19950.0], [281.0, 20281.0], [279.0, 20135.0], [278.0, 20029.0], [277.0, 19671.0], [274.0, 19862.0], [273.0, 19908.0], [302.0, 20113.5], [300.0, 19666.0], [289.0, 19860.0], [288.0, 19462.0], [299.0, 19457.0], [298.0, 19594.0], [297.0, 19869.0], [296.0, 19873.0], [295.0, 19671.0], [294.0, 19458.0], [293.0, 19907.5], [316.0, 20009.5], [318.0, 19854.0], [319.0, 20121.0], [317.0, 19855.0], [314.0, 19575.0], [313.0, 19920.5], [311.0, 20029.0], [307.0, 19660.0], [306.0, 19897.75], [310.0, 19662.0], [309.0, 19760.5], [323.0, 19857.0], [334.0, 19645.5], [335.0, 20102.0], [332.0, 19749.0], [329.0, 19842.0], [328.0, 20121.5], [327.0, 20114.0], [325.0, 19832.5], [322.0, 19444.0], [321.0, 19860.0], [339.0, 19648.0], [349.0, 19644.0], [351.0, 19987.5], [348.0, 19845.0], [345.0, 19965.0], [343.0, 19774.5], [341.0, 20102.0], [340.0, 20105.0], [338.0, 19438.0], [337.0, 19617.5], [366.0, 19434.0], [367.0, 19870.0], [364.0, 19828.5], [355.0, 19718.0], [353.0, 19672.0], [363.0, 20086.0], [361.0, 20095.0], [360.0, 19430.0], [359.0, 19584.0], [358.0, 19872.0], [357.0, 19643.0], [356.0, 19832.0], [382.0, 19638.0], [383.0, 19695.0], [381.0, 20083.0], [380.0, 19830.0], [379.0, 20092.0], [378.0, 20118.0], [377.0, 19819.0], [376.0, 19828.0], [372.0, 19832.0], [371.0, 19438.0], [370.0, 19880.333333333332], [398.0, 19823.5], [396.0, 19730.5], [394.0, 19632.5], [392.0, 19824.5], [390.0, 20000.0], [389.0, 19696.666666666668], [386.0, 19776.0], [384.0, 19827.0], [413.0, 19620.0], [415.0, 19781.0], [412.0, 19629.0], [403.0, 19834.0], [402.0, 19835.5], [410.0, 19626.0], [409.0, 19867.0], [408.0, 19861.0], [407.0, 19955.0], [405.0, 19813.0], [404.0, 19630.0], [430.0, 19747.0], [428.0, 19809.0], [427.0, 19804.0], [426.0, 19695.0], [425.0, 20076.0], [424.0, 19716.5], [422.0, 19949.0], [420.0, 20080.0], [419.0, 19621.0], [418.0, 19741.0], [416.0, 19816.0], [446.0, 19543.5], [447.0, 19617.0], [444.0, 19508.0], [435.0, 19804.0], [434.0, 19742.0], [432.0, 19674.0], [443.0, 20051.0], [442.0, 19594.0], [441.0, 19797.0], [440.0, 20067.0], [439.0, 19608.0], [438.0, 19577.0], [437.0, 19576.0], [436.0, 19805.0], [462.0, 20036.0], [463.0, 19360.0], [461.0, 19539.0], [460.0, 19535.0], [459.0, 19568.0], [458.0, 19487.0], [457.0, 19843.5], [455.0, 20033.0], [451.0, 19769.0], [449.0, 19541.0], [454.0, 19367.0], [453.0, 19577.0], [452.0, 19366.0], [476.0, 20024.0], [478.0, 19496.0], [479.0, 19512.0], [477.0, 19367.0], [475.0, 19487.333333333332], [474.0, 19462.5], [470.0, 19358.0], [464.0, 20031.0], [467.0, 19359.0], [466.0, 19513.0], [469.0, 19705.0], [468.0, 19368.0], [494.0, 19886.0], [495.0, 19496.0], [493.0, 19763.5], [482.0, 19505.5], [480.0, 19564.0], [491.0, 19592.0], [490.0, 19533.0], [489.0, 19889.0], [488.0, 19518.0], [487.0, 20012.0], [485.0, 19781.0], [509.0, 19952.0], [510.0, 19955.0], [508.0, 20276.0], [507.0, 19714.0], [506.0, 19498.0], [505.0, 19504.0], [504.0, 19690.0], [502.0, 19892.333333333332], [497.0, 19585.0], [496.0, 19622.0], [499.0, 19508.0], [531.0, 19682.0], [542.0, 19666.0], [543.0, 19851.0], [530.0, 19530.0], [538.0, 19722.0], [537.0, 19674.5], [536.0, 19671.0], [518.0, 19706.5], [516.0, 19706.0], [515.0, 19866.333333333332], [512.0, 19970.0], [527.0, 19641.25], [526.0, 19696.0], [522.0, 19696.0], [521.0, 19958.0], [520.0, 19617.5], [534.0, 19731.0], [533.0, 19679.0], [532.0, 19680.0], [574.0, 19567.0], [575.0, 19923.0], [561.0, 19631.5], [572.0, 19471.0], [571.0, 19565.5], [570.0, 19262.0], [568.0, 19930.0], [557.0, 19569.0], [547.0, 19414.5], [545.0, 19673.0], [549.0, 19558.0], [548.0, 19669.0], [556.0, 19539.0], [555.0, 19476.0], [554.0, 19417.0], [553.0, 19467.0], [552.0, 19751.5], [567.0, 19474.0], [566.0, 19474.0], [565.0, 19657.0], [564.0, 19466.5], [594.0, 19354.5], [606.0, 19455.0], [607.0, 19649.0], [593.0, 19471.0], [605.0, 19913.0], [604.0, 19455.75], [600.0, 19382.0], [578.0, 19695.0], [576.0, 19464.0], [591.0, 19505.0], [590.0, 19461.0], [589.0, 19653.0], [587.0, 19458.0], [586.0, 19920.0], [584.0, 19703.5], [599.0, 19513.5], [597.0, 19912.0], [596.0, 19840.5], [625.0, 19641.0], [637.0, 19639.0], [639.0, 19899.5], [624.0, 19442.0], [635.0, 19514.0], [633.0, 19645.0], [632.0, 19723.0], [615.0, 19447.0], [613.0, 19711.5], [609.0, 19654.5], [623.0, 19768.0], [621.0, 19642.5], [620.0, 19444.0], [616.0, 19907.0], [631.0, 19639.5], [627.0, 19647.0], [626.0, 19642.0], [669.0, 19409.0], [670.0, 20300.0], [658.0, 19220.0], [656.0, 19578.0], [668.0, 19667.0], [667.0, 19412.5], [665.0, 19476.0], [664.0, 19507.5], [654.0, 19683.428571428572], [644.0, 19686.4], [647.0, 19632.0], [645.0, 19899.0], [662.0, 19222.0], [661.0, 19339.0], [660.0, 20312.0], [659.0, 19775.5], [691.0, 19473.0], [702.0, 19270.0], [703.0, 19378.0], [690.0, 19606.0], [689.0, 19496.5], [699.0, 19563.0], [697.0, 19176.0], [696.0, 19850.0], [679.0, 19604.0], [676.0, 19328.0], [674.0, 19567.25], [687.0, 19768.0], [686.0, 19466.75], [683.0, 19398.0], [682.0, 19768.0], [681.0, 19863.0], [680.0, 19616.5], [695.0, 19389.0], [694.0, 19732.0], [692.0, 19592.0], [729.0, 19590.333333333332], [733.0, 19414.0], [734.0, 19169.0], [731.0, 19701.5], [728.0, 19371.0], [711.0, 20261.0], [710.0, 19369.5], [708.0, 19622.0], [707.0, 19572.0], [706.0, 19284.0], [705.0, 19568.0], [704.0, 19170.0], [725.0, 19536.0], [722.0, 19352.5], [719.0, 19421.75], [718.0, 19380.0], [714.0, 19387.666666666668], [766.0, 19597.5], [767.0, 19161.0], [762.0, 19365.0], [760.0, 19220.666666666668], [743.0, 19606.0], [741.0, 19561.0], [740.0, 19676.0], [738.0, 19700.5], [736.0, 19370.0], [749.0, 19432.0], [747.0, 19566.5], [761.0, 19726.5], [759.0, 19315.0], [758.0, 19589.5], [757.0, 19836.0], [755.0, 19321.666666666668], [797.0, 19444.0], [799.0, 19267.0], [784.0, 19561.0], [796.0, 19489.5], [794.0, 19832.0], [793.0, 19561.0], [792.0, 19825.0], [783.0, 20179.0], [768.0, 19341.0], [772.0, 19577.0], [769.0, 19833.333333333332], [775.0, 19818.0], [773.0, 19695.333333333332], [782.0, 19788.5], [779.0, 19702.0], [778.0, 19598.5], [791.0, 19430.0], [790.0, 19556.0], [788.0, 19715.0], [787.0, 19362.0], [819.0, 19547.0], [831.0, 19294.0], [830.0, 19479.25], [826.0, 19595.5], [824.0, 19830.0], [814.0, 19570.0], [801.0, 19833.0], [800.0, 19368.0], [804.0, 20171.0], [803.0, 19694.5], [807.0, 19856.0], [806.0, 19366.0], [813.0, 19823.5], [811.0, 19163.0], [810.0, 19426.5], [808.0, 19157.0], [823.0, 19369.0], [822.0, 19483.25], [821.0, 19430.5], [816.0, 19333.0], [861.0, 20260.0], [862.0, 19727.0], [860.0, 19688.0], [858.0, 19570.0], [857.0, 19689.5], [839.0, 19819.0], [838.0, 20171.0], [837.0, 19153.0], [836.0, 19904.0], [834.0, 19550.5], [832.0, 19155.0], [847.0, 19523.0], [846.0, 19315.0], [844.0, 19485.5], [842.0, 19816.0], [840.0, 19282.0], [855.0, 19359.0], [851.0, 19551.0], [850.0, 19567.0], [849.0, 19547.5], [894.0, 19566.0], [895.0, 19638.5], [892.0, 19316.0], [891.0, 20268.0], [890.0, 19518.5], [871.0, 19544.0], [869.0, 19690.0], [867.0, 19731.333333333332], [864.0, 19939.0], [886.0, 19616.8], [883.0, 19556.0], [881.0, 19355.0], [879.0, 19356.0], [878.0, 19418.333333333332], [877.0, 19817.0], [874.0, 19149.0], [873.0, 20174.0], [872.0, 19685.0], [924.0, 19825.5], [926.0, 19283.0], [922.0, 19355.0], [921.0, 19774.0], [919.0, 19540.0], [915.0, 19275.0], [914.0, 19290.666666666668], [913.0, 19357.0], [911.0, 19721.0], [899.0, 19573.666666666668], [897.0, 19823.0], [902.0, 19827.0], [900.0, 19147.0], [910.0, 19815.0], [908.0, 19146.0], [907.0, 19584.5], [906.0, 19301.0], [904.0, 19550.5], [935.0, 19355.0], [956.0, 19697.5], [958.0, 19947.5], [954.0, 19266.0], [953.0, 19560.0], [952.0, 19554.0], [933.0, 20188.0], [932.0, 19564.0], [931.0, 19414.0], [930.0, 19355.0], [929.0, 20231.0], [928.0, 19820.5], [943.0, 19266.0], [942.0, 19555.0], [941.0, 19348.0], [940.0, 19272.0], [939.0, 20174.0], [938.0, 19144.0], [937.0, 19815.0], [936.0, 19351.5], [950.0, 19555.0], [949.0, 19491.0], [947.0, 19746.5], [945.0, 19614.0], [990.0, 19670.0], [980.0, 19477.0], [991.0, 19802.0], [976.0, 19543.0], [978.0, 19341.0], [977.0, 19533.0], [988.0, 19481.333333333332], [987.0, 19805.0], [986.0, 19342.0], [967.0, 19803.0], [966.0, 20069.0], [965.0, 19804.0], [964.0, 20165.0], [963.0, 19305.0], [962.0, 19471.5], [960.0, 19575.5], [975.0, 19347.0], [974.0, 19342.0], [973.0, 19497.333333333332], [970.0, 19775.5], [968.0, 19801.0], [983.0, 19802.0], [982.0, 20205.0], [981.0, 19342.0], [1022.0, 19528.0], [1023.0, 19138.0], [1020.0, 19305.5], [1018.0, 19547.0], [1017.0, 19803.5], [1016.0, 19798.0], [1006.0, 19629.5], [993.0, 19671.0], [995.0, 19344.0], [994.0, 19546.0], [998.0, 19567.5], [996.0, 19579.0], [1003.0, 19799.0], [1002.0, 19547.0], [1000.0, 19570.5], [1014.0, 19726.333333333332], [1011.0, 19297.0], [1010.0, 19255.0], [1009.0, 19567.0], [1078.0, 19390.0], [1056.0, 19521.0], [1062.0, 19539.75], [1064.0, 20227.0], [1070.0, 19386.666666666668], [1080.0, 19457.0], [1076.0, 19575.0], [1074.0, 19655.5], [1072.0, 19121.0], [1030.0, 19433.5], [1026.0, 19534.0], [1032.0, 19126.0], [1036.0, 19333.0], [1052.0, 19461.0], [1050.0, 19800.0], [1048.0, 19125.0], [1046.0, 19793.0], [1042.0, 19379.8], [1138.0, 19788.0], [1120.0, 19392.0], [1126.0, 19784.666666666668], [1132.0, 19278.0], [1134.0, 19663.0], [1146.0, 19786.0], [1144.0, 19775.0], [1142.0, 19301.0], [1140.0, 19540.666666666668], [1088.0, 19415.4], [1092.0, 19557.0], [1090.0, 19422.5], [1094.0, 19292.5], [1098.0, 19594.0], [1096.0, 19248.0], [1102.0, 19328.0], [1116.0, 19648.5], [1114.0, 19386.0], [1112.0, 19805.0], [1110.0, 19420.0], [1108.0, 19316.0], [1106.0, 20076.0], [1104.0, 19961.0], [1162.0, 19596.333333333332], [1188.0, 19314.0], [1206.0, 19344.0], [1200.0, 19104.0], [1152.0, 19237.0], [1156.0, 19552.0], [1154.0, 19216.5], [1158.0, 19780.0], [1166.0, 19518.5], [1174.0, 19560.0], [1172.0, 19115.0], [1196.0, 19266.4], [1278.0, 19091.0], [1248.0, 19503.0], [1258.0, 19505.0], [1262.0, 19496.0], [1276.0, 19303.0], [1274.0, 19802.5], [1270.0, 19757.0], [1268.0, 19631.5], [1264.0, 19304.0], [1218.0, 19385.75], [1224.0, 19542.5], [1228.0, 19099.0], [1230.0, 19310.0], [1246.0, 19896.5], [1244.0, 19771.0], [1242.0, 19096.0], [1236.0, 19506.0], [1232.0, 19202.5], [1340.0, 19745.0], [1318.0, 19747.0], [1316.0, 19480.0], [1320.0, 19758.0], [1324.0, 19528.0], [1342.0, 19748.0], [1338.0, 19489.0], [1336.0, 19289.5], [1294.0, 19164.5], [1292.0, 19152.5], [1286.0, 19392.0], [1284.0, 19497.0], [1280.0, 19196.5], [1310.0, 19756.0], [1300.0, 19517.5], [1298.0, 19426.0], [1296.0, 19300.0], [1392.0, 19436.6], [1376.0, 19516.5], [1386.0, 19580.0], [1400.0, 19476.0], [1358.0, 19659.0], [1350.0, 19485.0], [1346.0, 19565.25], [1374.0, 19614.5], [1368.0, 19435.333333333332], [1366.0, 19290.0], [1362.0, 19418.0], [1464.0, 19280.0], [1470.0, 19529.75], [1440.0, 19467.0], [1446.0, 19477.0], [1458.0, 19442.666666666668], [1422.0, 19281.5], [1420.0, 19608.0], [1418.0, 19481.0], [1416.0, 19280.0], [1414.0, 19674.5], [1412.0, 19073.0], [1408.0, 19609.5], [1438.0, 19602.5], [1426.0, 19177.5], [1424.0, 19745.0], [1454.0, 19077.0], [1450.0, 19467.5], [1500.0, 19425.695652173916], [1476.0, 19332.0], [1472.0, 19189.0], [1059.0, 19122.0], [1083.0, 19322.0], [1061.0, 19788.0], [1063.0, 19797.0], [1065.0, 19333.0], [1069.0, 19472.0], [1081.0, 19528.0], [1077.0, 19797.0], [1075.0, 19795.0], [1073.0, 19327.0], [1055.0, 19546.666666666668], [1025.0, 19562.0], [1031.0, 19338.0], [1035.0, 19338.0], [1033.0, 19331.0], [1037.0, 19292.0], [1051.0, 19330.0], [1047.0, 19124.0], [1045.0, 19484.666666666668], [1151.0, 19780.0], [1145.0, 19321.0], [1123.0, 19406.0], [1129.0, 19405.333333333332], [1133.0, 19771.0], [1135.0, 19513.0], [1149.0, 19669.666666666668], [1143.0, 19522.0], [1137.0, 19329.0], [1119.0, 19650.0], [1095.0, 19325.0], [1101.0, 19533.0], [1099.0, 19525.0], [1103.0, 19778.0], [1111.0, 19323.0], [1107.0, 19530.0], [1205.0, 19794.5], [1209.0, 19541.666666666668], [1215.0, 19506.0], [1185.0, 19179.0], [1187.0, 19772.0], [1191.0, 19549.333333333332], [1189.0, 19778.0], [1213.0, 19632.5], [1211.0, 19310.5], [1201.0, 19732.666666666668], [1183.0, 19316.0], [1157.0, 19447.5], [1161.0, 19774.0], [1163.0, 19782.0], [1181.0, 19170.0], [1179.0, 19531.0], [1177.0, 19622.0], [1175.0, 19782.0], [1173.0, 19504.666666666668], [1171.0, 19515.0], [1169.0, 19781.0], [1199.0, 19376.0], [1267.0, 19759.0], [1275.0, 19488.0], [1279.0, 19463.0], [1249.0, 19512.0], [1257.0, 19345.0], [1253.0, 19195.25], [1261.0, 19627.5], [1263.0, 19237.5], [1273.0, 20182.0], [1271.0, 19530.5], [1265.0, 19093.0], [1247.0, 20155.0], [1219.0, 19774.0], [1225.0, 19872.75], [1227.0, 19445.0], [1231.0, 19773.0], [1245.0, 19307.0], [1241.0, 19504.0], [1239.0, 19568.0], [1237.0, 19567.0], [1235.0, 19099.0], [1233.0, 19104.0], [1335.0, 19481.5], [1343.0, 20107.0], [1315.0, 19424.0], [1313.0, 19471.0], [1319.0, 19424.5], [1323.0, 19449.333333333332], [1327.0, 19496.5], [1325.0, 19747.0], [1341.0, 19756.0], [1339.0, 19746.0], [1331.0, 19520.5], [1295.0, 19202.0], [1291.0, 20084.0], [1289.0, 19613.0], [1287.0, 19295.0], [1283.0, 19532.666666666668], [1311.0, 19583.5], [1307.0, 19200.0], [1305.0, 19660.0], [1303.0, 19494.333333333332], [1397.0, 19490.0], [1395.0, 19483.5], [1405.0, 19483.0], [1407.0, 19565.0], [1379.0, 19230.0], [1383.0, 19510.166666666668], [1401.0, 19406.2], [1353.0, 19625.0], [1351.0, 19366.0], [1347.0, 20165.0], [1345.0, 19089.0], [1375.0, 19741.0], [1371.0, 19528.666666666668], [1369.0, 19526.0], [1367.0, 19741.0], [1363.0, 19534.0], [1391.0, 19722.0], [1387.0, 19205.0], [1465.0, 19523.0], [1469.0, 19547.0], [1443.0, 19466.0], [1445.0, 19940.0], [1449.0, 20137.0], [1447.0, 19701.5], [1463.0, 19495.833333333336], [1457.0, 19068.0], [1419.0, 19360.0], [1417.0, 19241.0], [1409.0, 19484.5], [1439.0, 19737.0], [1433.0, 20005.0], [1431.0, 19313.5], [1427.0, 19610.5], [1455.0, 19469.0], [1453.0, 19810.0], [1483.0, 19460.0], [1477.0, 19274.0], [1473.0, 19350.5]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[751.5820000000009, 19652.85133333333]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61626728E12, "maxY": 4.9E-324, "series": [{"data": [[1.61626728E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61626728E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626728E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19652.85133333333, "minX": 1.61626728E12, "maxY": 19652.85133333333, "series": [{"data": [[1.61626728E12, 19652.85133333333]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626728E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61626728E12, "maxY": 4.9E-324, "series": [{"data": [[1.61626728E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626728E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61626728E12, "maxY": 4.9E-324, "series": [{"data": [[1.61626728E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626728E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 19061.0, "minX": 1.61626728E12, "maxY": 20624.0, "series": [{"data": [[1.61626728E12, 20624.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61626728E12, 20115.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61626728E12, 20536.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61626728E12, 20183.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61626728E12, 19061.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61626728E12, 19640.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626728E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19640.5, "minX": 1500.0, "maxY": 19640.5, "series": [{"data": [[1500.0, 19640.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1500.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1500.0, "maxY": 4.9E-324, "series": [{"data": [[1500.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1500.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61626728E12, "maxY": 25.0, "series": [{"data": [[1.61626728E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626728E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61626728E12, "maxY": 25.0, "series": [{"data": [[1.61626728E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626728E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61626728E12, "maxY": 25.0, "series": [{"data": [[1.61626728E12, 25.0]], "isOverall": false, "label": "CreateRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626728E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61626728E12, "maxY": 25.0, "series": [{"data": [[1.61626728E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626728E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

