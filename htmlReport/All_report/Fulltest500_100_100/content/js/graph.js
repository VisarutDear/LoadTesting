/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 125.0, "minX": 0.0, "maxY": 2385.0, "series": [{"data": [[0.0, 125.0], [0.1, 135.0], [0.2, 135.0], [0.3, 135.0], [0.4, 135.0], [0.5, 135.0], [0.6, 135.0], [0.7, 135.0], [0.8, 135.0], [0.9, 135.0], [1.0, 135.0], [1.1, 135.0], [1.2, 135.0], [1.3, 135.0], [1.4, 135.0], [1.5, 135.0], [1.6, 135.0], [1.7, 135.0], [1.8, 135.0], [1.9, 135.0], [2.0, 135.0], [2.1, 135.0], [2.2, 136.0], [2.3, 136.0], [2.4, 136.0], [2.5, 136.0], [2.6, 136.0], [2.7, 136.0], [2.8, 136.0], [2.9, 136.0], [3.0, 136.0], [3.1, 136.0], [3.2, 136.0], [3.3, 136.0], [3.4, 136.0], [3.5, 136.0], [3.6, 136.0], [3.7, 136.0], [3.8, 136.0], [3.9, 136.0], [4.0, 136.0], [4.1, 136.0], [4.2, 136.0], [4.3, 136.0], [4.4, 136.0], [4.5, 136.0], [4.6, 136.0], [4.7, 136.0], [4.8, 136.0], [4.9, 136.0], [5.0, 136.0], [5.1, 136.0], [5.2, 136.0], [5.3, 136.0], [5.4, 136.0], [5.5, 136.0], [5.6, 136.0], [5.7, 136.0], [5.8, 136.0], [5.9, 136.0], [6.0, 136.0], [6.1, 136.0], [6.2, 136.0], [6.3, 136.0], [6.4, 136.0], [6.5, 136.0], [6.6, 137.0], [6.7, 137.0], [6.8, 137.0], [6.9, 137.0], [7.0, 137.0], [7.1, 137.0], [7.2, 137.0], [7.3, 137.0], [7.4, 137.0], [7.5, 137.0], [7.6, 137.0], [7.7, 137.0], [7.8, 137.0], [7.9, 137.0], [8.0, 137.0], [8.1, 137.0], [8.2, 137.0], [8.3, 137.0], [8.4, 137.0], [8.5, 137.0], [8.6, 137.0], [8.7, 137.0], [8.8, 137.0], [8.9, 137.0], [9.0, 137.0], [9.1, 137.0], [9.2, 137.0], [9.3, 137.0], [9.4, 137.0], [9.5, 137.0], [9.6, 137.0], [9.7, 137.0], [9.8, 137.0], [9.9, 137.0], [10.0, 137.0], [10.1, 137.0], [10.2, 137.0], [10.3, 137.0], [10.4, 137.0], [10.5, 137.0], [10.6, 137.0], [10.7, 137.0], [10.8, 137.0], [10.9, 137.0], [11.0, 137.0], [11.1, 137.0], [11.2, 137.0], [11.3, 137.0], [11.4, 137.0], [11.5, 137.0], [11.6, 137.0], [11.7, 137.0], [11.8, 137.0], [11.9, 137.0], [12.0, 137.0], [12.1, 137.0], [12.2, 137.0], [12.3, 137.0], [12.4, 137.0], [12.5, 137.0], [12.6, 137.0], [12.7, 137.0], [12.8, 137.0], [12.9, 137.0], [13.0, 137.0], [13.1, 137.0], [13.2, 137.0], [13.3, 137.0], [13.4, 137.0], [13.5, 137.0], [13.6, 137.0], [13.7, 137.0], [13.8, 137.0], [13.9, 137.0], [14.0, 137.0], [14.1, 137.0], [14.2, 137.0], [14.3, 137.0], [14.4, 137.0], [14.5, 137.0], [14.6, 137.0], [14.7, 137.0], [14.8, 137.0], [14.9, 137.0], [15.0, 137.0], [15.1, 137.0], [15.2, 137.0], [15.3, 137.0], [15.4, 137.0], [15.5, 137.0], [15.6, 137.0], [15.7, 137.0], [15.8, 137.0], [15.9, 137.0], [16.0, 137.0], [16.1, 137.0], [16.2, 137.0], [16.3, 137.0], [16.4, 137.0], [16.5, 137.0], [16.6, 137.0], [16.7, 137.0], [16.8, 137.0], [16.9, 137.0], [17.0, 137.0], [17.1, 137.0], [17.2, 137.0], [17.3, 137.0], [17.4, 137.0], [17.5, 137.0], [17.6, 137.0], [17.7, 137.0], [17.8, 137.0], [17.9, 137.0], [18.0, 137.0], [18.1, 137.0], [18.2, 137.0], [18.3, 137.0], [18.4, 137.0], [18.5, 137.0], [18.6, 137.0], [18.7, 137.0], [18.8, 137.0], [18.9, 137.0], [19.0, 137.0], [19.1, 137.0], [19.2, 137.0], [19.3, 137.0], [19.4, 137.0], [19.5, 137.0], [19.6, 137.0], [19.7, 137.0], [19.8, 138.0], [19.9, 138.0], [20.0, 138.0], [20.1, 138.0], [20.2, 138.0], [20.3, 138.0], [20.4, 138.0], [20.5, 138.0], [20.6, 138.0], [20.7, 138.0], [20.8, 138.0], [20.9, 138.0], [21.0, 138.0], [21.1, 138.0], [21.2, 138.0], [21.3, 138.0], [21.4, 138.0], [21.5, 138.0], [21.6, 138.0], [21.7, 138.0], [21.8, 138.0], [21.9, 138.0], [22.0, 138.0], [22.1, 138.0], [22.2, 138.0], [22.3, 138.0], [22.4, 138.0], [22.5, 138.0], [22.6, 138.0], [22.7, 138.0], [22.8, 138.0], [22.9, 138.0], [23.0, 138.0], [23.1, 138.0], [23.2, 138.0], [23.3, 138.0], [23.4, 138.0], [23.5, 138.0], [23.6, 138.0], [23.7, 138.0], [23.8, 138.0], [23.9, 138.0], [24.0, 138.0], [24.1, 138.0], [24.2, 138.0], [24.3, 138.0], [24.4, 138.0], [24.5, 138.0], [24.6, 138.0], [24.7, 138.0], [24.8, 138.0], [24.9, 138.0], [25.0, 138.0], [25.1, 138.0], [25.2, 138.0], [25.3, 138.0], [25.4, 138.0], [25.5, 138.0], [25.6, 138.0], [25.7, 138.0], [25.8, 138.0], [25.9, 138.0], [26.0, 138.0], [26.1, 138.0], [26.2, 138.0], [26.3, 138.0], [26.4, 138.0], [26.5, 138.0], [26.6, 138.0], [26.7, 138.0], [26.8, 138.0], [26.9, 138.0], [27.0, 138.0], [27.1, 138.0], [27.2, 138.0], [27.3, 138.0], [27.4, 138.0], [27.5, 138.0], [27.6, 138.0], [27.7, 138.0], [27.8, 138.0], [27.9, 138.0], [28.0, 138.0], [28.1, 138.0], [28.2, 138.0], [28.3, 138.0], [28.4, 138.0], [28.5, 138.0], [28.6, 138.0], [28.7, 138.0], [28.8, 138.0], [28.9, 138.0], [29.0, 138.0], [29.1, 138.0], [29.2, 138.0], [29.3, 138.0], [29.4, 138.0], [29.5, 138.0], [29.6, 138.0], [29.7, 138.0], [29.8, 138.0], [29.9, 138.0], [30.0, 138.0], [30.1, 138.0], [30.2, 138.0], [30.3, 138.0], [30.4, 138.0], [30.5, 138.0], [30.6, 138.0], [30.7, 138.0], [30.8, 138.0], [30.9, 138.0], [31.0, 138.0], [31.1, 138.0], [31.2, 138.0], [31.3, 138.0], [31.4, 138.0], [31.5, 138.0], [31.6, 138.0], [31.7, 138.0], [31.8, 138.0], [31.9, 138.0], [32.0, 138.0], [32.1, 138.0], [32.2, 138.0], [32.3, 138.0], [32.4, 138.0], [32.5, 138.0], [32.6, 138.0], [32.7, 138.0], [32.8, 138.0], [32.9, 138.0], [33.0, 138.0], [33.1, 138.0], [33.2, 138.0], [33.3, 138.0], [33.4, 138.0], [33.5, 138.0], [33.6, 138.0], [33.7, 138.0], [33.8, 138.0], [33.9, 138.0], [34.0, 138.0], [34.1, 138.0], [34.2, 138.0], [34.3, 138.0], [34.4, 138.0], [34.5, 138.0], [34.6, 138.0], [34.7, 138.0], [34.8, 138.0], [34.9, 138.0], [35.0, 138.0], [35.1, 138.0], [35.2, 138.0], [35.3, 138.0], [35.4, 138.0], [35.5, 138.0], [35.6, 138.0], [35.7, 138.0], [35.8, 138.0], [35.9, 138.0], [36.0, 138.0], [36.1, 138.0], [36.2, 138.0], [36.3, 138.0], [36.4, 138.0], [36.5, 138.0], [36.6, 138.0], [36.7, 138.0], [36.8, 138.0], [36.9, 138.0], [37.0, 138.0], [37.1, 138.0], [37.2, 138.0], [37.3, 138.0], [37.4, 138.0], [37.5, 138.0], [37.6, 138.0], [37.7, 138.0], [37.8, 138.0], [37.9, 138.0], [38.0, 138.0], [38.1, 138.0], [38.2, 138.0], [38.3, 138.0], [38.4, 138.0], [38.5, 138.0], [38.6, 138.0], [38.7, 138.0], [38.8, 138.0], [38.9, 138.0], [39.0, 138.0], [39.1, 138.0], [39.2, 138.0], [39.3, 138.0], [39.4, 138.0], [39.5, 138.0], [39.6, 138.0], [39.7, 138.0], [39.8, 138.0], [39.9, 138.0], [40.0, 138.0], [40.1, 138.0], [40.2, 138.0], [40.3, 138.0], [40.4, 138.0], [40.5, 138.0], [40.6, 138.0], [40.7, 138.0], [40.8, 138.0], [40.9, 138.0], [41.0, 138.0], [41.1, 138.0], [41.2, 138.0], [41.3, 138.0], [41.4, 138.0], [41.5, 138.0], [41.6, 138.0], [41.7, 138.0], [41.8, 138.0], [41.9, 138.0], [42.0, 138.0], [42.1, 138.0], [42.2, 138.0], [42.3, 138.0], [42.4, 138.0], [42.5, 138.0], [42.6, 138.0], [42.7, 138.0], [42.8, 138.0], [42.9, 138.0], [43.0, 138.0], [43.1, 138.0], [43.2, 138.0], [43.3, 138.0], [43.4, 138.0], [43.5, 138.0], [43.6, 138.0], [43.7, 138.0], [43.8, 138.0], [43.9, 138.0], [44.0, 138.0], [44.1, 138.0], [44.2, 138.0], [44.3, 138.0], [44.4, 139.0], [44.5, 139.0], [44.6, 139.0], [44.7, 139.0], [44.8, 139.0], [44.9, 139.0], [45.0, 139.0], [45.1, 139.0], [45.2, 139.0], [45.3, 139.0], [45.4, 139.0], [45.5, 139.0], [45.6, 139.0], [45.7, 139.0], [45.8, 139.0], [45.9, 139.0], [46.0, 139.0], [46.1, 139.0], [46.2, 139.0], [46.3, 139.0], [46.4, 139.0], [46.5, 139.0], [46.6, 139.0], [46.7, 139.0], [46.8, 139.0], [46.9, 139.0], [47.0, 139.0], [47.1, 139.0], [47.2, 139.0], [47.3, 139.0], [47.4, 139.0], [47.5, 139.0], [47.6, 139.0], [47.7, 139.0], [47.8, 139.0], [47.9, 139.0], [48.0, 139.0], [48.1, 139.0], [48.2, 139.0], [48.3, 139.0], [48.4, 139.0], [48.5, 139.0], [48.6, 139.0], [48.7, 139.0], [48.8, 139.0], [48.9, 139.0], [49.0, 139.0], [49.1, 139.0], [49.2, 139.0], [49.3, 139.0], [49.4, 139.0], [49.5, 139.0], [49.6, 139.0], [49.7, 139.0], [49.8, 139.0], [49.9, 139.0], [50.0, 139.0], [50.1, 139.0], [50.2, 139.0], [50.3, 139.0], [50.4, 139.0], [50.5, 139.0], [50.6, 139.0], [50.7, 139.0], [50.8, 139.0], [50.9, 139.0], [51.0, 139.0], [51.1, 139.0], [51.2, 139.0], [51.3, 139.0], [51.4, 139.0], [51.5, 139.0], [51.6, 139.0], [51.7, 139.0], [51.8, 139.0], [51.9, 139.0], [52.0, 139.0], [52.1, 139.0], [52.2, 139.0], [52.3, 139.0], [52.4, 139.0], [52.5, 139.0], [52.6, 139.0], [52.7, 139.0], [52.8, 139.0], [52.9, 139.0], [53.0, 139.0], [53.1, 139.0], [53.2, 139.0], [53.3, 139.0], [53.4, 139.0], [53.5, 139.0], [53.6, 139.0], [53.7, 139.0], [53.8, 139.0], [53.9, 139.0], [54.0, 139.0], [54.1, 139.0], [54.2, 139.0], [54.3, 139.0], [54.4, 139.0], [54.5, 139.0], [54.6, 139.0], [54.7, 139.0], [54.8, 139.0], [54.9, 139.0], [55.0, 139.0], [55.1, 139.0], [55.2, 139.0], [55.3, 139.0], [55.4, 139.0], [55.5, 139.0], [55.6, 139.0], [55.7, 139.0], [55.8, 139.0], [55.9, 139.0], [56.0, 139.0], [56.1, 139.0], [56.2, 139.0], [56.3, 139.0], [56.4, 139.0], [56.5, 139.0], [56.6, 139.0], [56.7, 139.0], [56.8, 139.0], [56.9, 139.0], [57.0, 139.0], [57.1, 139.0], [57.2, 139.0], [57.3, 139.0], [57.4, 139.0], [57.5, 139.0], [57.6, 139.0], [57.7, 139.0], [57.8, 139.0], [57.9, 139.0], [58.0, 139.0], [58.1, 139.0], [58.2, 139.0], [58.3, 139.0], [58.4, 139.0], [58.5, 139.0], [58.6, 139.0], [58.7, 139.0], [58.8, 139.0], [58.9, 139.0], [59.0, 139.0], [59.1, 139.0], [59.2, 139.0], [59.3, 139.0], [59.4, 139.0], [59.5, 139.0], [59.6, 139.0], [59.7, 139.0], [59.8, 139.0], [59.9, 139.0], [60.0, 139.0], [60.1, 139.0], [60.2, 139.0], [60.3, 139.0], [60.4, 139.0], [60.5, 139.0], [60.6, 139.0], [60.7, 139.0], [60.8, 139.0], [60.9, 139.0], [61.0, 139.0], [61.1, 139.0], [61.2, 139.0], [61.3, 139.0], [61.4, 139.0], [61.5, 139.0], [61.6, 139.0], [61.7, 139.0], [61.8, 139.0], [61.9, 139.0], [62.0, 139.0], [62.1, 139.0], [62.2, 139.0], [62.3, 139.0], [62.4, 139.0], [62.5, 139.0], [62.6, 139.0], [62.7, 139.0], [62.8, 139.0], [62.9, 139.0], [63.0, 139.0], [63.1, 139.0], [63.2, 139.0], [63.3, 139.0], [63.4, 139.0], [63.5, 139.0], [63.6, 139.0], [63.7, 139.0], [63.8, 139.0], [63.9, 139.0], [64.0, 139.0], [64.1, 139.0], [64.2, 139.0], [64.3, 139.0], [64.4, 139.0], [64.5, 139.0], [64.6, 139.0], [64.7, 139.0], [64.8, 139.0], [64.9, 139.0], [65.0, 139.0], [65.1, 139.0], [65.2, 139.0], [65.3, 139.0], [65.4, 139.0], [65.5, 139.0], [65.6, 139.0], [65.7, 139.0], [65.8, 139.0], [65.9, 139.0], [66.0, 139.0], [66.1, 139.0], [66.2, 139.0], [66.3, 139.0], [66.4, 139.0], [66.5, 139.0], [66.6, 139.0], [66.7, 139.0], [66.8, 139.0], [66.9, 139.0], [67.0, 139.0], [67.1, 140.0], [67.2, 140.0], [67.3, 140.0], [67.4, 140.0], [67.5, 140.0], [67.6, 140.0], [67.7, 140.0], [67.8, 140.0], [67.9, 140.0], [68.0, 140.0], [68.1, 140.0], [68.2, 140.0], [68.3, 140.0], [68.4, 140.0], [68.5, 140.0], [68.6, 140.0], [68.7, 140.0], [68.8, 140.0], [68.9, 140.0], [69.0, 140.0], [69.1, 140.0], [69.2, 140.0], [69.3, 140.0], [69.4, 140.0], [69.5, 140.0], [69.6, 140.0], [69.7, 140.0], [69.8, 140.0], [69.9, 140.0], [70.0, 140.0], [70.1, 140.0], [70.2, 140.0], [70.3, 140.0], [70.4, 140.0], [70.5, 140.0], [70.6, 140.0], [70.7, 140.0], [70.8, 140.0], [70.9, 140.0], [71.0, 140.0], [71.1, 140.0], [71.2, 140.0], [71.3, 140.0], [71.4, 140.0], [71.5, 140.0], [71.6, 140.0], [71.7, 140.0], [71.8, 140.0], [71.9, 140.0], [72.0, 140.0], [72.1, 140.0], [72.2, 140.0], [72.3, 140.0], [72.4, 140.0], [72.5, 140.0], [72.6, 140.0], [72.7, 140.0], [72.8, 140.0], [72.9, 140.0], [73.0, 140.0], [73.1, 140.0], [73.2, 140.0], [73.3, 140.0], [73.4, 140.0], [73.5, 140.0], [73.6, 140.0], [73.7, 140.0], [73.8, 140.0], [73.9, 140.0], [74.0, 140.0], [74.1, 140.0], [74.2, 140.0], [74.3, 140.0], [74.4, 140.0], [74.5, 140.0], [74.6, 140.0], [74.7, 140.0], [74.8, 140.0], [74.9, 140.0], [75.0, 140.0], [75.1, 140.0], [75.2, 140.0], [75.3, 140.0], [75.4, 140.0], [75.5, 140.0], [75.6, 140.0], [75.7, 140.0], [75.8, 140.0], [75.9, 140.0], [76.0, 140.0], [76.1, 140.0], [76.2, 140.0], [76.3, 140.0], [76.4, 140.0], [76.5, 140.0], [76.6, 140.0], [76.7, 140.0], [76.8, 140.0], [76.9, 140.0], [77.0, 140.0], [77.1, 140.0], [77.2, 140.0], [77.3, 140.0], [77.4, 140.0], [77.5, 140.0], [77.6, 140.0], [77.7, 140.0], [77.8, 140.0], [77.9, 140.0], [78.0, 140.0], [78.1, 140.0], [78.2, 140.0], [78.3, 140.0], [78.4, 140.0], [78.5, 140.0], [78.6, 140.0], [78.7, 140.0], [78.8, 140.0], [78.9, 140.0], [79.0, 140.0], [79.1, 140.0], [79.2, 140.0], [79.3, 140.0], [79.4, 140.0], [79.5, 140.0], [79.6, 140.0], [79.7, 140.0], [79.8, 140.0], [79.9, 140.0], [80.0, 140.0], [80.1, 140.0], [80.2, 140.0], [80.3, 140.0], [80.4, 140.0], [80.5, 140.0], [80.6, 140.0], [80.7, 140.0], [80.8, 140.0], [80.9, 140.0], [81.0, 140.0], [81.1, 140.0], [81.2, 140.0], [81.3, 140.0], [81.4, 140.0], [81.5, 140.0], [81.6, 140.0], [81.7, 140.0], [81.8, 140.0], [81.9, 140.0], [82.0, 140.0], [82.1, 141.0], [82.2, 141.0], [82.3, 141.0], [82.4, 141.0], [82.5, 141.0], [82.6, 141.0], [82.7, 141.0], [82.8, 141.0], [82.9, 141.0], [83.0, 141.0], [83.1, 141.0], [83.2, 141.0], [83.3, 141.0], [83.4, 141.0], [83.5, 141.0], [83.6, 141.0], [83.7, 141.0], [83.8, 141.0], [83.9, 141.0], [84.0, 141.0], [84.1, 141.0], [84.2, 141.0], [84.3, 141.0], [84.4, 141.0], [84.5, 141.0], [84.6, 141.0], [84.7, 141.0], [84.8, 141.0], [84.9, 141.0], [85.0, 141.0], [85.1, 141.0], [85.2, 141.0], [85.3, 141.0], [85.4, 141.0], [85.5, 141.0], [85.6, 141.0], [85.7, 141.0], [85.8, 141.0], [85.9, 141.0], [86.0, 141.0], [86.1, 141.0], [86.2, 141.0], [86.3, 141.0], [86.4, 141.0], [86.5, 141.0], [86.6, 141.0], [86.7, 141.0], [86.8, 141.0], [86.9, 141.0], [87.0, 141.0], [87.1, 142.0], [87.2, 142.0], [87.3, 142.0], [87.4, 142.0], [87.5, 142.0], [87.6, 142.0], [87.7, 142.0], [87.8, 142.0], [87.9, 142.0], [88.0, 142.0], [88.1, 142.0], [88.2, 143.0], [88.3, 144.0], [88.4, 148.0], [88.5, 149.0], [88.6, 150.0], [88.7, 150.0], [88.8, 150.0], [88.9, 151.0], [89.0, 151.0], [89.1, 151.0], [89.2, 151.0], [89.3, 151.0], [89.4, 152.0], [89.5, 152.0], [89.6, 152.0], [89.7, 152.0], [89.8, 152.0], [89.9, 152.0], [90.0, 152.0], [90.1, 152.0], [90.2, 152.0], [90.3, 152.0], [90.4, 153.0], [90.5, 153.0], [90.6, 153.0], [90.7, 153.0], [90.8, 153.0], [90.9, 153.0], [91.0, 153.0], [91.1, 153.0], [91.2, 153.0], [91.3, 153.0], [91.4, 153.0], [91.5, 153.0], [91.6, 153.0], [91.7, 153.0], [91.8, 154.0], [91.9, 154.0], [92.0, 154.0], [92.1, 154.0], [92.2, 154.0], [92.3, 155.0], [92.4, 155.0], [92.5, 156.0], [92.6, 156.0], [92.7, 156.0], [92.8, 163.0], [92.9, 165.0], [93.0, 166.0], [93.1, 166.0], [93.2, 166.0], [93.3, 167.0], [93.4, 168.0], [93.5, 178.0], [93.6, 178.0], [93.7, 181.0], [93.8, 183.0], [93.9, 195.0], [94.0, 204.0], [94.1, 210.0], [94.2, 215.0], [94.3, 230.0], [94.4, 233.0], [94.5, 243.0], [94.6, 243.0], [94.7, 243.0], [94.8, 244.0], [94.9, 244.0], [95.0, 245.0], [95.1, 245.0], [95.2, 253.0], [95.3, 260.0], [95.4, 260.0], [95.5, 263.0], [95.6, 324.0], [95.7, 340.0], [95.8, 364.0], [95.9, 371.0], [96.0, 385.0], [96.1, 388.0], [96.2, 409.0], [96.3, 411.0], [96.4, 424.0], [96.5, 456.0], [96.6, 458.0], [96.7, 459.0], [96.8, 459.0], [96.9, 460.0], [97.0, 460.0], [97.1, 460.0], [97.2, 480.0], [97.3, 496.0], [97.4, 543.0], [97.5, 543.0], [97.6, 544.0], [97.7, 544.0], [97.8, 569.0], [97.9, 570.0], [98.0, 1147.0], [98.1, 1149.0], [98.2, 1149.0], [98.3, 1149.0], [98.4, 1149.0], [98.5, 1149.0], [98.6, 1150.0], [98.7, 1150.0], [98.8, 1151.0], [98.9, 1152.0], [99.0, 1167.0], [99.1, 1439.0], [99.2, 1506.0], [99.3, 1614.0], [99.4, 1663.0], [99.5, 1745.0], [99.6, 1803.0], [99.7, 1847.0], [99.8, 1928.0], [99.9, 2270.0], [100.0, 2385.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 1265.0], [0.1, 1265.0], [0.2, 1265.0], [0.3, 1265.0], [0.4, 1265.0], [0.5, 1265.0], [0.6, 1265.0], [0.7, 1265.0], [0.8, 1265.0], [0.9, 1265.0], [1.0, 1271.0], [1.1, 1271.0], [1.2, 1271.0], [1.3, 1271.0], [1.4, 1271.0], [1.5, 1271.0], [1.6, 1271.0], [1.7, 1271.0], [1.8, 1271.0], [1.9, 1271.0], [2.0, 1272.0], [2.1, 1272.0], [2.2, 1272.0], [2.3, 1272.0], [2.4, 1272.0], [2.5, 1272.0], [2.6, 1272.0], [2.7, 1272.0], [2.8, 1272.0], [2.9, 1272.0], [3.0, 1281.0], [3.1, 1281.0], [3.2, 1281.0], [3.3, 1281.0], [3.4, 1281.0], [3.5, 1281.0], [3.6, 1281.0], [3.7, 1281.0], [3.8, 1281.0], [3.9, 1281.0], [4.0, 1282.0], [4.1, 1282.0], [4.2, 1282.0], [4.3, 1282.0], [4.4, 1282.0], [4.5, 1282.0], [4.6, 1282.0], [4.7, 1282.0], [4.8, 1282.0], [4.9, 1282.0], [5.0, 1293.0], [5.1, 1293.0], [5.2, 1293.0], [5.3, 1293.0], [5.4, 1293.0], [5.5, 1293.0], [5.6, 1293.0], [5.7, 1293.0], [5.8, 1293.0], [5.9, 1293.0], [6.0, 1302.0], [6.1, 1302.0], [6.2, 1302.0], [6.3, 1302.0], [6.4, 1302.0], [6.5, 1302.0], [6.6, 1302.0], [6.7, 1302.0], [6.8, 1302.0], [6.9, 1302.0], [7.0, 1309.0], [7.1, 1309.0], [7.2, 1309.0], [7.3, 1309.0], [7.4, 1309.0], [7.5, 1309.0], [7.6, 1309.0], [7.7, 1309.0], [7.8, 1309.0], [7.9, 1309.0], [8.0, 1312.0], [8.1, 1312.0], [8.2, 1312.0], [8.3, 1312.0], [8.4, 1312.0], [8.5, 1312.0], [8.6, 1312.0], [8.7, 1312.0], [8.8, 1312.0], [8.9, 1312.0], [9.0, 1312.0], [9.1, 1312.0], [9.2, 1312.0], [9.3, 1312.0], [9.4, 1312.0], [9.5, 1312.0], [9.6, 1312.0], [9.7, 1312.0], [9.8, 1312.0], [9.9, 1312.0], [10.0, 1332.0], [10.1, 1332.0], [10.2, 1332.0], [10.3, 1332.0], [10.4, 1332.0], [10.5, 1332.0], [10.6, 1332.0], [10.7, 1332.0], [10.8, 1332.0], [10.9, 1332.0], [11.0, 1335.0], [11.1, 1335.0], [11.2, 1335.0], [11.3, 1335.0], [11.4, 1335.0], [11.5, 1335.0], [11.6, 1335.0], [11.7, 1335.0], [11.8, 1335.0], [11.9, 1335.0], [12.0, 1344.0], [12.1, 1344.0], [12.2, 1344.0], [12.3, 1344.0], [12.4, 1344.0], [12.5, 1344.0], [12.6, 1344.0], [12.7, 1344.0], [12.8, 1344.0], [12.9, 1344.0], [13.0, 1352.0], [13.1, 1352.0], [13.2, 1352.0], [13.3, 1352.0], [13.4, 1352.0], [13.5, 1352.0], [13.6, 1352.0], [13.7, 1352.0], [13.8, 1352.0], [13.9, 1352.0], [14.0, 1371.0], [14.1, 1371.0], [14.2, 1371.0], [14.3, 1371.0], [14.4, 1371.0], [14.5, 1371.0], [14.6, 1371.0], [14.7, 1371.0], [14.8, 1371.0], [14.9, 1371.0], [15.0, 1380.0], [15.1, 1380.0], [15.2, 1380.0], [15.3, 1380.0], [15.4, 1380.0], [15.5, 1380.0], [15.6, 1380.0], [15.7, 1380.0], [15.8, 1380.0], [15.9, 1380.0], [16.0, 1397.0], [16.1, 1397.0], [16.2, 1397.0], [16.3, 1397.0], [16.4, 1397.0], [16.5, 1397.0], [16.6, 1397.0], [16.7, 1397.0], [16.8, 1397.0], [16.9, 1397.0], [17.0, 1408.0], [17.1, 1408.0], [17.2, 1408.0], [17.3, 1408.0], [17.4, 1408.0], [17.5, 1408.0], [17.6, 1408.0], [17.7, 1408.0], [17.8, 1408.0], [17.9, 1408.0], [18.0, 1412.0], [18.1, 1412.0], [18.2, 1412.0], [18.3, 1412.0], [18.4, 1412.0], [18.5, 1412.0], [18.6, 1412.0], [18.7, 1412.0], [18.8, 1412.0], [18.9, 1412.0], [19.0, 1424.0], [19.1, 1424.0], [19.2, 1424.0], [19.3, 1424.0], [19.4, 1424.0], [19.5, 1424.0], [19.6, 1424.0], [19.7, 1424.0], [19.8, 1424.0], [19.9, 1424.0], [20.0, 1437.0], [20.1, 1437.0], [20.2, 1437.0], [20.3, 1437.0], [20.4, 1437.0], [20.5, 1437.0], [20.6, 1437.0], [20.7, 1437.0], [20.8, 1437.0], [20.9, 1437.0], [21.0, 1444.0], [21.1, 1444.0], [21.2, 1444.0], [21.3, 1444.0], [21.4, 1444.0], [21.5, 1444.0], [21.6, 1444.0], [21.7, 1444.0], [21.8, 1444.0], [21.9, 1444.0], [22.0, 1461.0], [22.1, 1461.0], [22.2, 1461.0], [22.3, 1461.0], [22.4, 1461.0], [22.5, 1461.0], [22.6, 1461.0], [22.7, 1461.0], [22.8, 1461.0], [22.9, 1461.0], [23.0, 1473.0], [23.1, 1473.0], [23.2, 1473.0], [23.3, 1473.0], [23.4, 1473.0], [23.5, 1473.0], [23.6, 1473.0], [23.7, 1473.0], [23.8, 1473.0], [23.9, 1473.0], [24.0, 1476.0], [24.1, 1476.0], [24.2, 1476.0], [24.3, 1476.0], [24.4, 1476.0], [24.5, 1476.0], [24.6, 1476.0], [24.7, 1476.0], [24.8, 1476.0], [24.9, 1476.0], [25.0, 1477.0], [25.1, 1477.0], [25.2, 1477.0], [25.3, 1477.0], [25.4, 1477.0], [25.5, 1477.0], [25.6, 1477.0], [25.7, 1477.0], [25.8, 1477.0], [25.9, 1477.0], [26.0, 1480.0], [26.1, 1480.0], [26.2, 1480.0], [26.3, 1480.0], [26.4, 1480.0], [26.5, 1480.0], [26.6, 1480.0], [26.7, 1480.0], [26.8, 1480.0], [26.9, 1480.0], [27.0, 1481.0], [27.1, 1481.0], [27.2, 1481.0], [27.3, 1481.0], [27.4, 1481.0], [27.5, 1481.0], [27.6, 1481.0], [27.7, 1481.0], [27.8, 1481.0], [27.9, 1481.0], [28.0, 1483.0], [28.1, 1483.0], [28.2, 1483.0], [28.3, 1483.0], [28.4, 1483.0], [28.5, 1483.0], [28.6, 1483.0], [28.7, 1483.0], [28.8, 1483.0], [28.9, 1483.0], [29.0, 1512.0], [29.1, 1512.0], [29.2, 1512.0], [29.3, 1512.0], [29.4, 1512.0], [29.5, 1512.0], [29.6, 1512.0], [29.7, 1512.0], [29.8, 1512.0], [29.9, 1512.0], [30.0, 1519.0], [30.1, 1519.0], [30.2, 1519.0], [30.3, 1519.0], [30.4, 1519.0], [30.5, 1519.0], [30.6, 1519.0], [30.7, 1519.0], [30.8, 1519.0], [30.9, 1519.0], [31.0, 1522.0], [31.1, 1522.0], [31.2, 1522.0], [31.3, 1522.0], [31.4, 1522.0], [31.5, 1522.0], [31.6, 1522.0], [31.7, 1522.0], [31.8, 1522.0], [31.9, 1522.0], [32.0, 1522.0], [32.1, 1522.0], [32.2, 1522.0], [32.3, 1522.0], [32.4, 1522.0], [32.5, 1522.0], [32.6, 1522.0], [32.7, 1522.0], [32.8, 1522.0], [32.9, 1522.0], [33.0, 1526.0], [33.1, 1526.0], [33.2, 1526.0], [33.3, 1526.0], [33.4, 1526.0], [33.5, 1526.0], [33.6, 1526.0], [33.7, 1526.0], [33.8, 1526.0], [33.9, 1526.0], [34.0, 1550.0], [34.1, 1550.0], [34.2, 1550.0], [34.3, 1550.0], [34.4, 1550.0], [34.5, 1550.0], [34.6, 1550.0], [34.7, 1550.0], [34.8, 1550.0], [34.9, 1550.0], [35.0, 1557.0], [35.1, 1557.0], [35.2, 1557.0], [35.3, 1557.0], [35.4, 1557.0], [35.5, 1557.0], [35.6, 1557.0], [35.7, 1557.0], [35.8, 1557.0], [35.9, 1557.0], [36.0, 1566.0], [36.1, 1566.0], [36.2, 1566.0], [36.3, 1566.0], [36.4, 1566.0], [36.5, 1566.0], [36.6, 1566.0], [36.7, 1566.0], [36.8, 1566.0], [36.9, 1566.0], [37.0, 1570.0], [37.1, 1570.0], [37.2, 1570.0], [37.3, 1570.0], [37.4, 1570.0], [37.5, 1570.0], [37.6, 1570.0], [37.7, 1570.0], [37.8, 1570.0], [37.9, 1570.0], [38.0, 1579.0], [38.1, 1579.0], [38.2, 1579.0], [38.3, 1579.0], [38.4, 1579.0], [38.5, 1579.0], [38.6, 1579.0], [38.7, 1579.0], [38.8, 1579.0], [38.9, 1579.0], [39.0, 1581.0], [39.1, 1581.0], [39.2, 1581.0], [39.3, 1581.0], [39.4, 1581.0], [39.5, 1581.0], [39.6, 1581.0], [39.7, 1581.0], [39.8, 1581.0], [39.9, 1581.0], [40.0, 1587.0], [40.1, 1587.0], [40.2, 1587.0], [40.3, 1587.0], [40.4, 1587.0], [40.5, 1587.0], [40.6, 1587.0], [40.7, 1587.0], [40.8, 1587.0], [40.9, 1587.0], [41.0, 1596.0], [41.1, 1596.0], [41.2, 1596.0], [41.3, 1596.0], [41.4, 1596.0], [41.5, 1596.0], [41.6, 1596.0], [41.7, 1596.0], [41.8, 1596.0], [41.9, 1596.0], [42.0, 1612.0], [42.1, 1612.0], [42.2, 1612.0], [42.3, 1612.0], [42.4, 1612.0], [42.5, 1612.0], [42.6, 1612.0], [42.7, 1612.0], [42.8, 1612.0], [42.9, 1612.0], [43.0, 1613.0], [43.1, 1613.0], [43.2, 1613.0], [43.3, 1613.0], [43.4, 1613.0], [43.5, 1613.0], [43.6, 1613.0], [43.7, 1613.0], [43.8, 1613.0], [43.9, 1613.0], [44.0, 1622.0], [44.1, 1622.0], [44.2, 1622.0], [44.3, 1622.0], [44.4, 1622.0], [44.5, 1622.0], [44.6, 1622.0], [44.7, 1622.0], [44.8, 1622.0], [44.9, 1622.0], [45.0, 1639.0], [45.1, 1639.0], [45.2, 1639.0], [45.3, 1639.0], [45.4, 1639.0], [45.5, 1639.0], [45.6, 1639.0], [45.7, 1639.0], [45.8, 1639.0], [45.9, 1639.0], [46.0, 1645.0], [46.1, 1645.0], [46.2, 1645.0], [46.3, 1645.0], [46.4, 1645.0], [46.5, 1645.0], [46.6, 1645.0], [46.7, 1645.0], [46.8, 1645.0], [46.9, 1645.0], [47.0, 1654.0], [47.1, 1654.0], [47.2, 1654.0], [47.3, 1654.0], [47.4, 1654.0], [47.5, 1654.0], [47.6, 1654.0], [47.7, 1654.0], [47.8, 1654.0], [47.9, 1654.0], [48.0, 1658.0], [48.1, 1658.0], [48.2, 1658.0], [48.3, 1658.0], [48.4, 1658.0], [48.5, 1658.0], [48.6, 1658.0], [48.7, 1658.0], [48.8, 1658.0], [48.9, 1658.0], [49.0, 1659.0], [49.1, 1659.0], [49.2, 1659.0], [49.3, 1659.0], [49.4, 1659.0], [49.5, 1659.0], [49.6, 1659.0], [49.7, 1659.0], [49.8, 1659.0], [49.9, 1659.0], [50.0, 1659.0], [50.1, 1659.0], [50.2, 1659.0], [50.3, 1659.0], [50.4, 1659.0], [50.5, 1659.0], [50.6, 1659.0], [50.7, 1659.0], [50.8, 1659.0], [50.9, 1659.0], [51.0, 1660.0], [51.1, 1660.0], [51.2, 1660.0], [51.3, 1660.0], [51.4, 1660.0], [51.5, 1660.0], [51.6, 1660.0], [51.7, 1660.0], [51.8, 1660.0], [51.9, 1660.0], [52.0, 1663.0], [52.1, 1663.0], [52.2, 1663.0], [52.3, 1663.0], [52.4, 1663.0], [52.5, 1663.0], [52.6, 1663.0], [52.7, 1663.0], [52.8, 1663.0], [52.9, 1663.0], [53.0, 1671.0], [53.1, 1671.0], [53.2, 1671.0], [53.3, 1671.0], [53.4, 1671.0], [53.5, 1671.0], [53.6, 1671.0], [53.7, 1671.0], [53.8, 1671.0], [53.9, 1671.0], [54.0, 1671.0], [54.1, 1671.0], [54.2, 1671.0], [54.3, 1671.0], [54.4, 1671.0], [54.5, 1671.0], [54.6, 1671.0], [54.7, 1671.0], [54.8, 1671.0], [54.9, 1671.0], [55.0, 1677.0], [55.1, 1677.0], [55.2, 1677.0], [55.3, 1677.0], [55.4, 1677.0], [55.5, 1677.0], [55.6, 1677.0], [55.7, 1677.0], [55.8, 1677.0], [55.9, 1677.0], [56.0, 1678.0], [56.1, 1678.0], [56.2, 1678.0], [56.3, 1678.0], [56.4, 1678.0], [56.5, 1678.0], [56.6, 1678.0], [56.7, 1678.0], [56.8, 1678.0], [56.9, 1678.0], [57.0, 1685.0], [57.1, 1685.0], [57.2, 1685.0], [57.3, 1685.0], [57.4, 1685.0], [57.5, 1685.0], [57.6, 1685.0], [57.7, 1685.0], [57.8, 1685.0], [57.9, 1685.0], [58.0, 1688.0], [58.1, 1688.0], [58.2, 1688.0], [58.3, 1688.0], [58.4, 1688.0], [58.5, 1688.0], [58.6, 1688.0], [58.7, 1688.0], [58.8, 1688.0], [58.9, 1688.0], [59.0, 1690.0], [59.1, 1690.0], [59.2, 1690.0], [59.3, 1690.0], [59.4, 1690.0], [59.5, 1690.0], [59.6, 1690.0], [59.7, 1690.0], [59.8, 1690.0], [59.9, 1690.0], [60.0, 1696.0], [60.1, 1696.0], [60.2, 1696.0], [60.3, 1696.0], [60.4, 1696.0], [60.5, 1696.0], [60.6, 1696.0], [60.7, 1696.0], [60.8, 1696.0], [60.9, 1696.0], [61.0, 1703.0], [61.1, 1703.0], [61.2, 1703.0], [61.3, 1703.0], [61.4, 1703.0], [61.5, 1703.0], [61.6, 1703.0], [61.7, 1703.0], [61.8, 1703.0], [61.9, 1703.0], [62.0, 1707.0], [62.1, 1707.0], [62.2, 1707.0], [62.3, 1707.0], [62.4, 1707.0], [62.5, 1707.0], [62.6, 1707.0], [62.7, 1707.0], [62.8, 1707.0], [62.9, 1707.0], [63.0, 1707.0], [63.1, 1707.0], [63.2, 1707.0], [63.3, 1707.0], [63.4, 1707.0], [63.5, 1707.0], [63.6, 1707.0], [63.7, 1707.0], [63.8, 1707.0], [63.9, 1707.0], [64.0, 1708.0], [64.1, 1708.0], [64.2, 1708.0], [64.3, 1708.0], [64.4, 1708.0], [64.5, 1708.0], [64.6, 1708.0], [64.7, 1708.0], [64.8, 1708.0], [64.9, 1708.0], [65.0, 1709.0], [65.1, 1709.0], [65.2, 1709.0], [65.3, 1709.0], [65.4, 1709.0], [65.5, 1709.0], [65.6, 1709.0], [65.7, 1709.0], [65.8, 1709.0], [65.9, 1709.0], [66.0, 1717.0], [66.1, 1717.0], [66.2, 1717.0], [66.3, 1717.0], [66.4, 1717.0], [66.5, 1717.0], [66.6, 1717.0], [66.7, 1717.0], [66.8, 1717.0], [66.9, 1717.0], [67.0, 1719.0], [67.1, 1719.0], [67.2, 1719.0], [67.3, 1719.0], [67.4, 1719.0], [67.5, 1719.0], [67.6, 1719.0], [67.7, 1719.0], [67.8, 1719.0], [67.9, 1719.0], [68.0, 1721.0], [68.1, 1721.0], [68.2, 1721.0], [68.3, 1721.0], [68.4, 1721.0], [68.5, 1721.0], [68.6, 1721.0], [68.7, 1721.0], [68.8, 1721.0], [68.9, 1721.0], [69.0, 1722.0], [69.1, 1722.0], [69.2, 1722.0], [69.3, 1722.0], [69.4, 1722.0], [69.5, 1722.0], [69.6, 1722.0], [69.7, 1722.0], [69.8, 1722.0], [69.9, 1722.0], [70.0, 1725.0], [70.1, 1725.0], [70.2, 1725.0], [70.3, 1725.0], [70.4, 1725.0], [70.5, 1725.0], [70.6, 1725.0], [70.7, 1725.0], [70.8, 1725.0], [70.9, 1725.0], [71.0, 1726.0], [71.1, 1726.0], [71.2, 1726.0], [71.3, 1726.0], [71.4, 1726.0], [71.5, 1726.0], [71.6, 1726.0], [71.7, 1726.0], [71.8, 1726.0], [71.9, 1726.0], [72.0, 1733.0], [72.1, 1733.0], [72.2, 1733.0], [72.3, 1733.0], [72.4, 1733.0], [72.5, 1733.0], [72.6, 1733.0], [72.7, 1733.0], [72.8, 1733.0], [72.9, 1733.0], [73.0, 1733.0], [73.1, 1733.0], [73.2, 1733.0], [73.3, 1733.0], [73.4, 1733.0], [73.5, 1733.0], [73.6, 1733.0], [73.7, 1733.0], [73.8, 1733.0], [73.9, 1733.0], [74.0, 1733.0], [74.1, 1733.0], [74.2, 1733.0], [74.3, 1733.0], [74.4, 1733.0], [74.5, 1733.0], [74.6, 1733.0], [74.7, 1733.0], [74.8, 1733.0], [74.9, 1733.0], [75.0, 1738.0], [75.1, 1738.0], [75.2, 1738.0], [75.3, 1738.0], [75.4, 1738.0], [75.5, 1738.0], [75.6, 1738.0], [75.7, 1738.0], [75.8, 1738.0], [75.9, 1738.0], [76.0, 1740.0], [76.1, 1740.0], [76.2, 1740.0], [76.3, 1740.0], [76.4, 1740.0], [76.5, 1740.0], [76.6, 1740.0], [76.7, 1740.0], [76.8, 1740.0], [76.9, 1740.0], [77.0, 1740.0], [77.1, 1740.0], [77.2, 1740.0], [77.3, 1740.0], [77.4, 1740.0], [77.5, 1740.0], [77.6, 1740.0], [77.7, 1740.0], [77.8, 1740.0], [77.9, 1740.0], [78.0, 1747.0], [78.1, 1747.0], [78.2, 1747.0], [78.3, 1747.0], [78.4, 1747.0], [78.5, 1747.0], [78.6, 1747.0], [78.7, 1747.0], [78.8, 1747.0], [78.9, 1747.0], [79.0, 1748.0], [79.1, 1748.0], [79.2, 1748.0], [79.3, 1748.0], [79.4, 1748.0], [79.5, 1748.0], [79.6, 1748.0], [79.7, 1748.0], [79.8, 1748.0], [79.9, 1748.0], [80.0, 1763.0], [80.1, 1763.0], [80.2, 1763.0], [80.3, 1763.0], [80.4, 1763.0], [80.5, 1763.0], [80.6, 1763.0], [80.7, 1763.0], [80.8, 1763.0], [80.9, 1763.0], [81.0, 1776.0], [81.1, 1776.0], [81.2, 1776.0], [81.3, 1776.0], [81.4, 1776.0], [81.5, 1776.0], [81.6, 1776.0], [81.7, 1776.0], [81.8, 1776.0], [81.9, 1776.0], [82.0, 1802.0], [82.1, 1802.0], [82.2, 1802.0], [82.3, 1802.0], [82.4, 1802.0], [82.5, 1802.0], [82.6, 1802.0], [82.7, 1802.0], [82.8, 1802.0], [82.9, 1802.0], [83.0, 2071.0], [83.1, 2071.0], [83.2, 2071.0], [83.3, 2071.0], [83.4, 2071.0], [83.5, 2071.0], [83.6, 2071.0], [83.7, 2071.0], [83.8, 2071.0], [83.9, 2071.0], [84.0, 2091.0], [84.1, 2091.0], [84.2, 2091.0], [84.3, 2091.0], [84.4, 2091.0], [84.5, 2091.0], [84.6, 2091.0], [84.7, 2091.0], [84.8, 2091.0], [84.9, 2091.0], [85.0, 2094.0], [85.1, 2094.0], [85.2, 2094.0], [85.3, 2094.0], [85.4, 2094.0], [85.5, 2094.0], [85.6, 2094.0], [85.7, 2094.0], [85.8, 2094.0], [85.9, 2094.0], [86.0, 2100.0], [86.1, 2100.0], [86.2, 2100.0], [86.3, 2100.0], [86.4, 2100.0], [86.5, 2100.0], [86.6, 2100.0], [86.7, 2100.0], [86.8, 2100.0], [86.9, 2100.0], [87.0, 2115.0], [87.1, 2115.0], [87.2, 2115.0], [87.3, 2115.0], [87.4, 2115.0], [87.5, 2115.0], [87.6, 2115.0], [87.7, 2115.0], [87.8, 2115.0], [87.9, 2115.0], [88.0, 2116.0], [88.1, 2116.0], [88.2, 2116.0], [88.3, 2116.0], [88.4, 2116.0], [88.5, 2116.0], [88.6, 2116.0], [88.7, 2116.0], [88.8, 2116.0], [88.9, 2116.0], [89.0, 2147.0], [89.1, 2147.0], [89.2, 2147.0], [89.3, 2147.0], [89.4, 2147.0], [89.5, 2147.0], [89.6, 2147.0], [89.7, 2147.0], [89.8, 2147.0], [89.9, 2147.0], [90.0, 2151.0], [90.1, 2151.0], [90.2, 2151.0], [90.3, 2151.0], [90.4, 2151.0], [90.5, 2151.0], [90.6, 2151.0], [90.7, 2151.0], [90.8, 2151.0], [90.9, 2151.0], [91.0, 2158.0], [91.1, 2158.0], [91.2, 2158.0], [91.3, 2158.0], [91.4, 2158.0], [91.5, 2158.0], [91.6, 2158.0], [91.7, 2158.0], [91.8, 2158.0], [91.9, 2158.0], [92.0, 2177.0], [92.1, 2177.0], [92.2, 2177.0], [92.3, 2177.0], [92.4, 2177.0], [92.5, 2177.0], [92.6, 2177.0], [92.7, 2177.0], [92.8, 2177.0], [92.9, 2177.0], [93.0, 2203.0], [93.1, 2203.0], [93.2, 2203.0], [93.3, 2203.0], [93.4, 2203.0], [93.5, 2203.0], [93.6, 2203.0], [93.7, 2203.0], [93.8, 2203.0], [93.9, 2203.0], [94.0, 2208.0], [94.1, 2208.0], [94.2, 2208.0], [94.3, 2208.0], [94.4, 2208.0], [94.5, 2208.0], [94.6, 2208.0], [94.7, 2208.0], [94.8, 2208.0], [94.9, 2208.0], [95.0, 2214.0], [95.1, 2214.0], [95.2, 2214.0], [95.3, 2214.0], [95.4, 2214.0], [95.5, 2214.0], [95.6, 2214.0], [95.7, 2214.0], [95.8, 2214.0], [95.9, 2214.0], [96.0, 2215.0], [96.1, 2215.0], [96.2, 2215.0], [96.3, 2215.0], [96.4, 2215.0], [96.5, 2215.0], [96.6, 2215.0], [96.7, 2215.0], [96.8, 2215.0], [96.9, 2215.0], [97.0, 2240.0], [97.1, 2240.0], [97.2, 2240.0], [97.3, 2240.0], [97.4, 2240.0], [97.5, 2240.0], [97.6, 2240.0], [97.7, 2240.0], [97.8, 2240.0], [97.9, 2240.0], [98.0, 2249.0], [98.1, 2249.0], [98.2, 2249.0], [98.3, 2249.0], [98.4, 2249.0], [98.5, 2249.0], [98.6, 2249.0], [98.7, 2249.0], [98.8, 2249.0], [98.9, 2249.0], [99.0, 2324.0], [99.1, 2324.0], [99.2, 2324.0], [99.3, 2324.0], [99.4, 2324.0], [99.5, 2324.0], [99.6, 2324.0], [99.7, 2324.0], [99.8, 2324.0], [99.9, 2324.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 1251.0], [0.1, 1251.0], [0.2, 1257.0], [0.3, 1257.0], [0.4, 1257.0], [0.5, 1257.0], [0.6, 1257.0], [0.7, 1257.0], [0.8, 1259.0], [0.9, 1259.0], [1.0, 1260.0], [1.1, 1260.0], [1.2, 1261.0], [1.3, 1261.0], [1.4, 1261.0], [1.5, 1261.0], [1.6, 1262.0], [1.7, 1262.0], [1.8, 1262.0], [1.9, 1262.0], [2.0, 1264.0], [2.1, 1264.0], [2.2, 1265.0], [2.3, 1265.0], [2.4, 1265.0], [2.5, 1266.0], [2.6, 1266.0], [2.7, 1266.0], [2.8, 1266.0], [2.9, 1266.0], [3.0, 1266.0], [3.1, 1266.0], [3.2, 1266.0], [3.3, 1266.0], [3.4, 1266.0], [3.5, 1267.0], [3.6, 1267.0], [3.7, 1269.0], [3.8, 1269.0], [3.9, 1271.0], [4.0, 1271.0], [4.1, 1272.0], [4.2, 1272.0], [4.3, 1272.0], [4.4, 1272.0], [4.5, 1272.0], [4.6, 1272.0], [4.7, 1273.0], [4.8, 1273.0], [4.9, 1275.0], [5.0, 1275.0], [5.1, 1275.0], [5.2, 1275.0], [5.3, 1275.0], [5.4, 1276.0], [5.5, 1276.0], [5.6, 1276.0], [5.7, 1277.0], [5.8, 1277.0], [5.9, 1277.0], [6.0, 1277.0], [6.1, 1278.0], [6.2, 1278.0], [6.3, 1279.0], [6.4, 1279.0], [6.5, 1279.0], [6.6, 1279.0], [6.7, 1279.0], [6.8, 1279.0], [6.9, 1279.0], [7.0, 1279.0], [7.1, 1280.0], [7.2, 1280.0], [7.3, 1281.0], [7.4, 1281.0], [7.5, 1282.0], [7.6, 1282.0], [7.7, 1282.0], [7.8, 1282.0], [7.9, 1283.0], [8.0, 1283.0], [8.1, 1283.0], [8.2, 1283.0], [8.3, 1284.0], [8.4, 1285.0], [8.5, 1285.0], [8.6, 1286.0], [8.7, 1286.0], [8.8, 1287.0], [8.9, 1287.0], [9.0, 1288.0], [9.1, 1288.0], [9.2, 1288.0], [9.3, 1288.0], [9.4, 1289.0], [9.5, 1289.0], [9.6, 1289.0], [9.7, 1289.0], [9.8, 1291.0], [9.9, 1291.0], [10.0, 1291.0], [10.1, 1291.0], [10.2, 1292.0], [10.3, 1292.0], [10.4, 1293.0], [10.5, 1293.0], [10.6, 1293.0], [10.7, 1293.0], [10.8, 1293.0], [10.9, 1293.0], [11.0, 1294.0], [11.1, 1294.0], [11.2, 1294.0], [11.3, 1294.0], [11.4, 1294.0], [11.5, 1294.0], [11.6, 1294.0], [11.7, 1294.0], [11.8, 1295.0], [11.9, 1295.0], [12.0, 1295.0], [12.1, 1295.0], [12.2, 1295.0], [12.3, 1295.0], [12.4, 1295.0], [12.5, 1295.0], [12.6, 1296.0], [12.7, 1296.0], [12.8, 1296.0], [12.9, 1296.0], [13.0, 1297.0], [13.1, 1297.0], [13.2, 1298.0], [13.3, 1298.0], [13.4, 1298.0], [13.5, 1298.0], [13.6, 1298.0], [13.7, 1298.0], [13.8, 1299.0], [13.9, 1299.0], [14.0, 1299.0], [14.1, 1299.0], [14.2, 1300.0], [14.3, 1300.0], [14.4, 1301.0], [14.5, 1301.0], [14.6, 1302.0], [14.7, 1302.0], [14.8, 1302.0], [14.9, 1302.0], [15.0, 1302.0], [15.1, 1302.0], [15.2, 1303.0], [15.3, 1303.0], [15.4, 1303.0], [15.5, 1303.0], [15.6, 1304.0], [15.7, 1304.0], [15.8, 1304.0], [15.9, 1304.0], [16.0, 1305.0], [16.1, 1305.0], [16.2, 1306.0], [16.3, 1306.0], [16.4, 1307.0], [16.5, 1307.0], [16.6, 1308.0], [16.7, 1308.0], [16.8, 1309.0], [16.9, 1309.0], [17.0, 1309.0], [17.1, 1309.0], [17.2, 1309.0], [17.3, 1309.0], [17.4, 1309.0], [17.5, 1309.0], [17.6, 1309.0], [17.7, 1309.0], [17.8, 1309.0], [17.9, 1309.0], [18.0, 1309.0], [18.1, 1309.0], [18.2, 1309.0], [18.3, 1309.0], [18.4, 1310.0], [18.5, 1310.0], [18.6, 1310.0], [18.7, 1310.0], [18.8, 1311.0], [18.9, 1311.0], [19.0, 1311.0], [19.1, 1311.0], [19.2, 1311.0], [19.3, 1311.0], [19.4, 1312.0], [19.5, 1312.0], [19.6, 1312.0], [19.7, 1312.0], [19.8, 1312.0], [19.9, 1312.0], [20.0, 1312.0], [20.1, 1312.0], [20.2, 1312.0], [20.3, 1312.0], [20.4, 1313.0], [20.5, 1313.0], [20.6, 1314.0], [20.7, 1314.0], [20.8, 1314.0], [20.9, 1314.0], [21.0, 1315.0], [21.1, 1315.0], [21.2, 1315.0], [21.3, 1315.0], [21.4, 1315.0], [21.5, 1315.0], [21.6, 1316.0], [21.7, 1316.0], [21.8, 1317.0], [21.9, 1317.0], [22.0, 1317.0], [22.1, 1317.0], [22.2, 1318.0], [22.3, 1318.0], [22.4, 1319.0], [22.5, 1319.0], [22.6, 1319.0], [22.7, 1319.0], [22.8, 1319.0], [22.9, 1319.0], [23.0, 1320.0], [23.1, 1320.0], [23.2, 1322.0], [23.3, 1322.0], [23.4, 1323.0], [23.5, 1323.0], [23.6, 1323.0], [23.7, 1323.0], [23.8, 1324.0], [23.9, 1324.0], [24.0, 1326.0], [24.1, 1326.0], [24.2, 1327.0], [24.3, 1327.0], [24.4, 1328.0], [24.5, 1328.0], [24.6, 1329.0], [24.7, 1329.0], [24.8, 1329.0], [24.9, 1329.0], [25.0, 1330.0], [25.1, 1330.0], [25.2, 1331.0], [25.3, 1331.0], [25.4, 1331.0], [25.5, 1331.0], [25.6, 1332.0], [25.7, 1332.0], [25.8, 1332.0], [25.9, 1332.0], [26.0, 1332.0], [26.1, 1332.0], [26.2, 1333.0], [26.3, 1333.0], [26.4, 1334.0], [26.5, 1334.0], [26.6, 1334.0], [26.7, 1334.0], [26.8, 1334.0], [26.9, 1334.0], [27.0, 1334.0], [27.1, 1334.0], [27.2, 1335.0], [27.3, 1335.0], [27.4, 1335.0], [27.5, 1335.0], [27.6, 1336.0], [27.7, 1336.0], [27.8, 1337.0], [27.9, 1337.0], [28.0, 1337.0], [28.1, 1337.0], [28.2, 1337.0], [28.3, 1337.0], [28.4, 1337.0], [28.5, 1337.0], [28.6, 1339.0], [28.7, 1339.0], [28.8, 1339.0], [28.9, 1339.0], [29.0, 1339.0], [29.1, 1339.0], [29.2, 1339.0], [29.3, 1339.0], [29.4, 1340.0], [29.5, 1340.0], [29.6, 1341.0], [29.7, 1341.0], [29.8, 1341.0], [29.9, 1341.0], [30.0, 1341.0], [30.1, 1341.0], [30.2, 1341.0], [30.3, 1341.0], [30.4, 1341.0], [30.5, 1341.0], [30.6, 1342.0], [30.7, 1342.0], [30.8, 1342.0], [30.9, 1342.0], [31.0, 1342.0], [31.1, 1342.0], [31.2, 1342.0], [31.3, 1342.0], [31.4, 1343.0], [31.5, 1343.0], [31.6, 1343.0], [31.7, 1343.0], [31.8, 1343.0], [31.9, 1343.0], [32.0, 1343.0], [32.1, 1343.0], [32.2, 1343.0], [32.3, 1343.0], [32.4, 1344.0], [32.5, 1344.0], [32.6, 1344.0], [32.7, 1344.0], [32.8, 1344.0], [32.9, 1344.0], [33.0, 1345.0], [33.1, 1345.0], [33.2, 1345.0], [33.3, 1345.0], [33.4, 1346.0], [33.5, 1346.0], [33.6, 1346.0], [33.7, 1346.0], [33.8, 1348.0], [33.9, 1348.0], [34.0, 1350.0], [34.1, 1350.0], [34.2, 1351.0], [34.3, 1351.0], [34.4, 1352.0], [34.5, 1352.0], [34.6, 1353.0], [34.7, 1353.0], [34.8, 1353.0], [34.9, 1353.0], [35.0, 1354.0], [35.1, 1354.0], [35.2, 1354.0], [35.3, 1354.0], [35.4, 1355.0], [35.5, 1355.0], [35.6, 1356.0], [35.7, 1356.0], [35.8, 1356.0], [35.9, 1357.0], [36.0, 1357.0], [36.1, 1358.0], [36.2, 1358.0], [36.3, 1358.0], [36.4, 1358.0], [36.5, 1359.0], [36.6, 1359.0], [36.7, 1360.0], [36.8, 1360.0], [36.9, 1360.0], [37.0, 1360.0], [37.1, 1361.0], [37.2, 1361.0], [37.3, 1362.0], [37.4, 1362.0], [37.5, 1362.0], [37.6, 1362.0], [37.7, 1363.0], [37.8, 1363.0], [37.9, 1363.0], [38.0, 1363.0], [38.1, 1364.0], [38.2, 1364.0], [38.3, 1365.0], [38.4, 1365.0], [38.5, 1365.0], [38.6, 1365.0], [38.7, 1365.0], [38.8, 1365.0], [38.9, 1366.0], [39.0, 1366.0], [39.1, 1367.0], [39.2, 1367.0], [39.3, 1369.0], [39.4, 1369.0], [39.5, 1369.0], [39.6, 1369.0], [39.7, 1370.0], [39.8, 1370.0], [39.9, 1370.0], [40.0, 1370.0], [40.1, 1373.0], [40.2, 1373.0], [40.3, 1375.0], [40.4, 1375.0], [40.5, 1377.0], [40.6, 1377.0], [40.7, 1379.0], [40.8, 1379.0], [40.9, 1379.0], [41.0, 1379.0], [41.1, 1381.0], [41.2, 1381.0], [41.3, 1387.0], [41.4, 1387.0], [41.5, 1388.0], [41.6, 1388.0], [41.7, 1388.0], [41.8, 1388.0], [41.9, 1389.0], [42.0, 1389.0], [42.1, 1391.0], [42.2, 1391.0], [42.3, 1391.0], [42.4, 1391.0], [42.5, 1393.0], [42.6, 1393.0], [42.7, 1396.0], [42.8, 1396.0], [42.9, 1398.0], [43.0, 1398.0], [43.1, 1400.0], [43.2, 1400.0], [43.3, 1402.0], [43.4, 1402.0], [43.5, 1404.0], [43.6, 1404.0], [43.7, 1406.0], [43.8, 1406.0], [43.9, 1406.0], [44.0, 1406.0], [44.1, 1408.0], [44.2, 1408.0], [44.3, 1411.0], [44.4, 1411.0], [44.5, 1413.0], [44.6, 1413.0], [44.7, 1414.0], [44.8, 1414.0], [44.9, 1415.0], [45.0, 1415.0], [45.1, 1416.0], [45.2, 1416.0], [45.3, 1418.0], [45.4, 1418.0], [45.5, 1418.0], [45.6, 1418.0], [45.7, 1418.0], [45.8, 1418.0], [45.9, 1418.0], [46.0, 1418.0], [46.1, 1422.0], [46.2, 1422.0], [46.3, 1425.0], [46.4, 1425.0], [46.5, 1429.0], [46.6, 1429.0], [46.7, 1430.0], [46.8, 1430.0], [46.9, 1433.0], [47.0, 1433.0], [47.1, 1433.0], [47.2, 1433.0], [47.3, 1433.0], [47.4, 1433.0], [47.5, 1442.0], [47.6, 1442.0], [47.7, 1444.0], [47.8, 1444.0], [47.9, 1444.0], [48.0, 1444.0], [48.1, 1444.0], [48.2, 1444.0], [48.3, 1451.0], [48.4, 1451.0], [48.5, 1453.0], [48.6, 1453.0], [48.7, 1454.0], [48.8, 1454.0], [48.9, 1463.0], [49.0, 1463.0], [49.1, 1468.0], [49.2, 1468.0], [49.3, 1470.0], [49.4, 1470.0], [49.5, 1471.0], [49.6, 1471.0], [49.7, 1473.0], [49.8, 1473.0], [49.9, 1475.0], [50.0, 1475.0], [50.1, 1477.0], [50.2, 1477.0], [50.3, 1478.0], [50.4, 1478.0], [50.5, 1479.0], [50.6, 1479.0], [50.7, 1481.0], [50.8, 1481.0], [50.9, 1481.0], [51.0, 1481.0], [51.1, 1484.0], [51.2, 1484.0], [51.3, 1485.0], [51.4, 1485.0], [51.5, 1490.0], [51.6, 1490.0], [51.7, 1490.0], [51.8, 1490.0], [51.9, 1493.0], [52.0, 1493.0], [52.1, 1496.0], [52.2, 1496.0], [52.3, 1505.0], [52.4, 1505.0], [52.5, 1505.0], [52.6, 1505.0], [52.7, 1507.0], [52.8, 1507.0], [52.9, 1507.0], [53.0, 1507.0], [53.1, 1508.0], [53.2, 1508.0], [53.3, 1509.0], [53.4, 1509.0], [53.5, 1512.0], [53.6, 1512.0], [53.7, 1512.0], [53.8, 1512.0], [53.9, 1515.0], [54.0, 1515.0], [54.1, 1517.0], [54.2, 1517.0], [54.3, 1518.0], [54.4, 1518.0], [54.5, 1518.0], [54.6, 1518.0], [54.7, 1519.0], [54.8, 1519.0], [54.9, 1522.0], [55.0, 1522.0], [55.1, 1523.0], [55.2, 1523.0], [55.3, 1525.0], [55.4, 1525.0], [55.5, 1528.0], [55.6, 1528.0], [55.7, 1530.0], [55.8, 1530.0], [55.9, 1533.0], [56.0, 1533.0], [56.1, 1536.0], [56.2, 1536.0], [56.3, 1537.0], [56.4, 1537.0], [56.5, 1539.0], [56.6, 1539.0], [56.7, 1539.0], [56.8, 1539.0], [56.9, 1540.0], [57.0, 1540.0], [57.1, 1541.0], [57.2, 1541.0], [57.3, 1545.0], [57.4, 1545.0], [57.5, 1551.0], [57.6, 1551.0], [57.7, 1557.0], [57.8, 1557.0], [57.9, 1560.0], [58.0, 1560.0], [58.1, 1565.0], [58.2, 1565.0], [58.3, 1566.0], [58.4, 1566.0], [58.5, 1567.0], [58.6, 1567.0], [58.7, 1567.0], [58.8, 1567.0], [58.9, 1567.0], [59.0, 1567.0], [59.1, 1568.0], [59.2, 1568.0], [59.3, 1571.0], [59.4, 1571.0], [59.5, 1573.0], [59.6, 1573.0], [59.7, 1581.0], [59.8, 1581.0], [59.9, 1581.0], [60.0, 1581.0], [60.1, 1582.0], [60.2, 1582.0], [60.3, 1584.0], [60.4, 1584.0], [60.5, 1584.0], [60.6, 1584.0], [60.7, 1590.0], [60.8, 1590.0], [60.9, 1592.0], [61.0, 1592.0], [61.1, 1593.0], [61.2, 1593.0], [61.3, 1594.0], [61.4, 1594.0], [61.5, 1594.0], [61.6, 1594.0], [61.7, 1596.0], [61.8, 1596.0], [61.9, 1597.0], [62.0, 1597.0], [62.1, 1597.0], [62.2, 1597.0], [62.3, 1598.0], [62.4, 1598.0], [62.5, 1599.0], [62.6, 1599.0], [62.7, 1600.0], [62.8, 1600.0], [62.9, 1600.0], [63.0, 1600.0], [63.1, 1602.0], [63.2, 1602.0], [63.3, 1602.0], [63.4, 1602.0], [63.5, 1610.0], [63.6, 1610.0], [63.7, 1614.0], [63.8, 1614.0], [63.9, 1614.0], [64.0, 1614.0], [64.1, 1614.0], [64.2, 1614.0], [64.3, 1616.0], [64.4, 1616.0], [64.5, 1617.0], [64.6, 1617.0], [64.7, 1619.0], [64.8, 1619.0], [64.9, 1620.0], [65.0, 1620.0], [65.1, 1624.0], [65.2, 1624.0], [65.3, 1628.0], [65.4, 1628.0], [65.5, 1630.0], [65.6, 1630.0], [65.7, 1631.0], [65.8, 1631.0], [65.9, 1632.0], [66.0, 1632.0], [66.1, 1633.0], [66.2, 1633.0], [66.3, 1635.0], [66.4, 1635.0], [66.5, 1636.0], [66.6, 1636.0], [66.7, 1636.0], [66.8, 1636.0], [66.9, 1646.0], [67.0, 1646.0], [67.1, 1647.0], [67.2, 1647.0], [67.3, 1648.0], [67.4, 1648.0], [67.5, 1649.0], [67.6, 1649.0], [67.7, 1649.0], [67.8, 1649.0], [67.9, 1651.0], [68.0, 1651.0], [68.1, 1652.0], [68.2, 1652.0], [68.3, 1652.0], [68.4, 1652.0], [68.5, 1654.0], [68.6, 1654.0], [68.7, 1656.0], [68.8, 1656.0], [68.9, 1656.0], [69.0, 1656.0], [69.1, 1658.0], [69.2, 1658.0], [69.3, 1658.0], [69.4, 1658.0], [69.5, 1659.0], [69.6, 1659.0], [69.7, 1659.0], [69.8, 1659.0], [69.9, 1660.0], [70.0, 1660.0], [70.1, 1660.0], [70.2, 1660.0], [70.3, 1662.0], [70.4, 1662.0], [70.5, 1663.0], [70.6, 1663.0], [70.7, 1664.0], [70.8, 1664.0], [70.9, 1664.0], [71.0, 1664.0], [71.1, 1665.0], [71.2, 1665.0], [71.3, 1666.0], [71.4, 1666.0], [71.5, 1673.0], [71.6, 1673.0], [71.7, 1674.0], [71.8, 1674.0], [71.9, 1675.0], [72.0, 1675.0], [72.1, 1678.0], [72.2, 1678.0], [72.3, 1680.0], [72.4, 1680.0], [72.5, 1681.0], [72.6, 1681.0], [72.7, 1685.0], [72.8, 1685.0], [72.9, 1688.0], [73.0, 1688.0], [73.1, 1689.0], [73.2, 1689.0], [73.3, 1690.0], [73.4, 1690.0], [73.5, 1693.0], [73.6, 1693.0], [73.7, 1696.0], [73.8, 1696.0], [73.9, 1696.0], [74.0, 1696.0], [74.1, 1697.0], [74.2, 1697.0], [74.3, 1698.0], [74.4, 1698.0], [74.5, 1703.0], [74.6, 1703.0], [74.7, 1704.0], [74.8, 1704.0], [74.9, 1704.0], [75.0, 1704.0], [75.1, 1706.0], [75.2, 1706.0], [75.3, 1706.0], [75.4, 1706.0], [75.5, 1709.0], [75.6, 1709.0], [75.7, 1710.0], [75.8, 1710.0], [75.9, 1712.0], [76.0, 1712.0], [76.1, 1713.0], [76.2, 1713.0], [76.3, 1713.0], [76.4, 1713.0], [76.5, 1715.0], [76.6, 1715.0], [76.7, 1715.0], [76.8, 1715.0], [76.9, 1716.0], [77.0, 1716.0], [77.1, 1717.0], [77.2, 1717.0], [77.3, 1718.0], [77.4, 1718.0], [77.5, 1719.0], [77.6, 1719.0], [77.7, 1720.0], [77.8, 1720.0], [77.9, 1720.0], [78.0, 1720.0], [78.1, 1722.0], [78.2, 1722.0], [78.3, 1722.0], [78.4, 1722.0], [78.5, 1723.0], [78.6, 1723.0], [78.7, 1723.0], [78.8, 1723.0], [78.9, 1723.0], [79.0, 1723.0], [79.1, 1723.0], [79.2, 1723.0], [79.3, 1723.0], [79.4, 1723.0], [79.5, 1723.0], [79.6, 1723.0], [79.7, 1723.0], [79.8, 1723.0], [79.9, 1724.0], [80.0, 1724.0], [80.1, 1726.0], [80.2, 1726.0], [80.3, 1727.0], [80.4, 1727.0], [80.5, 1727.0], [80.6, 1727.0], [80.7, 1728.0], [80.8, 1728.0], [80.9, 1728.0], [81.0, 1728.0], [81.1, 1728.0], [81.2, 1728.0], [81.3, 1728.0], [81.4, 1728.0], [81.5, 1730.0], [81.6, 1730.0], [81.7, 1732.0], [81.8, 1732.0], [81.9, 1733.0], [82.0, 1733.0], [82.1, 1734.0], [82.2, 1734.0], [82.3, 1738.0], [82.4, 1738.0], [82.5, 1745.0], [82.6, 1745.0], [82.7, 1745.0], [82.8, 1745.0], [82.9, 1758.0], [83.0, 1758.0], [83.1, 1765.0], [83.2, 1765.0], [83.3, 1774.0], [83.4, 1774.0], [83.5, 1777.0], [83.6, 1777.0], [83.7, 1782.0], [83.8, 1782.0], [83.9, 1792.0], [84.0, 1792.0], [84.1, 1792.0], [84.2, 1792.0], [84.3, 1823.0], [84.4, 1823.0], [84.5, 1824.0], [84.6, 1824.0], [84.7, 1825.0], [84.8, 1825.0], [84.9, 1828.0], [85.0, 1828.0], [85.1, 1995.0], [85.2, 1995.0], [85.3, 2000.0], [85.4, 2000.0], [85.5, 2045.0], [85.6, 2045.0], [85.7, 2050.0], [85.8, 2050.0], [85.9, 2050.0], [86.0, 2050.0], [86.1, 2061.0], [86.2, 2061.0], [86.3, 2069.0], [86.4, 2069.0], [86.5, 2078.0], [86.6, 2078.0], [86.7, 2080.0], [86.8, 2080.0], [86.9, 2080.0], [87.0, 2080.0], [87.1, 2080.0], [87.2, 2080.0], [87.3, 2082.0], [87.4, 2082.0], [87.5, 2084.0], [87.6, 2084.0], [87.7, 2087.0], [87.8, 2087.0], [87.9, 2093.0], [88.0, 2093.0], [88.1, 2106.0], [88.2, 2106.0], [88.3, 2107.0], [88.4, 2107.0], [88.5, 2110.0], [88.6, 2110.0], [88.7, 2110.0], [88.8, 2110.0], [88.9, 2110.0], [89.0, 2110.0], [89.1, 2111.0], [89.2, 2111.0], [89.3, 2112.0], [89.4, 2112.0], [89.5, 2113.0], [89.6, 2113.0], [89.7, 2114.0], [89.8, 2114.0], [89.9, 2115.0], [90.0, 2115.0], [90.1, 2118.0], [90.2, 2118.0], [90.3, 2120.0], [90.4, 2120.0], [90.5, 2120.0], [90.6, 2120.0], [90.7, 2121.0], [90.8, 2121.0], [90.9, 2122.0], [91.0, 2122.0], [91.1, 2124.0], [91.2, 2124.0], [91.3, 2125.0], [91.4, 2125.0], [91.5, 2128.0], [91.6, 2128.0], [91.7, 2143.0], [91.8, 2143.0], [91.9, 2144.0], [92.0, 2144.0], [92.1, 2144.0], [92.2, 2144.0], [92.3, 2152.0], [92.4, 2152.0], [92.5, 2153.0], [92.6, 2153.0], [92.7, 2158.0], [92.8, 2158.0], [92.9, 2158.0], [93.0, 2158.0], [93.1, 2160.0], [93.2, 2160.0], [93.3, 2162.0], [93.4, 2162.0], [93.5, 2163.0], [93.6, 2163.0], [93.7, 2165.0], [93.8, 2165.0], [93.9, 2166.0], [94.0, 2166.0], [94.1, 2168.0], [94.2, 2168.0], [94.3, 2176.0], [94.4, 2176.0], [94.5, 2187.0], [94.6, 2187.0], [94.7, 2189.0], [94.8, 2189.0], [94.9, 2205.0], [95.0, 2205.0], [95.1, 2216.0], [95.2, 2216.0], [95.3, 2219.0], [95.4, 2219.0], [95.5, 2222.0], [95.6, 2222.0], [95.7, 2228.0], [95.8, 2228.0], [95.9, 2228.0], [96.0, 2228.0], [96.1, 2233.0], [96.2, 2233.0], [96.3, 2234.0], [96.4, 2234.0], [96.5, 2234.0], [96.6, 2234.0], [96.7, 2234.0], [96.8, 2234.0], [96.9, 2238.0], [97.0, 2238.0], [97.1, 2241.0], [97.2, 2241.0], [97.3, 2241.0], [97.4, 2241.0], [97.5, 2245.0], [97.6, 2245.0], [97.7, 2250.0], [97.8, 2250.0], [97.9, 2254.0], [98.0, 2254.0], [98.1, 2255.0], [98.2, 2255.0], [98.3, 2257.0], [98.4, 2257.0], [98.5, 2257.0], [98.6, 2257.0], [98.7, 2258.0], [98.8, 2258.0], [98.9, 2259.0], [99.0, 2259.0], [99.1, 2261.0], [99.2, 2261.0], [99.3, 2265.0], [99.4, 2265.0], [99.5, 2266.0], [99.6, 2266.0], [99.7, 2273.0], [99.8, 2273.0], [99.9, 2280.0], [100.0, 2280.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 9395.0, "series": [{"data": [[2100.0, 3.0], [2200.0, 7.0], [2300.0, 8.0], [200.0, 162.0], [1100.0, 103.0], [300.0, 61.0], [1300.0, 3.0], [1400.0, 16.0], [1500.0, 9.0], [1600.0, 16.0], [100.0, 9395.0], [400.0, 118.0], [1700.0, 14.0], [1800.0, 19.0], [1900.0, 3.0], [2000.0, 2.0], [500.0, 61.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[2100.0, 7.0], [2200.0, 6.0], [2300.0, 1.0], [1200.0, 6.0], [1300.0, 11.0], [1400.0, 12.0], [1500.0, 13.0], [1600.0, 19.0], [1700.0, 21.0], [1800.0, 1.0], [2000.0, 3.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[2100.0, 34.0], [2200.0, 26.0], [1200.0, 71.0], [1300.0, 144.0], [1400.0, 46.0], [1500.0, 52.0], [1600.0, 59.0], [1700.0, 49.0], [1800.0, 4.0], [1900.0, 1.0], [2000.0, 14.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 803.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 9797.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 9797.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 803.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 62.61999999999999, "minX": 1.61631906E12, "maxY": 310.29600000000005, "series": [{"data": [[1.61631906E12, 97.67080000000001]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61631906E12, 62.61999999999999]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61631906E12, 310.29600000000005]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61631906E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 136.0, "minX": 1.0, "maxY": 2273.0, "series": [{"data": [[2.0, 393.75], [37.0, 137.11111111111111], [40.0, 138.0], [47.0, 137.67073170731712], [49.0, 136.71428571428572], [48.0, 136.0], [52.0, 137.0], [55.0, 137.13333333333335], [59.0, 138.0], [62.0, 139.0], [4.0, 141.0], [71.0, 139.0], [70.0, 139.0], [75.0, 140.0], [74.0, 139.0], [78.0, 140.66666666666666], [83.0, 138.0], [81.0, 273.2803347280335], [80.0, 141.0], [87.0, 138.0], [86.0, 138.21428571428572], [84.0, 138.0], [91.0, 140.0], [89.0, 139.0], [95.0, 140.0], [94.0, 140.0], [93.0, 140.0], [99.0, 140.11111111111111], [98.0, 139.72727272727272], [97.0, 140.0], [6.0, 140.0], [100.0, 174.75842516315478], [9.0, 140.0], [14.0, 139.0], [15.0, 138.0], [16.0, 137.53333333333333], [1.0, 138.5], [17.0, 139.42857142857142], [21.0, 137.29629629629628], [27.0, 137.9090909090909]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[97.67080000000001, 175.70200000000048]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[536.0, 1483.0], [519.0, 1566.0], [518.0, 1342.0], [512.0, 1659.0], [575.0, 2177.0], [565.0, 1522.0], [563.0, 1671.0], [562.0, 1698.0], [561.0, 1733.0], [556.0, 1703.0], [554.0, 2115.0], [553.0, 1722.0], [596.0, 1335.0], [593.0, 1265.0], [590.0, 2249.0], [586.0, 1671.0], [631.0, 1526.0], [629.0, 1309.0], [621.0, 2240.0], [619.0, 1690.0], [617.0, 1696.0], [700.0, 1699.888888888889], [699.0, 1312.0], [694.0, 2116.0], [685.0, 1581.0], [684.0, 2214.0], [108.0, 1880.5], [122.0, 1770.0], [127.0, 1522.0], [135.0, 1476.0], [136.0, 1740.0], [144.0, 1772.0], [166.0, 1707.0], [160.0, 1533.6666666666667], [330.0, 1639.0], [329.0, 1949.0], [328.0, 1596.0], [326.0, 1695.6666666666667], [324.0, 1408.0], [323.0, 1733.0], [322.0, 1570.0], [320.0, 1272.0], [338.0, 2203.0], [336.0, 1645.0], [361.0, 2091.0], [358.0, 1424.0], [383.0, 1633.5], [382.0, 1380.0], [377.0, 1312.0], [374.0, 2158.0], [368.0, 1397.0], [399.0, 1271.0], [391.0, 1763.0], [384.0, 1709.0], [406.0, 1371.0], [403.0, 1557.0], [427.0, 1479.5], [429.0, 2208.0], [422.0, 1302.0], [419.0, 1622.0], [430.0, 1613.0], [416.0, 1481.0], [446.0, 1725.0], [445.0, 1512.0], [444.0, 1740.0], [439.0, 1579.0], [434.0, 1707.0], [462.0, 1726.0], [459.0, 1660.0], [458.0, 1406.0], [450.0, 1461.0], [449.0, 2071.0], [471.0, 1659.0], [467.0, 1677.0], [488.0, 2215.0], [501.0, 1658.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[442.35, 1665.8299999999997]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[101.0, 1379.0], [104.0, 1654.0], [110.0, 1604.75], [115.0, 1502.0], [114.0, 1429.0], [119.0, 1370.5], [120.0, 1568.0], [126.0, 1631.75], [135.0, 1825.0], [132.0, 2273.0], [131.0, 1800.0], [129.0, 1963.0], [138.0, 1800.5], [151.0, 1648.5], [149.0, 1536.5], [147.0, 1596.6666666666667], [144.0, 1366.0], [154.0, 1308.0], [153.0, 1309.0], [152.0, 1327.0], [165.0, 1724.5], [163.0, 1466.0], [160.0, 1365.6666666666667], [174.0, 1493.3333333333333], [171.0, 1656.0], [169.0, 1381.0], [179.0, 1632.0], [185.0, 1535.8333333333335], [250.0, 1591.6666666666667], [267.0, 1397.5], [260.0, 1518.0], [299.0, 1799.5714285714284], [298.0, 1532.3333333333333], [296.0, 1593.0], [295.0, 1713.0], [293.0, 1580.5], [291.0, 1578.6666666666667], [289.0, 2234.0], [332.0, 1475.0], [331.0, 1478.5], [330.0, 1505.0], [327.0, 1602.0], [326.0, 1711.75], [323.0, 1632.0], [350.0, 1680.5], [349.0, 2219.0], [347.0, 1858.75], [346.0, 2106.0], [342.0, 1717.0], [365.0, 2256.5], [367.0, 1303.0], [364.0, 1341.0], [363.0, 1666.0], [361.0, 1391.0], [360.0, 1280.0], [359.0, 1733.0], [356.0, 1549.5], [354.0, 1954.5], [378.0, 1352.0], [374.0, 1862.5], [372.0, 1765.0], [370.0, 1422.0], [369.0, 1369.0], [368.0, 1811.6666666666665], [395.0, 2157.0], [393.0, 1346.0], [392.0, 1314.0], [391.0, 1602.0], [390.0, 1600.0], [388.0, 1364.0], [410.0, 1473.0], [409.0, 1577.75], [407.0, 1363.0], [406.0, 1781.6666666666667], [404.0, 2110.0], [403.0, 1379.5], [427.0, 1372.3333333333335], [429.0, 1626.0], [421.0, 1568.0], [416.0, 1581.0], [431.0, 1418.0], [447.0, 1411.0], [446.0, 2019.3333333333333], [445.0, 1984.5], [440.0, 1342.0], [438.0, 1581.0], [436.0, 1679.0], [434.0, 1681.3333333333333], [462.0, 1732.0], [460.0, 1674.0], [457.0, 1500.5], [478.0, 1660.0], [479.0, 1288.0], [477.0, 1706.0], [476.0, 1806.25], [474.0, 1737.0], [473.0, 1706.6666666666667], [472.0, 1766.0], [471.0, 1408.0], [467.0, 1497.0], [469.0, 1463.0], [468.0, 1367.0], [483.0, 1534.5], [494.0, 1551.2], [495.0, 1776.0], [493.0, 1658.0], [490.0, 1995.0], [487.0, 1825.0], [486.0, 1398.0], [489.0, 1509.0], [484.0, 1282.0], [482.0, 1312.0], [481.0, 1334.0], [480.0, 1360.0], [504.0, 1714.5], [508.0, 1518.0], [507.0, 1324.0], [506.0, 1440.75], [505.0, 1723.0], [503.0, 1892.5], [501.0, 2143.0], [500.0, 2000.0], [498.0, 1472.0], [537.0, 1266.0], [541.0, 1516.5], [543.0, 1326.0], [529.0, 1331.0], [528.0, 1279.0], [540.0, 1746.0], [539.0, 1429.0], [538.0, 1286.0], [536.0, 1292.0], [519.0, 2114.0], [518.0, 1330.0], [516.0, 1578.0], [515.0, 1306.0], [514.0, 1444.0], [513.0, 1544.25], [512.0, 1536.0], [526.0, 1567.0], [525.0, 1853.6666666666667], [524.0, 2118.0], [523.0, 1453.0], [522.0, 1387.0], [533.0, 1697.0], [532.0, 1276.0], [562.0, 1753.0], [573.0, 1575.5], [574.0, 1815.75], [561.0, 1597.0], [560.0, 2160.0], [572.0, 1332.0], [569.0, 1281.5], [568.0, 1266.0], [549.0, 1720.0], [548.0, 1692.6666666666667], [546.0, 1615.6666666666667], [545.0, 1557.0], [557.0, 1289.0], [555.0, 1305.5], [554.0, 1711.3333333333333], [565.0, 1581.25], [564.0, 1656.0], [563.0, 1343.0], [602.0, 1800.0], [607.0, 1559.5], [601.0, 1395.0], [583.0, 1454.0], [582.0, 1900.5], [579.0, 1377.0], [578.0, 1286.0], [576.0, 1312.0], [595.0, 1257.0], [594.0, 1357.0], [592.0, 1293.0], [591.0, 1539.0], [590.0, 1470.0], [589.0, 1725.5], [588.0, 1324.0], [586.0, 1445.25], [587.0, 1524.0], [627.0, 1279.0], [637.0, 1334.0], [636.0, 1259.0], [615.0, 1275.0], [613.0, 1323.0], [611.0, 1522.0], [610.0, 1454.6666666666667], [608.0, 1596.0], [622.0, 1319.0], [621.0, 1446.0], [620.0, 1339.0], [619.0, 1571.0], [618.0, 1517.0], [617.0, 1704.0], [631.0, 1646.0], [630.0, 1484.0], [628.0, 1419.6666666666667], [625.0, 1657.0], [626.0, 1279.0], [624.0, 1519.0], [665.0, 1512.0], [657.0, 1462.0], [668.0, 1304.0], [669.0, 1679.6666666666667], [656.0, 1323.5], [667.0, 1457.0], [664.0, 1471.25], [647.0, 2124.0], [646.0, 1690.0], [643.0, 1260.0], [642.0, 1284.0], [641.0, 1387.0], [655.0, 1619.0], [654.0, 1353.0], [653.0, 1337.0], [651.0, 1372.3333333333333], [652.0, 1343.0], [648.0, 1548.6666666666667], [650.0, 1610.0], [661.0, 1453.0], [660.0, 1470.8333333333333], [659.0, 2128.0], [696.0, 1332.0], [700.0, 1471.5813953488375], [699.0, 1266.0], [698.0, 1296.0], [689.0, 1369.0], [688.0, 1583.5], [685.0, 1361.0], [673.0, 1318.6666666666667], [672.0, 1696.0], [678.0, 1450.5], [676.0, 1478.0], [684.0, 1283.0], [683.0, 1541.0], [681.0, 1441.0], [680.0, 1307.0]], "isOverall": false, "label": "JoinServer", "isController": false}, {"data": [[476.7840000000003, 1564.2800000000009]], "isOverall": false, "label": "JoinServer-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61631906E12, "maxY": 4.9E-324, "series": [{"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61631906E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 175.70200000000048, "minX": 1.61631906E12, "maxY": 1665.8299999999997, "series": [{"data": [[1.61631906E12, 175.70200000000048]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61631906E12, 1665.8299999999997]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61631906E12, 1564.2800000000009]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61631906E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61631906E12, "maxY": 4.9E-324, "series": [{"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61631906E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61631906E12, "maxY": 4.9E-324, "series": [{"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61631906E12, 0.0]], "isOverall": false, "label": "JoinServer", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61631906E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 125.0, "minX": 1.61631906E12, "maxY": 2385.0, "series": [{"data": [[1.61631906E12, 2385.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61631906E12, 260.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61631906E12, 2060.8899999999976]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61631906E12, 1343.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61631906E12, 125.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61631906E12, 139.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61631906E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 138.0, "minX": 3.0, "maxY": 1539.0, "series": [{"data": [[615.0, 139.0], [617.0, 138.0], [685.0, 1539.0], [700.0, 139.0], [713.0, 138.0], [734.0, 138.0], [717.0, 139.0], [706.0, 139.0], [722.0, 138.0], [712.0, 139.0], [732.0, 139.0], [3.0, 139.0], [329.0, 140.0], [323.0, 141.0], [110.0, 138.0], [478.0, 138.0], [490.0, 138.0], [497.0, 139.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 734.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 4.9E-324, "series": [{"data": [[615.0, 0.0], [617.0, 0.0], [685.0, 0.0], [700.0, 0.0], [713.0, 0.0], [734.0, 0.0], [717.0, 0.0], [706.0, 0.0], [722.0, 0.0], [712.0, 0.0], [732.0, 0.0], [3.0, 0.0], [329.0, 0.0], [323.0, 0.0], [110.0, 0.0], [478.0, 0.0], [490.0, 0.0], [497.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 734.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 176.66666666666666, "minX": 1.61631906E12, "maxY": 176.66666666666666, "series": [{"data": [[1.61631906E12, 176.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61631906E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 176.66666666666666, "minX": 1.61631906E12, "maxY": 176.66666666666666, "series": [{"data": [[1.61631906E12, 176.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61631906E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.61631906E12, "maxY": 166.66666666666666, "series": [{"data": [[1.61631906E12, 1.6666666666666667]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61631906E12, 8.333333333333334]], "isOverall": false, "label": "JoinServer-success", "isController": false}, {"data": [[1.61631906E12, 166.66666666666666]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61631906E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 176.66666666666666, "minX": 1.61631906E12, "maxY": 176.66666666666666, "series": [{"data": [[1.61631906E12, 176.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61631906E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

