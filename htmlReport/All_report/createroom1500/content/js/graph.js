/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18488.0, "minX": 0.0, "maxY": 19856.0, "series": [{"data": [[0.0, 18488.0], [0.1, 18489.0], [0.2, 18497.0], [0.3, 18499.0], [0.4, 18501.0], [0.5, 18503.0], [0.6, 18506.0], [0.7, 18508.0], [0.8, 18513.0], [0.9, 18513.0], [1.0, 18516.0], [1.1, 18516.0], [1.2, 18517.0], [1.3, 18517.0], [1.4, 18518.0], [1.5, 18518.0], [1.6, 18519.0], [1.7, 18519.0], [1.8, 18520.0], [1.9, 18520.0], [2.0, 18521.0], [2.1, 18521.0], [2.2, 18522.0], [2.3, 18522.0], [2.4, 18523.0], [2.5, 18523.0], [2.6, 18524.0], [2.7, 18524.0], [2.8, 18525.0], [2.9, 18527.0], [3.0, 18527.0], [3.1, 18528.0], [3.2, 18528.0], [3.3, 18530.0], [3.4, 18530.0], [3.5, 18530.0], [3.6, 18531.0], [3.7, 18532.0], [3.8, 18533.0], [3.9, 18537.0], [4.0, 18537.0], [4.1, 18543.0], [4.2, 18547.0], [4.3, 18553.0], [4.4, 18553.0], [4.5, 18553.0], [4.6, 18553.0], [4.7, 18556.0], [4.8, 18558.0], [4.9, 18559.0], [5.0, 18563.0], [5.1, 18563.0], [5.2, 18564.0], [5.3, 18574.0], [5.4, 18580.0], [5.5, 18581.0], [5.6, 18581.0], [5.7, 18582.0], [5.8, 18583.0], [5.9, 18585.0], [6.0, 18585.0], [6.1, 18587.0], [6.2, 18587.0], [6.3, 18590.0], [6.4, 18591.0], [6.5, 18591.0], [6.6, 18591.0], [6.7, 18591.0], [6.8, 18591.0], [6.9, 18592.0], [7.0, 18594.0], [7.1, 18597.0], [7.2, 18602.0], [7.3, 18602.0], [7.4, 18604.0], [7.5, 18607.0], [7.6, 18609.0], [7.7, 18610.0], [7.8, 18613.0], [7.9, 18614.0], [8.0, 18615.0], [8.1, 18615.0], [8.2, 18618.0], [8.3, 18619.0], [8.4, 18619.0], [8.5, 18620.0], [8.6, 18621.0], [8.7, 18621.0], [8.8, 18623.0], [8.9, 18624.0], [9.0, 18625.0], [9.1, 18625.0], [9.2, 18626.0], [9.3, 18626.0], [9.4, 18627.0], [9.5, 18628.0], [9.6, 18628.0], [9.7, 18629.0], [9.8, 18630.0], [9.9, 18631.0], [10.0, 18631.0], [10.1, 18632.0], [10.2, 18632.0], [10.3, 18633.0], [10.4, 18634.0], [10.5, 18635.0], [10.6, 18635.0], [10.7, 18635.0], [10.8, 18635.0], [10.9, 18636.0], [11.0, 18638.0], [11.1, 18638.0], [11.2, 18638.0], [11.3, 18639.0], [11.4, 18639.0], [11.5, 18640.0], [11.6, 18641.0], [11.7, 18641.0], [11.8, 18642.0], [11.9, 18643.0], [12.0, 18644.0], [12.1, 18644.0], [12.2, 18646.0], [12.3, 18647.0], [12.4, 18648.0], [12.5, 18650.0], [12.6, 18651.0], [12.7, 18652.0], [12.8, 18652.0], [12.9, 18653.0], [13.0, 18659.0], [13.1, 18660.0], [13.2, 18663.0], [13.3, 18664.0], [13.4, 18670.0], [13.5, 18684.0], [13.6, 18692.0], [13.7, 18692.0], [13.8, 18694.0], [13.9, 18695.0], [14.0, 18695.0], [14.1, 18696.0], [14.2, 18696.0], [14.3, 18697.0], [14.4, 18700.0], [14.5, 18700.0], [14.6, 18703.0], [14.7, 18703.0], [14.8, 18705.0], [14.9, 18707.0], [15.0, 18730.0], [15.1, 18731.0], [15.2, 18738.0], [15.3, 18740.0], [15.4, 18740.0], [15.5, 18741.0], [15.6, 18743.0], [15.7, 18744.0], [15.8, 18745.0], [15.9, 18745.0], [16.0, 18746.0], [16.1, 18747.0], [16.2, 18747.0], [16.3, 18748.0], [16.4, 18748.0], [16.5, 18749.0], [16.6, 18749.0], [16.7, 18750.0], [16.8, 18751.0], [16.9, 18751.0], [17.0, 18752.0], [17.1, 18753.0], [17.2, 18754.0], [17.3, 18754.0], [17.4, 18755.0], [17.5, 18755.0], [17.6, 18755.0], [17.7, 18755.0], [17.8, 18756.0], [17.9, 18756.0], [18.0, 18756.0], [18.1, 18757.0], [18.2, 18757.0], [18.3, 18757.0], [18.4, 18757.0], [18.5, 18757.0], [18.6, 18758.0], [18.7, 18759.0], [18.8, 18760.0], [18.9, 18760.0], [19.0, 18760.0], [19.1, 18760.0], [19.2, 18760.0], [19.3, 18761.0], [19.4, 18761.0], [19.5, 18761.0], [19.6, 18762.0], [19.7, 18762.0], [19.8, 18763.0], [19.9, 18763.0], [20.0, 18764.0], [20.1, 18765.0], [20.2, 18766.0], [20.3, 18767.0], [20.4, 18767.0], [20.5, 18767.0], [20.6, 18768.0], [20.7, 18769.0], [20.8, 18769.0], [20.9, 18769.0], [21.0, 18770.0], [21.1, 18770.0], [21.2, 18771.0], [21.3, 18773.0], [21.4, 18773.0], [21.5, 18775.0], [21.6, 18777.0], [21.7, 18778.0], [21.8, 18780.0], [21.9, 18781.0], [22.0, 18782.0], [22.1, 18783.0], [22.2, 18784.0], [22.3, 18784.0], [22.4, 18786.0], [22.5, 18786.0], [22.6, 18787.0], [22.7, 18787.0], [22.8, 18788.0], [22.9, 18789.0], [23.0, 18790.0], [23.1, 18791.0], [23.2, 18792.0], [23.3, 18793.0], [23.4, 18793.0], [23.5, 18794.0], [23.6, 18795.0], [23.7, 18795.0], [23.8, 18796.0], [23.9, 18796.0], [24.0, 18797.0], [24.1, 18797.0], [24.2, 18799.0], [24.3, 18800.0], [24.4, 18802.0], [24.5, 18802.0], [24.6, 18803.0], [24.7, 18803.0], [24.8, 18804.0], [24.9, 18804.0], [25.0, 18805.0], [25.1, 18805.0], [25.2, 18806.0], [25.3, 18806.0], [25.4, 18807.0], [25.5, 18807.0], [25.6, 18808.0], [25.7, 18808.0], [25.8, 18808.0], [25.9, 18809.0], [26.0, 18809.0], [26.1, 18810.0], [26.2, 18811.0], [26.3, 18811.0], [26.4, 18812.0], [26.5, 18812.0], [26.6, 18813.0], [26.7, 18813.0], [26.8, 18814.0], [26.9, 18814.0], [27.0, 18814.0], [27.1, 18815.0], [27.2, 18815.0], [27.3, 18815.0], [27.4, 18815.0], [27.5, 18815.0], [27.6, 18816.0], [27.7, 18816.0], [27.8, 18817.0], [27.9, 18817.0], [28.0, 18818.0], [28.1, 18818.0], [28.2, 18819.0], [28.3, 18819.0], [28.4, 18819.0], [28.5, 18819.0], [28.6, 18820.0], [28.7, 18820.0], [28.8, 18820.0], [28.9, 18820.0], [29.0, 18821.0], [29.1, 18821.0], [29.2, 18821.0], [29.3, 18821.0], [29.4, 18821.0], [29.5, 18821.0], [29.6, 18821.0], [29.7, 18821.0], [29.8, 18822.0], [29.9, 18822.0], [30.0, 18823.0], [30.1, 18823.0], [30.2, 18823.0], [30.3, 18823.0], [30.4, 18823.0], [30.5, 18824.0], [30.6, 18824.0], [30.7, 18824.0], [30.8, 18825.0], [30.9, 18825.0], [31.0, 18826.0], [31.1, 18826.0], [31.2, 18826.0], [31.3, 18826.0], [31.4, 18826.0], [31.5, 18826.0], [31.6, 18826.0], [31.7, 18826.0], [31.8, 18827.0], [31.9, 18827.0], [32.0, 18827.0], [32.1, 18827.0], [32.2, 18827.0], [32.3, 18827.0], [32.4, 18827.0], [32.5, 18827.0], [32.6, 18828.0], [32.7, 18828.0], [32.8, 18828.0], [32.9, 18829.0], [33.0, 18829.0], [33.1, 18829.0], [33.2, 18830.0], [33.3, 18830.0], [33.4, 18831.0], [33.5, 18831.0], [33.6, 18831.0], [33.7, 18831.0], [33.8, 18831.0], [33.9, 18831.0], [34.0, 18831.0], [34.1, 18832.0], [34.2, 18832.0], [34.3, 18832.0], [34.4, 18832.0], [34.5, 18832.0], [34.6, 18832.0], [34.7, 18832.0], [34.8, 18832.0], [34.9, 18832.0], [35.0, 18833.0], [35.1, 18833.0], [35.2, 18834.0], [35.3, 18835.0], [35.4, 18836.0], [35.5, 18836.0], [35.6, 18837.0], [35.7, 18837.0], [35.8, 18837.0], [35.9, 18837.0], [36.0, 18838.0], [36.1, 18838.0], [36.2, 18839.0], [36.3, 18839.0], [36.4, 18839.0], [36.5, 18839.0], [36.6, 18839.0], [36.7, 18839.0], [36.8, 18840.0], [36.9, 18840.0], [37.0, 18840.0], [37.1, 18840.0], [37.2, 18840.0], [37.3, 18840.0], [37.4, 18841.0], [37.5, 18841.0], [37.6, 18841.0], [37.7, 18842.0], [37.8, 18842.0], [37.9, 18842.0], [38.0, 18843.0], [38.1, 18843.0], [38.2, 18843.0], [38.3, 18843.0], [38.4, 18844.0], [38.5, 18844.0], [38.6, 18844.0], [38.7, 18844.0], [38.8, 18845.0], [38.9, 18845.0], [39.0, 18845.0], [39.1, 18845.0], [39.2, 18846.0], [39.3, 18846.0], [39.4, 18846.0], [39.5, 18846.0], [39.6, 18846.0], [39.7, 18847.0], [39.8, 18847.0], [39.9, 18847.0], [40.0, 18847.0], [40.1, 18847.0], [40.2, 18848.0], [40.3, 18848.0], [40.4, 18848.0], [40.5, 18848.0], [40.6, 18848.0], [40.7, 18849.0], [40.8, 18849.0], [40.9, 18849.0], [41.0, 18849.0], [41.1, 18849.0], [41.2, 18849.0], [41.3, 18849.0], [41.4, 18850.0], [41.5, 18850.0], [41.6, 18850.0], [41.7, 18850.0], [41.8, 18850.0], [41.9, 18850.0], [42.0, 18851.0], [42.1, 18851.0], [42.2, 18852.0], [42.3, 18852.0], [42.4, 18853.0], [42.5, 18853.0], [42.6, 18853.0], [42.7, 18853.0], [42.8, 18854.0], [42.9, 18854.0], [43.0, 18855.0], [43.1, 18855.0], [43.2, 18855.0], [43.3, 18856.0], [43.4, 18858.0], [43.5, 18858.0], [43.6, 18858.0], [43.7, 18859.0], [43.8, 18859.0], [43.9, 18860.0], [44.0, 18860.0], [44.1, 18860.0], [44.2, 18861.0], [44.3, 18861.0], [44.4, 18861.0], [44.5, 18862.0], [44.6, 18862.0], [44.7, 18863.0], [44.8, 18863.0], [44.9, 18864.0], [45.0, 18865.0], [45.1, 18865.0], [45.2, 18866.0], [45.3, 18867.0], [45.4, 18867.0], [45.5, 18868.0], [45.6, 18869.0], [45.7, 18869.0], [45.8, 18870.0], [45.9, 18870.0], [46.0, 18870.0], [46.1, 18871.0], [46.2, 18871.0], [46.3, 18871.0], [46.4, 18871.0], [46.5, 18872.0], [46.6, 18872.0], [46.7, 18872.0], [46.8, 18873.0], [46.9, 18873.0], [47.0, 18874.0], [47.1, 18874.0], [47.2, 18875.0], [47.3, 18875.0], [47.4, 18876.0], [47.5, 18876.0], [47.6, 18876.0], [47.7, 18876.0], [47.8, 18876.0], [47.9, 18876.0], [48.0, 18877.0], [48.1, 18877.0], [48.2, 18877.0], [48.3, 18878.0], [48.4, 18878.0], [48.5, 18879.0], [48.6, 18880.0], [48.7, 18880.0], [48.8, 18880.0], [48.9, 18880.0], [49.0, 18881.0], [49.1, 18881.0], [49.2, 18882.0], [49.3, 18882.0], [49.4, 18882.0], [49.5, 18882.0], [49.6, 18883.0], [49.7, 18883.0], [49.8, 18883.0], [49.9, 18883.0], [50.0, 18885.0], [50.1, 18885.0], [50.2, 18885.0], [50.3, 18886.0], [50.4, 18886.0], [50.5, 18886.0], [50.6, 18888.0], [50.7, 18889.0], [50.8, 18889.0], [50.9, 18890.0], [51.0, 18890.0], [51.1, 18891.0], [51.2, 18891.0], [51.3, 18894.0], [51.4, 18895.0], [51.5, 18895.0], [51.6, 18896.0], [51.7, 18896.0], [51.8, 18896.0], [51.9, 18900.0], [52.0, 18900.0], [52.1, 18901.0], [52.2, 18902.0], [52.3, 18902.0], [52.4, 18903.0], [52.5, 18903.0], [52.6, 18904.0], [52.7, 18905.0], [52.8, 18905.0], [52.9, 18906.0], [53.0, 18906.0], [53.1, 18907.0], [53.2, 18907.0], [53.3, 18909.0], [53.4, 18909.0], [53.5, 18910.0], [53.6, 18911.0], [53.7, 18912.0], [53.8, 18913.0], [53.9, 18923.0], [54.0, 18924.0], [54.1, 18926.0], [54.2, 18931.0], [54.3, 18946.0], [54.4, 18952.0], [54.5, 18965.0], [54.6, 18997.0], [54.7, 19008.0], [54.8, 19009.0], [54.9, 19014.0], [55.0, 19014.0], [55.1, 19015.0], [55.2, 19016.0], [55.3, 19019.0], [55.4, 19019.0], [55.5, 19024.0], [55.6, 19026.0], [55.7, 19026.0], [55.8, 19027.0], [55.9, 19030.0], [56.0, 19031.0], [56.1, 19032.0], [56.2, 19032.0], [56.3, 19032.0], [56.4, 19032.0], [56.5, 19033.0], [56.6, 19033.0], [56.7, 19033.0], [56.8, 19034.0], [56.9, 19034.0], [57.0, 19035.0], [57.1, 19036.0], [57.2, 19036.0], [57.3, 19037.0], [57.4, 19037.0], [57.5, 19038.0], [57.6, 19039.0], [57.7, 19039.0], [57.8, 19040.0], [57.9, 19040.0], [58.0, 19041.0], [58.1, 19041.0], [58.2, 19042.0], [58.3, 19042.0], [58.4, 19042.0], [58.5, 19043.0], [58.6, 19043.0], [58.7, 19043.0], [58.8, 19044.0], [58.9, 19044.0], [59.0, 19044.0], [59.1, 19045.0], [59.2, 19045.0], [59.3, 19045.0], [59.4, 19046.0], [59.5, 19046.0], [59.6, 19046.0], [59.7, 19047.0], [59.8, 19047.0], [59.9, 19048.0], [60.0, 19048.0], [60.1, 19048.0], [60.2, 19049.0], [60.3, 19049.0], [60.4, 19049.0], [60.5, 19049.0], [60.6, 19049.0], [60.7, 19049.0], [60.8, 19049.0], [60.9, 19049.0], [61.0, 19049.0], [61.1, 19050.0], [61.2, 19050.0], [61.3, 19050.0], [61.4, 19050.0], [61.5, 19050.0], [61.6, 19050.0], [61.7, 19051.0], [61.8, 19051.0], [61.9, 19051.0], [62.0, 19051.0], [62.1, 19052.0], [62.2, 19052.0], [62.3, 19052.0], [62.4, 19052.0], [62.5, 19053.0], [62.6, 19053.0], [62.7, 19053.0], [62.8, 19053.0], [62.9, 19053.0], [63.0, 19053.0], [63.1, 19054.0], [63.2, 19055.0], [63.3, 19055.0], [63.4, 19056.0], [63.5, 19056.0], [63.6, 19056.0], [63.7, 19056.0], [63.8, 19056.0], [63.9, 19056.0], [64.0, 19056.0], [64.1, 19057.0], [64.2, 19057.0], [64.3, 19057.0], [64.4, 19057.0], [64.5, 19057.0], [64.6, 19058.0], [64.7, 19058.0], [64.8, 19058.0], [64.9, 19058.0], [65.0, 19058.0], [65.1, 19058.0], [65.2, 19058.0], [65.3, 19058.0], [65.4, 19058.0], [65.5, 19059.0], [65.6, 19059.0], [65.7, 19059.0], [65.8, 19059.0], [65.9, 19059.0], [66.0, 19059.0], [66.1, 19059.0], [66.2, 19059.0], [66.3, 19059.0], [66.4, 19060.0], [66.5, 19060.0], [66.6, 19060.0], [66.7, 19061.0], [66.8, 19061.0], [66.9, 19061.0], [67.0, 19061.0], [67.1, 19061.0], [67.2, 19062.0], [67.3, 19062.0], [67.4, 19062.0], [67.5, 19062.0], [67.6, 19062.0], [67.7, 19063.0], [67.8, 19063.0], [67.9, 19063.0], [68.0, 19063.0], [68.1, 19063.0], [68.2, 19064.0], [68.3, 19064.0], [68.4, 19064.0], [68.5, 19064.0], [68.6, 19064.0], [68.7, 19064.0], [68.8, 19064.0], [68.9, 19064.0], [69.0, 19064.0], [69.1, 19064.0], [69.2, 19065.0], [69.3, 19065.0], [69.4, 19066.0], [69.5, 19066.0], [69.6, 19066.0], [69.7, 19066.0], [69.8, 19066.0], [69.9, 19066.0], [70.0, 19066.0], [70.1, 19067.0], [70.2, 19067.0], [70.3, 19067.0], [70.4, 19067.0], [70.5, 19067.0], [70.6, 19067.0], [70.7, 19068.0], [70.8, 19068.0], [70.9, 19068.0], [71.0, 19068.0], [71.1, 19068.0], [71.2, 19068.0], [71.3, 19069.0], [71.4, 19069.0], [71.5, 19069.0], [71.6, 19069.0], [71.7, 19069.0], [71.8, 19069.0], [71.9, 19070.0], [72.0, 19070.0], [72.1, 19070.0], [72.2, 19070.0], [72.3, 19070.0], [72.4, 19070.0], [72.5, 19070.0], [72.6, 19070.0], [72.7, 19070.0], [72.8, 19070.0], [72.9, 19070.0], [73.0, 19071.0], [73.1, 19071.0], [73.2, 19071.0], [73.3, 19071.0], [73.4, 19071.0], [73.5, 19072.0], [73.6, 19072.0], [73.7, 19072.0], [73.8, 19072.0], [73.9, 19072.0], [74.0, 19072.0], [74.1, 19073.0], [74.2, 19073.0], [74.3, 19073.0], [74.4, 19074.0], [74.5, 19074.0], [74.6, 19074.0], [74.7, 19074.0], [74.8, 19074.0], [74.9, 19074.0], [75.0, 19075.0], [75.1, 19075.0], [75.2, 19075.0], [75.3, 19076.0], [75.4, 19076.0], [75.5, 19076.0], [75.6, 19077.0], [75.7, 19077.0], [75.8, 19078.0], [75.9, 19078.0], [76.0, 19078.0], [76.1, 19079.0], [76.2, 19079.0], [76.3, 19079.0], [76.4, 19079.0], [76.5, 19080.0], [76.6, 19080.0], [76.7, 19080.0], [76.8, 19080.0], [76.9, 19080.0], [77.0, 19080.0], [77.1, 19081.0], [77.2, 19081.0], [77.3, 19081.0], [77.4, 19081.0], [77.5, 19081.0], [77.6, 19081.0], [77.7, 19082.0], [77.8, 19082.0], [77.9, 19083.0], [78.0, 19083.0], [78.1, 19084.0], [78.2, 19084.0], [78.3, 19084.0], [78.4, 19084.0], [78.5, 19085.0], [78.6, 19085.0], [78.7, 19086.0], [78.8, 19086.0], [78.9, 19086.0], [79.0, 19086.0], [79.1, 19087.0], [79.2, 19087.0], [79.3, 19087.0], [79.4, 19087.0], [79.5, 19087.0], [79.6, 19087.0], [79.7, 19088.0], [79.8, 19089.0], [79.9, 19089.0], [80.0, 19090.0], [80.1, 19090.0], [80.2, 19090.0], [80.3, 19091.0], [80.4, 19091.0], [80.5, 19094.0], [80.6, 19094.0], [80.7, 19095.0], [80.8, 19095.0], [80.9, 19096.0], [81.0, 19096.0], [81.1, 19101.0], [81.2, 19101.0], [81.3, 19105.0], [81.4, 19107.0], [81.5, 19117.0], [81.6, 19118.0], [81.7, 19130.0], [81.8, 19131.0], [81.9, 19133.0], [82.0, 19133.0], [82.1, 19137.0], [82.2, 19138.0], [82.3, 19138.0], [82.4, 19139.0], [82.5, 19140.0], [82.6, 19141.0], [82.7, 19154.0], [82.8, 19161.0], [82.9, 19162.0], [83.0, 19162.0], [83.1, 19163.0], [83.2, 19168.0], [83.3, 19175.0], [83.4, 19176.0], [83.5, 19182.0], [83.6, 19183.0], [83.7, 19185.0], [83.8, 19187.0], [83.9, 19192.0], [84.0, 19193.0], [84.1, 19196.0], [84.2, 19197.0], [84.3, 19212.0], [84.4, 19235.0], [84.5, 19246.0], [84.6, 19248.0], [84.7, 19324.0], [84.8, 19327.0], [84.9, 19328.0], [85.0, 19332.0], [85.1, 19342.0], [85.2, 19344.0], [85.3, 19352.0], [85.4, 19356.0], [85.5, 19357.0], [85.6, 19357.0], [85.7, 19357.0], [85.8, 19358.0], [85.9, 19358.0], [86.0, 19358.0], [86.1, 19360.0], [86.2, 19360.0], [86.3, 19363.0], [86.4, 19363.0], [86.5, 19364.0], [86.6, 19364.0], [86.7, 19364.0], [86.8, 19365.0], [86.9, 19366.0], [87.0, 19367.0], [87.1, 19369.0], [87.2, 19369.0], [87.3, 19371.0], [87.4, 19371.0], [87.5, 19372.0], [87.6, 19372.0], [87.7, 19372.0], [87.8, 19373.0], [87.9, 19373.0], [88.0, 19373.0], [88.1, 19374.0], [88.2, 19374.0], [88.3, 19374.0], [88.4, 19375.0], [88.5, 19375.0], [88.6, 19375.0], [88.7, 19375.0], [88.8, 19375.0], [88.9, 19376.0], [89.0, 19376.0], [89.1, 19376.0], [89.2, 19376.0], [89.3, 19377.0], [89.4, 19377.0], [89.5, 19378.0], [89.6, 19378.0], [89.7, 19379.0], [89.8, 19380.0], [89.9, 19380.0], [90.0, 19381.0], [90.1, 19381.0], [90.2, 19382.0], [90.3, 19382.0], [90.4, 19382.0], [90.5, 19385.0], [90.6, 19385.0], [90.7, 19386.0], [90.8, 19386.0], [90.9, 19388.0], [91.0, 19388.0], [91.1, 19391.0], [91.2, 19391.0], [91.3, 19392.0], [91.4, 19392.0], [91.5, 19392.0], [91.6, 19392.0], [91.7, 19393.0], [91.8, 19394.0], [91.9, 19395.0], [92.0, 19397.0], [92.1, 19397.0], [92.2, 19398.0], [92.3, 19398.0], [92.4, 19399.0], [92.5, 19399.0], [92.6, 19400.0], [92.7, 19402.0], [92.8, 19402.0], [92.9, 19407.0], [93.0, 19410.0], [93.1, 19427.0], [93.2, 19432.0], [93.3, 19438.0], [93.4, 19443.0], [93.5, 19447.0], [93.6, 19448.0], [93.7, 19459.0], [93.8, 19460.0], [93.9, 19470.0], [94.0, 19470.0], [94.1, 19479.0], [94.2, 19481.0], [94.3, 19486.0], [94.4, 19489.0], [94.5, 19493.0], [94.6, 19496.0], [94.7, 19499.0], [94.8, 19502.0], [94.9, 19502.0], [95.0, 19505.0], [95.1, 19506.0], [95.2, 19508.0], [95.3, 19509.0], [95.4, 19513.0], [95.5, 19516.0], [95.6, 19521.0], [95.7, 19526.0], [95.8, 19532.0], [95.9, 19532.0], [96.0, 19536.0], [96.1, 19537.0], [96.2, 19543.0], [96.3, 19548.0], [96.4, 19550.0], [96.5, 19551.0], [96.6, 19557.0], [96.7, 19558.0], [96.8, 19560.0], [96.9, 19561.0], [97.0, 19562.0], [97.1, 19563.0], [97.2, 19566.0], [97.3, 19567.0], [97.4, 19570.0], [97.5, 19588.0], [97.6, 19598.0], [97.7, 19598.0], [97.8, 19606.0], [97.9, 19613.0], [98.0, 19624.0], [98.1, 19631.0], [98.2, 19633.0], [98.3, 19636.0], [98.4, 19647.0], [98.5, 19650.0], [98.6, 19655.0], [98.7, 19657.0], [98.8, 19662.0], [98.9, 19666.0], [99.0, 19671.0], [99.1, 19674.0], [99.2, 19721.0], [99.3, 19735.0], [99.4, 19788.0], [99.5, 19789.0], [99.6, 19834.0], [99.7, 19842.0], [99.8, 19848.0], [99.9, 19848.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 18400.0, "maxY": 414.0, "series": [{"data": [[18400.0, 5.0], [19400.0, 33.0], [19000.0, 397.0], [18500.0, 103.0], [19300.0, 118.0], [18700.0, 149.0], [19200.0, 7.0], [18900.0, 41.0], [19100.0, 47.0], [18600.0, 107.0], [18800.0, 414.0], [19500.0, 45.0], [19600.0, 21.0], [19800.0, 6.0], [19700.0, 7.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 1500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 753.13, "minX": 1.61626716E12, "maxY": 753.13, "series": [{"data": [[1.61626716E12, 753.13]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626716E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18494.0, "minX": 8.0, "maxY": 19848.0, "series": [{"data": [[8.0, 19302.75], [9.0, 19090.0], [11.0, 18961.0], [13.0, 18984.0], [15.0, 19082.0], [16.0, 19136.0], [17.0, 19080.5], [18.0, 18849.0], [19.0, 18853.0], [20.0, 18881.0], [21.0, 18851.0], [22.0, 19091.0], [24.0, 19072.0], [25.0, 19095.0], [26.0, 18882.0], [27.0, 19084.0], [29.0, 19089.0], [32.0, 19268.0], [35.0, 19088.0], [37.0, 18912.0], [36.0, 19848.0], [40.0, 18989.0], [42.0, 18887.0], [45.0, 18849.0], [46.0, 19026.666666666668], [51.0, 19095.0], [50.0, 19025.0], [54.0, 19080.0], [57.0, 18911.0], [59.0, 18974.333333333332], [58.0, 19068.0], [60.0, 19399.0], [63.0, 19080.0], [62.0, 19076.0], [66.0, 19083.5], [69.0, 19230.5], [68.0, 19087.0], [75.0, 19399.0], [74.0, 19090.0], [73.0, 19087.0], [76.0, 19071.0], [81.0, 18960.25], [80.0, 18997.2], [87.0, 19084.0], [85.0, 18888.333333333332], [91.0, 19068.0], [88.0, 19079.0], [94.0, 18967.5], [93.0, 19015.5], [92.0, 19081.0], [99.0, 19073.0], [98.0, 19178.75], [103.0, 19397.0], [101.0, 19123.0], [106.0, 18958.5], [105.0, 19087.0], [111.0, 19111.666666666668], [109.0, 18850.0], [108.0, 19084.0], [115.0, 19074.0], [113.0, 19070.0], [112.0, 19066.0], [123.0, 19391.0], [122.0, 19079.0], [120.0, 18909.0], [127.0, 18982.0], [125.0, 18975.0], [124.0, 19122.5], [135.0, 19076.5], [134.0, 18837.0], [132.0, 19848.0], [130.0, 18846.0], [128.0, 18851.0], [143.0, 18846.0], [142.0, 19087.0], [141.0, 19235.5], [140.0, 19073.0], [137.0, 19086.0], [150.0, 18822.0], [151.0, 18842.0], [149.0, 18834.0], [147.0, 18906.0], [146.0, 19091.0], [145.0, 18967.0], [144.0, 18840.0], [158.0, 18908.0], [157.0, 19086.333333333332], [156.0, 18967.5], [155.0, 18847.0], [154.0, 18877.5], [153.0, 18844.0], [167.0, 19558.0], [166.0, 19557.0], [163.0, 19006.75], [162.0, 18844.0], [160.0, 19788.0], [175.0, 19065.0], [174.0, 19395.0], [173.0, 18905.0], [172.0, 19562.0], [171.0, 18818.0], [170.0, 18844.0], [169.0, 18907.0], [168.0, 18860.0], [183.0, 18843.0], [182.0, 19083.0], [180.0, 18942.5], [178.0, 18931.333333333332], [177.0, 18843.0], [176.0, 18847.0], [189.0, 18952.0], [187.0, 18836.0], [199.0, 19080.0], [198.0, 19080.0], [196.0, 19392.0], [195.0, 18869.0], [193.0, 19083.0], [192.0, 19394.0], [207.0, 18954.0], [203.0, 19069.0], [205.0, 19392.0], [202.0, 18872.0], [200.0, 19077.0], [215.0, 19000.0], [214.0, 19082.0], [213.0, 18904.0], [212.0, 19123.5], [210.0, 19070.0], [209.0, 19182.0], [223.0, 18843.0], [221.0, 18840.0], [219.0, 18981.5], [217.0, 19235.5], [216.0, 19088.666666666668], [230.0, 18886.0], [229.0, 19074.0], [227.0, 18949.0], [226.0, 19072.0], [224.0, 18903.0], [238.0, 19084.0], [235.0, 19161.333333333332], [234.0, 19070.0], [232.0, 18985.5], [246.0, 18830.5], [245.0, 19058.0], [244.0, 19069.0], [242.0, 18872.5], [241.0, 18840.0], [240.0, 19059.0], [254.0, 18841.0], [252.0, 18851.5], [251.0, 18974.75], [249.0, 19386.0], [248.0, 18839.0], [270.0, 19236.5], [271.0, 19063.0], [269.0, 18861.0], [268.0, 19388.0], [266.0, 18902.0], [265.0, 18949.5], [264.0, 19079.0], [263.0, 19703.0], [259.0, 19392.0], [258.0, 19066.0], [256.0, 18841.0], [260.0, 18837.0], [284.0, 19224.5], [283.0, 19387.0], [281.0, 18841.0], [280.0, 19076.0], [279.0, 19078.333333333332], [278.0, 18825.0], [275.0, 19039.0], [273.0, 18952.0], [302.0, 18920.5], [303.0, 19388.0], [300.0, 19074.5], [291.0, 18954.0], [290.0, 18900.0], [288.0, 18974.75], [298.0, 19233.5], [297.0, 19072.0], [296.0, 18867.0], [294.0, 19081.0], [293.0, 18839.0], [292.0, 18901.0], [307.0, 19070.0], [317.0, 19054.0], [316.0, 19382.0], [315.0, 19098.0], [312.0, 19074.0], [311.0, 18858.0], [310.0, 18943.0], [309.0, 18838.0], [306.0, 18946.0], [304.0, 18839.0], [323.0, 19407.0], [334.0, 18863.0], [332.0, 18849.333333333332], [331.0, 18832.0], [328.0, 18834.0], [327.0, 19015.333333333332], [324.0, 19075.0], [322.0, 18836.0], [321.0, 19232.25], [339.0, 18867.666666666668], [351.0, 18847.0], [346.0, 18832.0], [344.0, 19059.0], [343.0, 19064.0], [342.0, 19382.0], [341.0, 18967.5], [338.0, 18896.0], [336.0, 18861.0], [355.0, 18845.0], [365.0, 19226.0], [364.0, 18811.0], [363.0, 18872.0], [360.0, 18958.0], [359.0, 19057.0], [358.0, 19057.0], [357.0, 19075.0], [356.0, 19138.5], [354.0, 18832.0], [352.0, 19393.0], [371.0, 18831.0], [381.0, 19051.0], [378.0, 19225.0], [376.0, 18979.0], [374.0, 18952.0], [373.0, 19223.5], [372.0, 19053.0], [369.0, 18821.0], [368.0, 19228.5], [396.0, 19380.0], [398.0, 18938.5], [399.0, 19377.0], [397.0, 18833.0], [395.0, 19066.0], [394.0, 18831.0], [390.0, 19223.0], [389.0, 18949.5], [387.0, 19059.0], [386.0, 19427.0], [384.0, 19322.0], [415.0, 19377.0], [413.0, 19067.0], [411.0, 18943.0], [410.0, 19379.0], [408.0, 19051.0], [407.0, 18827.0], [406.0, 18830.0], [403.0, 19375.0], [401.0, 18891.0], [430.0, 19074.0], [428.0, 19266.75], [419.0, 18889.0], [418.0, 18826.0], [417.0, 19774.0], [416.0, 18859.0], [427.0, 18880.0], [426.0, 19212.0], [425.0, 19064.0], [424.0, 18849.0], [422.0, 19059.0], [421.0, 18832.0], [420.0, 18827.0], [446.0, 19410.0], [445.0, 18826.0], [443.0, 19345.0], [442.0, 18828.0], [441.0, 18803.0], [440.0, 19070.0], [437.0, 18950.5], [435.0, 19068.0], [433.0, 18946.5], [432.0, 18889.666666666668], [461.0, 18824.0], [463.0, 18891.0], [460.0, 19007.5], [459.0, 18829.0], [457.0, 19377.0], [456.0, 18962.5], [451.0, 18950.333333333332], [450.0, 18886.75], [449.0, 18839.0], [448.0, 18889.0], [478.0, 19056.0], [479.0, 18829.0], [477.0, 19070.0], [476.0, 19063.0], [475.0, 18888.0], [474.0, 19045.0], [473.0, 19057.5], [472.0, 19064.0], [471.0, 19217.0], [466.0, 18825.0], [464.0, 19214.5], [470.0, 19062.0], [469.0, 19376.0], [494.0, 19061.0], [495.0, 19056.0], [492.0, 19061.0], [483.0, 19061.0], [481.0, 18832.5], [491.0, 19044.0], [490.0, 19064.0], [488.0, 19223.0], [487.0, 19058.5], [485.0, 19049.0], [484.0, 19058.0], [499.0, 19255.0], [510.0, 19351.5], [509.0, 18826.0], [506.0, 19048.5], [504.0, 19376.0], [502.0, 19056.0], [501.0, 19050.0], [498.0, 19056.0], [497.0, 19375.0], [496.0, 19281.333333333332], [540.0, 19372.0], [543.0, 19374.0], [542.0, 18823.0], [541.0, 18895.333333333332], [536.0, 19367.0], [519.0, 19057.0], [518.0, 19156.333333333332], [517.0, 19374.0], [516.0, 18939.0], [514.0, 19040.0], [513.0, 19373.0], [512.0, 18845.0], [533.0, 19375.0], [527.0, 18885.0], [526.0, 19373.0], [525.0, 19211.5], [524.0, 18827.0], [521.0, 19081.666666666668], [520.0, 18826.0], [568.0, 19371.0], [573.0, 19372.0], [575.0, 18992.0], [561.0, 18800.0], [563.0, 18852.0], [562.0, 18945.0], [571.0, 19058.0], [570.0, 18885.0], [569.0, 19013.0], [558.0, 19042.0], [544.0, 19058.0], [546.0, 19006.0], [545.0, 19160.0], [548.0, 19064.0], [547.0, 18922.333333333332], [550.0, 18934.0], [549.0, 19053.0], [557.0, 18827.0], [553.0, 19536.0], [567.0, 18926.0], [566.0, 19357.0], [565.0, 18882.0], [564.0, 19231.0], [605.0, 19000.75], [607.0, 19061.0], [604.0, 19063.0], [603.0, 18917.0], [600.0, 18882.0], [583.0, 18882.0], [582.0, 19100.6], [579.0, 19371.0], [578.0, 18820.0], [576.0, 18947.5], [591.0, 19063.5], [590.0, 19066.0], [588.0, 19053.0], [587.0, 19079.0], [585.0, 19373.0], [599.0, 18839.0], [597.0, 18823.0], [596.0, 19063.0], [592.0, 18893.0], [628.0, 18797.0], [637.0, 18837.0], [635.0, 18932.5], [634.0, 18860.0], [615.0, 18973.5], [613.0, 18930.666666666668], [611.0, 18990.5], [608.0, 18820.0], [622.0, 18874.5], [621.0, 19215.0], [618.0, 18797.0], [617.0, 18938.0], [631.0, 18926.333333333332], [630.0, 18821.0], [629.0, 19053.0], [627.0, 19048.5], [626.0, 19042.0], [669.0, 19365.0], [670.0, 18804.0], [668.0, 19367.0], [666.0, 18794.0], [665.0, 18858.2], [647.0, 18838.0], [644.0, 18992.25], [643.0, 18969.0], [641.0, 19057.0], [640.0, 19040.0], [655.0, 19216.0], [654.0, 18880.0], [652.0, 18914.0], [650.0, 18819.0], [648.0, 19020.5], [662.0, 19051.0], [659.0, 19052.5], [658.0, 19059.0], [657.0, 18818.0], [699.0, 18916.0], [700.0, 19037.0], [698.0, 19047.5], [678.0, 18945.0], [677.0, 18826.0], [675.0, 18936.5], [673.0, 19060.0], [672.0, 18934.5], [694.0, 19188.333333333332], [691.0, 19055.0], [690.0, 19316.0], [689.0, 19059.0], [686.0, 19052.0], [685.0, 18935.5], [684.0, 19056.0], [682.0, 18793.0], [681.0, 18984.666666666668], [734.0, 19036.0], [735.0, 19049.0], [721.0, 19017.333333333332], [733.0, 19039.0], [732.0, 19041.0], [730.0, 19043.5], [728.0, 19034.0], [718.0, 18813.5], [704.0, 19006.0], [707.0, 19120.0], [705.0, 18815.0], [710.0, 18815.0], [709.0, 18942.5], [716.0, 19032.0], [715.0, 19035.5], [713.0, 18924.5], [712.0, 18876.0], [727.0, 19045.0], [726.0, 19049.0], [725.0, 19088.0], [724.0, 19206.0], [763.0, 19327.0], [754.0, 19049.0], [765.0, 18832.0], [766.0, 19049.0], [752.0, 18927.5], [764.0, 19050.0], [761.0, 18808.5], [743.0, 19049.0], [742.0, 19055.0], [740.0, 19052.0], [739.0, 19048.0], [738.0, 19148.333333333332], [751.0, 19035.0], [749.0, 18871.0], [748.0, 19358.5], [746.0, 19043.0], [744.0, 19042.0], [759.0, 19050.0], [757.0, 18827.0], [756.0, 18831.666666666668], [787.0, 18983.0], [798.0, 19036.0], [797.0, 18826.0], [794.0, 19186.0], [792.0, 18828.0], [782.0, 19360.0], [769.0, 19047.666666666668], [773.0, 19358.0], [771.0, 18833.5], [779.0, 19031.0], [778.0, 18901.0], [777.0, 19026.0], [791.0, 19040.0], [789.0, 19037.0], [788.0, 19222.0], [785.0, 19036.5], [828.0, 18775.0], [831.0, 19038.0], [816.0, 19842.0], [818.0, 19046.0], [817.0, 18867.0], [820.0, 19377.0], [819.0, 19043.0], [830.0, 19043.0], [829.0, 19042.0], [827.0, 18862.0], [826.0, 19038.0], [825.0, 18799.0], [824.0, 19043.0], [815.0, 18805.0], [800.0, 18817.5], [802.0, 19358.0], [801.0, 18871.0], [805.0, 19222.5], [803.0, 19356.0], [807.0, 18866.0], [806.0, 18783.0], [814.0, 19044.0], [813.0, 19050.0], [812.0, 18927.0], [810.0, 18849.333333333332], [823.0, 18863.0], [822.0, 18924.0], [856.0, 19024.0], [861.0, 19018.0], [862.0, 19019.0], [848.0, 19022.0], [850.0, 19015.0], [849.0, 19014.0], [860.0, 18844.0], [859.0, 18803.0], [858.0, 18782.0], [847.0, 19014.0], [832.0, 18795.0], [835.0, 18858.0], [834.0, 18944.5], [837.0, 19342.0], [836.0, 19028.0], [839.0, 19033.0], [838.0, 18854.0], [846.0, 19005.0], [845.0, 19027.0], [844.0, 19019.0], [843.0, 19015.0], [842.0, 18792.0], [841.0, 18821.0], [840.0, 18855.0], [855.0, 18847.0], [854.0, 19011.0], [853.0, 18896.5], [851.0, 18787.0], [891.0, 18774.0], [895.0, 18795.0], [893.0, 18663.0], [892.0, 18880.0], [888.0, 18758.5], [871.0, 18840.0], [868.0, 18773.0], [867.0, 19016.0], [866.0, 19008.0], [865.0, 18845.0], [864.0, 18780.5], [886.0, 18897.2], [879.0, 19040.0], [877.0, 19380.0], [875.0, 18707.0], [874.0, 18642.0], [873.0, 19041.0], [914.0, 19502.0], [927.0, 19674.0], [925.0, 19428.5], [923.0, 18983.666666666668], [920.0, 18876.0], [907.0, 18620.0], [896.0, 19474.0], [900.0, 19281.0], [899.0, 18880.0], [906.0, 18655.0], [904.0, 18730.75], [919.0, 18997.0], [917.0, 18931.5], [915.0, 19361.0], [913.0, 19492.0], [912.0, 19070.25], [953.0, 19526.0], [946.0, 18641.0], [956.0, 19489.0], [957.0, 18757.0], [945.0, 18618.0], [944.0, 18875.0], [954.0, 18638.0], [952.0, 19143.666666666668], [931.0, 18878.0], [930.0, 18700.0], [929.0, 18877.0], [928.0, 18637.5], [943.0, 18614.0], [942.0, 18641.0], [941.0, 18700.0], [939.0, 18624.0], [938.0, 18648.0], [937.0, 18621.0], [940.0, 18871.0], [951.0, 18985.25], [949.0, 19162.0], [947.0, 19035.0], [978.0, 18635.5], [991.0, 18635.0], [989.0, 19019.0], [986.0, 18665.0], [984.0, 18786.5], [974.0, 18668.0], [962.0, 18876.0], [960.0, 18865.0], [965.0, 19588.0], [964.0, 19085.0], [967.0, 18641.0], [966.0, 18910.5], [971.0, 18869.0], [970.0, 18968.333333333332], [968.0, 19448.0], [982.0, 18695.0], [981.0, 19264.5], [980.0, 18859.0], [976.0, 19050.0], [1020.0, 19182.0], [1022.0, 19182.0], [1019.0, 19026.0], [1018.0, 19633.0], [1017.0, 18854.0], [1016.0, 18876.0], [1007.0, 19183.0], [992.0, 19659.0], [995.0, 18854.0], [994.0, 19606.0], [998.0, 18838.5], [996.0, 18635.0], [1005.0, 18860.0], [1001.0, 18952.666666666668], [1014.0, 18874.0], [1010.0, 18634.0], [1009.0, 19190.75], [1008.0, 18748.5], [1086.0, 19327.0], [1056.0, 19567.0], [1058.0, 18900.0], [1064.0, 19632.0], [1068.0, 19141.0], [1078.0, 18907.5], [1076.0, 18684.0], [1074.0, 18846.0], [1072.0, 19168.0], [1038.0, 18692.0], [1036.0, 18861.0], [1034.0, 18863.0], [1030.0, 18696.0], [1026.0, 18864.0], [1054.0, 18630.0], [1050.0, 18860.0], [1042.0, 18748.5], [1040.0, 19647.0], [1102.0, 18614.0], [1142.0, 19137.0], [1140.0, 18976.5], [1138.0, 19138.0], [1100.0, 19005.5], [1090.0, 18987.0], [1088.0, 18647.0], [1132.0, 18893.333333333332], [1116.0, 18777.333333333332], [1110.0, 19538.0], [1108.0, 18610.0], [1208.0, 18809.0], [1210.0, 18955.25], [1214.0, 18890.333333333332], [1194.0, 18644.0], [1192.0, 18625.0], [1154.0, 18704.2], [1158.0, 18865.0], [1156.0, 18605.0], [1160.0, 18591.0], [1164.0, 18826.0], [1182.0, 19163.0], [1176.0, 18561.0], [1174.0, 18827.5], [1172.0, 19481.0], [1170.0, 18739.5], [1168.0, 18736.5], [1270.0, 18591.0], [1266.0, 18860.25], [1274.0, 18987.75], [1276.0, 18680.0], [1248.0, 18669.0], [1272.0, 18760.5], [1246.0, 18720.6], [1218.0, 18803.0], [1222.0, 18786.0], [1226.0, 18828.333333333332], [1244.0, 18787.0], [1242.0, 18570.5], [1262.0, 19131.75], [1258.0, 18633.666666666668], [1338.0, 18665.25], [1318.0, 19041.333333333332], [1326.0, 19368.0], [1342.0, 18768.0], [1334.0, 18926.666666666668], [1330.0, 18530.0], [1328.0, 18755.0], [1286.0, 18530.0], [1288.0, 19459.0], [1292.0, 18769.0], [1310.0, 18769.0], [1306.0, 19522.5], [1304.0, 19438.0], [1300.0, 18630.5], [1298.0, 19110.5], [1296.0, 19122.0], [1406.0, 19470.0], [1380.0, 18521.0], [1382.0, 19035.333333333336], [1388.0, 19513.0], [1390.0, 18532.0], [1404.0, 19069.0], [1402.0, 18522.0], [1400.0, 18585.0], [1396.0, 19178.0], [1394.0, 19070.0], [1392.0, 18519.5], [1346.0, 18699.0], [1348.0, 19098.0], [1356.0, 18867.5], [1372.0, 18873.333333333332], [1362.0, 19074.0], [1360.0, 18630.0], [1414.0, 18738.0], [1450.0, 19108.0], [1470.0, 18755.0], [1440.0, 18756.0], [1444.0, 18677.333333333332], [1438.0, 18756.5], [1408.0, 18549.0], [1412.0, 19033.0], [1418.0, 18751.0], [1420.0, 18759.333333333332], [1434.0, 18598.0], [1424.0, 19069.0], [1454.0, 18664.0], [1452.0, 19372.0], [1498.0, 18494.0], [1494.0, 18755.0], [1500.0, 18792.296296296292], [1492.0, 18677.333333333332], [1490.0, 19067.0], [1488.0, 18531.0], [1472.0, 18744.0], [1075.0, 18861.0], [1081.0, 18994.5], [1087.0, 19182.5], [1061.0, 18918.333333333332], [1065.0, 18617.333333333332], [1067.0, 18769.0], [1071.0, 19182.5], [1069.0, 18602.0], [1083.0, 18860.0], [1079.0, 18849.0], [1073.0, 18620.0], [1039.0, 19636.0], [1037.0, 18628.0], [1035.0, 18613.0], [1033.0, 18693.0], [1031.0, 18693.0], [1029.0, 18713.666666666668], [1025.0, 18935.25], [1055.0, 18849.0], [1053.0, 19230.0], [1051.0, 19114.333333333332], [1047.0, 18810.0], [1045.0, 18866.0], [1043.0, 18860.0], [1099.0, 19152.2], [1143.0, 18886.0], [1141.0, 19073.0], [1101.0, 18615.0], [1093.0, 19412.666666666668], [1089.0, 18855.0], [1135.0, 18932.666666666668], [1131.0, 18839.0], [1119.0, 19002.0], [1109.0, 19023.75], [1107.0, 19508.0], [1105.0, 19563.0], [1211.0, 18808.0], [1201.0, 18929.75], [1191.0, 19133.0], [1187.0, 18820.0], [1213.0, 19064.0], [1209.0, 18629.0], [1207.0, 18806.0], [1183.0, 18830.0], [1153.0, 19151.0], [1159.0, 18935.75], [1161.0, 18575.5], [1179.0, 18847.333333333332], [1175.0, 19105.0], [1171.0, 18585.0], [1169.0, 18706.75], [1199.0, 18646.0], [1197.0, 18803.444444444445], [1221.0, 18563.0], [1269.0, 19079.0], [1217.0, 19010.666666666668], [1223.0, 18626.0], [1231.0, 18802.6], [1245.0, 18789.0], [1243.0, 19066.0], [1255.0, 18852.75], [1251.0, 18888.0], [1331.0, 18556.0], [1343.0, 18957.0], [1315.0, 18646.75], [1313.0, 19077.0], [1321.0, 18766.0], [1325.0, 19564.0], [1323.0, 18880.666666666668], [1327.0, 18764.0], [1341.0, 18804.5], [1335.0, 18644.0], [1329.0, 19074.0], [1311.0, 18887.0], [1285.0, 19449.0], [1287.0, 18704.666666666668], [1289.0, 19108.333333333332], [1291.0, 18773.4], [1309.0, 18755.0], [1307.0, 18591.0], [1305.0, 18553.5], [1303.0, 19079.0], [1301.0, 18773.0], [1407.0, 19432.0], [1403.0, 18675.666666666668], [1377.0, 19072.0], [1379.0, 19073.0], [1383.0, 19071.0], [1387.0, 18521.0], [1389.0, 19228.0], [1401.0, 18748.0], [1375.0, 18555.0], [1347.0, 18767.0], [1349.0, 18917.5], [1355.0, 18745.0], [1353.0, 18669.666666666668], [1359.0, 18748.5], [1371.0, 18522.0], [1369.0, 18521.0], [1367.0, 18760.0], [1365.0, 18579.25], [1361.0, 18525.0], [1461.0, 18740.0], [1443.0, 18516.5], [1469.0, 19065.0], [1463.0, 18906.0], [1409.0, 18762.0], [1413.0, 18798.0], [1417.0, 18760.0], [1421.0, 19025.5], [1437.0, 19066.0], [1433.0, 18633.0], [1429.0, 18643.833333333336], [1427.0, 18630.0], [1455.0, 18624.5], [1449.0, 18547.0], [1447.0, 18901.5], [1495.0, 19048.0], [1491.0, 18513.0], [1487.0, 18756.0], [1485.0, 18757.0], [1481.0, 18759.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[753.1166666666659, 18966.278666666683]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61626716E12, "maxY": 4.9E-324, "series": [{"data": [[1.61626716E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61626716E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626716E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18966.278666666683, "minX": 1.61626716E12, "maxY": 18966.278666666683, "series": [{"data": [[1.61626716E12, 18966.278666666683]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626716E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61626716E12, "maxY": 4.9E-324, "series": [{"data": [[1.61626716E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626716E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61626716E12, "maxY": 4.9E-324, "series": [{"data": [[1.61626716E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626716E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18488.0, "minX": 1.61626716E12, "maxY": 19856.0, "series": [{"data": [[1.61626716E12, 19856.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61626716E12, 19381.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61626716E12, 19670.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61626716E12, 19504.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61626716E12, 18488.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61626716E12, 18884.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626716E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18884.5, "minX": 1500.0, "maxY": 18884.5, "series": [{"data": [[1500.0, 18884.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1500.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1500.0, "maxY": 4.9E-324, "series": [{"data": [[1500.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1500.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.6162671E12, "maxY": 25.0, "series": [{"data": [[1.6162671E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6162671E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61626716E12, "maxY": 25.0, "series": [{"data": [[1.61626716E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61626716E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61626716E12, "maxY": 25.0, "series": [{"data": [[1.61626716E12, 25.0]], "isOverall": false, "label": "CreateRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626716E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.61626716E12, "maxY": 25.0, "series": [{"data": [[1.61626716E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61626716E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

