/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 60120.0, "series": [{"data": [[0.0, 60026.0], [0.1, 60026.0], [0.2, 60026.0], [0.3, 60026.0], [0.4, 60026.0], [0.5, 60026.0], [0.6, 60026.0], [0.7, 60026.0], [0.8, 60026.0], [0.9, 60026.0], [1.0, 60027.0], [1.1, 60027.0], [1.2, 60027.0], [1.3, 60027.0], [1.4, 60027.0], [1.5, 60027.0], [1.6, 60027.0], [1.7, 60027.0], [1.8, 60027.0], [1.9, 60027.0], [2.0, 60027.0], [2.1, 60027.0], [2.2, 60027.0], [2.3, 60027.0], [2.4, 60027.0], [2.5, 60027.0], [2.6, 60027.0], [2.7, 60027.0], [2.8, 60027.0], [2.9, 60027.0], [3.0, 60027.0], [3.1, 60027.0], [3.2, 60027.0], [3.3, 60027.0], [3.4, 60027.0], [3.5, 60027.0], [3.6, 60027.0], [3.7, 60027.0], [3.8, 60027.0], [3.9, 60027.0], [4.0, 60027.0], [4.1, 60027.0], [4.2, 60027.0], [4.3, 60027.0], [4.4, 60027.0], [4.5, 60027.0], [4.6, 60027.0], [4.7, 60027.0], [4.8, 60027.0], [4.9, 60027.0], [5.0, 60027.0], [5.1, 60027.0], [5.2, 60027.0], [5.3, 60027.0], [5.4, 60027.0], [5.5, 60027.0], [5.6, 60027.0], [5.7, 60027.0], [5.8, 60027.0], [5.9, 60027.0], [6.0, 60027.0], [6.1, 60027.0], [6.2, 60027.0], [6.3, 60027.0], [6.4, 60027.0], [6.5, 60027.0], [6.6, 60027.0], [6.7, 60027.0], [6.8, 60027.0], [6.9, 60027.0], [7.0, 60027.0], [7.1, 60027.0], [7.2, 60027.0], [7.3, 60027.0], [7.4, 60027.0], [7.5, 60027.0], [7.6, 60027.0], [7.7, 60027.0], [7.8, 60027.0], [7.9, 60027.0], [8.0, 60027.0], [8.1, 60027.0], [8.2, 60027.0], [8.3, 60027.0], [8.4, 60027.0], [8.5, 60027.0], [8.6, 60027.0], [8.7, 60027.0], [8.8, 60027.0], [8.9, 60027.0], [9.0, 60027.0], [9.1, 60027.0], [9.2, 60027.0], [9.3, 60027.0], [9.4, 60027.0], [9.5, 60027.0], [9.6, 60027.0], [9.7, 60027.0], [9.8, 60027.0], [9.9, 60027.0], [10.0, 60027.0], [10.1, 60027.0], [10.2, 60027.0], [10.3, 60027.0], [10.4, 60027.0], [10.5, 60027.0], [10.6, 60027.0], [10.7, 60027.0], [10.8, 60027.0], [10.9, 60027.0], [11.0, 60027.0], [11.1, 60027.0], [11.2, 60027.0], [11.3, 60027.0], [11.4, 60027.0], [11.5, 60027.0], [11.6, 60027.0], [11.7, 60027.0], [11.8, 60027.0], [11.9, 60027.0], [12.0, 60027.0], [12.1, 60027.0], [12.2, 60027.0], [12.3, 60027.0], [12.4, 60028.0], [12.5, 60028.0], [12.6, 60028.0], [12.7, 60028.0], [12.8, 60028.0], [12.9, 60028.0], [13.0, 60028.0], [13.1, 60028.0], [13.2, 60028.0], [13.3, 60028.0], [13.4, 60028.0], [13.5, 60028.0], [13.6, 60028.0], [13.7, 60028.0], [13.8, 60028.0], [13.9, 60028.0], [14.0, 60028.0], [14.1, 60028.0], [14.2, 60028.0], [14.3, 60028.0], [14.4, 60028.0], [14.5, 60028.0], [14.6, 60028.0], [14.7, 60028.0], [14.8, 60028.0], [14.9, 60028.0], [15.0, 60028.0], [15.1, 60028.0], [15.2, 60028.0], [15.3, 60028.0], [15.4, 60028.0], [15.5, 60028.0], [15.6, 60028.0], [15.7, 60028.0], [15.8, 60028.0], [15.9, 60028.0], [16.0, 60028.0], [16.1, 60028.0], [16.2, 60028.0], [16.3, 60028.0], [16.4, 60028.0], [16.5, 60028.0], [16.6, 60028.0], [16.7, 60028.0], [16.8, 60028.0], [16.9, 60028.0], [17.0, 60028.0], [17.1, 60028.0], [17.2, 60028.0], [17.3, 60028.0], [17.4, 60028.0], [17.5, 60028.0], [17.6, 60028.0], [17.7, 60028.0], [17.8, 60028.0], [17.9, 60028.0], [18.0, 60028.0], [18.1, 60028.0], [18.2, 60028.0], [18.3, 60028.0], [18.4, 60028.0], [18.5, 60028.0], [18.6, 60028.0], [18.7, 60028.0], [18.8, 60028.0], [18.9, 60028.0], [19.0, 60028.0], [19.1, 60028.0], [19.2, 60028.0], [19.3, 60028.0], [19.4, 60028.0], [19.5, 60028.0], [19.6, 60028.0], [19.7, 60028.0], [19.8, 60028.0], [19.9, 60028.0], [20.0, 60028.0], [20.1, 60028.0], [20.2, 60028.0], [20.3, 60028.0], [20.4, 60028.0], [20.5, 60028.0], [20.6, 60028.0], [20.7, 60028.0], [20.8, 60028.0], [20.9, 60028.0], [21.0, 60028.0], [21.1, 60028.0], [21.2, 60028.0], [21.3, 60028.0], [21.4, 60028.0], [21.5, 60028.0], [21.6, 60028.0], [21.7, 60028.0], [21.8, 60028.0], [21.9, 60028.0], [22.0, 60028.0], [22.1, 60028.0], [22.2, 60028.0], [22.3, 60028.0], [22.4, 60028.0], [22.5, 60028.0], [22.6, 60028.0], [22.7, 60028.0], [22.8, 60028.0], [22.9, 60028.0], [23.0, 60028.0], [23.1, 60028.0], [23.2, 60028.0], [23.3, 60028.0], [23.4, 60028.0], [23.5, 60028.0], [23.6, 60028.0], [23.7, 60028.0], [23.8, 60028.0], [23.9, 60028.0], [24.0, 60028.0], [24.1, 60028.0], [24.2, 60028.0], [24.3, 60028.0], [24.4, 60028.0], [24.5, 60028.0], [24.6, 60028.0], [24.7, 60028.0], [24.8, 60028.0], [24.9, 60028.0], [25.0, 60028.0], [25.1, 60028.0], [25.2, 60028.0], [25.3, 60028.0], [25.4, 60028.0], [25.5, 60028.0], [25.6, 60028.0], [25.7, 60028.0], [25.8, 60028.0], [25.9, 60028.0], [26.0, 60028.0], [26.1, 60028.0], [26.2, 60028.0], [26.3, 60028.0], [26.4, 60028.0], [26.5, 60028.0], [26.6, 60028.0], [26.7, 60028.0], [26.8, 60028.0], [26.9, 60028.0], [27.0, 60028.0], [27.1, 60028.0], [27.2, 60028.0], [27.3, 60028.0], [27.4, 60028.0], [27.5, 60028.0], [27.6, 60028.0], [27.7, 60028.0], [27.8, 60028.0], [27.9, 60028.0], [28.0, 60028.0], [28.1, 60028.0], [28.2, 60028.0], [28.3, 60028.0], [28.4, 60028.0], [28.5, 60028.0], [28.6, 60028.0], [28.7, 60028.0], [28.8, 60028.0], [28.9, 60028.0], [29.0, 60028.0], [29.1, 60028.0], [29.2, 60028.0], [29.3, 60028.0], [29.4, 60028.0], [29.5, 60028.0], [29.6, 60028.0], [29.7, 60028.0], [29.8, 60028.0], [29.9, 60028.0], [30.0, 60028.0], [30.1, 60028.0], [30.2, 60028.0], [30.3, 60028.0], [30.4, 60028.0], [30.5, 60028.0], [30.6, 60028.0], [30.7, 60028.0], [30.8, 60028.0], [30.9, 60028.0], [31.0, 60028.0], [31.1, 60028.0], [31.2, 60028.0], [31.3, 60028.0], [31.4, 60028.0], [31.5, 60028.0], [31.6, 60028.0], [31.7, 60028.0], [31.8, 60028.0], [31.9, 60028.0], [32.0, 60028.0], [32.1, 60028.0], [32.2, 60028.0], [32.3, 60028.0], [32.4, 60028.0], [32.5, 60028.0], [32.6, 60028.0], [32.7, 60028.0], [32.8, 60028.0], [32.9, 60028.0], [33.0, 60028.0], [33.1, 60028.0], [33.2, 60028.0], [33.3, 60028.0], [33.4, 60028.0], [33.5, 60028.0], [33.6, 60028.0], [33.7, 60028.0], [33.8, 60028.0], [33.9, 60028.0], [34.0, 60028.0], [34.1, 60028.0], [34.2, 60028.0], [34.3, 60028.0], [34.4, 60028.0], [34.5, 60028.0], [34.6, 60028.0], [34.7, 60028.0], [34.8, 60028.0], [34.9, 60028.0], [35.0, 60028.0], [35.1, 60028.0], [35.2, 60028.0], [35.3, 60028.0], [35.4, 60028.0], [35.5, 60028.0], [35.6, 60028.0], [35.7, 60028.0], [35.8, 60028.0], [35.9, 60028.0], [36.0, 60028.0], [36.1, 60028.0], [36.2, 60028.0], [36.3, 60028.0], [36.4, 60028.0], [36.5, 60028.0], [36.6, 60028.0], [36.7, 60028.0], [36.8, 60028.0], [36.9, 60028.0], [37.0, 60028.0], [37.1, 60028.0], [37.2, 60028.0], [37.3, 60028.0], [37.4, 60028.0], [37.5, 60028.0], [37.6, 60028.0], [37.7, 60028.0], [37.8, 60028.0], [37.9, 60028.0], [38.0, 60028.0], [38.1, 60028.0], [38.2, 60028.0], [38.3, 60028.0], [38.4, 60028.0], [38.5, 60028.0], [38.6, 60028.0], [38.7, 60028.0], [38.8, 60028.0], [38.9, 60028.0], [39.0, 60028.0], [39.1, 60028.0], [39.2, 60028.0], [39.3, 60028.0], [39.4, 60028.0], [39.5, 60028.0], [39.6, 60028.0], [39.7, 60028.0], [39.8, 60028.0], [39.9, 60028.0], [40.0, 60028.0], [40.1, 60028.0], [40.2, 60028.0], [40.3, 60028.0], [40.4, 60028.0], [40.5, 60028.0], [40.6, 60028.0], [40.7, 60028.0], [40.8, 60028.0], [40.9, 60028.0], [41.0, 60028.0], [41.1, 60028.0], [41.2, 60028.0], [41.3, 60028.0], [41.4, 60028.0], [41.5, 60028.0], [41.6, 60028.0], [41.7, 60028.0], [41.8, 60028.0], [41.9, 60028.0], [42.0, 60028.0], [42.1, 60028.0], [42.2, 60028.0], [42.3, 60028.0], [42.4, 60028.0], [42.5, 60028.0], [42.6, 60028.0], [42.7, 60028.0], [42.8, 60028.0], [42.9, 60028.0], [43.0, 60028.0], [43.1, 60028.0], [43.2, 60028.0], [43.3, 60028.0], [43.4, 60028.0], [43.5, 60028.0], [43.6, 60028.0], [43.7, 60028.0], [43.8, 60028.0], [43.9, 60028.0], [44.0, 60028.0], [44.1, 60028.0], [44.2, 60028.0], [44.3, 60028.0], [44.4, 60028.0], [44.5, 60028.0], [44.6, 60028.0], [44.7, 60028.0], [44.8, 60028.0], [44.9, 60028.0], [45.0, 60028.0], [45.1, 60028.0], [45.2, 60028.0], [45.3, 60028.0], [45.4, 60028.0], [45.5, 60028.0], [45.6, 60028.0], [45.7, 60028.0], [45.8, 60028.0], [45.9, 60028.0], [46.0, 60028.0], [46.1, 60028.0], [46.2, 60028.0], [46.3, 60028.0], [46.4, 60028.0], [46.5, 60028.0], [46.6, 60028.0], [46.7, 60028.0], [46.8, 60028.0], [46.9, 60028.0], [47.0, 60028.0], [47.1, 60028.0], [47.2, 60028.0], [47.3, 60028.0], [47.4, 60028.0], [47.5, 60028.0], [47.6, 60028.0], [47.7, 60028.0], [47.8, 60028.0], [47.9, 60028.0], [48.0, 60028.0], [48.1, 60028.0], [48.2, 60028.0], [48.3, 60028.0], [48.4, 60028.0], [48.5, 60028.0], [48.6, 60028.0], [48.7, 60028.0], [48.8, 60028.0], [48.9, 60028.0], [49.0, 60028.0], [49.1, 60028.0], [49.2, 60028.0], [49.3, 60028.0], [49.4, 60028.0], [49.5, 60028.0], [49.6, 60028.0], [49.7, 60028.0], [49.8, 60028.0], [49.9, 60028.0], [50.0, 60028.0], [50.1, 60028.0], [50.2, 60028.0], [50.3, 60028.0], [50.4, 60028.0], [50.5, 60028.0], [50.6, 60028.0], [50.7, 60028.0], [50.8, 60028.0], [50.9, 60028.0], [51.0, 60028.0], [51.1, 60028.0], [51.2, 60028.0], [51.3, 60028.0], [51.4, 60028.0], [51.5, 60028.0], [51.6, 60028.0], [51.7, 60028.0], [51.8, 60028.0], [51.9, 60028.0], [52.0, 60028.0], [52.1, 60028.0], [52.2, 60028.0], [52.3, 60028.0], [52.4, 60028.0], [52.5, 60028.0], [52.6, 60028.0], [52.7, 60028.0], [52.8, 60028.0], [52.9, 60028.0], [53.0, 60028.0], [53.1, 60028.0], [53.2, 60028.0], [53.3, 60028.0], [53.4, 60028.0], [53.5, 60028.0], [53.6, 60028.0], [53.7, 60028.0], [53.8, 60028.0], [53.9, 60028.0], [54.0, 60028.0], [54.1, 60028.0], [54.2, 60028.0], [54.3, 60028.0], [54.4, 60028.0], [54.5, 60028.0], [54.6, 60028.0], [54.7, 60028.0], [54.8, 60028.0], [54.9, 60028.0], [55.0, 60028.0], [55.1, 60028.0], [55.2, 60028.0], [55.3, 60028.0], [55.4, 60028.0], [55.5, 60028.0], [55.6, 60028.0], [55.7, 60028.0], [55.8, 60028.0], [55.9, 60028.0], [56.0, 60028.0], [56.1, 60028.0], [56.2, 60028.0], [56.3, 60028.0], [56.4, 60028.0], [56.5, 60028.0], [56.6, 60028.0], [56.7, 60028.0], [56.8, 60028.0], [56.9, 60028.0], [57.0, 60028.0], [57.1, 60028.0], [57.2, 60028.0], [57.3, 60028.0], [57.4, 60029.0], [57.5, 60029.0], [57.6, 60029.0], [57.7, 60029.0], [57.8, 60029.0], [57.9, 60029.0], [58.0, 60029.0], [58.1, 60029.0], [58.2, 60029.0], [58.3, 60029.0], [58.4, 60029.0], [58.5, 60029.0], [58.6, 60029.0], [58.7, 60029.0], [58.8, 60029.0], [58.9, 60029.0], [59.0, 60029.0], [59.1, 60029.0], [59.2, 60029.0], [59.3, 60029.0], [59.4, 60029.0], [59.5, 60029.0], [59.6, 60029.0], [59.7, 60029.0], [59.8, 60029.0], [59.9, 60029.0], [60.0, 60029.0], [60.1, 60029.0], [60.2, 60029.0], [60.3, 60029.0], [60.4, 60029.0], [60.5, 60029.0], [60.6, 60029.0], [60.7, 60029.0], [60.8, 60029.0], [60.9, 60029.0], [61.0, 60029.0], [61.1, 60029.0], [61.2, 60029.0], [61.3, 60029.0], [61.4, 60029.0], [61.5, 60029.0], [61.6, 60029.0], [61.7, 60029.0], [61.8, 60029.0], [61.9, 60029.0], [62.0, 60029.0], [62.1, 60029.0], [62.2, 60029.0], [62.3, 60029.0], [62.4, 60029.0], [62.5, 60029.0], [62.6, 60029.0], [62.7, 60029.0], [62.8, 60029.0], [62.9, 60029.0], [63.0, 60029.0], [63.1, 60029.0], [63.2, 60029.0], [63.3, 60029.0], [63.4, 60029.0], [63.5, 60029.0], [63.6, 60029.0], [63.7, 60029.0], [63.8, 60029.0], [63.9, 60029.0], [64.0, 60029.0], [64.1, 60029.0], [64.2, 60029.0], [64.3, 60029.0], [64.4, 60029.0], [64.5, 60029.0], [64.6, 60029.0], [64.7, 60029.0], [64.8, 60029.0], [64.9, 60029.0], [65.0, 60029.0], [65.1, 60029.0], [65.2, 60029.0], [65.3, 60029.0], [65.4, 60029.0], [65.5, 60029.0], [65.6, 60029.0], [65.7, 60029.0], [65.8, 60029.0], [65.9, 60029.0], [66.0, 60029.0], [66.1, 60029.0], [66.2, 60029.0], [66.3, 60029.0], [66.4, 60029.0], [66.5, 60029.0], [66.6, 60029.0], [66.7, 60029.0], [66.8, 60029.0], [66.9, 60029.0], [67.0, 60029.0], [67.1, 60029.0], [67.2, 60029.0], [67.3, 60029.0], [67.4, 60029.0], [67.5, 60029.0], [67.6, 60029.0], [67.7, 60029.0], [67.8, 60029.0], [67.9, 60029.0], [68.0, 60029.0], [68.1, 60029.0], [68.2, 60029.0], [68.3, 60029.0], [68.4, 60029.0], [68.5, 60029.0], [68.6, 60029.0], [68.7, 60029.0], [68.8, 60029.0], [68.9, 60029.0], [69.0, 60029.0], [69.1, 60029.0], [69.2, 60029.0], [69.3, 60029.0], [69.4, 60029.0], [69.5, 60029.0], [69.6, 60029.0], [69.7, 60029.0], [69.8, 60029.0], [69.9, 60029.0], [70.0, 60029.0], [70.1, 60029.0], [70.2, 60029.0], [70.3, 60029.0], [70.4, 60029.0], [70.5, 60029.0], [70.6, 60029.0], [70.7, 60029.0], [70.8, 60029.0], [70.9, 60029.0], [71.0, 60029.0], [71.1, 60029.0], [71.2, 60029.0], [71.3, 60029.0], [71.4, 60029.0], [71.5, 60029.0], [71.6, 60029.0], [71.7, 60029.0], [71.8, 60029.0], [71.9, 60029.0], [72.0, 60029.0], [72.1, 60029.0], [72.2, 60029.0], [72.3, 60029.0], [72.4, 60029.0], [72.5, 60029.0], [72.6, 60029.0], [72.7, 60029.0], [72.8, 60029.0], [72.9, 60029.0], [73.0, 60029.0], [73.1, 60029.0], [73.2, 60029.0], [73.3, 60029.0], [73.4, 60029.0], [73.5, 60029.0], [73.6, 60029.0], [73.7, 60029.0], [73.8, 60029.0], [73.9, 60029.0], [74.0, 60029.0], [74.1, 60029.0], [74.2, 60029.0], [74.3, 60029.0], [74.4, 60029.0], [74.5, 60029.0], [74.6, 60029.0], [74.7, 60029.0], [74.8, 60029.0], [74.9, 60029.0], [75.0, 60029.0], [75.1, 60029.0], [75.2, 60029.0], [75.3, 60029.0], [75.4, 60029.0], [75.5, 60029.0], [75.6, 60029.0], [75.7, 60029.0], [75.8, 60029.0], [75.9, 60029.0], [76.0, 60029.0], [76.1, 60029.0], [76.2, 60029.0], [76.3, 60029.0], [76.4, 60029.0], [76.5, 60029.0], [76.6, 60029.0], [76.7, 60029.0], [76.8, 60029.0], [76.9, 60029.0], [77.0, 60029.0], [77.1, 60029.0], [77.2, 60029.0], [77.3, 60029.0], [77.4, 60029.0], [77.5, 60029.0], [77.6, 60029.0], [77.7, 60029.0], [77.8, 60029.0], [77.9, 60029.0], [78.0, 60029.0], [78.1, 60029.0], [78.2, 60029.0], [78.3, 60029.0], [78.4, 60029.0], [78.5, 60029.0], [78.6, 60029.0], [78.7, 60029.0], [78.8, 60029.0], [78.9, 60029.0], [79.0, 60029.0], [79.1, 60029.0], [79.2, 60029.0], [79.3, 60029.0], [79.4, 60029.0], [79.5, 60029.0], [79.6, 60029.0], [79.7, 60029.0], [79.8, 60029.0], [79.9, 60029.0], [80.0, 60029.0], [80.1, 60029.0], [80.2, 60029.0], [80.3, 60029.0], [80.4, 60029.0], [80.5, 60029.0], [80.6, 60029.0], [80.7, 60029.0], [80.8, 60029.0], [80.9, 60029.0], [81.0, 60030.0], [81.1, 60030.0], [81.2, 60030.0], [81.3, 60030.0], [81.4, 60030.0], [81.5, 60030.0], [81.6, 60030.0], [81.7, 60030.0], [81.8, 60030.0], [81.9, 60030.0], [82.0, 60030.0], [82.1, 60030.0], [82.2, 60030.0], [82.3, 60030.0], [82.4, 60030.0], [82.5, 60030.0], [82.6, 60030.0], [82.7, 60030.0], [82.8, 60030.0], [82.9, 60030.0], [83.0, 60030.0], [83.1, 60030.0], [83.2, 60030.0], [83.3, 60030.0], [83.4, 60030.0], [83.5, 60030.0], [83.6, 60030.0], [83.7, 60030.0], [83.8, 60030.0], [83.9, 60030.0], [84.0, 60030.0], [84.1, 60030.0], [84.2, 60030.0], [84.3, 60030.0], [84.4, 60031.0], [84.5, 60031.0], [84.6, 60031.0], [84.7, 60031.0], [84.8, 60031.0], [84.9, 60031.0], [85.0, 60031.0], [85.1, 60031.0], [85.2, 60031.0], [85.3, 60031.0], [85.4, 60031.0], [85.5, 60031.0], [85.6, 60031.0], [85.7, 60031.0], [85.8, 60031.0], [85.9, 60031.0], [86.0, 60032.0], [86.1, 60032.0], [86.2, 60032.0], [86.3, 60032.0], [86.4, 60032.0], [86.5, 60032.0], [86.6, 60032.0], [86.7, 60032.0], [86.8, 60032.0], [86.9, 60032.0], [87.0, 60033.0], [87.1, 60033.0], [87.2, 60033.0], [87.3, 60033.0], [87.4, 60034.0], [87.5, 60034.0], [87.6, 60034.0], [87.7, 60034.0], [87.8, 60034.0], [87.9, 60034.0], [88.0, 60035.0], [88.1, 60035.0], [88.2, 60035.0], [88.3, 60035.0], [88.4, 60035.0], [88.5, 60035.0], [88.6, 60035.0], [88.7, 60035.0], [88.8, 60035.0], [88.9, 60035.0], [89.0, 60035.0], [89.1, 60035.0], [89.2, 60035.0], [89.3, 60035.0], [89.4, 60036.0], [89.5, 60036.0], [89.6, 60036.0], [89.7, 60037.0], [89.8, 60037.0], [89.9, 60037.0], [90.0, 60037.0], [90.1, 60037.0], [90.2, 60037.0], [90.3, 60037.0], [90.4, 60038.0], [90.5, 60038.0], [90.6, 60038.0], [90.7, 60040.0], [90.8, 60040.0], [90.9, 60040.0], [91.0, 60040.0], [91.1, 60040.0], [91.2, 60040.0], [91.3, 60040.0], [91.4, 60041.0], [91.5, 60041.0], [91.6, 60041.0], [91.7, 60047.0], [91.8, 60047.0], [91.9, 60047.0], [92.0, 60053.0], [92.1, 60053.0], [92.2, 60053.0], [92.3, 60053.0], [92.4, 60055.0], [92.5, 60055.0], [92.6, 60055.0], [92.7, 60056.0], [92.8, 60056.0], [92.9, 60056.0], [93.0, 60059.0], [93.1, 60059.0], [93.2, 60059.0], [93.3, 60059.0], [93.4, 60062.0], [93.5, 60062.0], [93.6, 60062.0], [93.7, 60069.0], [93.8, 60069.0], [93.9, 60069.0], [94.0, 60069.0], [94.1, 60069.0], [94.2, 60069.0], [94.3, 60069.0], [94.4, 60073.0], [94.5, 60073.0], [94.6, 60073.0], [94.7, 60077.0], [94.8, 60077.0], [94.9, 60077.0], [95.0, 60080.0], [95.1, 60080.0], [95.2, 60080.0], [95.3, 60080.0], [95.4, 60085.0], [95.5, 60085.0], [95.6, 60085.0], [95.7, 60085.0], [95.8, 60085.0], [95.9, 60085.0], [96.0, 60086.0], [96.1, 60086.0], [96.2, 60086.0], [96.3, 60086.0], [96.4, 60090.0], [96.5, 60090.0], [96.6, 60090.0], [96.7, 60093.0], [96.8, 60093.0], [96.9, 60093.0], [97.0, 60098.0], [97.1, 60098.0], [97.2, 60098.0], [97.3, 60098.0], [97.4, 60100.0], [97.5, 60100.0], [97.6, 60100.0], [97.7, 60101.0], [97.8, 60101.0], [97.9, 60101.0], [98.0, 60107.0], [98.1, 60107.0], [98.2, 60107.0], [98.3, 60107.0], [98.4, 60107.0], [98.5, 60107.0], [98.6, 60107.0], [98.7, 60110.0], [98.8, 60110.0], [98.9, 60110.0], [99.0, 60116.0], [99.1, 60116.0], [99.2, 60116.0], [99.3, 60116.0], [99.4, 60117.0], [99.5, 60117.0], [99.6, 60117.0], [99.7, 60120.0], [99.8, 60120.0], [99.9, 60120.0]], "isOverall": false, "label": "JoinRoom&Wait", "isController": false}, {"data": [[0.0, 28.0], [0.1, 29.0], [0.2, 31.0], [0.3, 32.0], [0.4, 34.0], [0.5, 35.0], [0.6, 36.0], [0.7, 37.0], [0.8, 38.0], [0.9, 40.0], [1.0, 44.0], [1.1, 47.0], [1.2, 48.0], [1.3, 52.0], [1.4, 54.0], [1.5, 56.0], [1.6, 58.0], [1.7, 59.0], [1.8, 61.0], [1.9, 64.0], [2.0, 66.0], [2.1, 69.0], [2.2, 70.0], [2.3, 72.0], [2.4, 73.0], [2.5, 74.0], [2.6, 76.0], [2.7, 78.0], [2.8, 80.0], [2.9, 82.0], [3.0, 82.0], [3.1, 83.0], [3.2, 85.0], [3.3, 88.0], [3.4, 93.0], [3.5, 97.0], [3.6, 98.0], [3.7, 99.0], [3.8, 101.0], [3.9, 101.0], [4.0, 103.0], [4.1, 106.0], [4.2, 108.0], [4.3, 110.0], [4.4, 112.0], [4.5, 114.0], [4.6, 117.0], [4.7, 118.0], [4.8, 120.0], [4.9, 122.0], [5.0, 127.0], [5.1, 131.0], [5.2, 132.0], [5.3, 133.0], [5.4, 134.0], [5.5, 136.0], [5.6, 137.0], [5.7, 138.0], [5.8, 139.0], [5.9, 140.0], [6.0, 141.0], [6.1, 142.0], [6.2, 144.0], [6.3, 147.0], [6.4, 149.0], [6.5, 150.0], [6.6, 153.0], [6.7, 156.0], [6.8, 158.0], [6.9, 159.0], [7.0, 160.0], [7.1, 163.0], [7.2, 165.0], [7.3, 169.0], [7.4, 170.0], [7.5, 171.0], [7.6, 173.0], [7.7, 174.0], [7.8, 175.0], [7.9, 176.0], [8.0, 177.0], [8.1, 177.0], [8.2, 179.0], [8.3, 182.0], [8.4, 185.0], [8.5, 188.0], [8.6, 190.0], [8.7, 190.0], [8.8, 192.0], [8.9, 193.0], [9.0, 193.0], [9.1, 194.0], [9.2, 195.0], [9.3, 196.0], [9.4, 196.0], [9.5, 197.0], [9.6, 198.0], [9.7, 200.0], [9.8, 201.0], [9.9, 202.0], [10.0, 202.0], [10.1, 203.0], [10.2, 204.0], [10.3, 207.0], [10.4, 208.0], [10.5, 209.0], [10.6, 210.0], [10.7, 211.0], [10.8, 211.0], [10.9, 213.0], [11.0, 214.0], [11.1, 216.0], [11.2, 217.0], [11.3, 218.0], [11.4, 219.0], [11.5, 220.0], [11.6, 220.0], [11.7, 221.0], [11.8, 221.0], [11.9, 222.0], [12.0, 222.0], [12.1, 223.0], [12.2, 224.0], [12.3, 224.0], [12.4, 225.0], [12.5, 225.0], [12.6, 226.0], [12.7, 227.0], [12.8, 228.0], [12.9, 229.0], [13.0, 229.0], [13.1, 230.0], [13.2, 231.0], [13.3, 231.0], [13.4, 232.0], [13.5, 232.0], [13.6, 232.0], [13.7, 232.0], [13.8, 233.0], [13.9, 233.0], [14.0, 234.0], [14.1, 234.0], [14.2, 235.0], [14.3, 235.0], [14.4, 235.0], [14.5, 236.0], [14.6, 236.0], [14.7, 236.0], [14.8, 237.0], [14.9, 237.0], [15.0, 237.0], [15.1, 238.0], [15.2, 239.0], [15.3, 240.0], [15.4, 240.0], [15.5, 240.0], [15.6, 241.0], [15.7, 241.0], [15.8, 241.0], [15.9, 242.0], [16.0, 242.0], [16.1, 243.0], [16.2, 244.0], [16.3, 245.0], [16.4, 245.0], [16.5, 246.0], [16.6, 246.0], [16.7, 246.0], [16.8, 246.0], [16.9, 246.0], [17.0, 247.0], [17.1, 247.0], [17.2, 247.0], [17.3, 247.0], [17.4, 247.0], [17.5, 248.0], [17.6, 248.0], [17.7, 248.0], [17.8, 248.0], [17.9, 248.0], [18.0, 248.0], [18.1, 249.0], [18.2, 249.0], [18.3, 249.0], [18.4, 249.0], [18.5, 249.0], [18.6, 249.0], [18.7, 250.0], [18.8, 250.0], [18.9, 250.0], [19.0, 250.0], [19.1, 250.0], [19.2, 251.0], [19.3, 251.0], [19.4, 251.0], [19.5, 252.0], [19.6, 252.0], [19.7, 252.0], [19.8, 252.0], [19.9, 252.0], [20.0, 253.0], [20.1, 253.0], [20.2, 253.0], [20.3, 253.0], [20.4, 253.0], [20.5, 254.0], [20.6, 254.0], [20.7, 254.0], [20.8, 254.0], [20.9, 255.0], [21.0, 255.0], [21.1, 255.0], [21.2, 255.0], [21.3, 256.0], [21.4, 256.0], [21.5, 256.0], [21.6, 256.0], [21.7, 256.0], [21.8, 257.0], [21.9, 257.0], [22.0, 257.0], [22.1, 257.0], [22.2, 257.0], [22.3, 258.0], [22.4, 258.0], [22.5, 258.0], [22.6, 258.0], [22.7, 258.0], [22.8, 259.0], [22.9, 259.0], [23.0, 259.0], [23.1, 259.0], [23.2, 259.0], [23.3, 260.0], [23.4, 260.0], [23.5, 260.0], [23.6, 260.0], [23.7, 260.0], [23.8, 261.0], [23.9, 261.0], [24.0, 261.0], [24.1, 261.0], [24.2, 261.0], [24.3, 261.0], [24.4, 262.0], [24.5, 262.0], [24.6, 262.0], [24.7, 262.0], [24.8, 262.0], [24.9, 263.0], [25.0, 263.0], [25.1, 263.0], [25.2, 263.0], [25.3, 263.0], [25.4, 263.0], [25.5, 264.0], [25.6, 264.0], [25.7, 264.0], [25.8, 264.0], [25.9, 264.0], [26.0, 264.0], [26.1, 264.0], [26.2, 264.0], [26.3, 264.0], [26.4, 265.0], [26.5, 265.0], [26.6, 265.0], [26.7, 265.0], [26.8, 265.0], [26.9, 265.0], [27.0, 265.0], [27.1, 266.0], [27.2, 266.0], [27.3, 266.0], [27.4, 266.0], [27.5, 266.0], [27.6, 266.0], [27.7, 266.0], [27.8, 267.0], [27.9, 267.0], [28.0, 267.0], [28.1, 267.0], [28.2, 267.0], [28.3, 267.0], [28.4, 267.0], [28.5, 267.0], [28.6, 268.0], [28.7, 268.0], [28.8, 268.0], [28.9, 268.0], [29.0, 268.0], [29.1, 268.0], [29.2, 268.0], [29.3, 268.0], [29.4, 268.0], [29.5, 268.0], [29.6, 268.0], [29.7, 268.0], [29.8, 269.0], [29.9, 269.0], [30.0, 269.0], [30.1, 269.0], [30.2, 269.0], [30.3, 269.0], [30.4, 269.0], [30.5, 269.0], [30.6, 269.0], [30.7, 270.0], [30.8, 270.0], [30.9, 270.0], [31.0, 270.0], [31.1, 270.0], [31.2, 270.0], [31.3, 270.0], [31.4, 270.0], [31.5, 270.0], [31.6, 270.0], [31.7, 271.0], [31.8, 271.0], [31.9, 271.0], [32.0, 271.0], [32.1, 271.0], [32.2, 271.0], [32.3, 271.0], [32.4, 271.0], [32.5, 271.0], [32.6, 271.0], [32.7, 271.0], [32.8, 271.0], [32.9, 271.0], [33.0, 271.0], [33.1, 272.0], [33.2, 272.0], [33.3, 272.0], [33.4, 272.0], [33.5, 272.0], [33.6, 272.0], [33.7, 272.0], [33.8, 272.0], [33.9, 272.0], [34.0, 272.0], [34.1, 272.0], [34.2, 272.0], [34.3, 272.0], [34.4, 272.0], [34.5, 273.0], [34.6, 273.0], [34.7, 273.0], [34.8, 273.0], [34.9, 273.0], [35.0, 273.0], [35.1, 273.0], [35.2, 273.0], [35.3, 273.0], [35.4, 273.0], [35.5, 273.0], [35.6, 273.0], [35.7, 273.0], [35.8, 273.0], [35.9, 273.0], [36.0, 273.0], [36.1, 273.0], [36.2, 274.0], [36.3, 274.0], [36.4, 274.0], [36.5, 274.0], [36.6, 274.0], [36.7, 274.0], [36.8, 274.0], [36.9, 274.0], [37.0, 274.0], [37.1, 274.0], [37.2, 274.0], [37.3, 274.0], [37.4, 274.0], [37.5, 274.0], [37.6, 274.0], [37.7, 274.0], [37.8, 274.0], [37.9, 274.0], [38.0, 274.0], [38.1, 274.0], [38.2, 274.0], [38.3, 274.0], [38.4, 274.0], [38.5, 275.0], [38.6, 275.0], [38.7, 275.0], [38.8, 275.0], [38.9, 275.0], [39.0, 275.0], [39.1, 275.0], [39.2, 275.0], [39.3, 275.0], [39.4, 275.0], [39.5, 275.0], [39.6, 275.0], [39.7, 275.0], [39.8, 275.0], [39.9, 275.0], [40.0, 275.0], [40.1, 275.0], [40.2, 275.0], [40.3, 275.0], [40.4, 275.0], [40.5, 275.0], [40.6, 275.0], [40.7, 275.0], [40.8, 275.0], [40.9, 276.0], [41.0, 276.0], [41.1, 276.0], [41.2, 276.0], [41.3, 276.0], [41.4, 276.0], [41.5, 276.0], [41.6, 276.0], [41.7, 276.0], [41.8, 276.0], [41.9, 276.0], [42.0, 276.0], [42.1, 276.0], [42.2, 276.0], [42.3, 276.0], [42.4, 276.0], [42.5, 276.0], [42.6, 276.0], [42.7, 276.0], [42.8, 277.0], [42.9, 277.0], [43.0, 277.0], [43.1, 277.0], [43.2, 277.0], [43.3, 277.0], [43.4, 277.0], [43.5, 277.0], [43.6, 277.0], [43.7, 277.0], [43.8, 277.0], [43.9, 277.0], [44.0, 277.0], [44.1, 277.0], [44.2, 277.0], [44.3, 277.0], [44.4, 277.0], [44.5, 277.0], [44.6, 278.0], [44.7, 278.0], [44.8, 278.0], [44.9, 278.0], [45.0, 278.0], [45.1, 278.0], [45.2, 278.0], [45.3, 278.0], [45.4, 278.0], [45.5, 278.0], [45.6, 278.0], [45.7, 278.0], [45.8, 278.0], [45.9, 278.0], [46.0, 278.0], [46.1, 278.0], [46.2, 278.0], [46.3, 278.0], [46.4, 279.0], [46.5, 279.0], [46.6, 279.0], [46.7, 279.0], [46.8, 279.0], [46.9, 279.0], [47.0, 279.0], [47.1, 279.0], [47.2, 279.0], [47.3, 279.0], [47.4, 279.0], [47.5, 279.0], [47.6, 279.0], [47.7, 279.0], [47.8, 279.0], [47.9, 280.0], [48.0, 280.0], [48.1, 280.0], [48.2, 280.0], [48.3, 280.0], [48.4, 280.0], [48.5, 280.0], [48.6, 280.0], [48.7, 280.0], [48.8, 280.0], [48.9, 280.0], [49.0, 280.0], [49.1, 280.0], [49.2, 280.0], [49.3, 280.0], [49.4, 280.0], [49.5, 280.0], [49.6, 281.0], [49.7, 281.0], [49.8, 281.0], [49.9, 281.0], [50.0, 281.0], [50.1, 281.0], [50.2, 281.0], [50.3, 281.0], [50.4, 281.0], [50.5, 281.0], [50.6, 281.0], [50.7, 281.0], [50.8, 281.0], [50.9, 281.0], [51.0, 281.0], [51.1, 282.0], [51.2, 282.0], [51.3, 282.0], [51.4, 282.0], [51.5, 282.0], [51.6, 282.0], [51.7, 282.0], [51.8, 282.0], [51.9, 282.0], [52.0, 282.0], [52.1, 282.0], [52.2, 282.0], [52.3, 282.0], [52.4, 282.0], [52.5, 282.0], [52.6, 282.0], [52.7, 282.0], [52.8, 282.0], [52.9, 283.0], [53.0, 283.0], [53.1, 283.0], [53.2, 283.0], [53.3, 283.0], [53.4, 283.0], [53.5, 283.0], [53.6, 283.0], [53.7, 283.0], [53.8, 283.0], [53.9, 283.0], [54.0, 283.0], [54.1, 283.0], [54.2, 284.0], [54.3, 284.0], [54.4, 284.0], [54.5, 284.0], [54.6, 284.0], [54.7, 284.0], [54.8, 284.0], [54.9, 284.0], [55.0, 284.0], [55.1, 284.0], [55.2, 284.0], [55.3, 284.0], [55.4, 285.0], [55.5, 285.0], [55.6, 285.0], [55.7, 285.0], [55.8, 285.0], [55.9, 285.0], [56.0, 285.0], [56.1, 285.0], [56.2, 285.0], [56.3, 285.0], [56.4, 285.0], [56.5, 285.0], [56.6, 285.0], [56.7, 286.0], [56.8, 286.0], [56.9, 286.0], [57.0, 286.0], [57.1, 286.0], [57.2, 286.0], [57.3, 286.0], [57.4, 286.0], [57.5, 286.0], [57.6, 286.0], [57.7, 286.0], [57.8, 287.0], [57.9, 287.0], [58.0, 287.0], [58.1, 287.0], [58.2, 287.0], [58.3, 287.0], [58.4, 287.0], [58.5, 287.0], [58.6, 287.0], [58.7, 287.0], [58.8, 287.0], [58.9, 288.0], [59.0, 288.0], [59.1, 288.0], [59.2, 288.0], [59.3, 288.0], [59.4, 288.0], [59.5, 288.0], [59.6, 288.0], [59.7, 289.0], [59.8, 289.0], [59.9, 289.0], [60.0, 289.0], [60.1, 289.0], [60.2, 289.0], [60.3, 290.0], [60.4, 290.0], [60.5, 290.0], [60.6, 290.0], [60.7, 290.0], [60.8, 290.0], [60.9, 291.0], [61.0, 291.0], [61.1, 291.0], [61.2, 291.0], [61.3, 291.0], [61.4, 292.0], [61.5, 292.0], [61.6, 292.0], [61.7, 292.0], [61.8, 292.0], [61.9, 293.0], [62.0, 293.0], [62.1, 293.0], [62.2, 293.0], [62.3, 293.0], [62.4, 294.0], [62.5, 294.0], [62.6, 294.0], [62.7, 294.0], [62.8, 294.0], [62.9, 294.0], [63.0, 295.0], [63.1, 295.0], [63.2, 295.0], [63.3, 295.0], [63.4, 295.0], [63.5, 295.0], [63.6, 295.0], [63.7, 295.0], [63.8, 296.0], [63.9, 296.0], [64.0, 296.0], [64.1, 296.0], [64.2, 296.0], [64.3, 296.0], [64.4, 297.0], [64.5, 297.0], [64.6, 297.0], [64.7, 297.0], [64.8, 297.0], [64.9, 297.0], [65.0, 297.0], [65.1, 297.0], [65.2, 298.0], [65.3, 298.0], [65.4, 298.0], [65.5, 298.0], [65.6, 298.0], [65.7, 298.0], [65.8, 298.0], [65.9, 298.0], [66.0, 298.0], [66.1, 298.0], [66.2, 298.0], [66.3, 299.0], [66.4, 299.0], [66.5, 299.0], [66.6, 299.0], [66.7, 299.0], [66.8, 299.0], [66.9, 299.0], [67.0, 299.0], [67.1, 299.0], [67.2, 300.0], [67.3, 300.0], [67.4, 300.0], [67.5, 300.0], [67.6, 300.0], [67.7, 300.0], [67.8, 300.0], [67.9, 301.0], [68.0, 301.0], [68.1, 301.0], [68.2, 301.0], [68.3, 301.0], [68.4, 301.0], [68.5, 301.0], [68.6, 301.0], [68.7, 302.0], [68.8, 302.0], [68.9, 302.0], [69.0, 302.0], [69.1, 302.0], [69.2, 302.0], [69.3, 302.0], [69.4, 302.0], [69.5, 302.0], [69.6, 303.0], [69.7, 303.0], [69.8, 303.0], [69.9, 303.0], [70.0, 303.0], [70.1, 303.0], [70.2, 303.0], [70.3, 303.0], [70.4, 303.0], [70.5, 304.0], [70.6, 304.0], [70.7, 304.0], [70.8, 304.0], [70.9, 304.0], [71.0, 304.0], [71.1, 304.0], [71.2, 304.0], [71.3, 304.0], [71.4, 305.0], [71.5, 305.0], [71.6, 305.0], [71.7, 305.0], [71.8, 305.0], [71.9, 305.0], [72.0, 305.0], [72.1, 305.0], [72.2, 306.0], [72.3, 306.0], [72.4, 306.0], [72.5, 306.0], [72.6, 306.0], [72.7, 306.0], [72.8, 306.0], [72.9, 306.0], [73.0, 306.0], [73.1, 306.0], [73.2, 306.0], [73.3, 306.0], [73.4, 307.0], [73.5, 307.0], [73.6, 307.0], [73.7, 307.0], [73.8, 307.0], [73.9, 307.0], [74.0, 307.0], [74.1, 307.0], [74.2, 307.0], [74.3, 307.0], [74.4, 307.0], [74.5, 307.0], [74.6, 308.0], [74.7, 308.0], [74.8, 308.0], [74.9, 308.0], [75.0, 308.0], [75.1, 308.0], [75.2, 308.0], [75.3, 308.0], [75.4, 308.0], [75.5, 309.0], [75.6, 309.0], [75.7, 309.0], [75.8, 309.0], [75.9, 309.0], [76.0, 309.0], [76.1, 309.0], [76.2, 309.0], [76.3, 309.0], [76.4, 309.0], [76.5, 309.0], [76.6, 309.0], [76.7, 309.0], [76.8, 309.0], [76.9, 310.0], [77.0, 310.0], [77.1, 310.0], [77.2, 310.0], [77.3, 310.0], [77.4, 310.0], [77.5, 310.0], [77.6, 310.0], [77.7, 310.0], [77.8, 310.0], [77.9, 310.0], [78.0, 310.0], [78.1, 310.0], [78.2, 310.0], [78.3, 310.0], [78.4, 311.0], [78.5, 311.0], [78.6, 311.0], [78.7, 311.0], [78.8, 311.0], [78.9, 311.0], [79.0, 311.0], [79.1, 311.0], [79.2, 311.0], [79.3, 311.0], [79.4, 311.0], [79.5, 311.0], [79.6, 311.0], [79.7, 312.0], [79.8, 312.0], [79.9, 312.0], [80.0, 312.0], [80.1, 312.0], [80.2, 312.0], [80.3, 312.0], [80.4, 312.0], [80.5, 312.0], [80.6, 312.0], [80.7, 312.0], [80.8, 312.0], [80.9, 312.0], [81.0, 312.0], [81.1, 313.0], [81.2, 313.0], [81.3, 313.0], [81.4, 313.0], [81.5, 313.0], [81.6, 313.0], [81.7, 313.0], [81.8, 313.0], [81.9, 313.0], [82.0, 313.0], [82.1, 313.0], [82.2, 314.0], [82.3, 314.0], [82.4, 314.0], [82.5, 314.0], [82.6, 314.0], [82.7, 314.0], [82.8, 314.0], [82.9, 314.0], [83.0, 315.0], [83.1, 315.0], [83.2, 315.0], [83.3, 315.0], [83.4, 315.0], [83.5, 315.0], [83.6, 315.0], [83.7, 315.0], [83.8, 315.0], [83.9, 316.0], [84.0, 316.0], [84.1, 316.0], [84.2, 316.0], [84.3, 316.0], [84.4, 316.0], [84.5, 316.0], [84.6, 316.0], [84.7, 316.0], [84.8, 317.0], [84.9, 317.0], [85.0, 317.0], [85.1, 317.0], [85.2, 317.0], [85.3, 317.0], [85.4, 318.0], [85.5, 318.0], [85.6, 318.0], [85.7, 318.0], [85.8, 318.0], [85.9, 318.0], [86.0, 318.0], [86.1, 319.0], [86.2, 319.0], [86.3, 319.0], [86.4, 319.0], [86.5, 319.0], [86.6, 319.0], [86.7, 319.0], [86.8, 319.0], [86.9, 320.0], [87.0, 320.0], [87.1, 320.0], [87.2, 320.0], [87.3, 320.0], [87.4, 320.0], [87.5, 321.0], [87.6, 321.0], [87.7, 321.0], [87.8, 321.0], [87.9, 321.0], [88.0, 321.0], [88.1, 322.0], [88.2, 322.0], [88.3, 322.0], [88.4, 322.0], [88.5, 322.0], [88.6, 322.0], [88.7, 323.0], [88.8, 323.0], [88.9, 323.0], [89.0, 323.0], [89.1, 323.0], [89.2, 323.0], [89.3, 323.0], [89.4, 324.0], [89.5, 324.0], [89.6, 324.0], [89.7, 324.0], [89.8, 324.0], [89.9, 324.0], [90.0, 325.0], [90.1, 325.0], [90.2, 325.0], [90.3, 325.0], [90.4, 326.0], [90.5, 326.0], [90.6, 326.0], [90.7, 326.0], [90.8, 327.0], [90.9, 327.0], [91.0, 328.0], [91.1, 328.0], [91.2, 328.0], [91.3, 328.0], [91.4, 329.0], [91.5, 329.0], [91.6, 329.0], [91.7, 330.0], [91.8, 330.0], [91.9, 331.0], [92.0, 331.0], [92.1, 331.0], [92.2, 332.0], [92.3, 332.0], [92.4, 332.0], [92.5, 333.0], [92.6, 333.0], [92.7, 333.0], [92.8, 333.0], [92.9, 333.0], [93.0, 333.0], [93.1, 334.0], [93.2, 334.0], [93.3, 334.0], [93.4, 335.0], [93.5, 335.0], [93.6, 336.0], [93.7, 336.0], [93.8, 336.0], [93.9, 337.0], [94.0, 337.0], [94.1, 337.0], [94.2, 338.0], [94.3, 338.0], [94.4, 339.0], [94.5, 339.0], [94.6, 339.0], [94.7, 340.0], [94.8, 341.0], [94.9, 341.0], [95.0, 342.0], [95.1, 342.0], [95.2, 342.0], [95.3, 343.0], [95.4, 343.0], [95.5, 344.0], [95.6, 344.0], [95.7, 345.0], [95.8, 346.0], [95.9, 346.0], [96.0, 347.0], [96.1, 348.0], [96.2, 348.0], [96.3, 349.0], [96.4, 349.0], [96.5, 349.0], [96.6, 350.0], [96.7, 351.0], [96.8, 351.0], [96.9, 352.0], [97.0, 352.0], [97.1, 352.0], [97.2, 353.0], [97.3, 353.0], [97.4, 353.0], [97.5, 354.0], [97.6, 354.0], [97.7, 354.0], [97.8, 355.0], [97.9, 355.0], [98.0, 356.0], [98.1, 356.0], [98.2, 357.0], [98.3, 358.0], [98.4, 359.0], [98.5, 359.0], [98.6, 360.0], [98.7, 361.0], [98.8, 362.0], [98.9, 363.0], [99.0, 364.0], [99.1, 365.0], [99.2, 366.0], [99.3, 369.0], [99.4, 382.0], [99.5, 399.0], [99.6, 1249.0], [99.7, 1253.0], [99.8, 1257.0], [99.9, 1324.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 12026.0], [0.1, 12026.0], [0.2, 12026.0], [0.3, 12026.0], [0.4, 12026.0], [0.5, 12026.0], [0.6, 12026.0], [0.7, 12026.0], [0.8, 12026.0], [0.9, 12026.0], [1.0, 12026.0], [1.1, 12026.0], [1.2, 12026.0], [1.3, 12026.0], [1.4, 12027.0], [1.5, 12027.0], [1.6, 12027.0], [1.7, 12027.0], [1.8, 12027.0], [1.9, 12027.0], [2.0, 12027.0], [2.1, 12027.0], [2.2, 12027.0], [2.3, 12027.0], [2.4, 12027.0], [2.5, 12027.0], [2.6, 12027.0], [2.7, 12027.0], [2.8, 12027.0], [2.9, 12027.0], [3.0, 12027.0], [3.1, 12027.0], [3.2, 12027.0], [3.3, 12027.0], [3.4, 12027.0], [3.5, 12027.0], [3.6, 12027.0], [3.7, 12027.0], [3.8, 12027.0], [3.9, 12027.0], [4.0, 12027.0], [4.1, 12027.0], [4.2, 12027.0], [4.3, 12027.0], [4.4, 12027.0], [4.5, 12027.0], [4.6, 12027.0], [4.7, 12027.0], [4.8, 12027.0], [4.9, 12027.0], [5.0, 12027.0], [5.1, 12027.0], [5.2, 12027.0], [5.3, 12027.0], [5.4, 12027.0], [5.5, 12027.0], [5.6, 12027.0], [5.7, 12027.0], [5.8, 12027.0], [5.9, 12027.0], [6.0, 12027.0], [6.1, 12027.0], [6.2, 12027.0], [6.3, 12027.0], [6.4, 12027.0], [6.5, 12027.0], [6.6, 12027.0], [6.7, 12027.0], [6.8, 12027.0], [6.9, 12027.0], [7.0, 12027.0], [7.1, 12027.0], [7.2, 12027.0], [7.3, 12027.0], [7.4, 12027.0], [7.5, 12027.0], [7.6, 12027.0], [7.7, 12027.0], [7.8, 12027.0], [7.9, 12027.0], [8.0, 12027.0], [8.1, 12027.0], [8.2, 12027.0], [8.3, 12027.0], [8.4, 12027.0], [8.5, 12027.0], [8.6, 12027.0], [8.7, 12027.0], [8.8, 12027.0], [8.9, 12027.0], [9.0, 12028.0], [9.1, 12028.0], [9.2, 12028.0], [9.3, 12028.0], [9.4, 12028.0], [9.5, 12028.0], [9.6, 12028.0], [9.7, 12028.0], [9.8, 12028.0], [9.9, 12028.0], [10.0, 12028.0], [10.1, 12028.0], [10.2, 12028.0], [10.3, 12028.0], [10.4, 12028.0], [10.5, 12028.0], [10.6, 12028.0], [10.7, 12028.0], [10.8, 12028.0], [10.9, 12028.0], [11.0, 12028.0], [11.1, 12028.0], [11.2, 12028.0], [11.3, 12028.0], [11.4, 12028.0], [11.5, 12028.0], [11.6, 12028.0], [11.7, 12028.0], [11.8, 12028.0], [11.9, 12028.0], [12.0, 12028.0], [12.1, 12028.0], [12.2, 12028.0], [12.3, 12028.0], [12.4, 12028.0], [12.5, 12028.0], [12.6, 12028.0], [12.7, 12028.0], [12.8, 12028.0], [12.9, 12028.0], [13.0, 12028.0], [13.1, 12028.0], [13.2, 12028.0], [13.3, 12028.0], [13.4, 12028.0], [13.5, 12028.0], [13.6, 12028.0], [13.7, 12028.0], [13.8, 12028.0], [13.9, 12028.0], [14.0, 12028.0], [14.1, 12028.0], [14.2, 12028.0], [14.3, 12028.0], [14.4, 12028.0], [14.5, 12028.0], [14.6, 12028.0], [14.7, 12028.0], [14.8, 12028.0], [14.9, 12028.0], [15.0, 12028.0], [15.1, 12028.0], [15.2, 12028.0], [15.3, 12028.0], [15.4, 12028.0], [15.5, 12028.0], [15.6, 12028.0], [15.7, 12028.0], [15.8, 12028.0], [15.9, 12028.0], [16.0, 12028.0], [16.1, 12028.0], [16.2, 12028.0], [16.3, 12028.0], [16.4, 12028.0], [16.5, 12028.0], [16.6, 12028.0], [16.7, 12028.0], [16.8, 12028.0], [16.9, 12028.0], [17.0, 12028.0], [17.1, 12028.0], [17.2, 12028.0], [17.3, 12028.0], [17.4, 12028.0], [17.5, 12028.0], [17.6, 12028.0], [17.7, 12028.0], [17.8, 12028.0], [17.9, 12028.0], [18.0, 12028.0], [18.1, 12028.0], [18.2, 12028.0], [18.3, 12028.0], [18.4, 12028.0], [18.5, 12028.0], [18.6, 12028.0], [18.7, 12029.0], [18.8, 12029.0], [18.9, 12029.0], [19.0, 12029.0], [19.1, 12029.0], [19.2, 12029.0], [19.3, 12029.0], [19.4, 12029.0], [19.5, 12029.0], [19.6, 12029.0], [19.7, 12029.0], [19.8, 12029.0], [19.9, 12029.0], [20.0, 12029.0], [20.1, 12029.0], [20.2, 12029.0], [20.3, 12029.0], [20.4, 12029.0], [20.5, 12029.0], [20.6, 12029.0], [20.7, 12029.0], [20.8, 12029.0], [20.9, 12029.0], [21.0, 12030.0], [21.1, 12030.0], [21.2, 12030.0], [21.3, 12030.0], [21.4, 12030.0], [21.5, 12030.0], [21.6, 12030.0], [21.7, 12030.0], [21.8, 12030.0], [21.9, 12030.0], [22.0, 12030.0], [22.1, 12030.0], [22.2, 12030.0], [22.3, 12030.0], [22.4, 12031.0], [22.5, 12031.0], [22.6, 12031.0], [22.7, 12031.0], [22.8, 12031.0], [22.9, 12031.0], [23.0, 12031.0], [23.1, 12031.0], [23.2, 12031.0], [23.3, 12031.0], [23.4, 12032.0], [23.5, 12032.0], [23.6, 12032.0], [23.7, 12033.0], [23.8, 12033.0], [23.9, 12033.0], [24.0, 12034.0], [24.1, 12034.0], [24.2, 12034.0], [24.3, 12034.0], [24.4, 12034.0], [24.5, 12034.0], [24.6, 12034.0], [24.7, 12034.0], [24.8, 12034.0], [24.9, 12034.0], [25.0, 12034.0], [25.1, 12034.0], [25.2, 12034.0], [25.3, 12034.0], [25.4, 12035.0], [25.5, 12035.0], [25.6, 12035.0], [25.7, 12035.0], [25.8, 12035.0], [25.9, 12035.0], [26.0, 12036.0], [26.1, 12036.0], [26.2, 12036.0], [26.3, 12036.0], [26.4, 12037.0], [26.5, 12037.0], [26.6, 12037.0], [26.7, 12037.0], [26.8, 12037.0], [26.9, 12037.0], [27.0, 12037.0], [27.1, 12037.0], [27.2, 12037.0], [27.3, 12037.0], [27.4, 12037.0], [27.5, 12037.0], [27.6, 12037.0], [27.7, 12037.0], [27.8, 12037.0], [27.9, 12037.0], [28.0, 12037.0], [28.1, 12037.0], [28.2, 12037.0], [28.3, 12037.0], [28.4, 12039.0], [28.5, 12039.0], [28.6, 12039.0], [28.7, 12040.0], [28.8, 12040.0], [28.9, 12040.0], [29.0, 12040.0], [29.1, 12040.0], [29.2, 12040.0], [29.3, 12040.0], [29.4, 12041.0], [29.5, 12041.0], [29.6, 12041.0], [29.7, 12041.0], [29.8, 12041.0], [29.9, 12041.0], [30.0, 12041.0], [30.1, 12041.0], [30.2, 12041.0], [30.3, 12041.0], [30.4, 12042.0], [30.5, 12042.0], [30.6, 12042.0], [30.7, 12042.0], [30.8, 12042.0], [30.9, 12042.0], [31.0, 12043.0], [31.1, 12043.0], [31.2, 12043.0], [31.3, 12043.0], [31.4, 12043.0], [31.5, 12043.0], [31.6, 12043.0], [31.7, 12045.0], [31.8, 12045.0], [31.9, 12045.0], [32.0, 12045.0], [32.1, 12045.0], [32.2, 12045.0], [32.3, 12045.0], [32.4, 12046.0], [32.5, 12046.0], [32.6, 12046.0], [32.7, 12047.0], [32.8, 12047.0], [32.9, 12047.0], [33.0, 12047.0], [33.1, 12047.0], [33.2, 12047.0], [33.3, 12047.0], [33.4, 12047.0], [33.5, 12047.0], [33.6, 12047.0], [33.7, 12047.0], [33.8, 12047.0], [33.9, 12047.0], [34.0, 12048.0], [34.1, 12048.0], [34.2, 12048.0], [34.3, 12048.0], [34.4, 12048.0], [34.5, 12048.0], [34.6, 12048.0], [34.7, 12048.0], [34.8, 12048.0], [34.9, 12048.0], [35.0, 12049.0], [35.1, 12049.0], [35.2, 12049.0], [35.3, 12049.0], [35.4, 12049.0], [35.5, 12049.0], [35.6, 12049.0], [35.7, 12050.0], [35.8, 12050.0], [35.9, 12050.0], [36.0, 12050.0], [36.1, 12050.0], [36.2, 12050.0], [36.3, 12050.0], [36.4, 12050.0], [36.5, 12050.0], [36.6, 12050.0], [36.7, 12050.0], [36.8, 12050.0], [36.9, 12050.0], [37.0, 12051.0], [37.1, 12051.0], [37.2, 12051.0], [37.3, 12051.0], [37.4, 12051.0], [37.5, 12051.0], [37.6, 12051.0], [37.7, 12052.0], [37.8, 12052.0], [37.9, 12052.0], [38.0, 12054.0], [38.1, 12054.0], [38.2, 12054.0], [38.3, 12054.0], [38.4, 12054.0], [38.5, 12054.0], [38.6, 12054.0], [38.7, 12054.0], [38.8, 12054.0], [38.9, 12054.0], [39.0, 12054.0], [39.1, 12054.0], [39.2, 12054.0], [39.3, 12054.0], [39.4, 12054.0], [39.5, 12054.0], [39.6, 12054.0], [39.7, 12055.0], [39.8, 12055.0], [39.9, 12055.0], [40.0, 12055.0], [40.1, 12055.0], [40.2, 12055.0], [40.3, 12055.0], [40.4, 12057.0], [40.5, 12057.0], [40.6, 12057.0], [40.7, 12057.0], [40.8, 12057.0], [40.9, 12057.0], [41.0, 12058.0], [41.1, 12058.0], [41.2, 12058.0], [41.3, 12058.0], [41.4, 12068.0], [41.5, 12068.0], [41.6, 12068.0], [41.7, 12076.0], [41.8, 12076.0], [41.9, 12076.0], [42.0, 12079.0], [42.1, 12079.0], [42.2, 12079.0], [42.3, 12079.0], [42.4, 12080.0], [42.5, 12080.0], [42.6, 12080.0], [42.7, 12085.0], [42.8, 12085.0], [42.9, 12085.0], [43.0, 12085.0], [43.1, 12095.0], [43.2, 12095.0], [43.3, 12095.0], [43.4, 12098.0], [43.5, 12098.0], [43.6, 12098.0], [43.7, 12100.0], [43.8, 12100.0], [43.9, 12100.0], [44.0, 12100.0], [44.1, 12101.0], [44.2, 12101.0], [44.3, 12101.0], [44.4, 12104.0], [44.5, 12104.0], [44.6, 12104.0], [44.7, 12108.0], [44.8, 12108.0], [44.9, 12108.0], [45.0, 12108.0], [45.1, 12108.0], [45.2, 12108.0], [45.3, 12108.0], [45.4, 12111.0], [45.5, 12111.0], [45.6, 12111.0], [45.7, 12113.0], [45.8, 12113.0], [45.9, 12113.0], [46.0, 12113.0], [46.1, 12115.0], [46.2, 12115.0], [46.3, 12115.0], [46.4, 12120.0], [46.5, 12120.0], [46.6, 12120.0], [46.7, 12125.0], [46.8, 12125.0], [46.9, 12125.0], [47.0, 12125.0], [47.1, 12127.0], [47.2, 12127.0], [47.3, 12127.0], [47.4, 12128.0], [47.5, 12128.0], [47.6, 12128.0], [47.7, 12129.0], [47.8, 12129.0], [47.9, 12129.0], [48.0, 12129.0], [48.1, 12135.0], [48.2, 12135.0], [48.3, 12135.0], [48.4, 12136.0], [48.5, 12136.0], [48.6, 12136.0], [48.7, 12137.0], [48.8, 12137.0], [48.9, 12137.0], [49.0, 12137.0], [49.1, 12138.0], [49.2, 12138.0], [49.3, 12138.0], [49.4, 12139.0], [49.5, 12139.0], [49.6, 12139.0], [49.7, 12141.0], [49.8, 12141.0], [49.9, 12141.0], [50.0, 12141.0], [50.1, 12148.0], [50.2, 12148.0], [50.3, 12148.0], [50.4, 12155.0], [50.5, 12155.0], [50.6, 12155.0], [50.7, 12158.0], [50.8, 12158.0], [50.9, 12158.0], [51.0, 12158.0], [51.1, 12165.0], [51.2, 12165.0], [51.3, 12165.0], [51.4, 12167.0], [51.5, 12167.0], [51.6, 12167.0], [51.7, 12170.0], [51.8, 12170.0], [51.9, 12170.0], [52.0, 12170.0], [52.1, 12170.0], [52.2, 12170.0], [52.3, 12170.0], [52.4, 12171.0], [52.5, 12171.0], [52.6, 12171.0], [52.7, 12174.0], [52.8, 12174.0], [52.9, 12174.0], [53.0, 12174.0], [53.1, 12175.0], [53.2, 12175.0], [53.3, 12175.0], [53.4, 12177.0], [53.5, 12177.0], [53.6, 12177.0], [53.7, 12184.0], [53.8, 12184.0], [53.9, 12184.0], [54.0, 12184.0], [54.1, 12186.0], [54.2, 12186.0], [54.3, 12186.0], [54.4, 12190.0], [54.5, 12190.0], [54.6, 12190.0], [54.7, 12196.0], [54.8, 12196.0], [54.9, 12196.0], [55.0, 12196.0], [55.1, 12203.0], [55.2, 12203.0], [55.3, 12203.0], [55.4, 12204.0], [55.5, 12204.0], [55.6, 12204.0], [55.7, 12205.0], [55.8, 12205.0], [55.9, 12205.0], [56.0, 12205.0], [56.1, 12206.0], [56.2, 12206.0], [56.3, 12206.0], [56.4, 12206.0], [56.5, 12206.0], [56.6, 12206.0], [56.7, 12208.0], [56.8, 12208.0], [56.9, 12208.0], [57.0, 12208.0], [57.1, 12212.0], [57.2, 12212.0], [57.3, 12212.0], [57.4, 12215.0], [57.5, 12215.0], [57.6, 12215.0], [57.7, 12217.0], [57.8, 12217.0], [57.9, 12217.0], [58.0, 12217.0], [58.1, 12222.0], [58.2, 12222.0], [58.3, 12222.0], [58.4, 12223.0], [58.5, 12223.0], [58.6, 12223.0], [58.7, 12225.0], [58.8, 12225.0], [58.9, 12225.0], [59.0, 12225.0], [59.1, 12228.0], [59.2, 12228.0], [59.3, 12228.0], [59.4, 12229.0], [59.5, 12229.0], [59.6, 12229.0], [59.7, 12236.0], [59.8, 12236.0], [59.9, 12236.0], [60.0, 12236.0], [60.1, 12238.0], [60.2, 12238.0], [60.3, 12238.0], [60.4, 12238.0], [60.5, 12238.0], [60.6, 12238.0], [60.7, 12240.0], [60.8, 12240.0], [60.9, 12240.0], [61.0, 12240.0], [61.1, 12243.0], [61.2, 12243.0], [61.3, 12243.0], [61.4, 12249.0], [61.5, 12249.0], [61.6, 12249.0], [61.7, 12254.0], [61.8, 12254.0], [61.9, 12254.0], [62.0, 12254.0], [62.1, 12255.0], [62.2, 12255.0], [62.3, 12255.0], [62.4, 12258.0], [62.5, 12258.0], [62.6, 12258.0], [62.7, 12265.0], [62.8, 12265.0], [62.9, 12265.0], [63.0, 12265.0], [63.1, 12272.0], [63.2, 12272.0], [63.3, 12272.0], [63.4, 12274.0], [63.5, 12274.0], [63.6, 12274.0], [63.7, 12274.0], [63.8, 12274.0], [63.9, 12274.0], [64.0, 12274.0], [64.1, 12276.0], [64.2, 12276.0], [64.3, 12276.0], [64.4, 12278.0], [64.5, 12278.0], [64.6, 12278.0], [64.7, 12287.0], [64.8, 12287.0], [64.9, 12287.0], [65.0, 12287.0], [65.1, 12289.0], [65.2, 12289.0], [65.3, 12289.0], [65.4, 12290.0], [65.5, 12290.0], [65.6, 12290.0], [65.7, 12291.0], [65.8, 12291.0], [65.9, 12291.0], [66.0, 12291.0], [66.1, 12293.0], [66.2, 12293.0], [66.3, 12293.0], [66.4, 12297.0], [66.5, 12297.0], [66.6, 12297.0], [66.7, 12299.0], [66.8, 12299.0], [66.9, 12299.0], [67.0, 12299.0], [67.1, 12305.0], [67.2, 12305.0], [67.3, 12305.0], [67.4, 12311.0], [67.5, 12311.0], [67.6, 12311.0], [67.7, 12312.0], [67.8, 12312.0], [67.9, 12312.0], [68.0, 12312.0], [68.1, 12316.0], [68.2, 12316.0], [68.3, 12316.0], [68.4, 12317.0], [68.5, 12317.0], [68.6, 12317.0], [68.7, 12317.0], [68.8, 12317.0], [68.9, 12317.0], [69.0, 12317.0], [69.1, 12319.0], [69.2, 12319.0], [69.3, 12319.0], [69.4, 12323.0], [69.5, 12323.0], [69.6, 12323.0], [69.7, 12328.0], [69.8, 12328.0], [69.9, 12328.0], [70.0, 12328.0], [70.1, 12332.0], [70.2, 12332.0], [70.3, 12332.0], [70.4, 12338.0], [70.5, 12338.0], [70.6, 12338.0], [70.7, 12339.0], [70.8, 12339.0], [70.9, 12339.0], [71.0, 12339.0], [71.1, 12343.0], [71.2, 12343.0], [71.3, 12343.0], [71.4, 12344.0], [71.5, 12344.0], [71.6, 12344.0], [71.7, 12347.0], [71.8, 12347.0], [71.9, 12347.0], [72.0, 12347.0], [72.1, 12349.0], [72.2, 12349.0], [72.3, 12349.0], [72.4, 12350.0], [72.5, 12350.0], [72.6, 12350.0], [72.7, 12353.0], [72.8, 12353.0], [72.9, 12353.0], [73.0, 12353.0], [73.1, 12355.0], [73.2, 12355.0], [73.3, 12355.0], [73.4, 12358.0], [73.5, 12358.0], [73.6, 12358.0], [73.7, 12359.0], [73.8, 12359.0], [73.9, 12359.0], [74.0, 12362.0], [74.1, 12362.0], [74.2, 12362.0], [74.3, 12362.0], [74.4, 12365.0], [74.5, 12365.0], [74.6, 12365.0], [74.7, 12368.0], [74.8, 12368.0], [74.9, 12368.0], [75.0, 12375.0], [75.1, 12375.0], [75.2, 12375.0], [75.3, 12375.0], [75.4, 12375.0], [75.5, 12375.0], [75.6, 12375.0], [75.7, 12380.0], [75.8, 12380.0], [75.9, 12380.0], [76.0, 12382.0], [76.1, 12382.0], [76.2, 12382.0], [76.3, 12382.0], [76.4, 12388.0], [76.5, 12388.0], [76.6, 12388.0], [76.7, 12389.0], [76.8, 12389.0], [76.9, 12389.0], [77.0, 12393.0], [77.1, 12393.0], [77.2, 12393.0], [77.3, 12393.0], [77.4, 12399.0], [77.5, 12399.0], [77.6, 12399.0], [77.7, 12401.0], [77.8, 12401.0], [77.9, 12401.0], [78.0, 12401.0], [78.1, 12401.0], [78.2, 12401.0], [78.3, 12401.0], [78.4, 12403.0], [78.5, 12403.0], [78.6, 12403.0], [78.7, 12406.0], [78.8, 12406.0], [78.9, 12406.0], [79.0, 12409.0], [79.1, 12409.0], [79.2, 12409.0], [79.3, 12409.0], [79.4, 12417.0], [79.5, 12417.0], [79.6, 12417.0], [79.7, 12417.0], [79.8, 12417.0], [79.9, 12417.0], [80.0, 12429.0], [80.1, 12429.0], [80.2, 12429.0], [80.3, 12429.0], [80.4, 12430.0], [80.5, 12430.0], [80.6, 12430.0], [80.7, 12431.0], [80.8, 12431.0], [80.9, 12431.0], [81.0, 12431.0], [81.1, 12431.0], [81.2, 12431.0], [81.3, 12431.0], [81.4, 12435.0], [81.5, 12435.0], [81.6, 12435.0], [81.7, 12435.0], [81.8, 12435.0], [81.9, 12435.0], [82.0, 12442.0], [82.1, 12442.0], [82.2, 12442.0], [82.3, 12442.0], [82.4, 12444.0], [82.5, 12444.0], [82.6, 12444.0], [82.7, 12445.0], [82.8, 12445.0], [82.9, 12445.0], [83.0, 12447.0], [83.1, 12447.0], [83.2, 12447.0], [83.3, 12447.0], [83.4, 12448.0], [83.5, 12448.0], [83.6, 12448.0], [83.7, 12450.0], [83.8, 12450.0], [83.9, 12450.0], [84.0, 12457.0], [84.1, 12457.0], [84.2, 12457.0], [84.3, 12457.0], [84.4, 12458.0], [84.5, 12458.0], [84.6, 12458.0], [84.7, 12462.0], [84.8, 12462.0], [84.9, 12462.0], [85.0, 12463.0], [85.1, 12463.0], [85.2, 12463.0], [85.3, 12463.0], [85.4, 12466.0], [85.5, 12466.0], [85.6, 12466.0], [85.7, 12469.0], [85.8, 12469.0], [85.9, 12469.0], [86.0, 12471.0], [86.1, 12471.0], [86.2, 12471.0], [86.3, 12471.0], [86.4, 12473.0], [86.5, 12473.0], [86.6, 12473.0], [86.7, 12484.0], [86.8, 12484.0], [86.9, 12484.0], [87.0, 12484.0], [87.1, 12484.0], [87.2, 12484.0], [87.3, 12484.0], [87.4, 12490.0], [87.5, 12490.0], [87.6, 12490.0], [87.7, 12492.0], [87.8, 12492.0], [87.9, 12492.0], [88.0, 12493.0], [88.1, 12493.0], [88.2, 12493.0], [88.3, 12493.0], [88.4, 12494.0], [88.5, 12494.0], [88.6, 12494.0], [88.7, 12498.0], [88.8, 12498.0], [88.9, 12498.0], [89.0, 12499.0], [89.1, 12499.0], [89.2, 12499.0], [89.3, 12499.0], [89.4, 12501.0], [89.5, 12501.0], [89.6, 12501.0], [89.7, 12507.0], [89.8, 12507.0], [89.9, 12507.0], [90.0, 12512.0], [90.1, 12512.0], [90.2, 12512.0], [90.3, 12512.0], [90.4, 12513.0], [90.5, 12513.0], [90.6, 12513.0], [90.7, 12514.0], [90.8, 12514.0], [90.9, 12514.0], [91.0, 12514.0], [91.1, 12514.0], [91.2, 12514.0], [91.3, 12514.0], [91.4, 12517.0], [91.5, 12517.0], [91.6, 12517.0], [91.7, 12525.0], [91.8, 12525.0], [91.9, 12525.0], [92.0, 12527.0], [92.1, 12527.0], [92.2, 12527.0], [92.3, 12527.0], [92.4, 12530.0], [92.5, 12530.0], [92.6, 12530.0], [92.7, 12532.0], [92.8, 12532.0], [92.9, 12532.0], [93.0, 12535.0], [93.1, 12535.0], [93.2, 12535.0], [93.3, 12535.0], [93.4, 12544.0], [93.5, 12544.0], [93.6, 12544.0], [93.7, 12545.0], [93.8, 12545.0], [93.9, 12545.0], [94.0, 12546.0], [94.1, 12546.0], [94.2, 12546.0], [94.3, 12546.0], [94.4, 12550.0], [94.5, 12550.0], [94.6, 12550.0], [94.7, 12555.0], [94.8, 12555.0], [94.9, 12555.0], [95.0, 12557.0], [95.1, 12557.0], [95.2, 12557.0], [95.3, 12557.0], [95.4, 12560.0], [95.5, 12560.0], [95.6, 12560.0], [95.7, 12560.0], [95.8, 12560.0], [95.9, 12560.0], [96.0, 12561.0], [96.1, 12561.0], [96.2, 12561.0], [96.3, 12561.0], [96.4, 12568.0], [96.5, 12568.0], [96.6, 12568.0], [96.7, 12569.0], [96.8, 12569.0], [96.9, 12569.0], [97.0, 12575.0], [97.1, 12575.0], [97.2, 12575.0], [97.3, 12575.0], [97.4, 12578.0], [97.5, 12578.0], [97.6, 12578.0], [97.7, 12580.0], [97.8, 12580.0], [97.9, 12580.0], [98.0, 12582.0], [98.1, 12582.0], [98.2, 12582.0], [98.3, 12582.0], [98.4, 12589.0], [98.5, 12589.0], [98.6, 12589.0], [98.7, 12596.0], [98.8, 12596.0], [98.9, 12596.0], [99.0, 12597.0], [99.1, 12597.0], [99.2, 12597.0], [99.3, 12597.0], [99.4, 12598.0], [99.5, 12598.0], [99.6, 12598.0], [99.7, 12601.0], [99.8, 12601.0], [99.9, 12601.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8629.0, "series": [{"data": [[60000.0, 292.0], [60100.0, 8.0]], "isOverall": false, "label": "JoinRoom&Wait", "isController": false}, {"data": [[0.0, 555.0], [300.0, 4848.0], [1200.0, 47.0], [1300.0, 19.0], [100.0, 894.0], [200.0, 8629.0], [400.0, 8.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[12000.0, 131.0], [12200.0, 36.0], [12100.0, 34.0], [12400.0, 35.0], [12500.0, 31.0], [12300.0, 32.0], [12600.0, 1.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 568.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 14366.0, "series": [{"data": [[0.0, 568.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 14366.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 666.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 150.93333333333337, "minX": 1.61930082E12, "maxY": 278.25673333333253, "series": [{"data": [[1.61930088E12, 150.93333333333337]], "isOverall": false, "label": "LB_ver2_Join&Wait", "isController": false}, {"data": [[1.61930082E12, 164.18999999999994]], "isOverall": false, "label": "LB_ver2_CreateRoom", "isController": false}, {"data": [[1.61930082E12, 278.25673333333253]], "isOverall": false, "label": "LB_ver2_Join&Ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61930088E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 5.0, "maxY": 60095.666666666664, "series": [{"data": [[5.0, 60033.6], [10.0, 60033.8], [11.0, 60028.0], [12.0, 60029.0], [13.0, 60028.0], [14.0, 60028.0], [15.0, 60028.0], [16.0, 60028.0], [17.0, 60028.0], [18.0, 60029.0], [19.0, 60028.0], [20.0, 60030.0], [22.0, 60028.0], [23.0, 60029.0], [24.0, 60028.0], [25.0, 60028.0], [26.0, 60029.0], [27.0, 60028.0], [28.0, 60028.0], [29.0, 60028.0], [30.0, 60028.0], [31.0, 60027.0], [33.0, 60029.0], [32.0, 60028.0], [35.0, 60028.0], [34.0, 60028.0], [37.0, 60028.0], [36.0, 60027.0], [39.0, 60028.0], [38.0, 60028.0], [41.0, 60035.0], [40.0, 60028.0], [43.0, 60030.0], [45.0, 60028.0], [44.0, 60029.0], [47.0, 60027.0], [46.0, 60028.0], [49.0, 60027.0], [48.0, 60027.0], [51.0, 60028.0], [50.0, 60028.0], [53.0, 60027.0], [52.0, 60028.0], [55.0, 60029.0], [54.0, 60028.0], [57.0, 60028.0], [56.0, 60028.0], [59.0, 60028.0], [58.0, 60027.0], [61.0, 60028.0], [60.0, 60028.0], [63.0, 60028.0], [62.0, 60028.0], [67.0, 60028.0], [66.0, 60028.0], [65.0, 60028.0], [64.0, 60028.0], [71.0, 60028.0], [70.0, 60029.5], [68.0, 60027.0], [75.0, 60028.0], [74.0, 60029.0], [73.0, 60028.0], [72.0, 60028.0], [79.0, 60028.0], [78.0, 60028.0], [77.0, 60028.0], [76.0, 60027.0], [83.0, 60029.0], [82.0, 60027.0], [81.0, 60027.0], [80.0, 60028.0], [87.0, 60029.0], [86.0, 60028.0], [85.0, 60029.0], [84.0, 60029.0], [91.0, 60028.0], [90.0, 60028.0], [89.0, 60029.0], [88.0, 60028.0], [95.0, 60028.0], [94.0, 60029.0], [93.0, 60027.0], [92.0, 60029.0], [99.0, 60028.0], [98.0, 60028.0], [97.0, 60028.0], [96.0, 60028.0], [102.0, 60029.0], [101.0, 60028.0], [100.0, 60029.0], [107.0, 60027.0], [106.0, 60028.0], [105.0, 60029.0], [104.0, 60028.0], [111.0, 60027.0], [110.0, 60029.0], [109.0, 60028.0], [108.0, 60026.0], [115.0, 60028.0], [114.0, 60028.0], [113.0, 60028.0], [112.0, 60028.0], [119.0, 60028.0], [118.0, 60028.0], [117.0, 60029.0], [116.0, 60026.0], [123.0, 60028.0], [122.0, 60029.0], [121.0, 60027.0], [120.0, 60029.0], [127.0, 60028.0], [126.0, 60028.0], [125.0, 60028.0], [124.0, 60029.0], [135.0, 60027.0], [134.0, 60028.5], [132.0, 60027.5], [130.0, 60028.0], [129.0, 60028.0], [128.0, 60027.0], [143.0, 60028.0], [142.0, 60031.0], [141.0, 60030.0], [140.0, 60028.0], [139.0, 60027.0], [138.0, 60028.0], [137.0, 60028.0], [136.0, 60029.0], [151.0, 60028.0], [150.0, 60029.0], [149.0, 60028.0], [148.0, 60028.0], [147.0, 60026.0], [146.0, 60029.0], [145.0, 60028.0], [144.0, 60029.0], [159.0, 60028.0], [158.0, 60028.0], [156.0, 60027.0], [155.0, 60028.0], [154.0, 60032.0], [153.0, 60029.0], [152.0, 60029.0], [167.0, 60029.0], [166.0, 60028.0], [165.0, 60028.0], [164.0, 60028.0], [163.0, 60029.0], [162.0, 60028.0], [161.0, 60029.0], [160.0, 60030.0], [175.0, 60028.0], [174.0, 60028.0], [173.0, 60035.0], [172.0, 60029.0], [171.0, 60031.0], [170.0, 60029.0], [169.0, 60029.0], [168.0, 60029.0], [183.0, 60028.0], [182.0, 60028.0], [181.0, 60028.0], [180.0, 60028.0], [179.0, 60027.0], [178.0, 60030.0], [177.0, 60029.0], [176.0, 60028.0], [191.0, 60028.0], [190.0, 60031.5], [188.0, 60030.0], [187.0, 60029.0], [186.0, 60029.0], [185.0, 60029.0], [184.0, 60028.0], [199.0, 60028.0], [198.0, 60029.0], [197.0, 60029.0], [196.0, 60028.0], [195.0, 60028.0], [194.0, 60028.0], [193.0, 60030.0], [192.0, 60028.0], [207.0, 60028.0], [206.0, 60028.0], [205.0, 60029.0], [204.0, 60027.0], [203.0, 60029.0], [202.0, 60027.0], [201.0, 60031.5], [215.0, 60028.0], [214.0, 60028.0], [213.0, 60028.0], [212.0, 60029.0], [211.0, 60030.0], [210.0, 60029.0], [209.0, 60029.0], [208.0, 60029.0], [223.0, 60028.0], [222.0, 60029.0], [221.0, 60028.0], [220.0, 60027.0], [219.0, 60027.0], [218.0, 60027.0], [217.0, 60028.0], [216.0, 60028.0], [231.0, 60028.0], [230.0, 60027.0], [229.0, 60028.0], [228.0, 60028.0], [227.0, 60027.0], [226.0, 60027.0], [225.0, 60028.0], [224.0, 60029.0], [239.0, 60028.0], [238.0, 60029.0], [237.0, 60029.0], [236.0, 60028.0], [235.0, 60029.0], [234.0, 60029.0], [233.0, 60028.0], [232.0, 60027.0], [247.0, 60028.0], [246.0, 60029.0], [245.0, 60028.0], [244.0, 60028.0], [243.0, 60029.0], [242.0, 60027.0], [241.0, 60028.0], [240.0, 60028.0], [255.0, 60028.0], [254.0, 60028.0], [253.0, 60029.0], [252.0, 60028.0], [251.0, 60029.0], [250.0, 60028.0], [249.0, 60029.0], [248.0, 60028.0], [264.0, 60029.0], [268.0, 60031.0], [267.0, 60028.0], [266.0, 60027.0], [265.0, 60028.0], [263.0, 60029.0], [262.0, 60029.0], [261.0, 60028.0], [260.0, 60028.0], [259.0, 60030.0], [258.0, 60028.0], [257.0, 60029.0], [256.0, 60029.0], [285.0, 60059.75], [284.0, 60095.5], [282.0, 60069.0], [281.0, 60069.0], [273.0, 60069.2], [300.0, 60055.0], [299.0, 60095.666666666664], [296.0, 60078.25], [288.0, 60079.333333333336]], "isOverall": false, "label": "JoinRoom&Wait", "isController": false}, {"data": [[150.93333333333337, 60033.369999999995]], "isOverall": false, "label": "JoinRoom&Wait-Aggregated", "isController": false}, {"data": [[303.0, 34.0], [302.0, 31.0], [301.0, 29.0], [318.0, 29.75], [319.0, 28.0], [317.0, 28.5], [316.0, 29.0], [315.0, 31.0], [314.0, 28.0], [313.0, 30.0], [312.0, 31.0], [311.0, 28.0], [305.0, 29.0], [304.0, 34.0], [307.0, 29.0], [306.0, 28.0], [310.0, 30.0], [309.0, 30.0], [308.0, 28.0], [334.0, 97.26666666666668], [335.0, 107.66666666666669], [333.0, 83.83333333333334], [332.0, 71.0], [331.0, 58.333333333333336], [330.0, 51.6], [328.0, 48.25], [327.0, 46.666666666666664], [321.0, 32.5], [320.0, 30.0], [323.0, 34.666666666666664], [322.0, 34.0], [326.0, 46.57142857142857], [325.0, 37.0], [324.0, 35.0], [350.0, 121.0], [351.0, 124.42857142857143], [349.0, 121.0], [348.0, 116.0909090909091], [347.0, 114.0], [346.0, 112.0], [345.0, 114.0], [344.0, 111.0], [343.0, 110.5], [337.0, 119.8], [336.0, 119.66666666666666], [339.0, 118.0], [338.0, 118.0], [342.0, 112.0], [341.0, 113.0], [340.0, 116.0], [367.0, 140.0], [365.0, 140.0], [355.0, 133.0], [354.0, 133.0], [353.0, 130.0], [352.0, 130.0], [363.0, 140.0], [362.0, 140.0], [361.0, 139.0], [360.0, 137.0], [359.0, 138.0], [358.0, 133.0], [357.0, 133.0], [356.0, 134.0], [382.0, 131.0], [383.0, 130.0], [381.0, 131.0], [380.0, 131.0], [379.0, 131.0], [377.0, 132.0], [376.0, 133.0], [375.0, 135.16666666666666], [369.0, 142.0], [368.0, 136.0], [371.0, 140.0], [370.0, 140.0], [374.0, 135.0], [373.0, 139.5], [398.0, 149.0], [399.0, 152.0], [397.0, 148.0], [396.0, 147.6], [395.0, 145.0], [394.0, 143.66666666666666], [393.0, 139.4], [391.0, 138.0], [385.0, 134.0], [384.0, 134.0], [390.0, 133.85714285714286], [389.0, 133.75], [388.0, 135.0], [414.0, 159.0], [415.0, 158.66666666666666], [413.0, 159.0], [412.0, 159.66666666666666], [411.0, 155.88888888888889], [409.0, 157.5], [408.0, 158.33333333333334], [407.0, 160.25], [401.0, 156.0], [400.0, 153.0], [403.0, 159.5], [402.0, 159.38461538461542], [406.0, 159.5], [405.0, 161.0], [404.0, 157.5], [419.0, 159.5], [430.0, 173.0], [431.0, 173.0], [429.0, 172.5], [427.0, 174.0], [426.0, 164.88888888888889], [422.0, 164.0], [421.0, 166.0], [420.0, 161.44444444444446], [418.0, 159.0], [417.0, 159.0], [416.0, 158.5], [446.0, 192.33333333333334], [447.0, 194.0], [444.0, 191.2857142857143], [435.0, 181.85714285714286], [434.0, 180.10000000000002], [433.0, 176.25925925925927], [443.0, 190.0], [442.0, 189.75], [441.0, 189.0], [440.0, 189.5], [439.0, 186.79999999999995], [438.0, 185.5], [437.0, 187.0], [436.0, 185.0], [462.0, 202.0], [463.0, 200.33333333333334], [461.0, 202.5], [460.0, 203.33333333333334], [459.0, 204.25], [458.0, 201.33333333333334], [457.0, 201.0], [456.0, 198.4], [455.0, 198.2], [449.0, 195.0], [448.0, 194.33333333333334], [451.0, 193.0], [450.0, 194.83333333333334], [454.0, 198.0], [453.0, 195.33333333333334], [452.0, 194.92857142857142], [478.0, 216.75], [479.0, 216.5], [477.0, 217.0], [476.0, 219.28571428571428], [475.0, 218.0], [474.0, 216.66666666666666], [473.0, 211.66666666666669], [472.0, 209.5], [471.0, 209.72727272727272], [465.0, 210.0], [464.0, 203.0], [467.0, 204.125], [466.0, 205.50000000000003], [470.0, 209.0], [469.0, 208.5], [468.0, 205.57142857142858], [494.0, 222.0], [495.0, 221.68421052631584], [493.0, 222.0], [492.0, 220.72727272727272], [491.0, 220.0], [490.0, 222.66666666666669], [489.0, 225.0], [488.0, 226.08333333333334], [487.0, 226.0], [481.0, 228.66666666666666], [480.0, 223.0], [483.0, 229.0], [482.0, 226.0], [486.0, 224.42307692307693], [485.0, 228.0], [484.0, 228.0], [510.0, 233.85714285714286], [511.0, 233.45454545454547], [509.0, 232.14285714285717], [508.0, 232.81481481481478], [507.0, 233.38888888888889], [506.0, 230.0], [505.0, 228.0], [504.0, 231.0], [503.0, 228.4], [497.0, 220.0], [496.0, 220.8], [499.0, 219.39999999999998], [498.0, 219.28571428571428], [502.0, 225.5], [501.0, 224.75], [500.0, 224.0], [537.0, 247.8], [541.0, 258.0], [543.0, 259.3333333333333], [529.0, 254.125], [528.0, 254.0], [531.0, 249.24999999999997], [530.0, 252.0], [533.0, 246.75], [532.0, 247.61111111111111], [540.0, 254.6], [539.0, 253.0], [538.0, 250.8275862068965], [536.0, 246.0], [519.0, 232.57142857142856], [518.0, 236.09999999999997], [517.0, 233.83333333333334], [516.0, 230.8], [515.0, 233.92307692307693], [514.0, 234.55555555555554], [513.0, 233.57575757575754], [512.0, 233.5], [527.0, 256.3157894736842], [526.0, 258.27272727272725], [525.0, 258.2], [524.0, 251.5], [523.0, 247.84999999999997], [522.0, 243.0], [521.0, 240.57142857142856], [520.0, 235.66666666666666], [535.0, 246.3], [534.0, 248.92307692307693], [572.0, 275.0], [575.0, 283.21666666666664], [561.0, 271.33333333333337], [560.0, 269.69565217391295], [563.0, 263.9583333333333], [562.0, 267.728813559322], [565.0, 268.0000000000001], [564.0, 263.57142857142856], [574.0, 274.25], [573.0, 271.78873239436626], [571.0, 273.23], [570.0, 280.0], [569.0, 274.06666666666666], [568.0, 270.54545454545456], [559.0, 269.3333333333333], [545.0, 260.8125], [544.0, 260.25], [547.0, 263.0], [546.0, 262.0], [549.0, 255.9090909090909], [548.0, 259.0434782608697], [551.0, 253.66666666666669], [550.0, 252.96874999999997], [557.0, 266.77777777777777], [556.0, 267.40000000000003], [555.0, 267.3571428571429], [554.0, 263.2307692307693], [553.0, 259.37209302325584], [552.0, 257.16666666666674], [567.0, 268.0], [566.0, 269.8181818181818], [601.0, 346.39285714285717], [596.0, 516.2295081967212], [607.0, 352.4999999999999], [593.0, 321.75], [592.0, 327.09999999999997], [600.0, 300.1351915648817], [583.0, 291.84482758620686], [582.0, 280.7627118644068], [581.0, 266.7142857142857], [580.0, 278.7037037037037], [579.0, 290.1111111111111], [578.0, 292.6666666666667], [577.0, 285.65], [576.0, 279.5], [591.0, 332.0], [590.0, 331.0], [589.0, 329.0], [588.0, 332.8], [587.0, 331.5], [586.0, 323.09999999999997], [585.0, 301.1666666666667], [584.0, 309.1428571428571], [599.0, 318.5], [598.0, 321.1], [597.0, 332.0810810810811], [595.0, 313.0], [594.0, 318.5], [633.0, 79.86956521739128], [626.0, 354.0], [636.0, 356.8333333333333], [638.0, 359.0], [625.0, 355.66666666666663], [634.0, 351.75], [632.0, 354.5], [614.0, 351.5], [613.0, 350.1666666666667], [612.0, 348.0], [611.0, 352.0], [610.0, 353.0000000000001], [623.0, 353.6666666666667], [622.0, 352.7142857142857], [620.0, 349.0], [619.0, 350.0], [618.0, 350.5], [617.0, 349.3333333333333], [616.0, 351.4], [631.0, 355.8], [629.0, 363.0], [627.0, 353.6666666666667], [647.0, 39.09090909090909], [643.0, 34.333333333333336], [640.0, 75.375], [642.0, 357.0], [641.0, 354.0], [644.0, 33.0], [645.0, 131.1], [646.0, 37.666666666666664], [656.0, 32.5], [671.0, 48.0], [669.0, 131.33333333333331], [668.0, 315.25], [670.0, 43.8], [666.0, 69.44444444444444], [667.0, 131.0], [664.0, 131.0], [665.0, 150.0], [657.0, 32.42857142857143], [658.0, 33.0], [659.0, 36.0], [660.0, 36.333333333333336], [661.0, 35.0], [663.0, 178.33333333333331], [648.0, 120.5], [649.0, 37.6], [651.0, 34.0], [650.0, 348.3333333333333], [652.0, 35.5], [653.0, 31.285714285714285], [654.0, 339.6666666666667], [655.0, 30.714285714285715], [678.0, 227.83333333333334], [674.0, 47.0], [673.0, 46.66666666666667], [685.0, 56.666666666666664], [686.0, 315.6666666666667], [687.0, 58.0], [675.0, 48.0], [676.0, 49.0], [677.0, 207.46666666666664], [688.0, 129.42857142857142], [702.0, 130.85714285714286], [703.0, 247.5], [700.0, 58.75], [701.0, 58.25], [698.0, 172.66666666666669], [699.0, 160.8], [696.0, 120.77777777777777], [679.0, 316.5], [697.0, 155.5], [689.0, 55.8], [692.0, 59.666666666666664], [691.0, 312.5], [694.0, 105.5], [695.0, 66.0], [680.0, 227.33333333333334], [681.0, 184.62499999999997], [682.0, 61.0], [684.0, 85.63157894736842], [722.0, 69.33333333333334], [705.0, 135.83333333333334], [704.0, 311.25], [706.0, 87.21538461538464], [707.0, 282.4285714285714], [708.0, 312.6], [729.0, 195.25], [731.0, 81.0], [734.0, 87.0], [717.0, 70.0], [716.0, 314.5], [723.0, 69.0], [724.0, 72.4], [725.0, 68.0], [726.0, 71.2], [747.0, 99.63636363636365], [743.0, 69.0], [741.0, 313.0], [760.0, 104.0], [762.0, 107.5], [764.0, 109.0], [767.0, 117.0], [752.0, 86.5], [754.0, 89.0], [756.0, 315.75], [757.0, 97.33333333333334], [758.0, 100.0], [759.0, 101.5], [744.0, 70.66666666666667], [745.0, 73.18749999999999], [746.0, 76.05263157894738], [748.0, 90.49999999999999], [749.0, 82.48148148148148], [750.0, 84.75], [751.0, 86.8], [775.0, 102.5], [769.0, 119.0], [768.0, 114.0], [782.0, 105.55555555555556], [783.0, 106.0], [780.0, 101.61538461538461], [781.0, 104.0], [770.0, 183.0], [772.0, 117.0], [773.0, 111.85714285714285], [784.0, 107.88888888888887], [799.0, 142.0], [797.0, 138.0], [798.0, 141.5], [794.0, 132.0], [795.0, 311.0], [796.0, 135.0], [792.0, 126.0], [793.0, 129.0], [785.0, 110.5], [786.0, 113.0], [787.0, 114.625], [788.0, 117.0], [789.0, 120.33333333333333], [790.0, 122.0], [791.0, 124.33333333333334], [776.0, 98.5], [777.0, 98.14285714285715], [778.0, 190.71428571428572], [779.0, 100.92307692307692], [807.0, 143.42857142857142], [801.0, 140.0], [800.0, 143.66666666666666], [814.0, 137.66666666666666], [803.0, 142.0], [804.0, 141.85714285714286], [805.0, 139.0], [816.0, 139.0], [830.0, 148.0], [831.0, 148.0], [828.0, 142.875], [829.0, 146.0], [826.0, 139.0], [827.0, 141.5], [824.0, 136.0], [825.0, 137.0], [817.0, 137.85714285714286], [818.0, 135.5], [819.0, 134.25], [820.0, 130.8], [821.0, 130.83333333333334], [822.0, 132.33333333333334], [823.0, 134.25], [808.0, 139.2], [810.0, 142.0], [811.0, 141.5], [813.0, 141.0], [833.0, 148.5], [832.0, 148.77777777777777], [846.0, 169.4], [847.0, 170.33333333333334], [844.0, 170.0], [845.0, 183.54545454545456], [842.0, 164.0], [843.0, 166.5], [834.0, 150.0], [835.0, 152.66666666666666], [836.0, 152.57142857142858], [838.0, 154.0], [839.0, 156.0], [856.0, 169.5], [857.0, 171.0], [858.0, 171.0], [860.0, 177.0], [861.0, 173.75], [863.0, 175.25], [849.0, 172.8], [851.0, 175.2], [852.0, 172.8], [855.0, 172.0], [840.0, 159.0], [841.0, 161.0], [867.0, 178.33333333333331], [864.0, 176.75], [879.0, 177.66666666666666], [877.0, 174.0], [878.0, 177.0], [875.0, 172.66666666666666], [876.0, 173.0], [865.0, 177.5], [866.0, 177.0], [868.0, 178.83333333333334], [869.0, 175.5], [870.0, 170.0], [871.0, 170.0], [880.0, 185.66666666666669], [888.0, 191.33333333333331], [890.0, 199.5], [891.0, 190.0], [892.0, 190.66666666666666], [893.0, 188.5], [894.0, 218.68421052631578], [895.0, 200.0], [885.0, 194.66666666666666], [872.0, 170.33333333333334], [874.0, 178.0], [896.0, 193.0], [897.0, 194.0], [898.0, 197.5], [899.0, 197.6], [900.0, 270.24552281917954]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[633.6503333333374, 275.93893333333386]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[607.0, 12035.333333333334], [601.0, 12040.0], [632.0, 12028.0], [636.0, 12028.0], [639.0, 12027.0], [626.0, 12028.0], [625.0, 12029.5], [628.0, 12027.0], [627.0, 12028.0], [638.0, 12027.0], [637.0, 12028.0], [635.0, 12027.0], [634.0, 12027.0], [633.0, 12026.0], [623.0, 12028.0], [611.0, 12028.0], [610.0, 12033.666666666666], [613.0, 12028.0], [612.0, 12028.0], [615.0, 12028.0], [614.0, 12028.0], [622.0, 12030.0], [621.0, 12028.0], [620.0, 12028.0], [619.0, 12028.0], [618.0, 12028.0], [617.0, 12028.0], [616.0, 12028.0], [631.0, 12031.0], [629.0, 12031.0], [664.0, 12027.0], [668.0, 12027.0], [669.0, 12027.0], [657.0, 12028.0], [656.0, 12027.0], [659.0, 12027.0], [658.0, 12027.0], [667.0, 12027.0], [666.0, 12028.0], [665.0, 12027.0], [655.0, 12027.0], [640.0, 12029.0], [642.0, 12027.0], [641.0, 12028.0], [645.0, 12029.0], [644.0, 12028.0], [647.0, 12027.0], [646.0, 12028.0], [654.0, 12028.0], [653.0, 12028.0], [651.0, 12027.0], [650.0, 12028.0], [649.0, 12028.0], [648.0, 12028.0], [663.0, 12027.0], [662.0, 12027.0], [661.0, 12027.0], [660.0, 12026.0], [702.0, 12052.0], [703.0, 12058.0], [688.0, 12035.5], [700.0, 12047.0], [699.0, 12048.0], [698.0, 12049.0], [697.0, 12051.0], [696.0, 12049.0], [679.0, 12026.0], [678.0, 12029.0], [677.0, 12036.375], [686.0, 12035.0], [684.0, 12032.333333333334], [681.0, 12029.0], [680.0, 12028.0], [694.0, 12042.666666666666], [691.0, 12036.333333333334], [729.0, 12430.0], [728.0, 12362.000000000002], [716.0, 12104.375], [708.0, 12041.0], [707.0, 12056.0], [705.0, 12054.0], [704.0, 12050.0], [766.0, 12314.714285714284], [765.0, 12148.0], [758.0, 12458.0], [756.0, 12295.111111111111], [755.0, 12229.333333333334], [741.0, 12388.1], [740.0, 12190.0], [794.0, 12493.0], [795.0, 12285.555555555555], [793.0, 12206.25], [791.0, 12236.0], [790.0, 12255.0], [779.0, 12076.0], [778.0, 12452.6], [773.0, 12409.0], [770.0, 12350.25], [824.0, 12356.25], [854.0, 12424.5], [853.0, 12080.0], [852.0, 12289.0], [894.0, 12341.0], [884.0, 12275.333333333334], [895.0, 12481.0], [881.0, 12347.0], [893.0, 12463.4], [891.0, 12427.625], [890.0, 12507.0], [871.0, 12363.0], [868.0, 12383.0], [867.0, 12359.8], [866.0, 12305.0], [865.0, 12186.0], [879.0, 12299.0], [878.0, 12277.833333333332], [877.0, 12070.0], [874.0, 12243.666666666666], [873.0, 12174.0], [887.0, 12324.666666666668], [886.0, 12350.333333333334], [885.0, 12280.0], [883.0, 12424.0], [882.0, 12283.0], [900.0, 12247.473684210527], [898.0, 12113.0], [897.0, 12238.0], [896.0, 12401.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[764.1800000000004, 12211.166666666673]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 900.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61930082E12, "maxY": 4.9E-324, "series": [{"data": [[1.61930088E12, 0.0], [1.61930082E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61930088E12, 0.0], [1.61930082E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61930088E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 275.93893333333386, "minX": 1.61930082E12, "maxY": 60033.369999999995, "series": [{"data": [[1.61930088E12, 60033.369999999995]], "isOverall": false, "label": "JoinRoom&Wait", "isController": false}, {"data": [[1.61930082E12, 275.93893333333386]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61930082E12, 12211.166666666673]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61930088E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61930082E12, "maxY": 4.9E-324, "series": [{"data": [[1.61930088E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait", "isController": false}, {"data": [[1.61930082E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61930082E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61930088E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61930082E12, "maxY": 4.9E-324, "series": [{"data": [[1.61930088E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait", "isController": false}, {"data": [[1.61930082E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61930082E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61930088E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.61930082E12, "maxY": 60120.0, "series": [{"data": [[1.61930088E12, 60120.0], [1.61930082E12, 12601.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61930088E12, 60037.0], [1.61930082E12, 330.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61930088E12, 60115.94], [1.61930082E12, 12137.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61930088E12, 60079.85], [1.61930082E12, 352.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61930088E12, 60026.0], [1.61930082E12, 28.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61930088E12, 60028.0], [1.61930082E12, 281.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61930088E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 34.0, "minX": 53.0, "maxY": 60028.0, "series": [{"data": [[53.0, 34.0], [888.0, 209.0], [917.0, 312.0], [925.0, 311.0], [948.0, 299.0], [955.0, 268.0], [968.0, 297.5], [1007.0, 299.0], [1005.0, 310.0], [1012.0, 265.0], [1024.0, 103.5], [1045.0, 278.0], [1107.0, 268.0], [1110.0, 272.0], [1089.0, 277.0], [300.0, 60028.0], [1247.0, 313.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1247.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 53.0, "maxY": 4.9E-324, "series": [{"data": [[53.0, 0.0], [888.0, 0.0], [917.0, 0.0], [925.0, 0.0], [948.0, 0.0], [955.0, 0.0], [968.0, 0.0], [1007.0, 0.0], [1005.0, 0.0], [1012.0, 0.0], [1024.0, 0.0], [1045.0, 0.0], [1107.0, 0.0], [1110.0, 0.0], [1089.0, 0.0], [300.0, 0.0], [1247.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1247.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.61930076E12, "maxY": 255.0, "series": [{"data": [[1.61930076E12, 5.0], [1.61930082E12, 255.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61930082E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.61930082E12, "maxY": 255.0, "series": [{"data": [[1.61930088E12, 5.0], [1.61930082E12, 255.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61930088E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.61930082E12, "maxY": 250.0, "series": [{"data": [[1.61930082E12, 5.0]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61930088E12, 5.0]], "isOverall": false, "label": "JoinRoom&Wait-success", "isController": false}, {"data": [[1.61930082E12, 250.0]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61930088E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.61930082E12, "maxY": 255.0, "series": [{"data": [[1.61930088E12, 5.0], [1.61930082E12, 255.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61930088E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

