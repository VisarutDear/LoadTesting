/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 134.0, "minX": 0.0, "maxY": 7291.0, "series": [{"data": [[0.0, 134.0], [0.1, 134.0], [0.2, 134.0], [0.3, 134.0], [0.4, 134.0], [0.5, 135.0], [0.6, 135.0], [0.7, 135.0], [0.8, 135.0], [0.9, 135.0], [1.0, 135.0], [1.1, 135.0], [1.2, 135.0], [1.3, 135.0], [1.4, 135.0], [1.5, 135.0], [1.6, 135.0], [1.7, 135.0], [1.8, 135.0], [1.9, 135.0], [2.0, 135.0], [2.1, 135.0], [2.2, 135.0], [2.3, 135.0], [2.4, 135.0], [2.5, 135.0], [2.6, 135.0], [2.7, 135.0], [2.8, 135.0], [2.9, 135.0], [3.0, 135.0], [3.1, 135.0], [3.2, 135.0], [3.3, 135.0], [3.4, 135.0], [3.5, 135.0], [3.6, 135.0], [3.7, 135.0], [3.8, 135.0], [3.9, 135.0], [4.0, 135.0], [4.1, 135.0], [4.2, 135.0], [4.3, 135.0], [4.4, 135.0], [4.5, 135.0], [4.6, 135.0], [4.7, 135.0], [4.8, 135.0], [4.9, 135.0], [5.0, 135.0], [5.1, 136.0], [5.2, 136.0], [5.3, 136.0], [5.4, 136.0], [5.5, 136.0], [5.6, 136.0], [5.7, 136.0], [5.8, 136.0], [5.9, 136.0], [6.0, 136.0], [6.1, 136.0], [6.2, 136.0], [6.3, 136.0], [6.4, 136.0], [6.5, 136.0], [6.6, 136.0], [6.7, 136.0], [6.8, 136.0], [6.9, 136.0], [7.0, 136.0], [7.1, 136.0], [7.2, 136.0], [7.3, 136.0], [7.4, 136.0], [7.5, 136.0], [7.6, 136.0], [7.7, 136.0], [7.8, 136.0], [7.9, 136.0], [8.0, 136.0], [8.1, 136.0], [8.2, 136.0], [8.3, 136.0], [8.4, 136.0], [8.5, 136.0], [8.6, 136.0], [8.7, 136.0], [8.8, 136.0], [8.9, 136.0], [9.0, 136.0], [9.1, 136.0], [9.2, 136.0], [9.3, 136.0], [9.4, 136.0], [9.5, 136.0], [9.6, 136.0], [9.7, 136.0], [9.8, 136.0], [9.9, 136.0], [10.0, 136.0], [10.1, 136.0], [10.2, 136.0], [10.3, 136.0], [10.4, 136.0], [10.5, 136.0], [10.6, 136.0], [10.7, 136.0], [10.8, 136.0], [10.9, 136.0], [11.0, 136.0], [11.1, 136.0], [11.2, 136.0], [11.3, 136.0], [11.4, 136.0], [11.5, 136.0], [11.6, 136.0], [11.7, 136.0], [11.8, 136.0], [11.9, 136.0], [12.0, 136.0], [12.1, 136.0], [12.2, 136.0], [12.3, 136.0], [12.4, 136.0], [12.5, 136.0], [12.6, 136.0], [12.7, 136.0], [12.8, 136.0], [12.9, 136.0], [13.0, 136.0], [13.1, 136.0], [13.2, 136.0], [13.3, 136.0], [13.4, 136.0], [13.5, 136.0], [13.6, 136.0], [13.7, 136.0], [13.8, 136.0], [13.9, 136.0], [14.0, 136.0], [14.1, 136.0], [14.2, 136.0], [14.3, 136.0], [14.4, 136.0], [14.5, 136.0], [14.6, 136.0], [14.7, 136.0], [14.8, 136.0], [14.9, 136.0], [15.0, 136.0], [15.1, 136.0], [15.2, 136.0], [15.3, 136.0], [15.4, 136.0], [15.5, 136.0], [15.6, 136.0], [15.7, 136.0], [15.8, 136.0], [15.9, 136.0], [16.0, 136.0], [16.1, 136.0], [16.2, 136.0], [16.3, 136.0], [16.4, 136.0], [16.5, 136.0], [16.6, 136.0], [16.7, 136.0], [16.8, 136.0], [16.9, 136.0], [17.0, 136.0], [17.1, 136.0], [17.2, 136.0], [17.3, 136.0], [17.4, 136.0], [17.5, 136.0], [17.6, 136.0], [17.7, 136.0], [17.8, 136.0], [17.9, 136.0], [18.0, 136.0], [18.1, 136.0], [18.2, 136.0], [18.3, 136.0], [18.4, 136.0], [18.5, 136.0], [18.6, 136.0], [18.7, 136.0], [18.8, 136.0], [18.9, 136.0], [19.0, 136.0], [19.1, 136.0], [19.2, 136.0], [19.3, 136.0], [19.4, 136.0], [19.5, 136.0], [19.6, 136.0], [19.7, 136.0], [19.8, 136.0], [19.9, 136.0], [20.0, 136.0], [20.1, 136.0], [20.2, 136.0], [20.3, 136.0], [20.4, 137.0], [20.5, 137.0], [20.6, 137.0], [20.7, 137.0], [20.8, 137.0], [20.9, 137.0], [21.0, 137.0], [21.1, 137.0], [21.2, 137.0], [21.3, 137.0], [21.4, 137.0], [21.5, 137.0], [21.6, 137.0], [21.7, 137.0], [21.8, 137.0], [21.9, 137.0], [22.0, 137.0], [22.1, 137.0], [22.2, 137.0], [22.3, 137.0], [22.4, 137.0], [22.5, 137.0], [22.6, 137.0], [22.7, 137.0], [22.8, 137.0], [22.9, 137.0], [23.0, 137.0], [23.1, 137.0], [23.2, 137.0], [23.3, 137.0], [23.4, 137.0], [23.5, 137.0], [23.6, 137.0], [23.7, 137.0], [23.8, 137.0], [23.9, 137.0], [24.0, 137.0], [24.1, 137.0], [24.2, 137.0], [24.3, 137.0], [24.4, 137.0], [24.5, 137.0], [24.6, 137.0], [24.7, 137.0], [24.8, 137.0], [24.9, 137.0], [25.0, 137.0], [25.1, 137.0], [25.2, 137.0], [25.3, 137.0], [25.4, 137.0], [25.5, 137.0], [25.6, 137.0], [25.7, 137.0], [25.8, 137.0], [25.9, 137.0], [26.0, 137.0], [26.1, 137.0], [26.2, 137.0], [26.3, 137.0], [26.4, 137.0], [26.5, 137.0], [26.6, 137.0], [26.7, 137.0], [26.8, 137.0], [26.9, 137.0], [27.0, 137.0], [27.1, 137.0], [27.2, 137.0], [27.3, 137.0], [27.4, 137.0], [27.5, 137.0], [27.6, 137.0], [27.7, 137.0], [27.8, 137.0], [27.9, 137.0], [28.0, 137.0], [28.1, 137.0], [28.2, 137.0], [28.3, 137.0], [28.4, 137.0], [28.5, 137.0], [28.6, 137.0], [28.7, 137.0], [28.8, 137.0], [28.9, 137.0], [29.0, 137.0], [29.1, 137.0], [29.2, 137.0], [29.3, 137.0], [29.4, 137.0], [29.5, 137.0], [29.6, 137.0], [29.7, 137.0], [29.8, 137.0], [29.9, 137.0], [30.0, 137.0], [30.1, 137.0], [30.2, 137.0], [30.3, 137.0], [30.4, 137.0], [30.5, 137.0], [30.6, 137.0], [30.7, 137.0], [30.8, 137.0], [30.9, 137.0], [31.0, 137.0], [31.1, 137.0], [31.2, 137.0], [31.3, 137.0], [31.4, 137.0], [31.5, 137.0], [31.6, 137.0], [31.7, 137.0], [31.8, 137.0], [31.9, 137.0], [32.0, 137.0], [32.1, 137.0], [32.2, 137.0], [32.3, 137.0], [32.4, 137.0], [32.5, 137.0], [32.6, 137.0], [32.7, 137.0], [32.8, 137.0], [32.9, 137.0], [33.0, 137.0], [33.1, 137.0], [33.2, 137.0], [33.3, 137.0], [33.4, 137.0], [33.5, 137.0], [33.6, 137.0], [33.7, 137.0], [33.8, 137.0], [33.9, 137.0], [34.0, 137.0], [34.1, 137.0], [34.2, 137.0], [34.3, 137.0], [34.4, 137.0], [34.5, 137.0], [34.6, 137.0], [34.7, 137.0], [34.8, 137.0], [34.9, 137.0], [35.0, 137.0], [35.1, 137.0], [35.2, 137.0], [35.3, 137.0], [35.4, 137.0], [35.5, 137.0], [35.6, 137.0], [35.7, 137.0], [35.8, 137.0], [35.9, 137.0], [36.0, 137.0], [36.1, 137.0], [36.2, 137.0], [36.3, 137.0], [36.4, 137.0], [36.5, 137.0], [36.6, 137.0], [36.7, 137.0], [36.8, 137.0], [36.9, 137.0], [37.0, 137.0], [37.1, 137.0], [37.2, 137.0], [37.3, 137.0], [37.4, 137.0], [37.5, 137.0], [37.6, 137.0], [37.7, 137.0], [37.8, 137.0], [37.9, 137.0], [38.0, 137.0], [38.1, 137.0], [38.2, 137.0], [38.3, 137.0], [38.4, 137.0], [38.5, 137.0], [38.6, 137.0], [38.7, 137.0], [38.8, 137.0], [38.9, 137.0], [39.0, 137.0], [39.1, 137.0], [39.2, 137.0], [39.3, 137.0], [39.4, 137.0], [39.5, 137.0], [39.6, 137.0], [39.7, 137.0], [39.8, 137.0], [39.9, 137.0], [40.0, 137.0], [40.1, 137.0], [40.2, 137.0], [40.3, 137.0], [40.4, 137.0], [40.5, 137.0], [40.6, 137.0], [40.7, 137.0], [40.8, 137.0], [40.9, 137.0], [41.0, 137.0], [41.1, 137.0], [41.2, 137.0], [41.3, 137.0], [41.4, 137.0], [41.5, 137.0], [41.6, 137.0], [41.7, 137.0], [41.8, 137.0], [41.9, 137.0], [42.0, 137.0], [42.1, 137.0], [42.2, 137.0], [42.3, 137.0], [42.4, 137.0], [42.5, 137.0], [42.6, 137.0], [42.7, 137.0], [42.8, 137.0], [42.9, 137.0], [43.0, 137.0], [43.1, 137.0], [43.2, 137.0], [43.3, 137.0], [43.4, 137.0], [43.5, 137.0], [43.6, 137.0], [43.7, 137.0], [43.8, 137.0], [43.9, 137.0], [44.0, 137.0], [44.1, 137.0], [44.2, 137.0], [44.3, 137.0], [44.4, 137.0], [44.5, 137.0], [44.6, 137.0], [44.7, 137.0], [44.8, 137.0], [44.9, 137.0], [45.0, 137.0], [45.1, 137.0], [45.2, 137.0], [45.3, 137.0], [45.4, 137.0], [45.5, 137.0], [45.6, 137.0], [45.7, 137.0], [45.8, 137.0], [45.9, 137.0], [46.0, 137.0], [46.1, 137.0], [46.2, 137.0], [46.3, 137.0], [46.4, 137.0], [46.5, 137.0], [46.6, 137.0], [46.7, 137.0], [46.8, 137.0], [46.9, 137.0], [47.0, 137.0], [47.1, 137.0], [47.2, 137.0], [47.3, 137.0], [47.4, 137.0], [47.5, 137.0], [47.6, 137.0], [47.7, 137.0], [47.8, 137.0], [47.9, 137.0], [48.0, 137.0], [48.1, 138.0], [48.2, 138.0], [48.3, 138.0], [48.4, 138.0], [48.5, 138.0], [48.6, 138.0], [48.7, 138.0], [48.8, 138.0], [48.9, 138.0], [49.0, 138.0], [49.1, 138.0], [49.2, 138.0], [49.3, 138.0], [49.4, 138.0], [49.5, 138.0], [49.6, 138.0], [49.7, 138.0], [49.8, 138.0], [49.9, 138.0], [50.0, 138.0], [50.1, 138.0], [50.2, 138.0], [50.3, 138.0], [50.4, 138.0], [50.5, 138.0], [50.6, 138.0], [50.7, 138.0], [50.8, 138.0], [50.9, 138.0], [51.0, 138.0], [51.1, 138.0], [51.2, 138.0], [51.3, 138.0], [51.4, 138.0], [51.5, 138.0], [51.6, 138.0], [51.7, 138.0], [51.8, 138.0], [51.9, 138.0], [52.0, 138.0], [52.1, 138.0], [52.2, 138.0], [52.3, 138.0], [52.4, 138.0], [52.5, 138.0], [52.6, 138.0], [52.7, 138.0], [52.8, 138.0], [52.9, 138.0], [53.0, 138.0], [53.1, 138.0], [53.2, 138.0], [53.3, 138.0], [53.4, 138.0], [53.5, 138.0], [53.6, 138.0], [53.7, 138.0], [53.8, 138.0], [53.9, 138.0], [54.0, 138.0], [54.1, 138.0], [54.2, 138.0], [54.3, 138.0], [54.4, 138.0], [54.5, 138.0], [54.6, 138.0], [54.7, 138.0], [54.8, 138.0], [54.9, 138.0], [55.0, 138.0], [55.1, 138.0], [55.2, 138.0], [55.3, 138.0], [55.4, 138.0], [55.5, 138.0], [55.6, 138.0], [55.7, 138.0], [55.8, 138.0], [55.9, 138.0], [56.0, 138.0], [56.1, 138.0], [56.2, 138.0], [56.3, 138.0], [56.4, 138.0], [56.5, 138.0], [56.6, 138.0], [56.7, 138.0], [56.8, 138.0], [56.9, 138.0], [57.0, 138.0], [57.1, 138.0], [57.2, 138.0], [57.3, 138.0], [57.4, 138.0], [57.5, 138.0], [57.6, 138.0], [57.7, 138.0], [57.8, 138.0], [57.9, 138.0], [58.0, 138.0], [58.1, 138.0], [58.2, 138.0], [58.3, 138.0], [58.4, 138.0], [58.5, 138.0], [58.6, 138.0], [58.7, 138.0], [58.8, 138.0], [58.9, 138.0], [59.0, 138.0], [59.1, 138.0], [59.2, 138.0], [59.3, 138.0], [59.4, 138.0], [59.5, 138.0], [59.6, 138.0], [59.7, 138.0], [59.8, 138.0], [59.9, 138.0], [60.0, 138.0], [60.1, 138.0], [60.2, 138.0], [60.3, 138.0], [60.4, 138.0], [60.5, 138.0], [60.6, 138.0], [60.7, 138.0], [60.8, 138.0], [60.9, 138.0], [61.0, 138.0], [61.1, 138.0], [61.2, 138.0], [61.3, 138.0], [61.4, 138.0], [61.5, 138.0], [61.6, 138.0], [61.7, 138.0], [61.8, 138.0], [61.9, 138.0], [62.0, 138.0], [62.1, 138.0], [62.2, 138.0], [62.3, 138.0], [62.4, 138.0], [62.5, 138.0], [62.6, 138.0], [62.7, 138.0], [62.8, 138.0], [62.9, 138.0], [63.0, 138.0], [63.1, 138.0], [63.2, 138.0], [63.3, 138.0], [63.4, 138.0], [63.5, 138.0], [63.6, 138.0], [63.7, 138.0], [63.8, 138.0], [63.9, 138.0], [64.0, 138.0], [64.1, 138.0], [64.2, 138.0], [64.3, 138.0], [64.4, 138.0], [64.5, 138.0], [64.6, 138.0], [64.7, 138.0], [64.8, 138.0], [64.9, 138.0], [65.0, 138.0], [65.1, 138.0], [65.2, 138.0], [65.3, 138.0], [65.4, 138.0], [65.5, 138.0], [65.6, 138.0], [65.7, 138.0], [65.8, 138.0], [65.9, 138.0], [66.0, 138.0], [66.1, 138.0], [66.2, 138.0], [66.3, 138.0], [66.4, 138.0], [66.5, 138.0], [66.6, 138.0], [66.7, 138.0], [66.8, 138.0], [66.9, 138.0], [67.0, 138.0], [67.1, 138.0], [67.2, 138.0], [67.3, 138.0], [67.4, 138.0], [67.5, 138.0], [67.6, 138.0], [67.7, 138.0], [67.8, 138.0], [67.9, 138.0], [68.0, 138.0], [68.1, 138.0], [68.2, 138.0], [68.3, 138.0], [68.4, 138.0], [68.5, 138.0], [68.6, 138.0], [68.7, 138.0], [68.8, 138.0], [68.9, 138.0], [69.0, 138.0], [69.1, 138.0], [69.2, 138.0], [69.3, 138.0], [69.4, 138.0], [69.5, 138.0], [69.6, 138.0], [69.7, 138.0], [69.8, 138.0], [69.9, 138.0], [70.0, 138.0], [70.1, 138.0], [70.2, 138.0], [70.3, 138.0], [70.4, 138.0], [70.5, 138.0], [70.6, 138.0], [70.7, 138.0], [70.8, 138.0], [70.9, 138.0], [71.0, 138.0], [71.1, 138.0], [71.2, 138.0], [71.3, 138.0], [71.4, 138.0], [71.5, 138.0], [71.6, 138.0], [71.7, 138.0], [71.8, 138.0], [71.9, 138.0], [72.0, 138.0], [72.1, 138.0], [72.2, 138.0], [72.3, 138.0], [72.4, 138.0], [72.5, 138.0], [72.6, 138.0], [72.7, 138.0], [72.8, 138.0], [72.9, 138.0], [73.0, 138.0], [73.1, 138.0], [73.2, 138.0], [73.3, 138.0], [73.4, 138.0], [73.5, 138.0], [73.6, 138.0], [73.7, 138.0], [73.8, 138.0], [73.9, 138.0], [74.0, 138.0], [74.1, 138.0], [74.2, 138.0], [74.3, 138.0], [74.4, 138.0], [74.5, 138.0], [74.6, 138.0], [74.7, 139.0], [74.8, 139.0], [74.9, 139.0], [75.0, 139.0], [75.1, 139.0], [75.2, 139.0], [75.3, 139.0], [75.4, 139.0], [75.5, 139.0], [75.6, 139.0], [75.7, 139.0], [75.8, 139.0], [75.9, 139.0], [76.0, 139.0], [76.1, 139.0], [76.2, 139.0], [76.3, 139.0], [76.4, 139.0], [76.5, 139.0], [76.6, 139.0], [76.7, 139.0], [76.8, 139.0], [76.9, 139.0], [77.0, 139.0], [77.1, 139.0], [77.2, 139.0], [77.3, 139.0], [77.4, 139.0], [77.5, 139.0], [77.6, 139.0], [77.7, 139.0], [77.8, 139.0], [77.9, 139.0], [78.0, 139.0], [78.1, 139.0], [78.2, 139.0], [78.3, 139.0], [78.4, 139.0], [78.5, 139.0], [78.6, 139.0], [78.7, 139.0], [78.8, 139.0], [78.9, 139.0], [79.0, 139.0], [79.1, 139.0], [79.2, 139.0], [79.3, 139.0], [79.4, 139.0], [79.5, 139.0], [79.6, 139.0], [79.7, 139.0], [79.8, 139.0], [79.9, 139.0], [80.0, 139.0], [80.1, 139.0], [80.2, 139.0], [80.3, 139.0], [80.4, 139.0], [80.5, 139.0], [80.6, 139.0], [80.7, 139.0], [80.8, 139.0], [80.9, 139.0], [81.0, 139.0], [81.1, 139.0], [81.2, 139.0], [81.3, 139.0], [81.4, 139.0], [81.5, 139.0], [81.6, 139.0], [81.7, 139.0], [81.8, 139.0], [81.9, 139.0], [82.0, 139.0], [82.1, 139.0], [82.2, 139.0], [82.3, 139.0], [82.4, 139.0], [82.5, 139.0], [82.6, 139.0], [82.7, 139.0], [82.8, 139.0], [82.9, 139.0], [83.0, 139.0], [83.1, 139.0], [83.2, 139.0], [83.3, 139.0], [83.4, 139.0], [83.5, 139.0], [83.6, 139.0], [83.7, 139.0], [83.8, 139.0], [83.9, 139.0], [84.0, 139.0], [84.1, 139.0], [84.2, 139.0], [84.3, 139.0], [84.4, 139.0], [84.5, 139.0], [84.6, 139.0], [84.7, 139.0], [84.8, 139.0], [84.9, 139.0], [85.0, 139.0], [85.1, 139.0], [85.2, 139.0], [85.3, 139.0], [85.4, 139.0], [85.5, 139.0], [85.6, 139.0], [85.7, 139.0], [85.8, 139.0], [85.9, 139.0], [86.0, 139.0], [86.1, 139.0], [86.2, 139.0], [86.3, 139.0], [86.4, 139.0], [86.5, 139.0], [86.6, 139.0], [86.7, 139.0], [86.8, 139.0], [86.9, 139.0], [87.0, 139.0], [87.1, 139.0], [87.2, 139.0], [87.3, 139.0], [87.4, 139.0], [87.5, 139.0], [87.6, 139.0], [87.7, 139.0], [87.8, 139.0], [87.9, 139.0], [88.0, 139.0], [88.1, 139.0], [88.2, 139.0], [88.3, 139.0], [88.4, 139.0], [88.5, 139.0], [88.6, 139.0], [88.7, 139.0], [88.8, 140.0], [88.9, 140.0], [89.0, 140.0], [89.1, 140.0], [89.2, 140.0], [89.3, 140.0], [89.4, 140.0], [89.5, 140.0], [89.6, 140.0], [89.7, 140.0], [89.8, 140.0], [89.9, 140.0], [90.0, 140.0], [90.1, 140.0], [90.2, 140.0], [90.3, 140.0], [90.4, 140.0], [90.5, 140.0], [90.6, 140.0], [90.7, 140.0], [90.8, 140.0], [90.9, 140.0], [91.0, 140.0], [91.1, 140.0], [91.2, 140.0], [91.3, 140.0], [91.4, 140.0], [91.5, 140.0], [91.6, 140.0], [91.7, 140.0], [91.8, 140.0], [91.9, 140.0], [92.0, 140.0], [92.1, 140.0], [92.2, 140.0], [92.3, 140.0], [92.4, 140.0], [92.5, 141.0], [92.6, 141.0], [92.7, 141.0], [92.8, 142.0], [92.9, 143.0], [93.0, 144.0], [93.1, 150.0], [93.2, 150.0], [93.3, 151.0], [93.4, 151.0], [93.5, 151.0], [93.6, 151.0], [93.7, 151.0], [93.8, 151.0], [93.9, 152.0], [94.0, 152.0], [94.1, 152.0], [94.2, 152.0], [94.3, 152.0], [94.4, 152.0], [94.5, 152.0], [94.6, 153.0], [94.7, 153.0], [94.8, 153.0], [94.9, 153.0], [95.0, 153.0], [95.1, 153.0], [95.2, 153.0], [95.3, 153.0], [95.4, 153.0], [95.5, 154.0], [95.6, 154.0], [95.7, 154.0], [95.8, 155.0], [95.9, 155.0], [96.0, 165.0], [96.1, 167.0], [96.2, 168.0], [96.3, 168.0], [96.4, 170.0], [96.5, 185.0], [96.6, 216.0], [96.7, 261.0], [96.8, 275.0], [96.9, 290.0], [97.0, 351.0], [97.1, 388.0], [97.2, 401.0], [97.3, 417.0], [97.4, 430.0], [97.5, 445.0], [97.6, 457.0], [97.7, 460.0], [97.8, 476.0], [97.9, 1137.0], [98.0, 1139.0], [98.1, 1141.0], [98.2, 1142.0], [98.3, 1142.0], [98.4, 1143.0], [98.5, 1144.0], [98.6, 1145.0], [98.7, 1145.0], [98.8, 1146.0], [98.9, 1147.0], [99.0, 1148.0], [99.1, 1149.0], [99.2, 1150.0], [99.3, 1151.0], [99.4, 1152.0], [99.5, 1159.0], [99.6, 1165.0], [99.7, 1392.0], [99.8, 6282.0], [99.9, 6654.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 6155.0], [0.1, 6155.0], [0.2, 6155.0], [0.3, 6155.0], [0.4, 6158.0], [0.5, 6158.0], [0.6, 6158.0], [0.7, 6160.0], [0.8, 6161.0], [0.9, 6161.0], [1.0, 6164.0], [1.1, 6164.0], [1.2, 6164.0], [1.3, 6164.0], [1.4, 6164.0], [1.5, 6164.0], [1.6, 6166.0], [1.7, 6166.0], [1.8, 6168.0], [1.9, 6168.0], [2.0, 6169.0], [2.1, 6169.0], [2.2, 6170.0], [2.3, 6170.0], [2.4, 6170.0], [2.5, 6172.0], [2.6, 6172.0], [2.7, 6175.0], [2.8, 6175.0], [2.9, 6176.0], [3.0, 6176.0], [3.1, 6178.0], [3.2, 6178.0], [3.3, 6178.0], [3.4, 6178.0], [3.5, 6179.0], [3.6, 6179.0], [3.7, 6180.0], [3.8, 6180.0], [3.9, 6181.0], [4.0, 6181.0], [4.1, 6183.0], [4.2, 6183.0], [4.3, 6185.0], [4.4, 6185.0], [4.5, 6187.0], [4.6, 6187.0], [4.7, 6187.0], [4.8, 6187.0], [4.9, 6188.0], [5.0, 6188.0], [5.1, 6188.0], [5.2, 6188.0], [5.3, 6188.0], [5.4, 6188.0], [5.5, 6189.0], [5.6, 6189.0], [5.7, 6190.0], [5.8, 6190.0], [5.9, 6190.0], [6.0, 6190.0], [6.1, 6191.0], [6.2, 6191.0], [6.3, 6193.0], [6.4, 6193.0], [6.5, 6193.0], [6.6, 6193.0], [6.7, 6193.0], [6.8, 6193.0], [6.9, 6193.0], [7.0, 6193.0], [7.1, 6194.0], [7.2, 6194.0], [7.3, 6194.0], [7.4, 6194.0], [7.5, 6194.0], [7.6, 6194.0], [7.7, 6195.0], [7.8, 6195.0], [7.9, 6196.0], [8.0, 6196.0], [8.1, 6196.0], [8.2, 6196.0], [8.3, 6196.0], [8.4, 6196.0], [8.5, 6197.0], [8.6, 6197.0], [8.7, 6197.0], [8.8, 6197.0], [8.9, 6199.0], [9.0, 6199.0], [9.1, 6199.0], [9.2, 6199.0], [9.3, 6200.0], [9.4, 6200.0], [9.5, 6200.0], [9.6, 6200.0], [9.7, 6202.0], [9.8, 6202.0], [9.9, 6202.0], [10.0, 6202.0], [10.1, 6202.0], [10.2, 6202.0], [10.3, 6202.0], [10.4, 6202.0], [10.5, 6202.0], [10.6, 6202.0], [10.7, 6202.0], [10.8, 6202.0], [10.9, 6203.0], [11.0, 6203.0], [11.1, 6203.0], [11.2, 6203.0], [11.3, 6203.0], [11.4, 6203.0], [11.5, 6203.0], [11.6, 6203.0], [11.7, 6203.0], [11.8, 6203.0], [11.9, 6204.0], [12.0, 6204.0], [12.1, 6204.0], [12.2, 6204.0], [12.3, 6204.0], [12.4, 6204.0], [12.5, 6205.0], [12.6, 6205.0], [12.7, 6205.0], [12.8, 6205.0], [12.9, 6206.0], [13.0, 6206.0], [13.1, 6206.0], [13.2, 6206.0], [13.3, 6206.0], [13.4, 6206.0], [13.5, 6206.0], [13.6, 6206.0], [13.7, 6206.0], [13.8, 6206.0], [13.9, 6206.0], [14.0, 6206.0], [14.1, 6207.0], [14.2, 6207.0], [14.3, 6207.0], [14.4, 6207.0], [14.5, 6207.0], [14.6, 6207.0], [14.7, 6207.0], [14.8, 6207.0], [14.9, 6208.0], [15.0, 6208.0], [15.1, 6208.0], [15.2, 6208.0], [15.3, 6208.0], [15.4, 6208.0], [15.5, 6209.0], [15.6, 6209.0], [15.7, 6209.0], [15.8, 6209.0], [15.9, 6209.0], [16.0, 6209.0], [16.1, 6210.0], [16.2, 6210.0], [16.3, 6210.0], [16.4, 6210.0], [16.5, 6210.0], [16.6, 6210.0], [16.7, 6211.0], [16.8, 6211.0], [16.9, 6211.0], [17.0, 6211.0], [17.1, 6211.0], [17.2, 6211.0], [17.3, 6211.0], [17.4, 6211.0], [17.5, 6211.0], [17.6, 6211.0], [17.7, 6211.0], [17.8, 6211.0], [17.9, 6211.0], [18.0, 6211.0], [18.1, 6212.0], [18.2, 6212.0], [18.3, 6212.0], [18.4, 6212.0], [18.5, 6212.0], [18.6, 6212.0], [18.7, 6212.0], [18.8, 6212.0], [18.9, 6212.0], [19.0, 6212.0], [19.1, 6213.0], [19.2, 6213.0], [19.3, 6213.0], [19.4, 6213.0], [19.5, 6213.0], [19.6, 6213.0], [19.7, 6214.0], [19.8, 6214.0], [19.9, 6214.0], [20.0, 6214.0], [20.1, 6214.0], [20.2, 6214.0], [20.3, 6215.0], [20.4, 6215.0], [20.5, 6215.0], [20.6, 6215.0], [20.7, 6215.0], [20.8, 6215.0], [20.9, 6216.0], [21.0, 6216.0], [21.1, 6216.0], [21.2, 6216.0], [21.3, 6216.0], [21.4, 6216.0], [21.5, 6216.0], [21.6, 6216.0], [21.7, 6216.0], [21.8, 6216.0], [21.9, 6216.0], [22.0, 6216.0], [22.1, 6216.0], [22.2, 6216.0], [22.3, 6216.0], [22.4, 6216.0], [22.5, 6216.0], [22.6, 6216.0], [22.7, 6217.0], [22.8, 6217.0], [22.9, 6217.0], [23.0, 6217.0], [23.1, 6217.0], [23.2, 6217.0], [23.3, 6218.0], [23.4, 6218.0], [23.5, 6218.0], [23.6, 6218.0], [23.7, 6218.0], [23.8, 6218.0], [23.9, 6219.0], [24.0, 6219.0], [24.1, 6219.0], [24.2, 6219.0], [24.3, 6219.0], [24.4, 6219.0], [24.5, 6219.0], [24.6, 6219.0], [24.7, 6220.0], [24.8, 6220.0], [24.9, 6220.0], [25.0, 6220.0], [25.1, 6220.0], [25.2, 6220.0], [25.3, 6220.0], [25.4, 6220.0], [25.5, 6221.0], [25.6, 6221.0], [25.7, 6221.0], [25.8, 6221.0], [25.9, 6221.0], [26.0, 6221.0], [26.1, 6221.0], [26.2, 6221.0], [26.3, 6221.0], [26.4, 6221.0], [26.5, 6221.0], [26.6, 6221.0], [26.7, 6222.0], [26.8, 6222.0], [26.9, 6222.0], [27.0, 6222.0], [27.1, 6222.0], [27.2, 6222.0], [27.3, 6222.0], [27.4, 6222.0], [27.5, 6223.0], [27.6, 6223.0], [27.7, 6223.0], [27.8, 6223.0], [27.9, 6224.0], [28.0, 6224.0], [28.1, 6224.0], [28.2, 6224.0], [28.3, 6225.0], [28.4, 6225.0], [28.5, 6225.0], [28.6, 6225.0], [28.7, 6225.0], [28.8, 6225.0], [28.9, 6225.0], [29.0, 6225.0], [29.1, 6225.0], [29.2, 6225.0], [29.3, 6225.0], [29.4, 6225.0], [29.5, 6225.0], [29.6, 6225.0], [29.7, 6226.0], [29.8, 6226.0], [29.9, 6226.0], [30.0, 6226.0], [30.1, 6226.0], [30.2, 6226.0], [30.3, 6226.0], [30.4, 6226.0], [30.5, 6226.0], [30.6, 6226.0], [30.7, 6226.0], [30.8, 6226.0], [30.9, 6226.0], [31.0, 6226.0], [31.1, 6226.0], [31.2, 6226.0], [31.3, 6226.0], [31.4, 6226.0], [31.5, 6227.0], [31.6, 6227.0], [31.7, 6227.0], [31.8, 6227.0], [31.9, 6228.0], [32.0, 6228.0], [32.1, 6228.0], [32.2, 6228.0], [32.3, 6228.0], [32.4, 6228.0], [32.5, 6228.0], [32.6, 6228.0], [32.7, 6228.0], [32.8, 6228.0], [32.9, 6228.0], [33.0, 6228.0], [33.1, 6229.0], [33.2, 6229.0], [33.3, 6229.0], [33.4, 6229.0], [33.5, 6230.0], [33.6, 6230.0], [33.7, 6230.0], [33.8, 6230.0], [33.9, 6230.0], [34.0, 6230.0], [34.1, 6231.0], [34.2, 6231.0], [34.3, 6231.0], [34.4, 6231.0], [34.5, 6232.0], [34.6, 6232.0], [34.7, 6232.0], [34.8, 6232.0], [34.9, 6233.0], [35.0, 6233.0], [35.1, 6233.0], [35.2, 6233.0], [35.3, 6233.0], [35.4, 6233.0], [35.5, 6234.0], [35.6, 6234.0], [35.7, 6234.0], [35.8, 6234.0], [35.9, 6234.0], [36.0, 6234.0], [36.1, 6235.0], [36.2, 6235.0], [36.3, 6235.0], [36.4, 6235.0], [36.5, 6235.0], [36.6, 6235.0], [36.7, 6235.0], [36.8, 6235.0], [36.9, 6235.0], [37.0, 6235.0], [37.1, 6236.0], [37.2, 6236.0], [37.3, 6236.0], [37.4, 6236.0], [37.5, 6237.0], [37.6, 6237.0], [37.7, 6237.0], [37.8, 6237.0], [37.9, 6238.0], [38.0, 6238.0], [38.1, 6238.0], [38.2, 6238.0], [38.3, 6238.0], [38.4, 6238.0], [38.5, 6238.0], [38.6, 6238.0], [38.7, 6238.0], [38.8, 6238.0], [38.9, 6239.0], [39.0, 6239.0], [39.1, 6239.0], [39.2, 6240.0], [39.3, 6240.0], [39.4, 6240.0], [39.5, 6240.0], [39.6, 6240.0], [39.7, 6240.0], [39.8, 6240.0], [39.9, 6241.0], [40.0, 6241.0], [40.1, 6241.0], [40.2, 6241.0], [40.3, 6241.0], [40.4, 6241.0], [40.5, 6241.0], [40.6, 6241.0], [40.7, 6241.0], [40.8, 6241.0], [40.9, 6242.0], [41.0, 6242.0], [41.1, 6242.0], [41.2, 6242.0], [41.3, 6242.0], [41.4, 6242.0], [41.5, 6242.0], [41.6, 6242.0], [41.7, 6242.0], [41.8, 6242.0], [41.9, 6242.0], [42.0, 6242.0], [42.1, 6242.0], [42.2, 6243.0], [42.3, 6243.0], [42.4, 6243.0], [42.5, 6243.0], [42.6, 6243.0], [42.7, 6243.0], [42.8, 6243.0], [42.9, 6243.0], [43.0, 6243.0], [43.1, 6243.0], [43.2, 6245.0], [43.3, 6245.0], [43.4, 6245.0], [43.5, 6245.0], [43.6, 6246.0], [43.7, 6246.0], [43.8, 6246.0], [43.9, 6246.0], [44.0, 6247.0], [44.1, 6247.0], [44.2, 6247.0], [44.3, 6247.0], [44.4, 6248.0], [44.5, 6248.0], [44.6, 6248.0], [44.7, 6248.0], [44.8, 6248.0], [44.9, 6248.0], [45.0, 6248.0], [45.1, 6248.0], [45.2, 6248.0], [45.3, 6248.0], [45.4, 6248.0], [45.5, 6248.0], [45.6, 6248.0], [45.7, 6248.0], [45.8, 6248.0], [45.9, 6248.0], [46.0, 6248.0], [46.1, 6248.0], [46.2, 6249.0], [46.3, 6249.0], [46.4, 6250.0], [46.5, 6250.0], [46.6, 6250.0], [46.7, 6250.0], [46.8, 6257.0], [46.9, 6257.0], [47.0, 6258.0], [47.1, 6258.0], [47.2, 6258.0], [47.3, 6258.0], [47.4, 6258.0], [47.5, 6258.0], [47.6, 6262.0], [47.7, 6262.0], [47.8, 6262.0], [47.9, 6263.0], [48.0, 6263.0], [48.1, 6263.0], [48.2, 6266.0], [48.3, 6266.0], [48.4, 6266.0], [48.5, 6267.0], [48.6, 6267.0], [48.7, 6270.0], [48.8, 6270.0], [48.9, 6275.0], [49.0, 6275.0], [49.1, 6276.0], [49.2, 6276.0], [49.3, 6276.0], [49.4, 6276.0], [49.5, 6282.0], [49.6, 6282.0], [49.7, 6282.0], [49.8, 6282.0], [49.9, 6286.0], [50.0, 6286.0], [50.1, 6300.0], [50.2, 6300.0], [50.3, 6310.0], [50.4, 6310.0], [50.5, 6312.0], [50.6, 6312.0], [50.7, 6314.0], [50.8, 6314.0], [50.9, 6315.0], [51.0, 6315.0], [51.1, 6316.0], [51.2, 6316.0], [51.3, 6320.0], [51.4, 6320.0], [51.5, 6320.0], [51.6, 6320.0], [51.7, 6325.0], [51.8, 6325.0], [51.9, 6326.0], [52.0, 6326.0], [52.1, 6328.0], [52.2, 6328.0], [52.3, 6328.0], [52.4, 6328.0], [52.5, 6328.0], [52.6, 6328.0], [52.7, 6330.0], [52.8, 6330.0], [52.9, 6330.0], [53.0, 6330.0], [53.1, 6332.0], [53.2, 6332.0], [53.3, 6333.0], [53.4, 6333.0], [53.5, 6334.0], [53.6, 6334.0], [53.7, 6340.0], [53.8, 6340.0], [53.9, 6343.0], [54.0, 6343.0], [54.1, 6349.0], [54.2, 6349.0], [54.3, 6354.0], [54.4, 6354.0], [54.5, 6355.0], [54.6, 6355.0], [54.7, 6356.0], [54.8, 6356.0], [54.9, 6359.0], [55.0, 6359.0], [55.1, 6364.0], [55.2, 6364.0], [55.3, 6365.0], [55.4, 6365.0], [55.5, 6366.0], [55.6, 6366.0], [55.7, 6368.0], [55.8, 6368.0], [55.9, 6368.0], [56.0, 6368.0], [56.1, 6370.0], [56.2, 6370.0], [56.3, 6371.0], [56.4, 6371.0], [56.5, 6372.0], [56.6, 6372.0], [56.7, 6372.0], [56.8, 6372.0], [56.9, 6372.0], [57.0, 6372.0], [57.1, 6373.0], [57.2, 6373.0], [57.3, 6374.0], [57.4, 6374.0], [57.5, 6378.0], [57.6, 6378.0], [57.7, 6378.0], [57.8, 6378.0], [57.9, 6378.0], [58.0, 6378.0], [58.1, 6382.0], [58.2, 6382.0], [58.3, 6382.0], [58.4, 6382.0], [58.5, 6383.0], [58.6, 6383.0], [58.7, 6383.0], [58.8, 6383.0], [58.9, 6384.0], [59.0, 6384.0], [59.1, 6385.0], [59.2, 6385.0], [59.3, 6387.0], [59.4, 6387.0], [59.5, 6391.0], [59.6, 6391.0], [59.7, 6393.0], [59.8, 6393.0], [59.9, 6393.0], [60.0, 6393.0], [60.1, 6394.0], [60.2, 6394.0], [60.3, 6402.0], [60.4, 6402.0], [60.5, 6404.0], [60.6, 6404.0], [60.7, 6404.0], [60.8, 6404.0], [60.9, 6406.0], [61.0, 6406.0], [61.1, 6407.0], [61.2, 6407.0], [61.3, 6407.0], [61.4, 6407.0], [61.5, 6417.0], [61.6, 6417.0], [61.7, 6419.0], [61.8, 6419.0], [61.9, 6423.0], [62.0, 6423.0], [62.1, 6434.0], [62.2, 6434.0], [62.3, 6439.0], [62.4, 6439.0], [62.5, 6440.0], [62.6, 6440.0], [62.7, 6452.0], [62.8, 6452.0], [62.9, 6452.0], [63.0, 6452.0], [63.1, 6457.0], [63.2, 6457.0], [63.3, 6458.0], [63.4, 6458.0], [63.5, 6460.0], [63.6, 6460.0], [63.7, 6463.0], [63.8, 6463.0], [63.9, 6467.0], [64.0, 6467.0], [64.1, 6472.0], [64.2, 6472.0], [64.3, 6472.0], [64.4, 6472.0], [64.5, 6477.0], [64.6, 6477.0], [64.7, 6480.0], [64.8, 6480.0], [64.9, 6485.0], [65.0, 6485.0], [65.1, 6487.0], [65.2, 6487.0], [65.3, 6487.0], [65.4, 6487.0], [65.5, 6490.0], [65.6, 6490.0], [65.7, 6493.0], [65.8, 6493.0], [65.9, 6495.0], [66.0, 6495.0], [66.1, 6500.0], [66.2, 6500.0], [66.3, 6504.0], [66.4, 6504.0], [66.5, 6506.0], [66.6, 6506.0], [66.7, 6506.0], [66.8, 6506.0], [66.9, 6506.0], [67.0, 6506.0], [67.1, 6510.0], [67.2, 6510.0], [67.3, 6511.0], [67.4, 6511.0], [67.5, 6512.0], [67.6, 6512.0], [67.7, 6514.0], [67.8, 6514.0], [67.9, 6517.0], [68.0, 6517.0], [68.1, 6527.0], [68.2, 6527.0], [68.3, 6527.0], [68.4, 6527.0], [68.5, 6529.0], [68.6, 6529.0], [68.7, 6530.0], [68.8, 6530.0], [68.9, 6533.0], [69.0, 6533.0], [69.1, 6533.0], [69.2, 6533.0], [69.3, 6534.0], [69.4, 6534.0], [69.5, 6539.0], [69.6, 6539.0], [69.7, 6540.0], [69.8, 6540.0], [69.9, 6540.0], [70.0, 6540.0], [70.1, 6543.0], [70.2, 6543.0], [70.3, 6543.0], [70.4, 6543.0], [70.5, 6543.0], [70.6, 6543.0], [70.7, 6543.0], [70.8, 6543.0], [70.9, 6544.0], [71.0, 6544.0], [71.1, 6544.0], [71.2, 6544.0], [71.3, 6547.0], [71.4, 6547.0], [71.5, 6547.0], [71.6, 6547.0], [71.7, 6548.0], [71.8, 6548.0], [71.9, 6549.0], [72.0, 6549.0], [72.1, 6549.0], [72.2, 6549.0], [72.3, 6549.0], [72.4, 6549.0], [72.5, 6550.0], [72.6, 6550.0], [72.7, 6550.0], [72.8, 6550.0], [72.9, 6550.0], [73.0, 6550.0], [73.1, 6550.0], [73.2, 6550.0], [73.3, 6550.0], [73.4, 6550.0], [73.5, 6552.0], [73.6, 6552.0], [73.7, 6552.0], [73.8, 6552.0], [73.9, 6552.0], [74.0, 6552.0], [74.1, 6553.0], [74.2, 6553.0], [74.3, 6553.0], [74.4, 6553.0], [74.5, 6554.0], [74.6, 6554.0], [74.7, 6554.0], [74.8, 6554.0], [74.9, 6555.0], [75.0, 6555.0], [75.1, 6556.0], [75.2, 6556.0], [75.3, 6558.0], [75.4, 6558.0], [75.5, 6558.0], [75.6, 6558.0], [75.7, 6559.0], [75.8, 6559.0], [75.9, 6561.0], [76.0, 6561.0], [76.1, 6561.0], [76.2, 6561.0], [76.3, 6562.0], [76.4, 6562.0], [76.5, 6562.0], [76.6, 6562.0], [76.7, 6562.0], [76.8, 6562.0], [76.9, 6562.0], [77.0, 6562.0], [77.1, 6562.0], [77.2, 6562.0], [77.3, 6562.0], [77.4, 6562.0], [77.5, 6563.0], [77.6, 6563.0], [77.7, 6563.0], [77.8, 6563.0], [77.9, 6563.0], [78.0, 6563.0], [78.1, 6564.0], [78.2, 6564.0], [78.3, 6565.0], [78.4, 6565.0], [78.5, 6566.0], [78.6, 6566.0], [78.7, 6567.0], [78.8, 6567.0], [78.9, 6568.0], [79.0, 6568.0], [79.1, 6568.0], [79.2, 6568.0], [79.3, 6568.0], [79.4, 6568.0], [79.5, 6569.0], [79.6, 6569.0], [79.7, 6569.0], [79.8, 6569.0], [79.9, 6572.0], [80.0, 6572.0], [80.1, 6572.0], [80.2, 6572.0], [80.3, 6578.0], [80.4, 6578.0], [80.5, 6584.0], [80.6, 6584.0], [80.7, 6591.0], [80.8, 6591.0], [80.9, 6592.0], [81.0, 6592.0], [81.1, 6595.0], [81.2, 6595.0], [81.3, 6597.0], [81.4, 6597.0], [81.5, 6610.0], [81.6, 6610.0], [81.7, 6618.0], [81.8, 6618.0], [81.9, 6666.0], [82.0, 6666.0], [82.1, 6669.0], [82.2, 6669.0], [82.3, 6671.0], [82.4, 6671.0], [82.5, 6673.0], [82.6, 6673.0], [82.7, 6673.0], [82.8, 6673.0], [82.9, 6679.0], [83.0, 6679.0], [83.1, 6679.0], [83.2, 6679.0], [83.3, 6684.0], [83.4, 6684.0], [83.5, 6689.0], [83.6, 6689.0], [83.7, 6692.0], [83.8, 6692.0], [83.9, 6704.0], [84.0, 6704.0], [84.1, 6704.0], [84.2, 6704.0], [84.3, 6712.0], [84.4, 6712.0], [84.5, 6724.0], [84.6, 6724.0], [84.7, 6726.0], [84.8, 6726.0], [84.9, 6726.0], [85.0, 6726.0], [85.1, 6732.0], [85.2, 6732.0], [85.3, 6744.0], [85.4, 6744.0], [85.5, 6746.0], [85.6, 6746.0], [85.7, 6748.0], [85.8, 6748.0], [85.9, 6751.0], [86.0, 6751.0], [86.1, 6751.0], [86.2, 6751.0], [86.3, 6751.0], [86.4, 6751.0], [86.5, 6764.0], [86.6, 6764.0], [86.7, 6929.0], [86.8, 6929.0], [86.9, 6934.0], [87.0, 6934.0], [87.1, 6952.0], [87.2, 6952.0], [87.3, 6961.0], [87.4, 6961.0], [87.5, 6969.0], [87.6, 6969.0], [87.7, 6973.0], [87.8, 6973.0], [87.9, 7001.0], [88.0, 7001.0], [88.1, 7002.0], [88.2, 7002.0], [88.3, 7004.0], [88.4, 7004.0], [88.5, 7008.0], [88.6, 7008.0], [88.7, 7013.0], [88.8, 7013.0], [88.9, 7013.0], [89.0, 7013.0], [89.1, 7014.0], [89.2, 7014.0], [89.3, 7016.0], [89.4, 7016.0], [89.5, 7017.0], [89.6, 7017.0], [89.7, 7030.0], [89.8, 7030.0], [89.9, 7033.0], [90.0, 7033.0], [90.1, 7040.0], [90.2, 7040.0], [90.3, 7041.0], [90.4, 7041.0], [90.5, 7044.0], [90.6, 7044.0], [90.7, 7047.0], [90.8, 7047.0], [90.9, 7051.0], [91.0, 7051.0], [91.1, 7053.0], [91.2, 7053.0], [91.3, 7058.0], [91.4, 7058.0], [91.5, 7062.0], [91.6, 7062.0], [91.7, 7062.0], [91.8, 7062.0], [91.9, 7069.0], [92.0, 7069.0], [92.1, 7072.0], [92.2, 7072.0], [92.3, 7073.0], [92.4, 7073.0], [92.5, 7077.0], [92.6, 7077.0], [92.7, 7084.0], [92.8, 7084.0], [92.9, 7086.0], [93.0, 7086.0], [93.1, 7088.0], [93.2, 7088.0], [93.3, 7088.0], [93.4, 7088.0], [93.5, 7089.0], [93.6, 7089.0], [93.7, 7090.0], [93.8, 7090.0], [93.9, 7091.0], [94.0, 7091.0], [94.1, 7093.0], [94.2, 7093.0], [94.3, 7100.0], [94.4, 7100.0], [94.5, 7101.0], [94.6, 7101.0], [94.7, 7102.0], [94.8, 7102.0], [94.9, 7105.0], [95.0, 7105.0], [95.1, 7106.0], [95.2, 7106.0], [95.3, 7106.0], [95.4, 7106.0], [95.5, 7112.0], [95.6, 7112.0], [95.7, 7115.0], [95.8, 7115.0], [95.9, 7117.0], [96.0, 7117.0], [96.1, 7117.0], [96.2, 7117.0], [96.3, 7124.0], [96.4, 7124.0], [96.5, 7125.0], [96.6, 7125.0], [96.7, 7129.0], [96.8, 7129.0], [96.9, 7134.0], [97.0, 7134.0], [97.1, 7136.0], [97.2, 7136.0], [97.3, 7136.0], [97.4, 7136.0], [97.5, 7139.0], [97.6, 7139.0], [97.7, 7147.0], [97.8, 7147.0], [97.9, 7151.0], [98.0, 7151.0], [98.1, 7154.0], [98.2, 7154.0], [98.3, 7160.0], [98.4, 7160.0], [98.5, 7166.0], [98.6, 7166.0], [98.7, 7167.0], [98.8, 7167.0], [98.9, 7167.0], [99.0, 7167.0], [99.1, 7168.0], [99.2, 7168.0], [99.3, 7172.0], [99.4, 7172.0], [99.5, 7175.0], [99.6, 7175.0], [99.7, 7177.0], [99.8, 7177.0], [99.9, 7195.0], [100.0, 7195.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 33792.0, "series": [{"data": [[3100.0, 26.0], [200.0, 128.0], [1100.0, 634.0], [300.0, 81.0], [1200.0, 7.0], [1300.0, 6.0], [1400.0, 4.0], [6300.0, 12.0], [6200.0, 5.0], [6500.0, 6.0], [6600.0, 15.0], [6400.0, 10.0], [100.0, 33792.0], [400.0, 249.0], [6800.0, 7.0], [6700.0, 1.0], [7100.0, 9.0], [7000.0, 1.0], [7200.0, 7.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[6100.0, 46.0], [6300.0, 51.0], [6200.0, 204.0], [6500.0, 77.0], [6600.0, 12.0], [6400.0, 29.0], [6900.0, 6.0], [6700.0, 14.0], [7000.0, 32.0], [7100.0, 29.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1250.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 34250.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 34250.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1250.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 58.660920794239836, "minX": 1.61634618E12, "maxY": 252.98600000000008, "series": [{"data": [[1.61634618E12, 70.0], [1.6163463E12, 58.660920794239836], [1.61634624E12, 70.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61634618E12, 252.98600000000008]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6163463E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 135.75, "minX": 1.0, "maxY": 7172.0, "series": [{"data": [[2.0, 139.25], [3.0, 297.6842105263158], [4.0, 1896.2500000000002], [5.0, 265.12499999999994], [6.0, 137.0], [7.0, 138.5], [8.0, 138.2857142857143], [9.0, 139.0], [10.0, 139.0], [11.0, 226.46153846153845], [12.0, 211.59259259259267], [13.0, 136.91666666666669], [14.0, 261.9583333333333], [15.0, 138.0], [16.0, 194.71428571428575], [17.0, 135.75], [18.0, 137.83333333333331], [19.0, 136.0], [20.0, 351.0714285714286], [21.0, 171.9418604651163], [22.0, 137.8], [23.0, 215.78947368421055], [24.0, 238.43333333333325], [26.0, 184.26923076923077], [27.0, 293.23076923076917], [28.0, 138.26086956521743], [29.0, 221.62499999999997], [30.0, 182.39130434782604], [31.0, 139.0], [33.0, 173.60714285714286], [32.0, 139.58333333333331], [35.0, 192.15789473684208], [34.0, 136.94117647058823], [37.0, 139.1875], [36.0, 163.92307692307693], [39.0, 136.55555555555554], [38.0, 293.2307692307692], [41.0, 215.3076923076923], [40.0, 216.37974683544311], [43.0, 147.0], [42.0, 212.8888888888889], [45.0, 140.027027027027], [44.0, 268.6470588235294], [47.0, 209.82142857142853], [49.0, 241.94871794871798], [48.0, 169.76190476190482], [51.0, 174.33333333333334], [50.0, 138.9], [53.0, 155.81481481481478], [55.0, 136.0], [54.0, 137.64], [57.0, 165.8321678321678], [56.0, 214.1538461538462], [59.0, 142.3529411764706], [58.0, 159.81818181818178], [61.0, 174.037037037037], [60.0, 196.45098039215688], [63.0, 183.50000000000023], [62.0, 140.83333333333334], [67.0, 364.8421052631579], [66.0, 144.66927083333343], [65.0, 210.42857142857144], [64.0, 263.58333333333337], [70.0, 174.2870847342616], [69.0, 227.141975308642], [68.0, 245.80000000000007], [1.0, 140.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[68.51522857142842, 175.9732285714297]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[75.0, 6335.5], [73.0, 6282.0], [72.0, 6406.0], [77.0, 6255.5], [81.0, 6251.0], [80.0, 6227.0], [85.0, 6565.2], [90.0, 6544.0], [95.0, 6591.0], [94.0, 6245.0], [98.0, 6575.8], [96.0, 6266.0], [103.0, 7117.0], [101.0, 6625.333333333333], [105.0, 7172.0], [104.0, 6334.5], [111.0, 6586.833333333334], [114.0, 6241.0], [113.0, 6850.5], [119.0, 6339.0], [121.0, 6411.0], [120.0, 6343.0], [122.0, 6569.0], [127.0, 6410.0], [126.0, 6216.0], [125.0, 6248.0], [124.0, 6199.0], [135.0, 6242.0], [134.0, 6248.0], [133.0, 6246.0], [132.0, 6593.5], [130.0, 6472.0], [128.0, 6673.0], [143.0, 6327.5], [141.0, 6196.5], [139.0, 6315.0], [138.0, 6529.0], [137.0, 6248.0], [136.0, 6216.0], [151.0, 6407.0], [149.0, 6292.0], [148.0, 6568.0], [147.0, 6566.0], [145.0, 7160.0], [144.0, 6527.0], [157.0, 6632.0], [156.0, 6313.0], [154.0, 6403.0], [153.0, 7047.0], [167.0, 6411.5], [165.0, 6404.0], [164.0, 6409.666666666667], [163.0, 6196.0], [161.0, 6647.0], [160.0, 6257.0], [175.0, 6549.0], [173.0, 6539.0], [172.0, 6404.0], [170.0, 6268.333333333333], [182.0, 6242.0], [181.0, 6193.0], [180.0, 6243.0], [179.0, 6473.0], [178.0, 7090.0], [176.0, 6556.5], [191.0, 6402.0], [190.0, 6563.0], [188.0, 6194.0], [186.0, 6541.0], [197.0, 6552.0], [196.0, 6344.0], [195.0, 6238.0], [194.0, 6377.0], [193.0, 6242.0], [205.0, 6706.5], [204.0, 6562.0], [203.0, 6234.0], [202.0, 6193.0], [201.0, 6437.5], [215.0, 6379.0], [214.0, 6696.0], [213.0, 6242.0], [211.0, 6365.0], [210.0, 6243.0], [209.0, 7072.0], [223.0, 6608.2], [220.0, 6208.0], [217.0, 6476.5], [216.0, 7091.0], [231.0, 6401.5], [228.0, 6319.75], [224.0, 6387.0], [239.0, 6422.0], [238.0, 6472.0], [235.0, 7077.0], [234.0, 6559.0], [233.0, 7136.0], [232.0, 6561.0], [247.0, 6218.5], [246.0, 6238.0], [244.0, 6227.5], [243.0, 6693.0], [242.0, 7062.0], [255.0, 6237.0], [253.0, 6248.0], [252.0, 6637.666666666667], [248.0, 6562.0], [259.0, 6237.5], [271.0, 6828.5], [269.0, 6304.0], [268.0, 6583.0], [267.0, 6209.0], [263.0, 6369.5], [262.0, 6231.0], [258.0, 6187.0], [257.0, 6187.0], [256.0, 6235.0], [274.0, 6480.0], [287.0, 6634.0], [284.0, 6535.333333333333], [281.0, 6403.0], [278.0, 6208.0], [277.0, 6233.0], [276.0, 6370.0], [273.0, 6548.0], [272.0, 6393.0], [303.0, 6419.5], [301.0, 6556.0], [299.0, 6523.0], [298.0, 7136.0], [297.0, 6506.0], [294.0, 6181.0], [293.0, 6210.5], [292.0, 6234.0], [290.0, 6652.0], [289.0, 6554.0], [306.0, 6212.0], [319.0, 6462.333333333333], [318.0, 6550.0], [315.0, 7001.0], [313.0, 7013.0], [311.0, 6497.0], [309.0, 6650.0], [308.0, 6226.0], [305.0, 6552.0], [304.0, 6667.0], [334.0, 6550.0], [333.0, 6589.75], [331.0, 6241.0], [327.0, 6639.666666666667], [326.0, 6462.0], [322.0, 7048.666666666667], [321.0, 6691.0], [349.0, 6369.0], [347.0, 6179.0], [346.0, 6571.75], [343.0, 6230.0], [344.0, 6228.0], [341.0, 6439.0], [340.0, 6485.0], [338.0, 6229.0], [337.0, 6262.333333333333], [366.0, 6695.25], [364.0, 6391.5], [362.0, 6562.0], [361.0, 6550.0], [360.0, 6228.0], [358.0, 6438.0], [355.0, 6282.333333333333], [354.0, 6200.0], [381.0, 6331.0], [379.0, 6204.0], [378.0, 6451.5], [377.0, 6918.0], [376.0, 6331.0], [375.0, 6176.5], [370.0, 6227.0], [369.0, 6696.0], [387.0, 6226.0], [397.0, 6193.0], [394.0, 7167.0], [392.0, 6389.0], [391.0, 6326.0], [389.0, 6176.0], [388.0, 6289.5], [386.0, 6668.5], [384.0, 6226.0], [415.0, 6627.333333333333], [413.0, 7014.0], [403.0, 6219.0], [401.0, 6384.5], [400.0, 6206.0], [411.0, 6364.0], [410.0, 6216.0], [409.0, 6362.5], [408.0, 6193.0], [406.0, 6355.0], [407.0, 7033.0], [405.0, 6332.333333333333], [404.0, 6185.5], [429.0, 6233.0], [431.0, 6668.5], [428.0, 6751.0], [419.0, 6217.0], [417.0, 6283.666666666667], [427.0, 6221.0], [424.0, 6476.5], [423.0, 6192.5], [422.0, 6203.0], [421.0, 7041.0], [420.0, 6383.0], [447.0, 6547.0], [443.0, 6429.4], [442.0, 6220.0], [439.0, 6188.0], [437.0, 6237.333333333333], [435.0, 6382.0], [433.0, 6216.5], [451.0, 7084.0], [461.0, 6273.5], [463.0, 6212.0], [460.0, 6748.75], [459.0, 6219.0], [457.0, 7101.0], [455.0, 6689.0], [454.0, 7147.0], [450.0, 6220.0], [449.0, 6265.666666666667], [448.0, 7105.0], [479.0, 6379.5], [478.0, 7115.0], [474.0, 6183.0], [473.0, 6213.0], [475.0, 6973.0], [468.0, 6213.0], [467.0, 6378.0], [465.0, 6511.0], [464.0, 6193.0], [495.0, 6213.0], [492.0, 6475.333333333333], [491.0, 6164.0], [489.0, 6216.0], [486.0, 6433.5], [485.0, 6330.0], [484.0, 6166.0], [482.0, 6291.0], [480.0, 6589.0], [510.0, 6212.0], [509.0, 6377.666666666667], [506.0, 6549.0], [505.0, 6214.0], [504.0, 6457.0], [503.0, 6264.333333333333], [502.0, 6194.0], [501.0, 6250.0], [498.0, 6463.0], [496.0, 6325.0], [537.0, 6262.0], [531.0, 6533.0], [541.0, 6209.0], [540.0, 6929.0], [539.0, 6160.0], [536.0, 6171.5], [519.0, 6533.0], [516.0, 6235.0], [513.0, 6332.0], [512.0, 6684.0], [517.0, 6383.0], [526.0, 6211.0], [523.0, 6204.0], [522.0, 6280.0], [521.0, 6207.0], [520.0, 6202.0], [535.0, 6328.0], [534.0, 6211.0], [533.0, 6185.5], [529.0, 6405.0], [528.0, 6590.333333333333], [570.0, 6338.083333333332], [552.0, 6202.0], [548.0, 6207.0], [544.0, 6439.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[322.98000000000025, 6437.823999999995]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 570.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61634618E12, "maxY": 4.9E-324, "series": [{"data": [[1.61634618E12, 0.0], [1.6163463E12, 0.0], [1.61634624E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61634618E12, 0.0], [1.6163463E12, 0.0], [1.61634624E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6163463E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 162.5896242875428, "minX": 1.61634618E12, "maxY": 6437.823999999995, "series": [{"data": [[1.61634618E12, 246.26178123649012], [1.6163463E12, 180.34191577569314], [1.61634624E12, 162.5896242875428]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61634618E12, 6437.823999999995]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6163463E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61634618E12, "maxY": 4.9E-324, "series": [{"data": [[1.61634618E12, 0.0], [1.6163463E12, 0.0], [1.61634624E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61634618E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6163463E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61634618E12, "maxY": 4.9E-324, "series": [{"data": [[1.61634618E12, 0.0], [1.6163463E12, 0.0], [1.61634624E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61634618E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6163463E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 134.0, "minX": 1.61634618E12, "maxY": 7291.0, "series": [{"data": [[1.61634618E12, 7291.0], [1.6163463E12, 7167.0], [1.61634624E12, 7168.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61634618E12, 6203.0], [1.6163463E12, 153.0], [1.61634624E12, 139.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61634618E12, 7075.919999999998], [1.6163463E12, 1152.0], [1.61634624E12, 1146.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61634618E12, 6389.5999999999985], [1.6163463E12, 183.0], [1.61634624E12, 141.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61634618E12, 134.0], [1.6163463E12, 134.0], [1.61634624E12, 134.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61634618E12, 138.0], [1.6163463E12, 138.0], [1.61634624E12, 137.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6163463E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 136.0, "minX": 6.0, "maxY": 6234.5, "series": [{"data": [[536.0, 138.0], [531.0, 137.0], [529.0, 138.0], [512.0, 137.0], [523.0, 137.0], [780.0, 6234.5], [6.0, 140.0], [7.0, 141.0], [19.0, 139.0], [22.0, 139.0], [40.0, 138.0], [64.0, 137.0], [110.0, 137.0], [127.0, 137.0], [166.0, 138.0], [189.0, 138.0], [199.0, 138.0], [224.0, 137.0], [234.0, 138.0], [247.0, 139.0], [271.0, 138.0], [276.0, 137.0], [315.0, 138.0], [310.0, 138.0], [330.0, 138.0], [321.0, 137.0], [350.0, 138.0], [345.0, 138.0], [337.0, 137.0], [363.0, 137.0], [364.0, 138.0], [353.0, 137.0], [370.0, 139.0], [375.0, 138.0], [368.0, 138.0], [388.0, 138.0], [410.0, 138.0], [406.0, 137.0], [411.0, 138.0], [408.0, 138.0], [423.0, 138.0], [416.0, 137.0], [424.0, 138.0], [446.0, 138.0], [447.0, 137.0], [434.0, 137.0], [443.0, 138.0], [437.0, 137.0], [441.0, 137.0], [440.0, 137.0], [445.0, 138.0], [435.0, 139.0], [462.0, 137.0], [459.0, 137.0], [463.0, 137.0], [453.0, 138.0], [461.0, 137.0], [454.0, 138.0], [474.0, 138.0], [464.0, 137.0], [472.0, 138.0], [494.0, 137.0], [492.0, 138.0], [487.0, 138.0], [486.0, 138.0], [491.0, 138.0], [493.0, 137.0], [495.0, 138.0], [499.0, 138.0], [500.0, 137.0], [504.0, 137.0], [509.0, 137.0], [496.0, 138.0], [497.0, 137.0], [502.0, 137.0], [510.0, 136.0], [508.0, 138.0], [505.0, 137.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 780.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 6.0, "maxY": 4.9E-324, "series": [{"data": [[536.0, 0.0], [531.0, 0.0], [529.0, 0.0], [512.0, 0.0], [523.0, 0.0], [780.0, 0.0], [6.0, 0.0], [7.0, 0.0], [19.0, 0.0], [22.0, 0.0], [40.0, 0.0], [64.0, 0.0], [110.0, 0.0], [127.0, 0.0], [166.0, 0.0], [189.0, 0.0], [199.0, 0.0], [224.0, 0.0], [234.0, 0.0], [247.0, 0.0], [271.0, 0.0], [276.0, 0.0], [315.0, 0.0], [310.0, 0.0], [330.0, 0.0], [321.0, 0.0], [350.0, 0.0], [345.0, 0.0], [337.0, 0.0], [363.0, 0.0], [364.0, 0.0], [353.0, 0.0], [370.0, 0.0], [375.0, 0.0], [368.0, 0.0], [388.0, 0.0], [410.0, 0.0], [406.0, 0.0], [411.0, 0.0], [408.0, 0.0], [423.0, 0.0], [416.0, 0.0], [424.0, 0.0], [446.0, 0.0], [447.0, 0.0], [434.0, 0.0], [443.0, 0.0], [437.0, 0.0], [441.0, 0.0], [440.0, 0.0], [445.0, 0.0], [435.0, 0.0], [462.0, 0.0], [459.0, 0.0], [463.0, 0.0], [453.0, 0.0], [461.0, 0.0], [454.0, 0.0], [474.0, 0.0], [464.0, 0.0], [472.0, 0.0], [494.0, 0.0], [492.0, 0.0], [487.0, 0.0], [486.0, 0.0], [491.0, 0.0], [493.0, 0.0], [495.0, 0.0], [499.0, 0.0], [500.0, 0.0], [504.0, 0.0], [509.0, 0.0], [496.0, 0.0], [497.0, 0.0], [502.0, 0.0], [510.0, 0.0], [508.0, 0.0], [505.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 780.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 75.21666666666667, "minX": 1.61634618E12, "maxY": 429.85, "series": [{"data": [[1.61634618E12, 86.6], [1.6163463E12, 75.21666666666667], [1.61634624E12, 429.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6163463E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 76.38333333333334, "minX": 1.61634618E12, "maxY": 429.85, "series": [{"data": [[1.61634618E12, 85.43333333333334], [1.6163463E12, 76.38333333333334], [1.61634624E12, 429.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6163463E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.61634618E12, "maxY": 429.85, "series": [{"data": [[1.61634618E12, 8.333333333333334]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61634618E12, 77.1], [1.6163463E12, 76.38333333333334], [1.61634624E12, 429.85]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6163463E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 76.38333333333334, "minX": 1.61634618E12, "maxY": 429.85, "series": [{"data": [[1.61634618E12, 85.43333333333334], [1.6163463E12, 76.38333333333334], [1.61634624E12, 429.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6163463E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

