/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 63469.0, "series": [{"data": [[0.0, 26.0], [0.1, 26.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 27.0], [1.4, 28.0], [1.5, 28.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 28.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 30.0], [4.6, 30.0], [4.7, 30.0], [4.8, 30.0], [4.9, 30.0], [5.0, 30.0], [5.1, 30.0], [5.2, 30.0], [5.3, 30.0], [5.4, 31.0], [5.5, 31.0], [5.6, 31.0], [5.7, 31.0], [5.8, 31.0], [5.9, 31.0], [6.0, 32.0], [6.1, 32.0], [6.2, 32.0], [6.3, 32.0], [6.4, 32.0], [6.5, 33.0], [6.6, 33.0], [6.7, 33.0], [6.8, 33.0], [6.9, 34.0], [7.0, 34.0], [7.1, 34.0], [7.2, 34.0], [7.3, 34.0], [7.4, 35.0], [7.5, 35.0], [7.6, 35.0], [7.7, 35.0], [7.8, 35.0], [7.9, 35.0], [8.0, 36.0], [8.1, 36.0], [8.2, 36.0], [8.3, 36.0], [8.4, 36.0], [8.5, 36.0], [8.6, 37.0], [8.7, 37.0], [8.8, 37.0], [8.9, 37.0], [9.0, 37.0], [9.1, 37.0], [9.2, 38.0], [9.3, 38.0], [9.4, 38.0], [9.5, 38.0], [9.6, 38.0], [9.7, 38.0], [9.8, 38.0], [9.9, 39.0], [10.0, 39.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 42.0], [11.8, 42.0], [11.9, 42.0], [12.0, 42.0], [12.1, 42.0], [12.2, 42.0], [12.3, 43.0], [12.4, 43.0], [12.5, 43.0], [12.6, 43.0], [12.7, 43.0], [12.8, 44.0], [12.9, 44.0], [13.0, 44.0], [13.1, 44.0], [13.2, 44.0], [13.3, 44.0], [13.4, 44.0], [13.5, 45.0], [13.6, 45.0], [13.7, 45.0], [13.8, 45.0], [13.9, 45.0], [14.0, 45.0], [14.1, 46.0], [14.2, 46.0], [14.3, 46.0], [14.4, 46.0], [14.5, 46.0], [14.6, 46.0], [14.7, 47.0], [14.8, 47.0], [14.9, 47.0], [15.0, 47.0], [15.1, 47.0], [15.2, 48.0], [15.3, 48.0], [15.4, 48.0], [15.5, 48.0], [15.6, 48.0], [15.7, 49.0], [15.8, 49.0], [15.9, 49.0], [16.0, 49.0], [16.1, 49.0], [16.2, 50.0], [16.3, 50.0], [16.4, 50.0], [16.5, 51.0], [16.6, 51.0], [16.7, 51.0], [16.8, 51.0], [16.9, 52.0], [17.0, 52.0], [17.1, 52.0], [17.2, 52.0], [17.3, 53.0], [17.4, 53.0], [17.5, 53.0], [17.6, 53.0], [17.7, 53.0], [17.8, 54.0], [17.9, 54.0], [18.0, 54.0], [18.1, 54.0], [18.2, 54.0], [18.3, 55.0], [18.4, 55.0], [18.5, 55.0], [18.6, 55.0], [18.7, 56.0], [18.8, 56.0], [18.9, 56.0], [19.0, 56.0], [19.1, 57.0], [19.2, 57.0], [19.3, 57.0], [19.4, 57.0], [19.5, 58.0], [19.6, 58.0], [19.7, 58.0], [19.8, 58.0], [19.9, 59.0], [20.0, 59.0], [20.1, 59.0], [20.2, 60.0], [20.3, 60.0], [20.4, 60.0], [20.5, 61.0], [20.6, 61.0], [20.7, 61.0], [20.8, 62.0], [20.9, 62.0], [21.0, 62.0], [21.1, 63.0], [21.2, 63.0], [21.3, 63.0], [21.4, 64.0], [21.5, 64.0], [21.6, 64.0], [21.7, 65.0], [21.8, 65.0], [21.9, 66.0], [22.0, 66.0], [22.1, 66.0], [22.2, 67.0], [22.3, 67.0], [22.4, 67.0], [22.5, 68.0], [22.6, 68.0], [22.7, 68.0], [22.8, 69.0], [22.9, 69.0], [23.0, 69.0], [23.1, 69.0], [23.2, 70.0], [23.3, 70.0], [23.4, 70.0], [23.5, 70.0], [23.6, 71.0], [23.7, 71.0], [23.8, 71.0], [23.9, 72.0], [24.0, 72.0], [24.1, 72.0], [24.2, 72.0], [24.3, 72.0], [24.4, 73.0], [24.5, 73.0], [24.6, 73.0], [24.7, 73.0], [24.8, 74.0], [24.9, 74.0], [25.0, 74.0], [25.1, 74.0], [25.2, 75.0], [25.3, 75.0], [25.4, 75.0], [25.5, 75.0], [25.6, 75.0], [25.7, 76.0], [25.8, 76.0], [25.9, 76.0], [26.0, 76.0], [26.1, 76.0], [26.2, 77.0], [26.3, 77.0], [26.4, 77.0], [26.5, 77.0], [26.6, 78.0], [26.7, 78.0], [26.8, 78.0], [26.9, 78.0], [27.0, 79.0], [27.1, 79.0], [27.2, 79.0], [27.3, 80.0], [27.4, 80.0], [27.5, 80.0], [27.6, 80.0], [27.7, 80.0], [27.8, 81.0], [27.9, 81.0], [28.0, 81.0], [28.1, 81.0], [28.2, 81.0], [28.3, 82.0], [28.4, 82.0], [28.5, 82.0], [28.6, 82.0], [28.7, 82.0], [28.8, 83.0], [28.9, 83.0], [29.0, 83.0], [29.1, 83.0], [29.2, 83.0], [29.3, 83.0], [29.4, 83.0], [29.5, 84.0], [29.6, 84.0], [29.7, 84.0], [29.8, 84.0], [29.9, 84.0], [30.0, 84.0], [30.1, 84.0], [30.2, 84.0], [30.3, 85.0], [30.4, 85.0], [30.5, 85.0], [30.6, 85.0], [30.7, 85.0], [30.8, 85.0], [30.9, 85.0], [31.0, 85.0], [31.1, 86.0], [31.2, 86.0], [31.3, 86.0], [31.4, 86.0], [31.5, 86.0], [31.6, 86.0], [31.7, 86.0], [31.8, 86.0], [31.9, 86.0], [32.0, 87.0], [32.1, 87.0], [32.2, 87.0], [32.3, 87.0], [32.4, 87.0], [32.5, 87.0], [32.6, 87.0], [32.7, 87.0], [32.8, 87.0], [32.9, 88.0], [33.0, 88.0], [33.1, 88.0], [33.2, 88.0], [33.3, 88.0], [33.4, 88.0], [33.5, 88.0], [33.6, 88.0], [33.7, 88.0], [33.8, 89.0], [33.9, 89.0], [34.0, 89.0], [34.1, 89.0], [34.2, 89.0], [34.3, 89.0], [34.4, 89.0], [34.5, 89.0], [34.6, 90.0], [34.7, 90.0], [34.8, 90.0], [34.9, 90.0], [35.0, 90.0], [35.1, 90.0], [35.2, 91.0], [35.3, 91.0], [35.4, 91.0], [35.5, 91.0], [35.6, 91.0], [35.7, 91.0], [35.8, 92.0], [35.9, 92.0], [36.0, 92.0], [36.1, 92.0], [36.2, 92.0], [36.3, 92.0], [36.4, 93.0], [36.5, 93.0], [36.6, 93.0], [36.7, 93.0], [36.8, 93.0], [36.9, 93.0], [37.0, 93.0], [37.1, 94.0], [37.2, 94.0], [37.3, 94.0], [37.4, 94.0], [37.5, 94.0], [37.6, 95.0], [37.7, 95.0], [37.8, 95.0], [37.9, 95.0], [38.0, 95.0], [38.1, 95.0], [38.2, 95.0], [38.3, 96.0], [38.4, 96.0], [38.5, 96.0], [38.6, 96.0], [38.7, 96.0], [38.8, 96.0], [38.9, 96.0], [39.0, 96.0], [39.1, 97.0], [39.2, 97.0], [39.3, 97.0], [39.4, 97.0], [39.5, 97.0], [39.6, 97.0], [39.7, 97.0], [39.8, 98.0], [39.9, 98.0], [40.0, 98.0], [40.1, 98.0], [40.2, 98.0], [40.3, 98.0], [40.4, 98.0], [40.5, 98.0], [40.6, 98.0], [40.7, 99.0], [40.8, 99.0], [40.9, 99.0], [41.0, 99.0], [41.1, 99.0], [41.2, 100.0], [41.3, 100.0], [41.4, 100.0], [41.5, 100.0], [41.6, 100.0], [41.7, 100.0], [41.8, 101.0], [41.9, 101.0], [42.0, 101.0], [42.1, 101.0], [42.2, 101.0], [42.3, 102.0], [42.4, 102.0], [42.5, 102.0], [42.6, 102.0], [42.7, 103.0], [42.8, 103.0], [42.9, 103.0], [43.0, 103.0], [43.1, 103.0], [43.2, 104.0], [43.3, 104.0], [43.4, 104.0], [43.5, 104.0], [43.6, 105.0], [43.7, 105.0], [43.8, 105.0], [43.9, 105.0], [44.0, 105.0], [44.1, 106.0], [44.2, 106.0], [44.3, 106.0], [44.4, 106.0], [44.5, 106.0], [44.6, 107.0], [44.7, 107.0], [44.8, 107.0], [44.9, 107.0], [45.0, 108.0], [45.1, 108.0], [45.2, 108.0], [45.3, 109.0], [45.4, 109.0], [45.5, 109.0], [45.6, 109.0], [45.7, 109.0], [45.8, 110.0], [45.9, 110.0], [46.0, 110.0], [46.1, 110.0], [46.2, 111.0], [46.3, 111.0], [46.4, 111.0], [46.5, 111.0], [46.6, 111.0], [46.7, 111.0], [46.8, 112.0], [46.9, 112.0], [47.0, 112.0], [47.1, 112.0], [47.2, 112.0], [47.3, 112.0], [47.4, 112.0], [47.5, 112.0], [47.6, 113.0], [47.7, 113.0], [47.8, 113.0], [47.9, 113.0], [48.0, 113.0], [48.1, 113.0], [48.2, 113.0], [48.3, 113.0], [48.4, 113.0], [48.5, 114.0], [48.6, 114.0], [48.7, 114.0], [48.8, 114.0], [48.9, 114.0], [49.0, 114.0], [49.1, 114.0], [49.2, 114.0], [49.3, 115.0], [49.4, 115.0], [49.5, 115.0], [49.6, 115.0], [49.7, 115.0], [49.8, 115.0], [49.9, 116.0], [50.0, 116.0], [50.1, 116.0], [50.2, 116.0], [50.3, 116.0], [50.4, 116.0], [50.5, 117.0], [50.6, 117.0], [50.7, 117.0], [50.8, 118.0], [50.9, 118.0], [51.0, 118.0], [51.1, 118.0], [51.2, 119.0], [51.3, 119.0], [51.4, 119.0], [51.5, 119.0], [51.6, 119.0], [51.7, 120.0], [51.8, 120.0], [51.9, 120.0], [52.0, 121.0], [52.1, 121.0], [52.2, 121.0], [52.3, 121.0], [52.4, 122.0], [52.5, 122.0], [52.6, 122.0], [52.7, 122.0], [52.8, 123.0], [52.9, 123.0], [53.0, 123.0], [53.1, 124.0], [53.2, 124.0], [53.3, 124.0], [53.4, 124.0], [53.5, 125.0], [53.6, 125.0], [53.7, 125.0], [53.8, 125.0], [53.9, 126.0], [54.0, 126.0], [54.1, 126.0], [54.2, 126.0], [54.3, 127.0], [54.4, 128.0], [54.5, 128.0], [54.6, 129.0], [54.7, 129.0], [54.8, 130.0], [54.9, 130.0], [55.0, 130.0], [55.1, 131.0], [55.2, 131.0], [55.3, 132.0], [55.4, 132.0], [55.5, 133.0], [55.6, 133.0], [55.7, 134.0], [55.8, 135.0], [55.9, 135.0], [56.0, 136.0], [56.1, 137.0], [56.2, 138.0], [56.3, 140.0], [56.4, 141.0], [56.5, 141.0], [56.6, 143.0], [56.7, 143.0], [56.8, 144.0], [56.9, 145.0], [57.0, 146.0], [57.1, 147.0], [57.2, 149.0], [57.3, 151.0], [57.4, 152.0], [57.5, 153.0], [57.6, 156.0], [57.7, 158.0], [57.8, 159.0], [57.9, 160.0], [58.0, 162.0], [58.1, 164.0], [58.2, 165.0], [58.3, 165.0], [58.4, 166.0], [58.5, 168.0], [58.6, 171.0], [58.7, 173.0], [58.8, 179.0], [58.9, 180.0], [59.0, 182.0], [59.1, 184.0], [59.2, 186.0], [59.3, 190.0], [59.4, 192.0], [59.5, 193.0], [59.6, 195.0], [59.7, 196.0], [59.8, 201.0], [59.9, 208.0], [60.0, 216.0], [60.1, 227.0], [60.2, 235.0], [60.3, 244.0], [60.4, 251.0], [60.5, 257.0], [60.6, 265.0], [60.7, 281.0], [60.8, 293.0], [60.9, 299.0], [61.0, 307.0], [61.1, 313.0], [61.2, 320.0], [61.3, 328.0], [61.4, 352.0], [61.5, 356.0], [61.6, 365.0], [61.7, 389.0], [61.8, 406.0], [61.9, 429.0], [62.0, 449.0], [62.1, 464.0], [62.2, 475.0], [62.3, 497.0], [62.4, 514.0], [62.5, 519.0], [62.6, 527.0], [62.7, 552.0], [62.8, 588.0], [62.9, 1030.0], [63.0, 1034.0], [63.1, 1037.0], [63.2, 1038.0], [63.3, 1040.0], [63.4, 1041.0], [63.5, 1043.0], [63.6, 1046.0], [63.7, 1048.0], [63.8, 1052.0], [63.9, 1055.0], [64.0, 1057.0], [64.1, 1059.0], [64.2, 1061.0], [64.3, 1064.0], [64.4, 1068.0], [64.5, 1070.0], [64.6, 1077.0], [64.7, 1085.0], [64.8, 1091.0], [64.9, 1099.0], [65.0, 1105.0], [65.1, 1111.0], [65.2, 1119.0], [65.3, 1259.0], [65.4, 1320.0], [65.5, 1463.0], [65.6, 1506.0], [65.7, 1513.0], [65.8, 1533.0], [65.9, 2114.0], [66.0, 3044.0], [66.1, 3073.0], [66.2, 3289.0], [66.3, 3414.0], [66.4, 3690.0], [66.5, 4205.0], [66.6, 5558.0], [66.7, 32857.0], [66.8, 32864.0], [66.9, 32868.0], [67.0, 32875.0], [67.1, 32879.0], [67.2, 32885.0], [67.3, 32890.0], [67.4, 32897.0], [67.5, 32905.0], [67.6, 32911.0], [67.7, 32915.0], [67.8, 32918.0], [67.9, 32922.0], [68.0, 32925.0], [68.1, 32930.0], [68.2, 32934.0], [68.3, 32939.0], [68.4, 32943.0], [68.5, 32948.0], [68.6, 32960.0], [68.7, 32967.0], [68.8, 32983.0], [68.9, 32991.0], [69.0, 32996.0], [69.1, 33018.0], [69.2, 33025.0], [69.3, 33030.0], [69.4, 33034.0], [69.5, 33036.0], [69.6, 33039.0], [69.7, 33047.0], [69.8, 33070.0], [69.9, 33079.0], [70.0, 33083.0], [70.1, 33094.0], [70.2, 33098.0], [70.3, 33125.0], [70.4, 33141.0], [70.5, 33147.0], [70.6, 33166.0], [70.7, 33171.0], [70.8, 33174.0], [70.9, 33178.0], [71.0, 33180.0], [71.1, 33182.0], [71.2, 33185.0], [71.3, 33187.0], [71.4, 33189.0], [71.5, 33190.0], [71.6, 33192.0], [71.7, 33195.0], [71.8, 33200.0], [71.9, 33205.0], [72.0, 33213.0], [72.1, 33216.0], [72.2, 33220.0], [72.3, 33223.0], [72.4, 33226.0], [72.5, 33230.0], [72.6, 33236.0], [72.7, 33237.0], [72.8, 33239.0], [72.9, 33240.0], [73.0, 33242.0], [73.1, 33244.0], [73.2, 33246.0], [73.3, 33247.0], [73.4, 33249.0], [73.5, 33251.0], [73.6, 33254.0], [73.7, 33258.0], [73.8, 33288.0], [73.9, 33290.0], [74.0, 33291.0], [74.1, 33292.0], [74.2, 33293.0], [74.3, 33294.0], [74.4, 33295.0], [74.5, 33296.0], [74.6, 33297.0], [74.7, 33298.0], [74.8, 33299.0], [74.9, 33301.0], [75.0, 33305.0], [75.1, 33308.0], [75.2, 33310.0], [75.3, 33313.0], [75.4, 33326.0], [75.5, 33331.0], [75.6, 33335.0], [75.7, 33338.0], [75.8, 33344.0], [75.9, 33350.0], [76.0, 33370.0], [76.1, 33378.0], [76.2, 33383.0], [76.3, 33385.0], [76.4, 33386.0], [76.5, 33388.0], [76.6, 33391.0], [76.7, 33400.0], [76.8, 33409.0], [76.9, 33422.0], [77.0, 33432.0], [77.1, 33445.0], [77.2, 33461.0], [77.3, 33476.0], [77.4, 33491.0], [77.5, 33493.0], [77.6, 33495.0], [77.7, 33496.0], [77.8, 33498.0], [77.9, 33505.0], [78.0, 33522.0], [78.1, 33538.0], [78.2, 33544.0], [78.3, 33554.0], [78.4, 33562.0], [78.5, 33577.0], [78.6, 33597.0], [78.7, 33608.0], [78.8, 33617.0], [78.9, 33635.0], [79.0, 33636.0], [79.1, 33638.0], [79.2, 33646.0], [79.3, 33652.0], [79.4, 33655.0], [79.5, 33657.0], [79.6, 33660.0], [79.7, 33669.0], [79.8, 33670.0], [79.9, 33673.0], [80.0, 33681.0], [80.1, 33682.0], [80.2, 33683.0], [80.3, 33684.0], [80.4, 33686.0], [80.5, 33688.0], [80.6, 33694.0], [80.7, 33695.0], [80.8, 33696.0], [80.9, 33697.0], [81.0, 33697.0], [81.1, 33697.0], [81.2, 33699.0], [81.3, 33706.0], [81.4, 33709.0], [81.5, 33726.0], [81.6, 33733.0], [81.7, 33740.0], [81.8, 33740.0], [81.9, 33741.0], [82.0, 33757.0], [82.1, 33757.0], [82.2, 33758.0], [82.3, 33783.0], [82.4, 33786.0], [82.5, 33787.0], [82.6, 33790.0], [82.7, 33790.0], [82.8, 33805.0], [82.9, 33817.0], [83.0, 33886.0], [83.1, 33894.0], [83.2, 33896.0], [83.3, 33899.0], [83.4, 33910.0], [83.5, 33916.0], [83.6, 33917.0], [83.7, 33918.0], [83.8, 33920.0], [83.9, 33921.0], [84.0, 33924.0], [84.1, 33938.0], [84.2, 33939.0], [84.3, 33940.0], [84.4, 33941.0], [84.5, 33943.0], [84.6, 33957.0], [84.7, 33973.0], [84.8, 33975.0], [84.9, 34036.0], [85.0, 34039.0], [85.1, 34060.0], [85.2, 34070.0], [85.3, 34074.0], [85.4, 34075.0], [85.5, 34076.0], [85.6, 34077.0], [85.7, 34083.0], [85.8, 34106.0], [85.9, 34107.0], [86.0, 34114.0], [86.1, 34116.0], [86.2, 34138.0], [86.3, 34145.0], [86.4, 34164.0], [86.5, 34171.0], [86.6, 34173.0], [86.7, 34175.0], [86.8, 34176.0], [86.9, 34178.0], [87.0, 34180.0], [87.1, 34182.0], [87.2, 34184.0], [87.3, 34186.0], [87.4, 34188.0], [87.5, 34206.0], [87.6, 34208.0], [87.7, 34210.0], [87.8, 34213.0], [87.9, 34215.0], [88.0, 34217.0], [88.1, 34219.0], [88.2, 34236.0], [88.3, 34239.0], [88.4, 34243.0], [88.5, 34245.0], [88.6, 34247.0], [88.7, 34250.0], [88.8, 34254.0], [88.9, 34256.0], [89.0, 34272.0], [89.1, 34274.0], [89.2, 34276.0], [89.3, 34281.0], [89.4, 34290.0], [89.5, 34296.0], [89.6, 34297.0], [89.7, 34300.0], [89.8, 34302.0], [89.9, 34303.0], [90.0, 34304.0], [90.1, 34334.0], [90.2, 35024.0], [90.3, 35029.0], [90.4, 35031.0], [90.5, 35032.0], [90.6, 35034.0], [90.7, 35036.0], [90.8, 35039.0], [90.9, 35043.0], [91.0, 35044.0], [91.1, 35046.0], [91.2, 35064.0], [91.3, 35067.0], [91.4, 35069.0], [91.5, 35070.0], [91.6, 35071.0], [91.7, 35074.0], [91.8, 35077.0], [91.9, 35079.0], [92.0, 35081.0], [92.1, 35083.0], [92.2, 35085.0], [92.3, 35089.0], [92.4, 35180.0], [92.5, 35252.0], [92.6, 35277.0], [92.7, 35283.0], [92.8, 35297.0], [92.9, 35299.0], [93.0, 35303.0], [93.1, 35324.0], [93.2, 35331.0], [93.3, 35340.0], [93.4, 35353.0], [93.5, 35364.0], [93.6, 35368.0], [93.7, 35377.0], [93.8, 35382.0], [93.9, 35393.0], [94.0, 35404.0], [94.1, 35421.0], [94.2, 35433.0], [94.3, 35448.0], [94.4, 35494.0], [94.5, 35536.0], [94.6, 35553.0], [94.7, 35568.0], [94.8, 35594.0], [94.9, 35598.0], [95.0, 35609.0], [95.1, 35610.0], [95.2, 35635.0], [95.3, 35638.0], [95.4, 35652.0], [95.5, 35653.0], [95.6, 35770.0], [95.7, 35909.0], [95.8, 35936.0], [95.9, 35981.0], [96.0, 35996.0], [96.1, 35997.0], [96.2, 36024.0], [96.3, 36028.0], [96.4, 36031.0], [96.5, 36033.0], [96.6, 36035.0], [96.7, 36038.0], [96.8, 36047.0], [96.9, 36052.0], [97.0, 36056.0], [97.1, 36058.0], [97.2, 36061.0], [97.3, 36063.0], [97.4, 36069.0], [97.5, 36077.0], [97.6, 36081.0], [97.7, 36084.0], [97.8, 36087.0], [97.9, 36097.0], [98.0, 36106.0], [98.1, 36114.0], [98.2, 36120.0], [98.3, 36135.0], [98.4, 36138.0], [98.5, 36152.0], [98.6, 36157.0], [98.7, 36862.0], [98.8, 40754.0], [98.9, 40760.0], [99.0, 40764.0], [99.1, 40772.0], [99.2, 40779.0], [99.3, 40784.0], [99.4, 40803.0], [99.5, 40805.0], [99.6, 40809.0], [99.7, 40816.0], [99.8, 40824.0], [99.9, 40831.0], [100.0, 48727.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 12898.0], [0.1, 12898.0], [0.2, 12898.0], [0.3, 12898.0], [0.4, 12898.0], [0.5, 12898.0], [0.6, 12898.0], [0.7, 12898.0], [0.8, 12898.0], [0.9, 12898.0], [1.0, 12907.0], [1.1, 12907.0], [1.2, 12907.0], [1.3, 12907.0], [1.4, 12907.0], [1.5, 12907.0], [1.6, 12907.0], [1.7, 12907.0], [1.8, 12907.0], [1.9, 12907.0], [2.0, 12957.0], [2.1, 12957.0], [2.2, 12957.0], [2.3, 12957.0], [2.4, 12957.0], [2.5, 12957.0], [2.6, 12957.0], [2.7, 12957.0], [2.8, 12957.0], [2.9, 12957.0], [3.0, 12966.0], [3.1, 12966.0], [3.2, 12966.0], [3.3, 12966.0], [3.4, 12966.0], [3.5, 12966.0], [3.6, 12966.0], [3.7, 12966.0], [3.8, 12966.0], [3.9, 12966.0], [4.0, 13008.0], [4.1, 13008.0], [4.2, 13008.0], [4.3, 13008.0], [4.4, 13008.0], [4.5, 13008.0], [4.6, 13008.0], [4.7, 13008.0], [4.8, 13008.0], [4.9, 13008.0], [5.0, 13024.0], [5.1, 13024.0], [5.2, 13024.0], [5.3, 13024.0], [5.4, 13024.0], [5.5, 13024.0], [5.6, 13024.0], [5.7, 13024.0], [5.8, 13024.0], [5.9, 13024.0], [6.0, 13024.0], [6.1, 13024.0], [6.2, 13024.0], [6.3, 13024.0], [6.4, 13024.0], [6.5, 13024.0], [6.6, 13024.0], [6.7, 13024.0], [6.8, 13024.0], [6.9, 13024.0], [7.0, 13079.0], [7.1, 13079.0], [7.2, 13079.0], [7.3, 13079.0], [7.4, 13079.0], [7.5, 13079.0], [7.6, 13079.0], [7.7, 13079.0], [7.8, 13079.0], [7.9, 13079.0], [8.0, 13084.0], [8.1, 13084.0], [8.2, 13084.0], [8.3, 13084.0], [8.4, 13084.0], [8.5, 13084.0], [8.6, 13084.0], [8.7, 13084.0], [8.8, 13084.0], [8.9, 13084.0], [9.0, 13108.0], [9.1, 13108.0], [9.2, 13108.0], [9.3, 13108.0], [9.4, 13108.0], [9.5, 13108.0], [9.6, 13108.0], [9.7, 13108.0], [9.8, 13108.0], [9.9, 13108.0], [10.0, 13127.0], [10.1, 13127.0], [10.2, 13127.0], [10.3, 13127.0], [10.4, 13127.0], [10.5, 13127.0], [10.6, 13127.0], [10.7, 13127.0], [10.8, 13127.0], [10.9, 13127.0], [11.0, 13136.0], [11.1, 13136.0], [11.2, 13136.0], [11.3, 13136.0], [11.4, 13136.0], [11.5, 13136.0], [11.6, 13136.0], [11.7, 13136.0], [11.8, 13136.0], [11.9, 13136.0], [12.0, 13151.0], [12.1, 13151.0], [12.2, 13151.0], [12.3, 13151.0], [12.4, 13151.0], [12.5, 13151.0], [12.6, 13151.0], [12.7, 13151.0], [12.8, 13151.0], [12.9, 13151.0], [13.0, 13208.0], [13.1, 13208.0], [13.2, 13208.0], [13.3, 13208.0], [13.4, 13208.0], [13.5, 13208.0], [13.6, 13208.0], [13.7, 13208.0], [13.8, 13208.0], [13.9, 13208.0], [14.0, 13221.0], [14.1, 13221.0], [14.2, 13221.0], [14.3, 13221.0], [14.4, 13221.0], [14.5, 13221.0], [14.6, 13221.0], [14.7, 13221.0], [14.8, 13221.0], [14.9, 13221.0], [15.0, 13225.0], [15.1, 13225.0], [15.2, 13225.0], [15.3, 13225.0], [15.4, 13225.0], [15.5, 13225.0], [15.6, 13225.0], [15.7, 13225.0], [15.8, 13225.0], [15.9, 13225.0], [16.0, 13226.0], [16.1, 13226.0], [16.2, 13226.0], [16.3, 13226.0], [16.4, 13226.0], [16.5, 13226.0], [16.6, 13226.0], [16.7, 13226.0], [16.8, 13226.0], [16.9, 13226.0], [17.0, 13296.0], [17.1, 13296.0], [17.2, 13296.0], [17.3, 13296.0], [17.4, 13296.0], [17.5, 13296.0], [17.6, 13296.0], [17.7, 13296.0], [17.8, 13296.0], [17.9, 13296.0], [18.0, 13351.0], [18.1, 13351.0], [18.2, 13351.0], [18.3, 13351.0], [18.4, 13351.0], [18.5, 13351.0], [18.6, 13351.0], [18.7, 13351.0], [18.8, 13351.0], [18.9, 13351.0], [19.0, 13365.0], [19.1, 13365.0], [19.2, 13365.0], [19.3, 13365.0], [19.4, 13365.0], [19.5, 13365.0], [19.6, 13365.0], [19.7, 13365.0], [19.8, 13365.0], [19.9, 13365.0], [20.0, 13369.0], [20.1, 13369.0], [20.2, 13369.0], [20.3, 13369.0], [20.4, 13369.0], [20.5, 13369.0], [20.6, 13369.0], [20.7, 13369.0], [20.8, 13369.0], [20.9, 13369.0], [21.0, 13383.0], [21.1, 13383.0], [21.2, 13383.0], [21.3, 13383.0], [21.4, 13383.0], [21.5, 13383.0], [21.6, 13383.0], [21.7, 13383.0], [21.8, 13383.0], [21.9, 13383.0], [22.0, 13384.0], [22.1, 13384.0], [22.2, 13384.0], [22.3, 13384.0], [22.4, 13384.0], [22.5, 13384.0], [22.6, 13384.0], [22.7, 13384.0], [22.8, 13384.0], [22.9, 13384.0], [23.0, 13385.0], [23.1, 13385.0], [23.2, 13385.0], [23.3, 13385.0], [23.4, 13385.0], [23.5, 13385.0], [23.6, 13385.0], [23.7, 13385.0], [23.8, 13385.0], [23.9, 13385.0], [24.0, 13389.0], [24.1, 13389.0], [24.2, 13389.0], [24.3, 13389.0], [24.4, 13389.0], [24.5, 13389.0], [24.6, 13389.0], [24.7, 13389.0], [24.8, 13389.0], [24.9, 13389.0], [25.0, 13390.0], [25.1, 13390.0], [25.2, 13390.0], [25.3, 13390.0], [25.4, 13390.0], [25.5, 13390.0], [25.6, 13390.0], [25.7, 13390.0], [25.8, 13390.0], [25.9, 13390.0], [26.0, 13436.0], [26.1, 13436.0], [26.2, 13436.0], [26.3, 13436.0], [26.4, 13436.0], [26.5, 13436.0], [26.6, 13436.0], [26.7, 13436.0], [26.8, 13436.0], [26.9, 13436.0], [27.0, 13464.0], [27.1, 13464.0], [27.2, 13464.0], [27.3, 13464.0], [27.4, 13464.0], [27.5, 13464.0], [27.6, 13464.0], [27.7, 13464.0], [27.8, 13464.0], [27.9, 13464.0], [28.0, 13482.0], [28.1, 13482.0], [28.2, 13482.0], [28.3, 13482.0], [28.4, 13482.0], [28.5, 13482.0], [28.6, 13482.0], [28.7, 13482.0], [28.8, 13482.0], [28.9, 13482.0], [29.0, 13484.0], [29.1, 13484.0], [29.2, 13484.0], [29.3, 13484.0], [29.4, 13484.0], [29.5, 13484.0], [29.6, 13484.0], [29.7, 13484.0], [29.8, 13484.0], [29.9, 13484.0], [30.0, 13501.0], [30.1, 13501.0], [30.2, 13501.0], [30.3, 13501.0], [30.4, 13501.0], [30.5, 13501.0], [30.6, 13501.0], [30.7, 13501.0], [30.8, 13501.0], [30.9, 13501.0], [31.0, 13504.0], [31.1, 13504.0], [31.2, 13504.0], [31.3, 13504.0], [31.4, 13504.0], [31.5, 13504.0], [31.6, 13504.0], [31.7, 13504.0], [31.8, 13504.0], [31.9, 13504.0], [32.0, 13534.0], [32.1, 13534.0], [32.2, 13534.0], [32.3, 13534.0], [32.4, 13534.0], [32.5, 13534.0], [32.6, 13534.0], [32.7, 13534.0], [32.8, 13534.0], [32.9, 13534.0], [33.0, 13534.0], [33.1, 13534.0], [33.2, 13534.0], [33.3, 13534.0], [33.4, 13534.0], [33.5, 13534.0], [33.6, 13534.0], [33.7, 13534.0], [33.8, 13534.0], [33.9, 13534.0], [34.0, 13541.0], [34.1, 13541.0], [34.2, 13541.0], [34.3, 13541.0], [34.4, 13541.0], [34.5, 13541.0], [34.6, 13541.0], [34.7, 13541.0], [34.8, 13541.0], [34.9, 13541.0], [35.0, 13541.0], [35.1, 13541.0], [35.2, 13541.0], [35.3, 13541.0], [35.4, 13541.0], [35.5, 13541.0], [35.6, 13541.0], [35.7, 13541.0], [35.8, 13541.0], [35.9, 13541.0], [36.0, 13545.0], [36.1, 13545.0], [36.2, 13545.0], [36.3, 13545.0], [36.4, 13545.0], [36.5, 13545.0], [36.6, 13545.0], [36.7, 13545.0], [36.8, 13545.0], [36.9, 13545.0], [37.0, 13560.0], [37.1, 13560.0], [37.2, 13560.0], [37.3, 13560.0], [37.4, 13560.0], [37.5, 13560.0], [37.6, 13560.0], [37.7, 13560.0], [37.8, 13560.0], [37.9, 13560.0], [38.0, 13576.0], [38.1, 13576.0], [38.2, 13576.0], [38.3, 13576.0], [38.4, 13576.0], [38.5, 13576.0], [38.6, 13576.0], [38.7, 13576.0], [38.8, 13576.0], [38.9, 13576.0], [39.0, 13576.0], [39.1, 13576.0], [39.2, 13576.0], [39.3, 13576.0], [39.4, 13576.0], [39.5, 13576.0], [39.6, 13576.0], [39.7, 13576.0], [39.8, 13576.0], [39.9, 13576.0], [40.0, 13587.0], [40.1, 13587.0], [40.2, 13587.0], [40.3, 13587.0], [40.4, 13587.0], [40.5, 13587.0], [40.6, 13587.0], [40.7, 13587.0], [40.8, 13587.0], [40.9, 13587.0], [41.0, 13602.0], [41.1, 13602.0], [41.2, 13602.0], [41.3, 13602.0], [41.4, 13602.0], [41.5, 13602.0], [41.6, 13602.0], [41.7, 13602.0], [41.8, 13602.0], [41.9, 13602.0], [42.0, 13611.0], [42.1, 13611.0], [42.2, 13611.0], [42.3, 13611.0], [42.4, 13611.0], [42.5, 13611.0], [42.6, 13611.0], [42.7, 13611.0], [42.8, 13611.0], [42.9, 13611.0], [43.0, 13626.0], [43.1, 13626.0], [43.2, 13626.0], [43.3, 13626.0], [43.4, 13626.0], [43.5, 13626.0], [43.6, 13626.0], [43.7, 13626.0], [43.8, 13626.0], [43.9, 13626.0], [44.0, 13651.0], [44.1, 13651.0], [44.2, 13651.0], [44.3, 13651.0], [44.4, 13651.0], [44.5, 13651.0], [44.6, 13651.0], [44.7, 13651.0], [44.8, 13651.0], [44.9, 13651.0], [45.0, 13696.0], [45.1, 13696.0], [45.2, 13696.0], [45.3, 13696.0], [45.4, 13696.0], [45.5, 13696.0], [45.6, 13696.0], [45.7, 13696.0], [45.8, 13696.0], [45.9, 13696.0], [46.0, 13706.0], [46.1, 13706.0], [46.2, 13706.0], [46.3, 13706.0], [46.4, 13706.0], [46.5, 13706.0], [46.6, 13706.0], [46.7, 13706.0], [46.8, 13706.0], [46.9, 13706.0], [47.0, 13710.0], [47.1, 13710.0], [47.2, 13710.0], [47.3, 13710.0], [47.4, 13710.0], [47.5, 13710.0], [47.6, 13710.0], [47.7, 13710.0], [47.8, 13710.0], [47.9, 13710.0], [48.0, 13710.0], [48.1, 13710.0], [48.2, 13710.0], [48.3, 13710.0], [48.4, 13710.0], [48.5, 13710.0], [48.6, 13710.0], [48.7, 13710.0], [48.8, 13710.0], [48.9, 13710.0], [49.0, 13711.0], [49.1, 13711.0], [49.2, 13711.0], [49.3, 13711.0], [49.4, 13711.0], [49.5, 13711.0], [49.6, 13711.0], [49.7, 13711.0], [49.8, 13711.0], [49.9, 13711.0], [50.0, 13711.0], [50.1, 13711.0], [50.2, 13711.0], [50.3, 13711.0], [50.4, 13711.0], [50.5, 13711.0], [50.6, 13711.0], [50.7, 13711.0], [50.8, 13711.0], [50.9, 13711.0], [51.0, 13738.0], [51.1, 13738.0], [51.2, 13738.0], [51.3, 13738.0], [51.4, 13738.0], [51.5, 13738.0], [51.6, 13738.0], [51.7, 13738.0], [51.8, 13738.0], [51.9, 13738.0], [52.0, 13740.0], [52.1, 13740.0], [52.2, 13740.0], [52.3, 13740.0], [52.4, 13740.0], [52.5, 13740.0], [52.6, 13740.0], [52.7, 13740.0], [52.8, 13740.0], [52.9, 13740.0], [53.0, 13756.0], [53.1, 13756.0], [53.2, 13756.0], [53.3, 13756.0], [53.4, 13756.0], [53.5, 13756.0], [53.6, 13756.0], [53.7, 13756.0], [53.8, 13756.0], [53.9, 13756.0], [54.0, 13756.0], [54.1, 13756.0], [54.2, 13756.0], [54.3, 13756.0], [54.4, 13756.0], [54.5, 13756.0], [54.6, 13756.0], [54.7, 13756.0], [54.8, 13756.0], [54.9, 13756.0], [55.0, 13759.0], [55.1, 13759.0], [55.2, 13759.0], [55.3, 13759.0], [55.4, 13759.0], [55.5, 13759.0], [55.6, 13759.0], [55.7, 13759.0], [55.8, 13759.0], [55.9, 13759.0], [56.0, 13760.0], [56.1, 13760.0], [56.2, 13760.0], [56.3, 13760.0], [56.4, 13760.0], [56.5, 13760.0], [56.6, 13760.0], [56.7, 13760.0], [56.8, 13760.0], [56.9, 13760.0], [57.0, 13779.0], [57.1, 13779.0], [57.2, 13779.0], [57.3, 13779.0], [57.4, 13779.0], [57.5, 13779.0], [57.6, 13779.0], [57.7, 13779.0], [57.8, 13779.0], [57.9, 13779.0], [58.0, 13780.0], [58.1, 13780.0], [58.2, 13780.0], [58.3, 13780.0], [58.4, 13780.0], [58.5, 13780.0], [58.6, 13780.0], [58.7, 13780.0], [58.8, 13780.0], [58.9, 13780.0], [59.0, 13784.0], [59.1, 13784.0], [59.2, 13784.0], [59.3, 13784.0], [59.4, 13784.0], [59.5, 13784.0], [59.6, 13784.0], [59.7, 13784.0], [59.8, 13784.0], [59.9, 13784.0], [60.0, 13786.0], [60.1, 13786.0], [60.2, 13786.0], [60.3, 13786.0], [60.4, 13786.0], [60.5, 13786.0], [60.6, 13786.0], [60.7, 13786.0], [60.8, 13786.0], [60.9, 13786.0], [61.0, 13809.0], [61.1, 13809.0], [61.2, 13809.0], [61.3, 13809.0], [61.4, 13809.0], [61.5, 13809.0], [61.6, 13809.0], [61.7, 13809.0], [61.8, 13809.0], [61.9, 13809.0], [62.0, 13819.0], [62.1, 13819.0], [62.2, 13819.0], [62.3, 13819.0], [62.4, 13819.0], [62.5, 13819.0], [62.6, 13819.0], [62.7, 13819.0], [62.8, 13819.0], [62.9, 13819.0], [63.0, 13828.0], [63.1, 13828.0], [63.2, 13828.0], [63.3, 13828.0], [63.4, 13828.0], [63.5, 13828.0], [63.6, 13828.0], [63.7, 13828.0], [63.8, 13828.0], [63.9, 13828.0], [64.0, 13828.0], [64.1, 13828.0], [64.2, 13828.0], [64.3, 13828.0], [64.4, 13828.0], [64.5, 13828.0], [64.6, 13828.0], [64.7, 13828.0], [64.8, 13828.0], [64.9, 13828.0], [65.0, 13836.0], [65.1, 13836.0], [65.2, 13836.0], [65.3, 13836.0], [65.4, 13836.0], [65.5, 13836.0], [65.6, 13836.0], [65.7, 13836.0], [65.8, 13836.0], [65.9, 13836.0], [66.0, 13837.0], [66.1, 13837.0], [66.2, 13837.0], [66.3, 13837.0], [66.4, 13837.0], [66.5, 13837.0], [66.6, 13837.0], [66.7, 13837.0], [66.8, 13837.0], [66.9, 13837.0], [67.0, 13855.0], [67.1, 13855.0], [67.2, 13855.0], [67.3, 13855.0], [67.4, 13855.0], [67.5, 13855.0], [67.6, 13855.0], [67.7, 13855.0], [67.8, 13855.0], [67.9, 13855.0], [68.0, 13865.0], [68.1, 13865.0], [68.2, 13865.0], [68.3, 13865.0], [68.4, 13865.0], [68.5, 13865.0], [68.6, 13865.0], [68.7, 13865.0], [68.8, 13865.0], [68.9, 13865.0], [69.0, 13878.0], [69.1, 13878.0], [69.2, 13878.0], [69.3, 13878.0], [69.4, 13878.0], [69.5, 13878.0], [69.6, 13878.0], [69.7, 13878.0], [69.8, 13878.0], [69.9, 13878.0], [70.0, 13881.0], [70.1, 13881.0], [70.2, 13881.0], [70.3, 13881.0], [70.4, 13881.0], [70.5, 13881.0], [70.6, 13881.0], [70.7, 13881.0], [70.8, 13881.0], [70.9, 13881.0], [71.0, 13882.0], [71.1, 13882.0], [71.2, 13882.0], [71.3, 13882.0], [71.4, 13882.0], [71.5, 13882.0], [71.6, 13882.0], [71.7, 13882.0], [71.8, 13882.0], [71.9, 13882.0], [72.0, 13888.0], [72.1, 13888.0], [72.2, 13888.0], [72.3, 13888.0], [72.4, 13888.0], [72.5, 13888.0], [72.6, 13888.0], [72.7, 13888.0], [72.8, 13888.0], [72.9, 13888.0], [73.0, 13916.0], [73.1, 13916.0], [73.2, 13916.0], [73.3, 13916.0], [73.4, 13916.0], [73.5, 13916.0], [73.6, 13916.0], [73.7, 13916.0], [73.8, 13916.0], [73.9, 13916.0], [74.0, 13925.0], [74.1, 13925.0], [74.2, 13925.0], [74.3, 13925.0], [74.4, 13925.0], [74.5, 13925.0], [74.6, 13925.0], [74.7, 13925.0], [74.8, 13925.0], [74.9, 13925.0], [75.0, 13947.0], [75.1, 13947.0], [75.2, 13947.0], [75.3, 13947.0], [75.4, 13947.0], [75.5, 13947.0], [75.6, 13947.0], [75.7, 13947.0], [75.8, 13947.0], [75.9, 13947.0], [76.0, 13950.0], [76.1, 13950.0], [76.2, 13950.0], [76.3, 13950.0], [76.4, 13950.0], [76.5, 13950.0], [76.6, 13950.0], [76.7, 13950.0], [76.8, 13950.0], [76.9, 13950.0], [77.0, 14035.0], [77.1, 14035.0], [77.2, 14035.0], [77.3, 14035.0], [77.4, 14035.0], [77.5, 14035.0], [77.6, 14035.0], [77.7, 14035.0], [77.8, 14035.0], [77.9, 14035.0], [78.0, 14045.0], [78.1, 14045.0], [78.2, 14045.0], [78.3, 14045.0], [78.4, 14045.0], [78.5, 14045.0], [78.6, 14045.0], [78.7, 14045.0], [78.8, 14045.0], [78.9, 14045.0], [79.0, 14065.0], [79.1, 14065.0], [79.2, 14065.0], [79.3, 14065.0], [79.4, 14065.0], [79.5, 14065.0], [79.6, 14065.0], [79.7, 14065.0], [79.8, 14065.0], [79.9, 14065.0], [80.0, 14086.0], [80.1, 14086.0], [80.2, 14086.0], [80.3, 14086.0], [80.4, 14086.0], [80.5, 14086.0], [80.6, 14086.0], [80.7, 14086.0], [80.8, 14086.0], [80.9, 14086.0], [81.0, 14104.0], [81.1, 14104.0], [81.2, 14104.0], [81.3, 14104.0], [81.4, 14104.0], [81.5, 14104.0], [81.6, 14104.0], [81.7, 14104.0], [81.8, 14104.0], [81.9, 14104.0], [82.0, 14134.0], [82.1, 14134.0], [82.2, 14134.0], [82.3, 14134.0], [82.4, 14134.0], [82.5, 14134.0], [82.6, 14134.0], [82.7, 14134.0], [82.8, 14134.0], [82.9, 14134.0], [83.0, 14145.0], [83.1, 14145.0], [83.2, 14145.0], [83.3, 14145.0], [83.4, 14145.0], [83.5, 14145.0], [83.6, 14145.0], [83.7, 14145.0], [83.8, 14145.0], [83.9, 14145.0], [84.0, 14165.0], [84.1, 14165.0], [84.2, 14165.0], [84.3, 14165.0], [84.4, 14165.0], [84.5, 14165.0], [84.6, 14165.0], [84.7, 14165.0], [84.8, 14165.0], [84.9, 14165.0], [85.0, 14215.0], [85.1, 14215.0], [85.2, 14215.0], [85.3, 14215.0], [85.4, 14215.0], [85.5, 14215.0], [85.6, 14215.0], [85.7, 14215.0], [85.8, 14215.0], [85.9, 14215.0], [86.0, 14242.0], [86.1, 14242.0], [86.2, 14242.0], [86.3, 14242.0], [86.4, 14242.0], [86.5, 14242.0], [86.6, 14242.0], [86.7, 14242.0], [86.8, 14242.0], [86.9, 14242.0], [87.0, 14308.0], [87.1, 14308.0], [87.2, 14308.0], [87.3, 14308.0], [87.4, 14308.0], [87.5, 14308.0], [87.6, 14308.0], [87.7, 14308.0], [87.8, 14308.0], [87.9, 14308.0], [88.0, 14312.0], [88.1, 14312.0], [88.2, 14312.0], [88.3, 14312.0], [88.4, 14312.0], [88.5, 14312.0], [88.6, 14312.0], [88.7, 14312.0], [88.8, 14312.0], [88.9, 14312.0], [89.0, 14329.0], [89.1, 14329.0], [89.2, 14329.0], [89.3, 14329.0], [89.4, 14329.0], [89.5, 14329.0], [89.6, 14329.0], [89.7, 14329.0], [89.8, 14329.0], [89.9, 14329.0], [90.0, 14348.0], [90.1, 14348.0], [90.2, 14348.0], [90.3, 14348.0], [90.4, 14348.0], [90.5, 14348.0], [90.6, 14348.0], [90.7, 14348.0], [90.8, 14348.0], [90.9, 14348.0], [91.0, 14421.0], [91.1, 14421.0], [91.2, 14421.0], [91.3, 14421.0], [91.4, 14421.0], [91.5, 14421.0], [91.6, 14421.0], [91.7, 14421.0], [91.8, 14421.0], [91.9, 14421.0], [92.0, 15295.0], [92.1, 15295.0], [92.2, 15295.0], [92.3, 15295.0], [92.4, 15295.0], [92.5, 15295.0], [92.6, 15295.0], [92.7, 15295.0], [92.8, 15295.0], [92.9, 15295.0], [93.0, 15378.0], [93.1, 15378.0], [93.2, 15378.0], [93.3, 15378.0], [93.4, 15378.0], [93.5, 15378.0], [93.6, 15378.0], [93.7, 15378.0], [93.8, 15378.0], [93.9, 15378.0], [94.0, 15515.0], [94.1, 15515.0], [94.2, 15515.0], [94.3, 15515.0], [94.4, 15515.0], [94.5, 15515.0], [94.6, 15515.0], [94.7, 15515.0], [94.8, 15515.0], [94.9, 15515.0], [95.0, 15567.0], [95.1, 15567.0], [95.2, 15567.0], [95.3, 15567.0], [95.4, 15567.0], [95.5, 15567.0], [95.6, 15567.0], [95.7, 15567.0], [95.8, 15567.0], [95.9, 15567.0], [96.0, 15650.0], [96.1, 15650.0], [96.2, 15650.0], [96.3, 15650.0], [96.4, 15650.0], [96.5, 15650.0], [96.6, 15650.0], [96.7, 15650.0], [96.8, 15650.0], [96.9, 15650.0], [97.0, 15682.0], [97.1, 15682.0], [97.2, 15682.0], [97.3, 15682.0], [97.4, 15682.0], [97.5, 15682.0], [97.6, 15682.0], [97.7, 15682.0], [97.8, 15682.0], [97.9, 15682.0], [98.0, 15848.0], [98.1, 15848.0], [98.2, 15848.0], [98.3, 15848.0], [98.4, 15848.0], [98.5, 15848.0], [98.6, 15848.0], [98.7, 15848.0], [98.8, 15848.0], [98.9, 15848.0], [99.0, 15992.0], [99.1, 15992.0], [99.2, 15992.0], [99.3, 15992.0], [99.4, 15992.0], [99.5, 15992.0], [99.6, 15992.0], [99.7, 15992.0], [99.8, 15992.0], [99.9, 15992.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[0.0, 60292.0], [0.1, 60292.0], [0.2, 60292.0], [0.3, 60292.0], [0.4, 60292.0], [0.5, 60292.0], [0.6, 60292.0], [0.7, 60292.0], [0.8, 60292.0], [0.9, 60292.0], [1.0, 60303.0], [1.1, 60303.0], [1.2, 60303.0], [1.3, 60303.0], [1.4, 60303.0], [1.5, 60303.0], [1.6, 60303.0], [1.7, 60303.0], [1.8, 60303.0], [1.9, 60303.0], [2.0, 60312.0], [2.1, 60312.0], [2.2, 60312.0], [2.3, 60312.0], [2.4, 60312.0], [2.5, 60312.0], [2.6, 60312.0], [2.7, 60312.0], [2.8, 60312.0], [2.9, 60312.0], [3.0, 60323.0], [3.1, 60323.0], [3.2, 60323.0], [3.3, 60323.0], [3.4, 60323.0], [3.5, 60323.0], [3.6, 60323.0], [3.7, 60323.0], [3.8, 60323.0], [3.9, 60323.0], [4.0, 60332.0], [4.1, 60332.0], [4.2, 60332.0], [4.3, 60332.0], [4.4, 60332.0], [4.5, 60332.0], [4.6, 60332.0], [4.7, 60332.0], [4.8, 60332.0], [4.9, 60332.0], [5.0, 60335.0], [5.1, 60335.0], [5.2, 60335.0], [5.3, 60335.0], [5.4, 60335.0], [5.5, 60335.0], [5.6, 60335.0], [5.7, 60335.0], [5.8, 60335.0], [5.9, 60335.0], [6.0, 60337.0], [6.1, 60337.0], [6.2, 60337.0], [6.3, 60337.0], [6.4, 60337.0], [6.5, 60337.0], [6.6, 60337.0], [6.7, 60337.0], [6.8, 60337.0], [6.9, 60337.0], [7.0, 60339.0], [7.1, 60339.0], [7.2, 60339.0], [7.3, 60339.0], [7.4, 60339.0], [7.5, 60339.0], [7.6, 60339.0], [7.7, 60339.0], [7.8, 60339.0], [7.9, 60339.0], [8.0, 60343.0], [8.1, 60343.0], [8.2, 60343.0], [8.3, 60343.0], [8.4, 60343.0], [8.5, 60343.0], [8.6, 60343.0], [8.7, 60343.0], [8.8, 60343.0], [8.9, 60343.0], [9.0, 60345.0], [9.1, 60345.0], [9.2, 60345.0], [9.3, 60345.0], [9.4, 60345.0], [9.5, 60345.0], [9.6, 60345.0], [9.7, 60345.0], [9.8, 60345.0], [9.9, 60345.0], [10.0, 60348.0], [10.1, 60348.0], [10.2, 60348.0], [10.3, 60348.0], [10.4, 60348.0], [10.5, 60348.0], [10.6, 60348.0], [10.7, 60348.0], [10.8, 60348.0], [10.9, 60348.0], [11.0, 60352.0], [11.1, 60352.0], [11.2, 60352.0], [11.3, 60352.0], [11.4, 60352.0], [11.5, 60352.0], [11.6, 60352.0], [11.7, 60352.0], [11.8, 60352.0], [11.9, 60352.0], [12.0, 60353.0], [12.1, 60353.0], [12.2, 60353.0], [12.3, 60353.0], [12.4, 60353.0], [12.5, 60353.0], [12.6, 60353.0], [12.7, 60353.0], [12.8, 60353.0], [12.9, 60353.0], [13.0, 60358.0], [13.1, 60358.0], [13.2, 60358.0], [13.3, 60358.0], [13.4, 60358.0], [13.5, 60358.0], [13.6, 60358.0], [13.7, 60358.0], [13.8, 60358.0], [13.9, 60358.0], [14.0, 60358.0], [14.1, 60358.0], [14.2, 60358.0], [14.3, 60358.0], [14.4, 60358.0], [14.5, 60358.0], [14.6, 60358.0], [14.7, 60358.0], [14.8, 60358.0], [14.9, 60358.0], [15.0, 60361.0], [15.1, 60361.0], [15.2, 60361.0], [15.3, 60361.0], [15.4, 60361.0], [15.5, 60361.0], [15.6, 60361.0], [15.7, 60361.0], [15.8, 60361.0], [15.9, 60361.0], [16.0, 60362.0], [16.1, 60362.0], [16.2, 60362.0], [16.3, 60362.0], [16.4, 60362.0], [16.5, 60362.0], [16.6, 60362.0], [16.7, 60362.0], [16.8, 60362.0], [16.9, 60362.0], [17.0, 60363.0], [17.1, 60363.0], [17.2, 60363.0], [17.3, 60363.0], [17.4, 60363.0], [17.5, 60363.0], [17.6, 60363.0], [17.7, 60363.0], [17.8, 60363.0], [17.9, 60363.0], [18.0, 60367.0], [18.1, 60367.0], [18.2, 60367.0], [18.3, 60367.0], [18.4, 60367.0], [18.5, 60367.0], [18.6, 60367.0], [18.7, 60367.0], [18.8, 60367.0], [18.9, 60367.0], [19.0, 60372.0], [19.1, 60372.0], [19.2, 60372.0], [19.3, 60372.0], [19.4, 60372.0], [19.5, 60372.0], [19.6, 60372.0], [19.7, 60372.0], [19.8, 60372.0], [19.9, 60372.0], [20.0, 60373.0], [20.1, 60373.0], [20.2, 60373.0], [20.3, 60373.0], [20.4, 60373.0], [20.5, 60373.0], [20.6, 60373.0], [20.7, 60373.0], [20.8, 60373.0], [20.9, 60373.0], [21.0, 60377.0], [21.1, 60377.0], [21.2, 60377.0], [21.3, 60377.0], [21.4, 60377.0], [21.5, 60377.0], [21.6, 60377.0], [21.7, 60377.0], [21.8, 60377.0], [21.9, 60377.0], [22.0, 60381.0], [22.1, 60381.0], [22.2, 60381.0], [22.3, 60381.0], [22.4, 60381.0], [22.5, 60381.0], [22.6, 60381.0], [22.7, 60381.0], [22.8, 60381.0], [22.9, 60381.0], [23.0, 60383.0], [23.1, 60383.0], [23.2, 60383.0], [23.3, 60383.0], [23.4, 60383.0], [23.5, 60383.0], [23.6, 60383.0], [23.7, 60383.0], [23.8, 60383.0], [23.9, 60383.0], [24.0, 60386.0], [24.1, 60386.0], [24.2, 60386.0], [24.3, 60386.0], [24.4, 60386.0], [24.5, 60386.0], [24.6, 60386.0], [24.7, 60386.0], [24.8, 60386.0], [24.9, 60386.0], [25.0, 60388.0], [25.1, 60388.0], [25.2, 60388.0], [25.3, 60388.0], [25.4, 60388.0], [25.5, 60388.0], [25.6, 60388.0], [25.7, 60388.0], [25.8, 60388.0], [25.9, 60388.0], [26.0, 60388.0], [26.1, 60388.0], [26.2, 60388.0], [26.3, 60388.0], [26.4, 60388.0], [26.5, 60388.0], [26.6, 60388.0], [26.7, 60388.0], [26.8, 60388.0], [26.9, 60388.0], [27.0, 60389.0], [27.1, 60389.0], [27.2, 60389.0], [27.3, 60389.0], [27.4, 60389.0], [27.5, 60389.0], [27.6, 60389.0], [27.7, 60389.0], [27.8, 60389.0], [27.9, 60389.0], [28.0, 60392.0], [28.1, 60392.0], [28.2, 60392.0], [28.3, 60392.0], [28.4, 60392.0], [28.5, 60392.0], [28.6, 60392.0], [28.7, 60392.0], [28.8, 60392.0], [28.9, 60392.0], [29.0, 60393.0], [29.1, 60393.0], [29.2, 60393.0], [29.3, 60393.0], [29.4, 60393.0], [29.5, 60393.0], [29.6, 60393.0], [29.7, 60393.0], [29.8, 60393.0], [29.9, 60393.0], [30.0, 60395.0], [30.1, 60395.0], [30.2, 60395.0], [30.3, 60395.0], [30.4, 60395.0], [30.5, 60395.0], [30.6, 60395.0], [30.7, 60395.0], [30.8, 60395.0], [30.9, 60395.0], [31.0, 60396.0], [31.1, 60396.0], [31.2, 60396.0], [31.3, 60396.0], [31.4, 60396.0], [31.5, 60396.0], [31.6, 60396.0], [31.7, 60396.0], [31.8, 60396.0], [31.9, 60396.0], [32.0, 60398.0], [32.1, 60398.0], [32.2, 60398.0], [32.3, 60398.0], [32.4, 60398.0], [32.5, 60398.0], [32.6, 60398.0], [32.7, 60398.0], [32.8, 60398.0], [32.9, 60398.0], [33.0, 60404.0], [33.1, 60404.0], [33.2, 60404.0], [33.3, 60404.0], [33.4, 60404.0], [33.5, 60404.0], [33.6, 60404.0], [33.7, 60404.0], [33.8, 60404.0], [33.9, 60404.0], [34.0, 60405.0], [34.1, 60405.0], [34.2, 60405.0], [34.3, 60405.0], [34.4, 60405.0], [34.5, 60405.0], [34.6, 60405.0], [34.7, 60405.0], [34.8, 60405.0], [34.9, 60405.0], [35.0, 60406.0], [35.1, 60406.0], [35.2, 60406.0], [35.3, 60406.0], [35.4, 60406.0], [35.5, 60406.0], [35.6, 60406.0], [35.7, 60406.0], [35.8, 60406.0], [35.9, 60406.0], [36.0, 60411.0], [36.1, 60411.0], [36.2, 60411.0], [36.3, 60411.0], [36.4, 60411.0], [36.5, 60411.0], [36.6, 60411.0], [36.7, 60411.0], [36.8, 60411.0], [36.9, 60411.0], [37.0, 60414.0], [37.1, 60414.0], [37.2, 60414.0], [37.3, 60414.0], [37.4, 60414.0], [37.5, 60414.0], [37.6, 60414.0], [37.7, 60414.0], [37.8, 60414.0], [37.9, 60414.0], [38.0, 60416.0], [38.1, 60416.0], [38.2, 60416.0], [38.3, 60416.0], [38.4, 60416.0], [38.5, 60416.0], [38.6, 60416.0], [38.7, 60416.0], [38.8, 60416.0], [38.9, 60416.0], [39.0, 60419.0], [39.1, 60419.0], [39.2, 60419.0], [39.3, 60419.0], [39.4, 60419.0], [39.5, 60419.0], [39.6, 60419.0], [39.7, 60419.0], [39.8, 60419.0], [39.9, 60419.0], [40.0, 60426.0], [40.1, 60426.0], [40.2, 60426.0], [40.3, 60426.0], [40.4, 60426.0], [40.5, 60426.0], [40.6, 60426.0], [40.7, 60426.0], [40.8, 60426.0], [40.9, 60426.0], [41.0, 60427.0], [41.1, 60427.0], [41.2, 60427.0], [41.3, 60427.0], [41.4, 60427.0], [41.5, 60427.0], [41.6, 60427.0], [41.7, 60427.0], [41.8, 60427.0], [41.9, 60427.0], [42.0, 60436.0], [42.1, 60436.0], [42.2, 60436.0], [42.3, 60436.0], [42.4, 60436.0], [42.5, 60436.0], [42.6, 60436.0], [42.7, 60436.0], [42.8, 60436.0], [42.9, 60436.0], [43.0, 60436.0], [43.1, 60436.0], [43.2, 60436.0], [43.3, 60436.0], [43.4, 60436.0], [43.5, 60436.0], [43.6, 60436.0], [43.7, 60436.0], [43.8, 60436.0], [43.9, 60436.0], [44.0, 60439.0], [44.1, 60439.0], [44.2, 60439.0], [44.3, 60439.0], [44.4, 60439.0], [44.5, 60439.0], [44.6, 60439.0], [44.7, 60439.0], [44.8, 60439.0], [44.9, 60439.0], [45.0, 60443.0], [45.1, 60443.0], [45.2, 60443.0], [45.3, 60443.0], [45.4, 60443.0], [45.5, 60443.0], [45.6, 60443.0], [45.7, 60443.0], [45.8, 60443.0], [45.9, 60443.0], [46.0, 60445.0], [46.1, 60445.0], [46.2, 60445.0], [46.3, 60445.0], [46.4, 60445.0], [46.5, 60445.0], [46.6, 60445.0], [46.7, 60445.0], [46.8, 60445.0], [46.9, 60445.0], [47.0, 60448.0], [47.1, 60448.0], [47.2, 60448.0], [47.3, 60448.0], [47.4, 60448.0], [47.5, 60448.0], [47.6, 60448.0], [47.7, 60448.0], [47.8, 60448.0], [47.9, 60448.0], [48.0, 60450.0], [48.1, 60450.0], [48.2, 60450.0], [48.3, 60450.0], [48.4, 60450.0], [48.5, 60450.0], [48.6, 60450.0], [48.7, 60450.0], [48.8, 60450.0], [48.9, 60450.0], [49.0, 60452.0], [49.1, 60452.0], [49.2, 60452.0], [49.3, 60452.0], [49.4, 60452.0], [49.5, 60452.0], [49.6, 60452.0], [49.7, 60452.0], [49.8, 60452.0], [49.9, 60452.0], [50.0, 60453.0], [50.1, 60453.0], [50.2, 60453.0], [50.3, 60453.0], [50.4, 60453.0], [50.5, 60453.0], [50.6, 60453.0], [50.7, 60453.0], [50.8, 60453.0], [50.9, 60453.0], [51.0, 60455.0], [51.1, 60455.0], [51.2, 60455.0], [51.3, 60455.0], [51.4, 60455.0], [51.5, 60455.0], [51.6, 60455.0], [51.7, 60455.0], [51.8, 60455.0], [51.9, 60455.0], [52.0, 60457.0], [52.1, 60457.0], [52.2, 60457.0], [52.3, 60457.0], [52.4, 60457.0], [52.5, 60457.0], [52.6, 60457.0], [52.7, 60457.0], [52.8, 60457.0], [52.9, 60457.0], [53.0, 60458.0], [53.1, 60458.0], [53.2, 60458.0], [53.3, 60458.0], [53.4, 60458.0], [53.5, 60458.0], [53.6, 60458.0], [53.7, 60458.0], [53.8, 60458.0], [53.9, 60458.0], [54.0, 60458.0], [54.1, 60458.0], [54.2, 60458.0], [54.3, 60458.0], [54.4, 60458.0], [54.5, 60458.0], [54.6, 60458.0], [54.7, 60458.0], [54.8, 60458.0], [54.9, 60458.0], [55.0, 60459.0], [55.1, 60459.0], [55.2, 60459.0], [55.3, 60459.0], [55.4, 60459.0], [55.5, 60459.0], [55.6, 60459.0], [55.7, 60459.0], [55.8, 60459.0], [55.9, 60459.0], [56.0, 60461.0], [56.1, 60461.0], [56.2, 60461.0], [56.3, 60461.0], [56.4, 60461.0], [56.5, 60461.0], [56.6, 60461.0], [56.7, 60461.0], [56.8, 60461.0], [56.9, 60461.0], [57.0, 60462.0], [57.1, 60462.0], [57.2, 60462.0], [57.3, 60462.0], [57.4, 60462.0], [57.5, 60462.0], [57.6, 60462.0], [57.7, 60462.0], [57.8, 60462.0], [57.9, 60462.0], [58.0, 60463.0], [58.1, 60463.0], [58.2, 60463.0], [58.3, 60463.0], [58.4, 60463.0], [58.5, 60463.0], [58.6, 60463.0], [58.7, 60463.0], [58.8, 60463.0], [58.9, 60463.0], [59.0, 60466.0], [59.1, 60466.0], [59.2, 60466.0], [59.3, 60466.0], [59.4, 60466.0], [59.5, 60466.0], [59.6, 60466.0], [59.7, 60466.0], [59.8, 60466.0], [59.9, 60466.0], [60.0, 60467.0], [60.1, 60467.0], [60.2, 60467.0], [60.3, 60467.0], [60.4, 60467.0], [60.5, 60467.0], [60.6, 60467.0], [60.7, 60467.0], [60.8, 60467.0], [60.9, 60467.0], [61.0, 60471.0], [61.1, 60471.0], [61.2, 60471.0], [61.3, 60471.0], [61.4, 60471.0], [61.5, 60471.0], [61.6, 60471.0], [61.7, 60471.0], [61.8, 60471.0], [61.9, 60471.0], [62.0, 60471.0], [62.1, 60471.0], [62.2, 60471.0], [62.3, 60471.0], [62.4, 60471.0], [62.5, 60471.0], [62.6, 60471.0], [62.7, 60471.0], [62.8, 60471.0], [62.9, 60471.0], [63.0, 60472.0], [63.1, 60472.0], [63.2, 60472.0], [63.3, 60472.0], [63.4, 60472.0], [63.5, 60472.0], [63.6, 60472.0], [63.7, 60472.0], [63.8, 60472.0], [63.9, 60472.0], [64.0, 60472.0], [64.1, 60472.0], [64.2, 60472.0], [64.3, 60472.0], [64.4, 60472.0], [64.5, 60472.0], [64.6, 60472.0], [64.7, 60472.0], [64.8, 60472.0], [64.9, 60472.0], [65.0, 60472.0], [65.1, 60472.0], [65.2, 60472.0], [65.3, 60472.0], [65.4, 60472.0], [65.5, 60472.0], [65.6, 60472.0], [65.7, 60472.0], [65.8, 60472.0], [65.9, 60472.0], [66.0, 60472.0], [66.1, 60472.0], [66.2, 60472.0], [66.3, 60472.0], [66.4, 60472.0], [66.5, 60472.0], [66.6, 60472.0], [66.7, 60472.0], [66.8, 60472.0], [66.9, 60472.0], [67.0, 60472.0], [67.1, 60472.0], [67.2, 60472.0], [67.3, 60472.0], [67.4, 60472.0], [67.5, 60472.0], [67.6, 60472.0], [67.7, 60472.0], [67.8, 60472.0], [67.9, 60472.0], [68.0, 60473.0], [68.1, 60473.0], [68.2, 60473.0], [68.3, 60473.0], [68.4, 60473.0], [68.5, 60473.0], [68.6, 60473.0], [68.7, 60473.0], [68.8, 60473.0], [68.9, 60473.0], [69.0, 60473.0], [69.1, 60473.0], [69.2, 60473.0], [69.3, 60473.0], [69.4, 60473.0], [69.5, 60473.0], [69.6, 60473.0], [69.7, 60473.0], [69.8, 60473.0], [69.9, 60473.0], [70.0, 60474.0], [70.1, 60474.0], [70.2, 60474.0], [70.3, 60474.0], [70.4, 60474.0], [70.5, 60474.0], [70.6, 60474.0], [70.7, 60474.0], [70.8, 60474.0], [70.9, 60474.0], [71.0, 60474.0], [71.1, 60474.0], [71.2, 60474.0], [71.3, 60474.0], [71.4, 60474.0], [71.5, 60474.0], [71.6, 60474.0], [71.7, 60474.0], [71.8, 60474.0], [71.9, 60474.0], [72.0, 60474.0], [72.1, 60474.0], [72.2, 60474.0], [72.3, 60474.0], [72.4, 60474.0], [72.5, 60474.0], [72.6, 60474.0], [72.7, 60474.0], [72.8, 60474.0], [72.9, 60474.0], [73.0, 60482.0], [73.1, 60482.0], [73.2, 60482.0], [73.3, 60482.0], [73.4, 60482.0], [73.5, 60482.0], [73.6, 60482.0], [73.7, 60482.0], [73.8, 60482.0], [73.9, 60482.0], [74.0, 60487.0], [74.1, 60487.0], [74.2, 60487.0], [74.3, 60487.0], [74.4, 60487.0], [74.5, 60487.0], [74.6, 60487.0], [74.7, 60487.0], [74.8, 60487.0], [74.9, 60487.0], [75.0, 60490.0], [75.1, 60490.0], [75.2, 60490.0], [75.3, 60490.0], [75.4, 60490.0], [75.5, 60490.0], [75.6, 60490.0], [75.7, 60490.0], [75.8, 60490.0], [75.9, 60490.0], [76.0, 60499.0], [76.1, 60499.0], [76.2, 60499.0], [76.3, 60499.0], [76.4, 60499.0], [76.5, 60499.0], [76.6, 60499.0], [76.7, 60499.0], [76.8, 60499.0], [76.9, 60499.0], [77.0, 60534.0], [77.1, 60534.0], [77.2, 60534.0], [77.3, 60534.0], [77.4, 60534.0], [77.5, 60534.0], [77.6, 60534.0], [77.7, 60534.0], [77.8, 60534.0], [77.9, 60534.0], [78.0, 60537.0], [78.1, 60537.0], [78.2, 60537.0], [78.3, 60537.0], [78.4, 60537.0], [78.5, 60537.0], [78.6, 60537.0], [78.7, 60537.0], [78.8, 60537.0], [78.9, 60537.0], [79.0, 60547.0], [79.1, 60547.0], [79.2, 60547.0], [79.3, 60547.0], [79.4, 60547.0], [79.5, 60547.0], [79.6, 60547.0], [79.7, 60547.0], [79.8, 60547.0], [79.9, 60547.0], [80.0, 60551.0], [80.1, 60551.0], [80.2, 60551.0], [80.3, 60551.0], [80.4, 60551.0], [80.5, 60551.0], [80.6, 60551.0], [80.7, 60551.0], [80.8, 60551.0], [80.9, 60551.0], [81.0, 60551.0], [81.1, 60551.0], [81.2, 60551.0], [81.3, 60551.0], [81.4, 60551.0], [81.5, 60551.0], [81.6, 60551.0], [81.7, 60551.0], [81.8, 60551.0], [81.9, 60551.0], [82.0, 60552.0], [82.1, 60552.0], [82.2, 60552.0], [82.3, 60552.0], [82.4, 60552.0], [82.5, 60552.0], [82.6, 60552.0], [82.7, 60552.0], [82.8, 60552.0], [82.9, 60552.0], [83.0, 60552.0], [83.1, 60552.0], [83.2, 60552.0], [83.3, 60552.0], [83.4, 60552.0], [83.5, 60552.0], [83.6, 60552.0], [83.7, 60552.0], [83.8, 60552.0], [83.9, 60552.0], [84.0, 60553.0], [84.1, 60553.0], [84.2, 60553.0], [84.3, 60553.0], [84.4, 60553.0], [84.5, 60553.0], [84.6, 60553.0], [84.7, 60553.0], [84.8, 60553.0], [84.9, 60553.0], [85.0, 60562.0], [85.1, 60562.0], [85.2, 60562.0], [85.3, 60562.0], [85.4, 60562.0], [85.5, 60562.0], [85.6, 60562.0], [85.7, 60562.0], [85.8, 60562.0], [85.9, 60562.0], [86.0, 60667.0], [86.1, 60667.0], [86.2, 60667.0], [86.3, 60667.0], [86.4, 60667.0], [86.5, 60667.0], [86.6, 60667.0], [86.7, 60667.0], [86.8, 60667.0], [86.9, 60667.0], [87.0, 60668.0], [87.1, 60668.0], [87.2, 60668.0], [87.3, 60668.0], [87.4, 60668.0], [87.5, 60668.0], [87.6, 60668.0], [87.7, 60668.0], [87.8, 60668.0], [87.9, 60668.0], [88.0, 60671.0], [88.1, 60671.0], [88.2, 60671.0], [88.3, 60671.0], [88.4, 60671.0], [88.5, 60671.0], [88.6, 60671.0], [88.7, 60671.0], [88.8, 60671.0], [88.9, 60671.0], [89.0, 60682.0], [89.1, 60682.0], [89.2, 60682.0], [89.3, 60682.0], [89.4, 60682.0], [89.5, 60682.0], [89.6, 60682.0], [89.7, 60682.0], [89.8, 60682.0], [89.9, 60682.0], [90.0, 60683.0], [90.1, 60683.0], [90.2, 60683.0], [90.3, 60683.0], [90.4, 60683.0], [90.5, 60683.0], [90.6, 60683.0], [90.7, 60683.0], [90.8, 60683.0], [90.9, 60683.0], [91.0, 60700.0], [91.1, 60700.0], [91.2, 60700.0], [91.3, 60700.0], [91.4, 60700.0], [91.5, 60700.0], [91.6, 60700.0], [91.7, 60700.0], [91.8, 60700.0], [91.9, 60700.0], [92.0, 60738.0], [92.1, 60738.0], [92.2, 60738.0], [92.3, 60738.0], [92.4, 60738.0], [92.5, 60738.0], [92.6, 60738.0], [92.7, 60738.0], [92.8, 60738.0], [92.9, 60738.0], [93.0, 60752.0], [93.1, 60752.0], [93.2, 60752.0], [93.3, 60752.0], [93.4, 60752.0], [93.5, 60752.0], [93.6, 60752.0], [93.7, 60752.0], [93.8, 60752.0], [93.9, 60752.0], [94.0, 60755.0], [94.1, 60755.0], [94.2, 60755.0], [94.3, 60755.0], [94.4, 60755.0], [94.5, 60755.0], [94.6, 60755.0], [94.7, 60755.0], [94.8, 60755.0], [94.9, 60755.0], [95.0, 61217.0], [95.1, 61217.0], [95.2, 61217.0], [95.3, 61217.0], [95.4, 61217.0], [95.5, 61217.0], [95.6, 61217.0], [95.7, 61217.0], [95.8, 61217.0], [95.9, 61217.0], [96.0, 61619.0], [96.1, 61619.0], [96.2, 61619.0], [96.3, 61619.0], [96.4, 61619.0], [96.5, 61619.0], [96.6, 61619.0], [96.7, 61619.0], [96.8, 61619.0], [96.9, 61619.0], [97.0, 61823.0], [97.1, 61823.0], [97.2, 61823.0], [97.3, 61823.0], [97.4, 61823.0], [97.5, 61823.0], [97.6, 61823.0], [97.7, 61823.0], [97.8, 61823.0], [97.9, 61823.0], [98.0, 63444.0], [98.1, 63444.0], [98.2, 63444.0], [98.3, 63444.0], [98.4, 63444.0], [98.5, 63444.0], [98.6, 63444.0], [98.7, 63444.0], [98.8, 63444.0], [98.9, 63444.0], [99.0, 63469.0], [99.1, 63469.0], [99.2, 63469.0], [99.3, 63469.0], [99.4, 63469.0], [99.5, 63469.0], [99.6, 63469.0], [99.7, 63469.0], [99.8, 63469.0], [99.9, 63469.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 7411.0, "series": [{"data": [[0.0, 7411.0], [600.0, 5.0], [1000.0, 368.0], [1100.0, 65.0], [1200.0, 17.0], [1300.0, 15.0], [1400.0, 22.0], [1500.0, 52.0], [1600.0, 2.0], [2000.0, 5.0], [2100.0, 2.0], [2200.0, 1.0], [2900.0, 4.0], [3000.0, 35.0], [3100.0, 7.0], [3300.0, 16.0], [3200.0, 6.0], [3400.0, 6.0], [3500.0, 6.0], [3600.0, 8.0], [3700.0, 3.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 3.0], [4100.0, 5.0], [4200.0, 6.0], [5000.0, 4.0], [5100.0, 1.0], [5300.0, 3.0], [5200.0, 1.0], [5400.0, 2.0], [5500.0, 2.0], [5700.0, 1.0], [5900.0, 2.0], [6000.0, 2.0], [6100.0, 3.0], [6900.0, 1.0], [7100.0, 2.0], [10700.0, 1.0], [100.0, 3348.0], [32800.0, 135.0], [33100.0, 285.0], [33200.0, 549.0], [33900.0, 264.0], [34000.0, 171.0], [34100.0, 303.0], [34200.0, 402.0], [34300.0, 86.0], [33800.0, 115.0], [32900.0, 291.0], [33400.0, 201.0], [33300.0, 334.0], [33000.0, 211.0], [33500.0, 149.0], [33600.0, 461.0], [33700.0, 272.0], [34900.0, 1.0], [35000.0, 392.0], [35100.0, 18.0], [35200.0, 83.0], [35400.0, 83.0], [35300.0, 190.0], [35900.0, 88.0], [36800.0, 1.0], [36000.0, 316.0], [36100.0, 140.0], [35600.0, 109.0], [35500.0, 94.0], [35800.0, 7.0], [35700.0, 15.0], [37000.0, 1.0], [36900.0, 3.0], [40600.0, 3.0], [40700.0, 113.0], [40800.0, 102.0], [48700.0, 8.0], [48600.0, 4.0], [200.0, 206.0], [300.0, 156.0], [400.0, 96.0], [500.0, 93.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[13000.0, 5.0], [13100.0, 4.0], [13200.0, 5.0], [12900.0, 3.0], [12800.0, 1.0], [13300.0, 8.0], [13700.0, 15.0], [13600.0, 5.0], [13500.0, 11.0], [13800.0, 12.0], [13400.0, 4.0], [13900.0, 4.0], [14100.0, 4.0], [14000.0, 4.0], [14200.0, 2.0], [14300.0, 4.0], [14400.0, 1.0], [15300.0, 1.0], [15200.0, 1.0], [15600.0, 2.0], [15500.0, 2.0], [15800.0, 1.0], [15900.0, 1.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[60500.0, 9.0], [60700.0, 4.0], [60600.0, 5.0], [60400.0, 44.0], [60300.0, 32.0], [60200.0, 1.0], [61200.0, 1.0], [61800.0, 1.0], [61600.0, 1.0], [63400.0, 2.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 63400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3806.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 7509.0, "series": [{"data": [[0.0, 7509.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 3806.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 6885.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.881720430107528, "minX": 1.61753928E12, "maxY": 3165.2621666666723, "series": [{"data": [[1.61753928E12, 55.81999999999999]], "isOverall": false, "label": "CreateRoom-SelectFC-Ready", "isController": false}, {"data": [[1.61753928E12, 91.21894683799484], [1.61753934E12, 2.881720430107528]], "isOverall": false, "label": "JoinServer+ChangeNickName+JoinRoom&Ready", "isController": false}, {"data": [[1.61753934E12, 3165.2621666666723]], "isOverall": false, "label": "TestconnectSocket", "isController": false}, {"data": [[1.61753934E12, 51.83999999999997]], "isOverall": false, "label": "JoinServer+JoinRoom&waitfor(1min)ready", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61753934E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 63469.0, "series": [{"data": [[110.0, 48671.0], [115.0, 40831.0], [112.0, 48713.8], [175.0, 40804.238095238084], [174.0, 40809.8], [179.0, 40808.33333333333], [178.0, 40806.0], [177.0, 40795.0], [176.0, 40809.875], [303.0, 40799.0], [302.0, 40797.0], [301.0, 40806.666666666664], [300.0, 40794.666666666664], [299.0, 40797.666666666664], [298.0, 40795.0], [312.0, 40773.14285714286], [316.0, 40784.799999999996], [307.0, 40789.5], [306.0, 40782.23076923076], [305.0, 40786.0], [304.0, 40793.0], [315.0, 40774.799999999996], [314.0, 40780.799999999996], [313.0, 40806.666666666664], [311.0, 40791.857142857145], [310.0, 40788.25000000001], [309.0, 40801.8], [308.0, 40780.555555555555], [335.0, 36958.8], [330.0, 40635.0], [327.0, 40746.09090909091], [351.0, 35919.846153846156], [350.0, 35917.0], [349.0, 35427.0], [415.0, 36046.833333333336], [414.0, 35815.625], [413.0, 35858.28571428572], [412.0, 35421.0], [411.0, 35778.5], [410.0, 35908.333333333336], [408.0, 36155.0], [417.0, 35891.76190476191], [416.0, 36093.8], [492.0, 35885.38095238096], [491.0, 35887.78947368422], [490.0, 35857.454545454544], [489.0, 35718.333333333336], [526.0, 35899.79411764707], [703.0, 35902.545454545456], [702.0, 35944.0], [701.0, 35606.666666666664], [700.0, 36110.5], [716.0, 35847.45454545455], [719.0, 35836.30769230769], [705.0, 35788.5], [704.0, 36031.25], [707.0, 35994.42857142857], [706.0, 35917.0], [709.0, 35939.2], [708.0, 35798.00000000001], [718.0, 35904.99999999999], [717.0, 35746.789473684206], [715.0, 35867.55555555556], [714.0, 35795.78571428571], [713.0, 35830.538461538454], [712.0, 35945.0], [711.0, 35893.399999999994], [710.0, 35870.333333333336], [831.0, 35820.6], [830.0, 35911.25], [829.0, 35590.666666666664], [828.0, 36059.5], [827.0, 35920.71428571429], [826.0, 35696.75], [825.0, 36053.0], [824.0, 36059.0], [839.0, 35893.206896551725], [838.0, 35967.3125], [837.0, 35875.25], [836.0, 35875.375], [835.0, 35725.16666666667], [834.0, 35903.71428571428], [833.0, 35995.428571428565], [832.0, 35822.666666666664], [1128.0, 35682.5], [1140.0, 35862.06666666667], [1122.0, 36032.5], [1120.0, 35590.666666666664], [1138.0, 35682.166666666664], [1136.0, 35746.82352941176], [1118.0, 36037.0], [1116.0, 36041.0], [1134.0, 35750.08333333333], [1132.0, 35683.02272727272], [1130.0, 35780.666666666664], [1126.0, 35610.25], [1124.0, 35652.666666666664], [1158.0, 35827.2], [1262.0, 35611.68421052632], [1342.0, 35544.058823529405], [1340.0, 35564.333333333336], [1338.0, 35637.0], [1336.0, 35466.666666666664], [1384.0, 35340.0], [1458.0, 35275.666666666664], [1454.0, 35213.25], [1448.0, 35226.0], [1440.0, 35265.8], [1434.0, 35285.0], [1430.0, 35375.45454545455], [1418.0, 35378.09090909092], [1786.0, 35030.700000000004], [1784.0, 35030.27272727273], [1782.0, 35042.75], [1780.0, 35078.049999999996], [1776.0, 35085.0], [1806.0, 35044.0], [1850.0, 35073.0], [1848.0, 35073.666666666664], [1838.0, 35078.857142857145], [1836.0, 35077.833333333336], [1814.0, 35053.0], [1812.0, 35060.0], [1810.0, 35079.5], [1802.0, 35047.444444444445], [1792.0, 35033.0], [1910.0, 33849.75], [1908.0, 33900.666666666664], [1872.0, 34334.0], [1858.0, 35069.833333333336], [1856.0, 35071.0], [1928.0, 34003.5], [2044.0, 33995.333333333336], [2042.0, 33877.299999999996], [2040.0, 33799.25], [2038.0, 33877.27272727272], [2036.0, 33938.818181818184], [2034.0, 34022.5], [2032.0, 33937.0], [2148.0, 33737.700000000004], [2232.0, 33560.28571428571], [2228.0, 33831.72727272727], [2364.0, 33758.36842105263], [2360.0, 33770.99999999999], [2352.0, 33726.33333333333], [2584.0, 33651.588235294126], [2592.0, 33663.666666666664], [2588.0, 33645.2], [2580.0, 33701.0], [2576.0, 33671.333333333336], [2572.0, 33677.25], [2756.0, 33366.5], [2752.0, 33726.0], [2748.0, 33677.0], [2692.0, 33684.58333333333], [2860.0, 33959.71428571428], [3128.0, 34140.0], [3140.0, 34274.8], [3136.0, 33913.28571428571], [3132.0, 33714.71428571428], [3124.0, 33898.5], [3120.0, 33676.666666666664], [3116.0, 33993.5], [3112.0, 33697.0], [3108.0, 34260.6], [3400.0, 34241.0], [3396.0, 34230.5], [3412.0, 34209.85714285714], [3408.0, 34213.28571428571], [3404.0, 34212.28571428572], [3392.0, 34241.4], [3388.0, 34248.0], [3384.0, 34248.42857142857], [3380.0, 33881.33333333333], [3376.0, 34253.8], [3372.0, 34255.333333333336], [3624.0, 33778.125], [3620.0, 33960.22222222222], [3616.0, 33890.0], [3612.0, 34184.283582089556], [3828.0, 34007.0], [3824.0, 34024.0], [3812.0, 34042.0], [3776.0, 34074.142857142855], [3772.0, 34085.0], [3848.0, 33974.8], [4848.0, 33212.5], [4840.0, 33230.25], [4816.0, 33244.41176470588], [4800.0, 33135.0], [4784.0, 33487.0], [5112.0, 33247.0], [4864.0, 33184.0], [4896.0, 33305.0], [4888.0, 33169.71428571428], [4912.0, 33281.36363636364], [5248.0, 33166.5], [5320.0, 33150.75], [5280.0, 33293.6], [5256.0, 32925.0], [5264.0, 33234.5], [5272.0, 33185.82608695652], [5128.0, 33259.5], [5136.0, 33157.666666666664], [5144.0, 33297.0], [5160.0, 33110.5], [5168.0, 33389.0], [5176.0, 33133.75], [5224.0, 33056.5], [5216.0, 33111.333333333336], [5208.0, 33272.333333333336], [5192.0, 33297.0], [5184.0, 33248.8], [5296.0, 33158.399999999994], [5288.0, 33238.333333333336], [5880.0, 33646.0], [5864.0, 33187.88888888889], [5760.0, 33131.166666666664], [5856.0, 33271.875], [5848.0, 33433.0], [5840.0, 33193.5], [5832.0, 32983.25], [6088.0, 33165.27272727273], [6120.0, 99.99999999999999], [6128.0, 28.259259259259263], [6136.0, 29.0], [6032.0, 33118.11111111111], [6064.0, 33105.0], [6056.0, 33179.0], [6072.0, 33247.0], [6112.0, 28.5], [6104.0, 27.5], [5888.0, 33106.5], [5912.0, 33187.333333333336], [5928.0, 33296.5], [5920.0, 33199.5], [5936.0, 33498.0], [5944.0, 33343.0], [6008.0, 32983.0], [6000.0, 33122.0], [5984.0, 33318.0], [5976.0, 33496.0], [5968.0, 33036.0], [5960.0, 33347.5], [5952.0, 32885.0], [6176.0, 100.61904761904765], [6200.0, 611.9700000000001], [6192.0, 96.55], [6184.0, 120.37755102040816], [6168.0, 105.08196721311475], [6160.0, 35.43333333333334], [6152.0, 143.2], [6144.0, 40.0], [6264.0, 1466.0], [6256.0, 490.0], [6248.0, 63.47058823529413], [6288.0, 455.0], [6216.0, 5084.0], [6208.0, 226.30787309048156], [6224.0, 28.42857142857143], [4849.0, 33308.0], [4785.0, 33558.375], [4857.0, 33385.0], [4809.0, 33097.0], [5105.0, 33000.0], [5113.0, 33235.5], [4913.0, 33169.38888888888], [4889.0, 33143.0], [4865.0, 33052.0], [4873.0, 33697.0], [5177.0, 33286.333333333336], [5249.0, 33292.0], [5281.0, 33166.857142857145], [5257.0, 33172.333333333336], [5265.0, 33251.5], [5273.0, 33220.88888888889], [5169.0, 33285.42857142857], [5161.0, 33172.99999999999], [5153.0, 33296.0], [5145.0, 33152.666666666664], [5129.0, 33093.57142857143], [5121.0, 33057.0], [5137.0, 33299.0], [5241.0, 33198.05263157895], [5209.0, 33149.0], [5201.0, 33199.8], [5193.0, 33111.0], [5185.0, 33428.666666666664], [5297.0, 33188.75000000001], [5289.0, 33194.6], [5769.0, 33129.0], [5881.0, 33126.0], [5873.0, 33618.0], [5865.0, 33344.5], [5841.0, 33435.0], [5833.0, 33034.0], [6137.0, 31.375], [6017.0, 32887.0], [6041.0, 33240.0], [6033.0, 33205.03921568627], [6057.0, 33149.4], [6073.0, 33065.66666666667], [6129.0, 27.5], [6121.0, 29.666666666666668], [6113.0, 28.0], [6105.0, 72.82089552238804], [6089.0, 33350.25], [5897.0, 33335.0], [5921.0, 33060.0], [5913.0, 33314.333333333336], [5929.0, 33227.833333333336], [5945.0, 33311.0], [6001.0, 33332.0], [5977.0, 33205.0], [5969.0, 33184.0], [5961.0, 33119.333333333336], [6145.0, 39.0], [6177.0, 108.34177215189875], [6185.0, 105.69465648854967], [6233.0, 90.00000000000001], [6193.0, 360.73529411764713], [6153.0, 204.66666666666669], [6249.0, 500.6666666666667], [6289.0, 460.0], [6217.0, 27.666666666666668], [6241.0, 29.0], [2149.0, 33821.022727272735], [2145.0, 33761.0], [2053.0, 33853.87500000001], [2233.0, 33786.25], [2229.0, 33733.4], [2393.0, 33662.61538461538], [2365.0, 33558.77777777778], [2361.0, 33788.0], [2357.0, 33786.0], [2353.0, 33556.666666666664], [2349.0, 33752.25], [2585.0, 33676.71428571429], [2593.0, 33666.57142857143], [2589.0, 33636.00000000001], [2581.0, 33620.333333333336], [2577.0, 33630.25], [2573.0, 33669.0], [2757.0, 33691.0], [2753.0, 33726.0], [2749.0, 33539.25], [2693.0, 33665.18461538461], [2861.0, 34270.11111111111], [3129.0, 33817.75], [3133.0, 33880.88888888889], [3141.0, 34274.51515151515], [3137.0, 33994.77777777778], [3125.0, 33677.5], [3121.0, 33656.86666666667], [3117.0, 33919.71428571429], [3113.0, 33666.833333333336], [3109.0, 34053.0], [3401.0, 34231.66666666667], [3413.0, 34216.850000000006], [3409.0, 34206.75], [3405.0, 34217.0], [3397.0, 34231.4], [3393.0, 33946.0], [3389.0, 33846.42857142857], [3385.0, 34236.882352941175], [3381.0, 33804.75], [3377.0, 34251.75000000001], [3373.0, 34251.0], [3625.0, 33758.916666666664], [3697.0, 34112.909090909096], [3613.0, 34181.13333333333], [3653.0, 34149.0], [3621.0, 34172.142857142855], [3617.0, 34129.63636363636], [3813.0, 34037.6], [3809.0, 34038.0], [3777.0, 34074.4], [3773.0, 33543.0], [3929.0, 33945.38888888889], [3849.0, 33938.6875], [4033.0, 33918.96428571429], [4098.0, 33816.98412698413], [4842.0, 33257.75], [4850.0, 33137.63636363636], [4786.0, 33020.0], [4794.0, 32952.5], [4826.0, 33204.0], [4818.0, 33334.25], [4810.0, 33300.0], [4802.0, 33239.0], [4898.0, 33305.0], [4866.0, 33649.0], [4914.0, 33248.38461538461], [4874.0, 33370.25], [4882.0, 33427.666666666664], [4890.0, 33177.0], [5250.0, 33298.0], [5322.0, 33579.0], [5258.0, 33332.88888888888], [5266.0, 33214.0], [5274.0, 33146.57142857143], [5282.0, 33241.0], [5122.0, 33201.0], [5130.0, 32954.0], [5146.0, 32976.0], [5154.0, 32987.5], [5162.0, 33305.2], [5170.0, 33170.833333333336], [5178.0, 33427.5], [5242.0, 33235.0], [5234.0, 33280.428571428565], [5226.0, 33199.45454545454], [5210.0, 33118.25], [5202.0, 33223.299999999996], [5186.0, 33163.333333333336], [5298.0, 33235.66], [5762.0, 32870.0], [5858.0, 33135.333333333336], [5834.0, 33174.0], [6106.0, 441.94117647058823], [6034.0, 33121.25], [6042.0, 33160.5], [6074.0, 32964.333333333336], [6138.0, 29.5], [6130.0, 28.379310344827587], [6122.0, 28.0], [6114.0, 182.3846153846154], [6082.0, 33291.5], [5890.0, 33040.0], [5898.0, 33034.0], [5906.0, 33295.5], [5914.0, 33250.0], [5930.0, 33154.75], [5922.0, 33268.25], [5938.0, 33253.2], [5946.0, 33257.0], [6002.0, 33276.6], [5994.0, 33114.0], [5978.0, 33215.25], [5970.0, 33192.333333333336], [5954.0, 33120.0], [6170.0, 114.1290322580645], [6186.0, 123.87234042553192], [6194.0, 81.30769230769234], [6178.0, 128.19354838709674], [6162.0, 161.72368421052633], [6154.0, 563.1190476190476], [6290.0, 467.0], [6298.0, 336.0], [6218.0, 5049.5], [6242.0, 2466.0], [4843.0, 33121.25], [4851.0, 33105.2], [4787.0, 33188.0], [4859.0, 33654.0], [4835.0, 33100.5], [4827.0, 33093.0], [4819.0, 33411.0], [4811.0, 33390.28571428572], [4803.0, 33239.0], [5107.0, 33342.0], [5115.0, 33423.0], [4907.0, 33238.0], [4883.0, 33185.666666666664], [4875.0, 33278.25], [5163.0, 33056.71428571428], [5243.0, 33273.0], [5291.0, 32923.0], [5323.0, 33114.875], [5251.0, 33368.0], [5275.0, 33260.0], [5283.0, 33539.0], [5315.0, 33295.28571428571], [5179.0, 33296.5], [5171.0, 33076.0], [5155.0, 33137.0], [5147.0, 33341.25], [5139.0, 33293.0], [5123.0, 33316.25], [5235.0, 33221.666666666664], [5211.0, 33170.0], [5203.0, 33089.5], [5195.0, 33260.0], [5187.0, 33061.4], [5883.0, 33118.5], [5763.0, 33209.555555555555], [5875.0, 33269.83333333333], [5867.0, 33179.5], [5859.0, 33337.25], [5843.0, 32929.0], [5835.0, 32893.0], [6131.0, 28.333333333333332], [6019.0, 33331.0], [6035.0, 33151.28571428572], [6139.0, 30.5], [6123.0, 28.285714285714285], [6115.0, 27.0], [6107.0, 27.625], [5891.0, 33165.333333333336], [5907.0, 33214.666666666664], [5915.0, 33422.0], [5923.0, 33469.5], [5931.0, 33335.5], [5939.0, 33198.0], [5947.0, 33086.5], [6011.0, 33174.0], [6003.0, 32875.0], [5995.0, 33017.5], [5979.0, 33179.0], [5963.0, 33089.142857142855], [5971.0, 33343.5], [6083.0, 33007.333333333336], [6171.0, 233.40350877192984], [6259.0, 1449.0], [6243.0, 1458.7000000000003], [6195.0, 61.5], [6187.0, 131.93939393939397], [6179.0, 104.51219512195122], [6163.0, 224.54838709677412], [6155.0, 29.2], [6147.0, 36.875], [6251.0, 468.0], [6283.0, 401.5], [6291.0, 514.5263157894738], [6219.0, 445.66666666666674], [6235.0, 107.61538461538461], [1129.0, 35895.36363636364], [1139.0, 35723.75], [1137.0, 35780.041666666664], [1119.0, 35722.875], [1117.0, 35569.0], [1115.0, 35598.666666666664], [1135.0, 35778.759999999995], [1133.0, 35777.6], [1131.0, 35744.1052631579], [1127.0, 35814.75000000001], [1125.0, 35920.166666666664], [1123.0, 35946.0], [1121.0, 35745.5], [1159.0, 35741.42857142857], [1263.0, 35573.777777777774], [1261.0, 35588.63793103448], [1341.0, 35663.5294117647], [1339.0, 35503.8], [1337.0, 35594.50000000001], [1335.0, 35521.2], [1407.0, 35408.166666666664], [1401.0, 35373.0], [1399.0, 35382.2], [1383.0, 35556.73170731708], [1455.0, 35206.5], [1449.0, 35246.0], [1441.0, 35280.5], [1433.0, 35425.0], [1431.0, 35380.0], [1429.0, 35427.0], [1791.0, 35032.2], [1789.0, 35033.0], [1787.0, 35032.0], [1783.0, 35068.0], [1785.0, 35031.0], [1781.0, 35066.41176470588], [1779.0, 35048.075000000004], [1775.0, 35034.99999999999], [1851.0, 35072.0], [1855.0, 35072.44444444444], [1849.0, 35074.46153846153], [1853.0, 35071.0], [1847.0, 35074.0], [1837.0, 35080.0], [1835.0, 35081.777777777774], [1815.0, 35044.0], [1801.0, 35048.0], [1793.0, 35033.0], [1805.0, 35050.75], [1803.0, 35075.15], [1813.0, 35056.5], [1811.0, 35074.34615384615], [1809.0, 35083.36000000001], [1911.0, 33788.0], [1909.0, 33903.8], [1907.0, 34138.0], [1871.0, 35072.950000000004], [1857.0, 35071.2], [1929.0, 34130.87500000001], [2045.0, 33897.3], [2043.0, 33824.62499999999], [2041.0, 33877.0], [2039.0, 33968.625], [2037.0, 33684.625], [2035.0, 33817.57142857143], [2033.0, 33937.0], [2150.0, 33856.055555555555], [2146.0, 33917.75], [2234.0, 33768.6875], [2230.0, 33974.0], [2366.0, 33725.5], [2362.0, 33670.5], [2358.0, 33699.5], [2354.0, 33781.0], [2350.0, 33701.14285714286], [2594.0, 33700.6923076923], [2590.0, 33684.2], [2586.0, 33640.4], [2582.0, 33665.333333333336], [2578.0, 33625.2], [2574.0, 33663.5], [2758.0, 33852.868421052626], [2754.0, 33708.0], [2750.0, 33506.25], [2862.0, 34301.94827586207], [2858.0, 34326.0], [3134.0, 33987.29166666667], [3138.0, 34125.0], [3130.0, 33663.42857142857], [3126.0, 33815.5], [3122.0, 33652.27272727273], [3114.0, 34030.2], [3110.0, 33678.85714285714], [3398.0, 34231.25], [3406.0, 34211.0], [3410.0, 34214.571428571435], [3402.0, 34227.0], [3394.0, 34025.0], [3390.0, 34049.0], [3386.0, 34226.25], [3382.0, 33682.0], [3378.0, 34249.5], [3374.0, 34248.4], [3698.0, 34107.875], [3654.0, 34141.0], [3622.0, 34072.8], [3618.0, 34061.777777777774], [3614.0, 34179.0], [3814.0, 34040.28571428571], [3826.0, 34022.909090909096], [3810.0, 34040.333333333336], [3778.0, 34075.28571428572], [3774.0, 33523.4], [3930.0, 33940.95238095237], [4034.0, 33918.15789473683], [4836.0, 33129.333333333336], [4852.0, 33310.0], [4828.0, 33558.0], [4820.0, 33295.56666666666], [4796.0, 33319.0], [4908.0, 33421.0], [5108.0, 33287.0], [4916.0, 33137.4], [4876.0, 33389.0], [4884.0, 33215.8], [5140.0, 33229.222222222226], [5260.0, 33162.6], [5292.0, 33144.6], [5252.0, 33074.307692307695], [5268.0, 33184.0], [5276.0, 33383.5], [5244.0, 33238.375], [5124.0, 33340.333333333336], [5132.0, 33224.333333333336], [5148.0, 32931.0], [5164.0, 33230.25], [5172.0, 33060.5], [5180.0, 33331.6], [5236.0, 33294.0], [5228.0, 33171.7], [5212.0, 33183.25], [5204.0, 33220.4], [5196.0, 33293.0], [5188.0, 33388.0], [5284.0, 33113.6], [5876.0, 33180.4], [5860.0, 33091.25], [5764.0, 33307.666666666664], [5868.0, 33257.0], [5844.0, 33185.0], [5836.0, 33075.333333333336], [5828.0, 33067.8], [6108.0, 27.875], [6124.0, 28.3125], [6140.0, 29.666666666666668], [6036.0, 33041.666666666664], [6052.0, 32871.0], [6068.0, 33191.0], [6076.0, 33252.0], [6028.0, 33248.0], [6132.0, 26.0], [6116.0, 533.5], [6100.0, 33152.30188679246], [6092.0, 33177.0], [6084.0, 33338.0], [5892.0, 33170.0], [5908.0, 33350.666666666664], [5916.0, 33376.0], [5924.0, 33190.0], [5932.0, 33098.33333333333], [5940.0, 33225.0], [5948.0, 33191.0], [6012.0, 32888.0], [6004.0, 33105.5], [5996.0, 33497.0], [5964.0, 33013.5], [5956.0, 33039.0], [6172.0, 307.65625], [6196.0, 61.0], [6188.0, 134.11111111111114], [6180.0, 123.0], [6164.0, 173.28571428571428], [6156.0, 75.54545454545455], [6148.0, 37.22222222222222], [6268.0, 1464.0], [6244.0, 1160.142857142857], [6276.0, 663.0], [6292.0, 566.2857142857143], [6300.0, 168.6650049850446], [6212.0, 28.6], [6236.0, 479.5], [4853.0, 33177.2], [4861.0, 33375.0], [4797.0, 33218.25], [4789.0, 32951.0], [4845.0, 33556.333333333336], [4837.0, 33354.0], [4821.0, 33311.2], [4813.0, 33408.75], [5117.0, 33550.0], [5109.0, 33425.5], [4917.0, 33393.5], [4885.0, 33317.28571428571], [4909.0, 33456.0], [4901.0, 33309.0], [5157.0, 33143.66666666667], [5269.0, 33040.833333333336], [5261.0, 33238.0], [5277.0, 33291.0], [5285.0, 33220.0], [5317.0, 33361.25], [5181.0, 33301.600000000006], [5173.0, 33179.666666666664], [5165.0, 33362.5], [5149.0, 32971.0], [5141.0, 33193.8], [5133.0, 33294.5], [5125.0, 33041.0], [5237.0, 33191.0], [5221.0, 33101.90909090909], [5213.0, 33167.333333333336], [5205.0, 33161.5], [5197.0, 33221.333333333336], [5189.0, 33234.0], [5293.0, 33290.0], [5877.0, 33254.0], [5765.0, 33177.0], [5869.0, 33175.42857142858], [5861.0, 33307.0], [5845.0, 33169.0], [5837.0, 32931.333333333336], [5829.0, 32999.6], [6101.0, 329.1], [6141.0, 32.81818181818182], [6029.0, 33128.333333333336], [6037.0, 33238.0], [6053.0, 33097.333333333336], [6133.0, 28.27777777777778], [6125.0, 27.0], [6117.0, 28.6], [6109.0, 83.83333333333333], [6093.0, 32882.0], [6085.0, 32883.0], [5909.0, 32996.5], [5925.0, 33056.0], [5933.0, 33194.5], [5949.0, 33077.333333333336], [6005.0, 33316.666666666664], [5997.0, 33495.0], [5981.0, 33181.5], [5973.0, 33496.0], [5965.0, 33052.5], [5957.0, 33090.666666666664], [6173.0, 170.0], [6197.0, 59.0], [6189.0, 138.60611854684495], [6181.0, 129.57058823529405], [6165.0, 201.55769230769232], [6157.0, 30.444444444444443], [6149.0, 540.6666666666666], [6245.0, 1514.0], [6205.0, 602.0], [6277.0, 536.0], [6285.0, 691.0], [6293.0, 1396.0], [2147.0, 33817.0], [2235.0, 33724.42424242422], [2231.0, 33734.666666666664], [2363.0, 33672.052631578954], [2367.0, 33642.500000000015], [2359.0, 33682.25], [2355.0, 33563.75], [2351.0, 33735.57142857143], [2595.0, 33669.79166666668], [2591.0, 33661.8], [2587.0, 33657.25], [2583.0, 33679.142857142855], [2579.0, 33635.42857142857], [2575.0, 33680.1], [2755.0, 33668.666666666664], [2751.0, 33621.0], [2691.0, 33608.71428571428], [2859.0, 33918.105263157886], [3127.0, 33960.0], [3139.0, 34282.5], [3135.0, 33752.666666666664], [3131.0, 33628.85714285714], [3123.0, 33732.555555555555], [3119.0, 33636.0], [3115.0, 34262.75], [3111.0, 33830.0], [3107.0, 34289.0], [3399.0, 34238.5], [3407.0, 34211.117647058825], [3411.0, 34208.57142857143], [3403.0, 34230.27272727273], [3395.0, 34232.6], [3391.0, 34072.25], [3387.0, 34199.92857142857], [3383.0, 33954.42857142857], [3379.0, 33924.0], [3375.0, 33941.666666666664], [3699.0, 34022.399999999994], [3615.0, 34056.555555555555], [3611.0, 34187.0], [3655.0, 34044.045454545456], [3623.0, 34176.0], [3619.0, 34114.32432432431], [3811.0, 34040.0], [3775.0, 33930.39473684211], [4035.0, 33916.86666666667], [4830.0, 33105.5], [4798.0, 33403.0], [4838.0, 33311.5], [4822.0, 33333.64285714285], [4806.0, 33238.0], [4886.0, 33274.333333333336], [4918.0, 33100.5], [4910.0, 33294.45], [4894.0, 33068.5], [5142.0, 33190.0], [5318.0, 32885.0], [5262.0, 33188.5], [5270.0, 33289.0], [5278.0, 33176.299999999996], [5246.0, 33161.5], [5126.0, 33193.0], [5134.0, 33333.5], [5158.0, 33243.461538461546], [5166.0, 33247.13333333333], [5174.0, 33186.8], [5182.0, 33294.16666666667], [5238.0, 33210.0], [5230.0, 33225.0], [5222.0, 32939.0], [5214.0, 33142.5], [5206.0, 33082.0], [5198.0, 33198.5], [5190.0, 33297.0], [5294.0, 33217.444444444445], [5286.0, 33230.0], [5862.0, 33057.0], [5886.0, 32978.0], [5878.0, 33179.0], [5846.0, 32879.0], [5830.0, 33347.75], [6126.0, 28.6], [6030.0, 33135.31578947368], [6038.0, 33330.0], [6046.0, 33245.333333333336], [6054.0, 32937.0], [6070.0, 32980.0], [6078.0, 33068.8], [6142.0, 34.833333333333336], [6134.0, 28.555555555555557], [6118.0, 28.0], [6110.0, 27.571428571428573], [6102.0, 28.2], [6086.0, 33192.41791044777], [6014.0, 33335.0], [5894.0, 32865.0], [5910.0, 33371.666666666664], [5934.0, 33092.0], [6006.0, 33495.0], [5982.0, 33035.0], [5974.0, 33214.0], [5966.0, 33237.0], [5958.0, 33086.0], [6174.0, 100.13953488372094], [6198.0, 69.22003577817526], [6190.0, 117.48601398601403], [6182.0, 118.9772727272727], [6166.0, 69.17857142857144], [6158.0, 27.75], [6150.0, 37.61290322580645], [6246.0, 491.0], [6278.0, 1004.6666666666667], [6238.0, 490.0], [4863.0, 33292.0], [4855.0, 32914.0], [4847.0, 33247.0], [4823.0, 32948.0], [4815.0, 33234.4], [4807.0, 33131.166666666664], [5111.0, 33194.666666666664], [5119.0, 33153.666666666664], [4911.0, 33309.26666666666], [4887.0, 33196.33333333333], [4895.0, 33219.666666666664], [4903.0, 33225.0], [4871.0, 33419.6], [4879.0, 33238.666666666664], [5167.0, 33221.75], [5255.0, 33086.333333333336], [5271.0, 33222.5], [5175.0, 33224.5], [5159.0, 33293.0], [5151.0, 33162.5], [5127.0, 33219.666666666664], [5239.0, 33257.333333333336], [5231.0, 33282.25], [5223.0, 33188.333333333336], [5215.0, 33177.0], [5207.0, 33164.4], [5199.0, 33183.42857142857], [5295.0, 33230.71428571428], [5287.0, 33194.666666666664], [5879.0, 33217.25], [5871.0, 33025.0], [5887.0, 32906.0], [5767.0, 33220.4], [5855.0, 33188.0], [5847.0, 33259.0], [5839.0, 32998.5], [5759.0, 33563.0], [6143.0, 72.25925925925924], [6127.0, 27.823529411764707], [6047.0, 33189.142857142855], [6039.0, 33586.0], [6031.0, 33236.86666666667], [6055.0, 33054.0], [6079.0, 32862.0], [6135.0, 28.94545454545455], [6119.0, 179.475], [6111.0, 97.48275862068965], [6103.0, 27.6], [6095.0, 33024.0], [6087.0, 33205.333333333336], [6015.0, 32981.0], [5895.0, 33335.0], [5911.0, 33227.5], [5927.0, 32890.0], [5935.0, 32958.0], [5999.0, 33058.25], [5983.0, 33251.0], [5951.0, 33189.166666666664], [6191.0, 136.82692307692307], [6183.0, 119.42105263157895], [6199.0, 159.67112597547364], [6175.0, 117.2980769230769], [6167.0, 70.66666666666667], [6159.0, 150.23076923076923], [6151.0, 80.83544303797467], [6207.0, 625.0], [6279.0, 939.8888888888888], [6287.0, 1464.0], [6295.0, 257.3333333333333], [6231.0, 29.538461538461544]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[5244.953833333324, 11585.962777777799]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[6274.0, 13232.833333333334], [6279.0, 13630.142857142857], [6300.0, 13414.933333333334], [6285.0, 13117.5], [6283.0, 13273.0], [6278.0, 13648.5], [6276.0, 13412.333333333334], [6275.0, 13383.0], [6272.0, 13625.5], [6201.0, 15650.0], [6271.0, 13662.666666666666], [6269.0, 13714.25], [6268.0, 13602.0], [6267.0, 13462.0], [6248.0, 13717.5], [6244.0, 13891.666666666666], [6235.0, 13643.5], [6233.0, 13831.0], [6231.0, 13833.142857142857], [6224.0, 13866.2], [6219.0, 13817.5], [6217.0, 14118.0], [6212.0, 13916.5], [6208.0, 15611.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[6255.8200000000015, 13797.229999999996]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}, {"data": [[2.0, 63444.0], [3.0, 61217.0], [5.0, 61721.0], [7.0, 60462.0], [8.0, 60462.0], [9.0, 60411.0], [10.0, 60405.0], [12.0, 60388.0], [13.0, 60388.0], [14.0, 60367.0], [15.0, 60362.0], [25.0, 60410.1], [26.0, 60450.0], [30.0, 60370.25], [31.0, 60337.0], [39.0, 60339.0], [38.0, 60322.42857142857], [41.0, 60340.0], [43.0, 60353.0], [44.0, 60372.0], [47.0, 60388.0], [46.0, 60371.0], [49.0, 60389.0], [48.0, 60398.0], [51.0, 60395.0], [53.0, 60419.0], [52.0, 60409.0], [55.0, 60436.0], [54.0, 60427.0], [57.0, 60447.5], [59.0, 60463.0], [58.0, 60461.0], [61.0, 60453.0], [60.0, 60458.0], [63.0, 60460.5], [67.0, 60499.0], [66.0, 60490.0], [65.0, 60453.0], [70.0, 60553.0], [69.0, 60459.0], [68.0, 60487.0], [75.0, 60548.8], [79.0, 60499.666666666664], [78.0, 60551.0], [86.0, 60510.00000000001], [90.0, 60471.5], [93.0, 60724.333333333336], [99.0, 60755.0], [98.0, 60667.0], [97.0, 60607.75], [100.0, 60562.0], [1.0, 63469.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}, {"data": [[51.83999999999997, 60546.849999999984]], "isOverall": false, "label": "JoinRoom&Wait60sec-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 6300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61753928E12, "maxY": 4.9E-324, "series": [{"data": [[1.61753928E12, 0.0], [1.61753934E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61753928E12, 0.0], [1.61753934E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61753934E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 187.4373057865125, "minX": 1.61753928E12, "maxY": 60546.849999999984, "series": [{"data": [[1.61753928E12, 187.4373057865125], [1.61753934E12, 33861.07237813883]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61753928E12, 13797.229999999996]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61753934E12, 60546.849999999984]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61753934E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61753928E12, "maxY": 4.9E-324, "series": [{"data": [[1.61753928E12, 0.0], [1.61753934E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61753928E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61753934E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61753934E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61753928E12, "maxY": 4.9E-324, "series": [{"data": [[1.61753928E12, 0.0], [1.61753934E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61753928E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[1.61753934E12, 0.0]], "isOverall": false, "label": "JoinRoom&Wait60sec", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61753934E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.61753928E12, "maxY": 63469.0, "series": [{"data": [[1.61753928E12, 15992.0], [1.61753934E12, 63469.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61753928E12, 259.2000000000007], [1.61753934E12, 36058.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61753928E12, 5261.960000000012], [1.61753934E12, 60416.18]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61753928E12, 1055.0], [1.61753934E12, 40756.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61753928E12, 26.0], [1.61753934E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61753928E12, 89.0], [1.61753934E12, 33900.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61753934E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 63456.5, "series": [{"data": [[2.0, 63456.5], [545.0, 145.0], [579.0, 113.0], [602.0, 110.0], [580.0, 35.0], [628.0, 118.0], [41.0, 3336.0], [698.0, 124.0], [731.0, 85.0], [714.0, 70.5], [756.0, 53.0], [782.0, 112.0], [50.0, 3669.0], [808.0, 93.0], [844.0, 50.0], [858.0, 69.0], [878.0, 87.0], [62.0, 28.0], [1048.0, 35935.5], [69.0, 60466.0], [5.0, 36984.0], [116.0, 28.0], [124.0, 1411.0], [2002.0, 33221.0], [2227.0, 33924.0], [152.0, 515.0], [12.0, 48718.0], [218.0, 40794.0], [1.0, 61217.0], [330.0, 46.0], [324.0, 28.0], [386.0, 90.5], [28.0, 60400.5], [481.0, 41.0], [488.0, 35070.0], [31.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2227.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[2.0, 0.0], [545.0, 0.0], [579.0, 0.0], [602.0, 0.0], [580.0, 0.0], [628.0, 0.0], [41.0, 0.0], [698.0, 0.0], [731.0, 0.0], [714.0, 0.0], [756.0, 0.0], [782.0, 0.0], [50.0, 0.0], [808.0, 0.0], [844.0, 0.0], [858.0, 0.0], [878.0, 0.0], [62.0, 0.0], [1048.0, 0.0], [69.0, 0.0], [5.0, 0.0], [116.0, 0.0], [124.0, 0.0], [2002.0, 0.0], [2227.0, 0.0], [152.0, 0.0], [12.0, 0.0], [218.0, 0.0], [1.0, 0.0], [330.0, 0.0], [324.0, 0.0], [386.0, 0.0], [28.0, 0.0], [481.0, 0.0], [488.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2227.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.61753928E12, "maxY": 301.8666666666667, "series": [{"data": [[1.61753928E12, 301.8666666666667], [1.61753934E12, 1.4666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61753934E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 103.21666666666667, "minX": 1.61753928E12, "maxY": 200.11666666666667, "series": [{"data": [[1.61753928E12, 200.11666666666667], [1.61753934E12, 103.21666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61753934E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.61753928E12, "maxY": 198.45, "series": [{"data": [[1.61753934E12, 1.6666666666666667]], "isOverall": false, "label": "JoinRoom&Wait60sec-success", "isController": false}, {"data": [[1.61753928E12, 1.6666666666666667]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61753928E12, 198.45], [1.61753934E12, 101.55]], "isOverall": false, "label": "JoinRoom-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61753934E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 103.21666666666667, "minX": 1.61753928E12, "maxY": 200.11666666666667, "series": [{"data": [[1.61753928E12, 200.11666666666667], [1.61753934E12, 103.21666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61753934E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

