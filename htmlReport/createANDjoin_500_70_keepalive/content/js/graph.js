/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 126.0, "minX": 0.0, "maxY": 21059.0, "series": [{"data": [[0.0, 126.0], [0.1, 134.0], [0.2, 134.0], [0.3, 135.0], [0.4, 135.0], [0.5, 135.0], [0.6, 135.0], [0.7, 135.0], [0.8, 135.0], [0.9, 135.0], [1.0, 135.0], [1.1, 135.0], [1.2, 135.0], [1.3, 135.0], [1.4, 135.0], [1.5, 135.0], [1.6, 135.0], [1.7, 135.0], [1.8, 135.0], [1.9, 136.0], [2.0, 136.0], [2.1, 136.0], [2.2, 136.0], [2.3, 136.0], [2.4, 136.0], [2.5, 136.0], [2.6, 136.0], [2.7, 136.0], [2.8, 136.0], [2.9, 136.0], [3.0, 136.0], [3.1, 136.0], [3.2, 136.0], [3.3, 136.0], [3.4, 136.0], [3.5, 136.0], [3.6, 136.0], [3.7, 136.0], [3.8, 136.0], [3.9, 136.0], [4.0, 136.0], [4.1, 136.0], [4.2, 136.0], [4.3, 136.0], [4.4, 136.0], [4.5, 136.0], [4.6, 136.0], [4.7, 136.0], [4.8, 136.0], [4.9, 136.0], [5.0, 136.0], [5.1, 136.0], [5.2, 136.0], [5.3, 136.0], [5.4, 136.0], [5.5, 136.0], [5.6, 136.0], [5.7, 136.0], [5.8, 136.0], [5.9, 136.0], [6.0, 136.0], [6.1, 136.0], [6.2, 136.0], [6.3, 136.0], [6.4, 136.0], [6.5, 136.0], [6.6, 136.0], [6.7, 136.0], [6.8, 136.0], [6.9, 136.0], [7.0, 136.0], [7.1, 136.0], [7.2, 136.0], [7.3, 136.0], [7.4, 136.0], [7.5, 136.0], [7.6, 136.0], [7.7, 136.0], [7.8, 136.0], [7.9, 136.0], [8.0, 136.0], [8.1, 136.0], [8.2, 137.0], [8.3, 137.0], [8.4, 137.0], [8.5, 137.0], [8.6, 137.0], [8.7, 137.0], [8.8, 137.0], [8.9, 137.0], [9.0, 137.0], [9.1, 137.0], [9.2, 137.0], [9.3, 137.0], [9.4, 137.0], [9.5, 137.0], [9.6, 137.0], [9.7, 137.0], [9.8, 137.0], [9.9, 137.0], [10.0, 137.0], [10.1, 137.0], [10.2, 137.0], [10.3, 137.0], [10.4, 137.0], [10.5, 137.0], [10.6, 137.0], [10.7, 137.0], [10.8, 137.0], [10.9, 137.0], [11.0, 137.0], [11.1, 137.0], [11.2, 137.0], [11.3, 137.0], [11.4, 137.0], [11.5, 137.0], [11.6, 137.0], [11.7, 137.0], [11.8, 137.0], [11.9, 137.0], [12.0, 137.0], [12.1, 137.0], [12.2, 137.0], [12.3, 137.0], [12.4, 137.0], [12.5, 137.0], [12.6, 137.0], [12.7, 137.0], [12.8, 137.0], [12.9, 137.0], [13.0, 137.0], [13.1, 137.0], [13.2, 137.0], [13.3, 137.0], [13.4, 137.0], [13.5, 137.0], [13.6, 137.0], [13.7, 137.0], [13.8, 137.0], [13.9, 137.0], [14.0, 137.0], [14.1, 137.0], [14.2, 137.0], [14.3, 137.0], [14.4, 137.0], [14.5, 137.0], [14.6, 137.0], [14.7, 137.0], [14.8, 137.0], [14.9, 137.0], [15.0, 137.0], [15.1, 137.0], [15.2, 137.0], [15.3, 137.0], [15.4, 137.0], [15.5, 137.0], [15.6, 137.0], [15.7, 137.0], [15.8, 137.0], [15.9, 137.0], [16.0, 137.0], [16.1, 137.0], [16.2, 137.0], [16.3, 137.0], [16.4, 137.0], [16.5, 137.0], [16.6, 137.0], [16.7, 137.0], [16.8, 137.0], [16.9, 137.0], [17.0, 137.0], [17.1, 137.0], [17.2, 137.0], [17.3, 137.0], [17.4, 137.0], [17.5, 137.0], [17.6, 137.0], [17.7, 137.0], [17.8, 137.0], [17.9, 137.0], [18.0, 137.0], [18.1, 137.0], [18.2, 137.0], [18.3, 137.0], [18.4, 137.0], [18.5, 137.0], [18.6, 137.0], [18.7, 137.0], [18.8, 137.0], [18.9, 137.0], [19.0, 137.0], [19.1, 137.0], [19.2, 137.0], [19.3, 137.0], [19.4, 137.0], [19.5, 137.0], [19.6, 137.0], [19.7, 137.0], [19.8, 137.0], [19.9, 137.0], [20.0, 137.0], [20.1, 137.0], [20.2, 137.0], [20.3, 137.0], [20.4, 137.0], [20.5, 137.0], [20.6, 137.0], [20.7, 137.0], [20.8, 137.0], [20.9, 137.0], [21.0, 137.0], [21.1, 137.0], [21.2, 137.0], [21.3, 137.0], [21.4, 137.0], [21.5, 137.0], [21.6, 137.0], [21.7, 137.0], [21.8, 137.0], [21.9, 137.0], [22.0, 137.0], [22.1, 137.0], [22.2, 137.0], [22.3, 137.0], [22.4, 137.0], [22.5, 137.0], [22.6, 137.0], [22.7, 137.0], [22.8, 137.0], [22.9, 137.0], [23.0, 137.0], [23.1, 137.0], [23.2, 137.0], [23.3, 137.0], [23.4, 137.0], [23.5, 137.0], [23.6, 137.0], [23.7, 137.0], [23.8, 137.0], [23.9, 137.0], [24.0, 137.0], [24.1, 137.0], [24.2, 137.0], [24.3, 137.0], [24.4, 138.0], [24.5, 138.0], [24.6, 138.0], [24.7, 138.0], [24.8, 138.0], [24.9, 138.0], [25.0, 138.0], [25.1, 138.0], [25.2, 138.0], [25.3, 138.0], [25.4, 138.0], [25.5, 138.0], [25.6, 138.0], [25.7, 138.0], [25.8, 138.0], [25.9, 138.0], [26.0, 138.0], [26.1, 138.0], [26.2, 138.0], [26.3, 138.0], [26.4, 138.0], [26.5, 138.0], [26.6, 138.0], [26.7, 138.0], [26.8, 138.0], [26.9, 138.0], [27.0, 138.0], [27.1, 138.0], [27.2, 138.0], [27.3, 138.0], [27.4, 138.0], [27.5, 138.0], [27.6, 138.0], [27.7, 138.0], [27.8, 138.0], [27.9, 138.0], [28.0, 138.0], [28.1, 138.0], [28.2, 138.0], [28.3, 138.0], [28.4, 138.0], [28.5, 138.0], [28.6, 138.0], [28.7, 138.0], [28.8, 138.0], [28.9, 138.0], [29.0, 138.0], [29.1, 138.0], [29.2, 138.0], [29.3, 138.0], [29.4, 138.0], [29.5, 138.0], [29.6, 138.0], [29.7, 138.0], [29.8, 138.0], [29.9, 138.0], [30.0, 138.0], [30.1, 138.0], [30.2, 138.0], [30.3, 138.0], [30.4, 138.0], [30.5, 138.0], [30.6, 138.0], [30.7, 138.0], [30.8, 138.0], [30.9, 138.0], [31.0, 138.0], [31.1, 138.0], [31.2, 138.0], [31.3, 138.0], [31.4, 138.0], [31.5, 138.0], [31.6, 138.0], [31.7, 138.0], [31.8, 138.0], [31.9, 138.0], [32.0, 138.0], [32.1, 138.0], [32.2, 138.0], [32.3, 138.0], [32.4, 138.0], [32.5, 138.0], [32.6, 138.0], [32.7, 138.0], [32.8, 138.0], [32.9, 138.0], [33.0, 138.0], [33.1, 138.0], [33.2, 138.0], [33.3, 138.0], [33.4, 138.0], [33.5, 138.0], [33.6, 138.0], [33.7, 138.0], [33.8, 138.0], [33.9, 138.0], [34.0, 138.0], [34.1, 138.0], [34.2, 138.0], [34.3, 138.0], [34.4, 138.0], [34.5, 138.0], [34.6, 138.0], [34.7, 138.0], [34.8, 138.0], [34.9, 138.0], [35.0, 138.0], [35.1, 138.0], [35.2, 138.0], [35.3, 138.0], [35.4, 138.0], [35.5, 138.0], [35.6, 138.0], [35.7, 138.0], [35.8, 138.0], [35.9, 138.0], [36.0, 138.0], [36.1, 138.0], [36.2, 138.0], [36.3, 138.0], [36.4, 138.0], [36.5, 138.0], [36.6, 138.0], [36.7, 138.0], [36.8, 138.0], [36.9, 138.0], [37.0, 138.0], [37.1, 138.0], [37.2, 138.0], [37.3, 138.0], [37.4, 138.0], [37.5, 138.0], [37.6, 138.0], [37.7, 138.0], [37.8, 138.0], [37.9, 138.0], [38.0, 138.0], [38.1, 138.0], [38.2, 138.0], [38.3, 138.0], [38.4, 138.0], [38.5, 138.0], [38.6, 138.0], [38.7, 138.0], [38.8, 138.0], [38.9, 138.0], [39.0, 138.0], [39.1, 138.0], [39.2, 138.0], [39.3, 138.0], [39.4, 138.0], [39.5, 138.0], [39.6, 138.0], [39.7, 138.0], [39.8, 138.0], [39.9, 138.0], [40.0, 138.0], [40.1, 138.0], [40.2, 138.0], [40.3, 138.0], [40.4, 138.0], [40.5, 138.0], [40.6, 138.0], [40.7, 138.0], [40.8, 138.0], [40.9, 138.0], [41.0, 138.0], [41.1, 138.0], [41.2, 138.0], [41.3, 138.0], [41.4, 138.0], [41.5, 138.0], [41.6, 138.0], [41.7, 138.0], [41.8, 138.0], [41.9, 138.0], [42.0, 138.0], [42.1, 138.0], [42.2, 138.0], [42.3, 138.0], [42.4, 138.0], [42.5, 138.0], [42.6, 138.0], [42.7, 138.0], [42.8, 138.0], [42.9, 138.0], [43.0, 138.0], [43.1, 138.0], [43.2, 138.0], [43.3, 138.0], [43.4, 138.0], [43.5, 138.0], [43.6, 138.0], [43.7, 138.0], [43.8, 138.0], [43.9, 138.0], [44.0, 138.0], [44.1, 138.0], [44.2, 138.0], [44.3, 138.0], [44.4, 138.0], [44.5, 138.0], [44.6, 138.0], [44.7, 138.0], [44.8, 138.0], [44.9, 138.0], [45.0, 138.0], [45.1, 138.0], [45.2, 138.0], [45.3, 138.0], [45.4, 138.0], [45.5, 138.0], [45.6, 138.0], [45.7, 138.0], [45.8, 138.0], [45.9, 138.0], [46.0, 138.0], [46.1, 138.0], [46.2, 138.0], [46.3, 138.0], [46.4, 138.0], [46.5, 138.0], [46.6, 138.0], [46.7, 138.0], [46.8, 138.0], [46.9, 138.0], [47.0, 138.0], [47.1, 138.0], [47.2, 138.0], [47.3, 138.0], [47.4, 138.0], [47.5, 138.0], [47.6, 138.0], [47.7, 138.0], [47.8, 138.0], [47.9, 138.0], [48.0, 138.0], [48.1, 138.0], [48.2, 138.0], [48.3, 138.0], [48.4, 138.0], [48.5, 138.0], [48.6, 138.0], [48.7, 138.0], [48.8, 138.0], [48.9, 138.0], [49.0, 138.0], [49.1, 138.0], [49.2, 138.0], [49.3, 138.0], [49.4, 138.0], [49.5, 138.0], [49.6, 138.0], [49.7, 138.0], [49.8, 138.0], [49.9, 138.0], [50.0, 138.0], [50.1, 138.0], [50.2, 138.0], [50.3, 138.0], [50.4, 138.0], [50.5, 139.0], [50.6, 139.0], [50.7, 139.0], [50.8, 139.0], [50.9, 139.0], [51.0, 139.0], [51.1, 139.0], [51.2, 139.0], [51.3, 139.0], [51.4, 139.0], [51.5, 139.0], [51.6, 139.0], [51.7, 139.0], [51.8, 139.0], [51.9, 139.0], [52.0, 139.0], [52.1, 139.0], [52.2, 139.0], [52.3, 139.0], [52.4, 139.0], [52.5, 139.0], [52.6, 139.0], [52.7, 139.0], [52.8, 139.0], [52.9, 139.0], [53.0, 139.0], [53.1, 139.0], [53.2, 139.0], [53.3, 139.0], [53.4, 139.0], [53.5, 139.0], [53.6, 139.0], [53.7, 139.0], [53.8, 139.0], [53.9, 139.0], [54.0, 139.0], [54.1, 139.0], [54.2, 139.0], [54.3, 139.0], [54.4, 139.0], [54.5, 139.0], [54.6, 139.0], [54.7, 139.0], [54.8, 139.0], [54.9, 139.0], [55.0, 139.0], [55.1, 139.0], [55.2, 139.0], [55.3, 139.0], [55.4, 139.0], [55.5, 139.0], [55.6, 139.0], [55.7, 139.0], [55.8, 139.0], [55.9, 139.0], [56.0, 139.0], [56.1, 139.0], [56.2, 139.0], [56.3, 139.0], [56.4, 139.0], [56.5, 139.0], [56.6, 139.0], [56.7, 139.0], [56.8, 139.0], [56.9, 139.0], [57.0, 139.0], [57.1, 139.0], [57.2, 139.0], [57.3, 139.0], [57.4, 139.0], [57.5, 139.0], [57.6, 139.0], [57.7, 139.0], [57.8, 139.0], [57.9, 139.0], [58.0, 139.0], [58.1, 139.0], [58.2, 139.0], [58.3, 139.0], [58.4, 139.0], [58.5, 139.0], [58.6, 139.0], [58.7, 139.0], [58.8, 139.0], [58.9, 139.0], [59.0, 139.0], [59.1, 139.0], [59.2, 139.0], [59.3, 139.0], [59.4, 139.0], [59.5, 139.0], [59.6, 139.0], [59.7, 139.0], [59.8, 139.0], [59.9, 139.0], [60.0, 139.0], [60.1, 139.0], [60.2, 139.0], [60.3, 139.0], [60.4, 139.0], [60.5, 139.0], [60.6, 139.0], [60.7, 139.0], [60.8, 139.0], [60.9, 139.0], [61.0, 139.0], [61.1, 139.0], [61.2, 139.0], [61.3, 139.0], [61.4, 139.0], [61.5, 139.0], [61.6, 139.0], [61.7, 139.0], [61.8, 139.0], [61.9, 139.0], [62.0, 139.0], [62.1, 139.0], [62.2, 139.0], [62.3, 139.0], [62.4, 139.0], [62.5, 139.0], [62.6, 139.0], [62.7, 139.0], [62.8, 139.0], [62.9, 139.0], [63.0, 139.0], [63.1, 139.0], [63.2, 139.0], [63.3, 139.0], [63.4, 139.0], [63.5, 139.0], [63.6, 139.0], [63.7, 139.0], [63.8, 139.0], [63.9, 139.0], [64.0, 139.0], [64.1, 139.0], [64.2, 139.0], [64.3, 139.0], [64.4, 139.0], [64.5, 139.0], [64.6, 139.0], [64.7, 139.0], [64.8, 139.0], [64.9, 139.0], [65.0, 139.0], [65.1, 139.0], [65.2, 139.0], [65.3, 139.0], [65.4, 139.0], [65.5, 139.0], [65.6, 139.0], [65.7, 139.0], [65.8, 139.0], [65.9, 139.0], [66.0, 139.0], [66.1, 139.0], [66.2, 139.0], [66.3, 139.0], [66.4, 139.0], [66.5, 139.0], [66.6, 139.0], [66.7, 139.0], [66.8, 139.0], [66.9, 139.0], [67.0, 139.0], [67.1, 139.0], [67.2, 139.0], [67.3, 139.0], [67.4, 139.0], [67.5, 139.0], [67.6, 139.0], [67.7, 139.0], [67.8, 139.0], [67.9, 139.0], [68.0, 139.0], [68.1, 139.0], [68.2, 139.0], [68.3, 139.0], [68.4, 139.0], [68.5, 139.0], [68.6, 139.0], [68.7, 139.0], [68.8, 139.0], [68.9, 139.0], [69.0, 139.0], [69.1, 139.0], [69.2, 139.0], [69.3, 139.0], [69.4, 139.0], [69.5, 139.0], [69.6, 139.0], [69.7, 139.0], [69.8, 139.0], [69.9, 139.0], [70.0, 139.0], [70.1, 139.0], [70.2, 139.0], [70.3, 139.0], [70.4, 139.0], [70.5, 139.0], [70.6, 139.0], [70.7, 139.0], [70.8, 139.0], [70.9, 139.0], [71.0, 139.0], [71.1, 139.0], [71.2, 139.0], [71.3, 139.0], [71.4, 139.0], [71.5, 139.0], [71.6, 139.0], [71.7, 139.0], [71.8, 139.0], [71.9, 140.0], [72.0, 140.0], [72.1, 140.0], [72.2, 140.0], [72.3, 140.0], [72.4, 140.0], [72.5, 140.0], [72.6, 140.0], [72.7, 140.0], [72.8, 140.0], [72.9, 140.0], [73.0, 140.0], [73.1, 140.0], [73.2, 140.0], [73.3, 140.0], [73.4, 140.0], [73.5, 140.0], [73.6, 140.0], [73.7, 140.0], [73.8, 140.0], [73.9, 140.0], [74.0, 140.0], [74.1, 140.0], [74.2, 140.0], [74.3, 140.0], [74.4, 140.0], [74.5, 140.0], [74.6, 140.0], [74.7, 140.0], [74.8, 140.0], [74.9, 140.0], [75.0, 140.0], [75.1, 140.0], [75.2, 140.0], [75.3, 140.0], [75.4, 140.0], [75.5, 140.0], [75.6, 140.0], [75.7, 140.0], [75.8, 140.0], [75.9, 140.0], [76.0, 140.0], [76.1, 140.0], [76.2, 140.0], [76.3, 140.0], [76.4, 140.0], [76.5, 140.0], [76.6, 140.0], [76.7, 140.0], [76.8, 140.0], [76.9, 140.0], [77.0, 140.0], [77.1, 140.0], [77.2, 140.0], [77.3, 140.0], [77.4, 140.0], [77.5, 140.0], [77.6, 140.0], [77.7, 140.0], [77.8, 140.0], [77.9, 140.0], [78.0, 140.0], [78.1, 140.0], [78.2, 140.0], [78.3, 140.0], [78.4, 140.0], [78.5, 140.0], [78.6, 140.0], [78.7, 140.0], [78.8, 140.0], [78.9, 140.0], [79.0, 140.0], [79.1, 140.0], [79.2, 140.0], [79.3, 140.0], [79.4, 140.0], [79.5, 140.0], [79.6, 140.0], [79.7, 140.0], [79.8, 140.0], [79.9, 140.0], [80.0, 140.0], [80.1, 140.0], [80.2, 140.0], [80.3, 140.0], [80.4, 140.0], [80.5, 140.0], [80.6, 140.0], [80.7, 140.0], [80.8, 140.0], [80.9, 140.0], [81.0, 140.0], [81.1, 140.0], [81.2, 140.0], [81.3, 140.0], [81.4, 140.0], [81.5, 140.0], [81.6, 140.0], [81.7, 140.0], [81.8, 140.0], [81.9, 140.0], [82.0, 140.0], [82.1, 140.0], [82.2, 140.0], [82.3, 140.0], [82.4, 140.0], [82.5, 140.0], [82.6, 140.0], [82.7, 140.0], [82.8, 140.0], [82.9, 140.0], [83.0, 140.0], [83.1, 140.0], [83.2, 140.0], [83.3, 140.0], [83.4, 140.0], [83.5, 140.0], [83.6, 140.0], [83.7, 140.0], [83.8, 140.0], [83.9, 140.0], [84.0, 140.0], [84.1, 140.0], [84.2, 140.0], [84.3, 140.0], [84.4, 140.0], [84.5, 140.0], [84.6, 140.0], [84.7, 140.0], [84.8, 140.0], [84.9, 140.0], [85.0, 140.0], [85.1, 140.0], [85.2, 140.0], [85.3, 140.0], [85.4, 140.0], [85.5, 140.0], [85.6, 140.0], [85.7, 140.0], [85.8, 140.0], [85.9, 140.0], [86.0, 140.0], [86.1, 140.0], [86.2, 140.0], [86.3, 140.0], [86.4, 140.0], [86.5, 140.0], [86.6, 141.0], [86.7, 141.0], [86.8, 141.0], [86.9, 141.0], [87.0, 141.0], [87.1, 141.0], [87.2, 141.0], [87.3, 141.0], [87.4, 141.0], [87.5, 141.0], [87.6, 141.0], [87.7, 141.0], [87.8, 141.0], [87.9, 141.0], [88.0, 141.0], [88.1, 141.0], [88.2, 141.0], [88.3, 141.0], [88.4, 141.0], [88.5, 141.0], [88.6, 141.0], [88.7, 141.0], [88.8, 141.0], [88.9, 141.0], [89.0, 141.0], [89.1, 141.0], [89.2, 141.0], [89.3, 141.0], [89.4, 141.0], [89.5, 141.0], [89.6, 141.0], [89.7, 141.0], [89.8, 141.0], [89.9, 141.0], [90.0, 141.0], [90.1, 141.0], [90.2, 141.0], [90.3, 142.0], [90.4, 142.0], [90.5, 142.0], [90.6, 142.0], [90.7, 142.0], [90.8, 142.0], [90.9, 142.0], [91.0, 143.0], [91.1, 144.0], [91.2, 149.0], [91.3, 150.0], [91.4, 150.0], [91.5, 150.0], [91.6, 151.0], [91.7, 151.0], [91.8, 151.0], [91.9, 151.0], [92.0, 151.0], [92.1, 151.0], [92.2, 152.0], [92.3, 152.0], [92.4, 152.0], [92.5, 152.0], [92.6, 152.0], [92.7, 152.0], [92.8, 152.0], [92.9, 152.0], [93.0, 152.0], [93.1, 152.0], [93.2, 152.0], [93.3, 153.0], [93.4, 153.0], [93.5, 153.0], [93.6, 153.0], [93.7, 153.0], [93.8, 153.0], [93.9, 153.0], [94.0, 153.0], [94.1, 153.0], [94.2, 153.0], [94.3, 153.0], [94.4, 153.0], [94.5, 154.0], [94.6, 154.0], [94.7, 154.0], [94.8, 154.0], [94.9, 154.0], [95.0, 154.0], [95.1, 154.0], [95.2, 155.0], [95.3, 155.0], [95.4, 155.0], [95.5, 155.0], [95.6, 155.0], [95.7, 155.0], [95.8, 156.0], [95.9, 156.0], [96.0, 157.0], [96.1, 167.0], [96.2, 168.0], [96.3, 170.0], [96.4, 185.0], [96.5, 200.0], [96.6, 214.0], [96.7, 215.0], [96.8, 229.0], [96.9, 230.0], [97.0, 246.0], [97.1, 269.0], [97.2, 275.0], [97.3, 284.0], [97.4, 311.0], [97.5, 322.0], [97.6, 350.0], [97.7, 397.0], [97.8, 415.0], [97.9, 430.0], [98.0, 456.0], [98.1, 476.0], [98.2, 523.0], [98.3, 581.0], [98.4, 1140.0], [98.5, 1142.0], [98.6, 1145.0], [98.7, 1146.0], [98.8, 1147.0], [98.9, 1148.0], [99.0, 1148.0], [99.1, 1148.0], [99.2, 1149.0], [99.3, 1149.0], [99.4, 1150.0], [99.5, 1151.0], [99.6, 1152.0], [99.7, 1163.0], [99.8, 6355.0], [99.9, 6602.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[0.0, 6214.0], [0.1, 6214.0], [0.2, 6214.0], [0.3, 6214.0], [0.4, 6214.0], [0.5, 6214.0], [0.6, 6215.0], [0.7, 6215.0], [0.8, 6215.0], [0.9, 6215.0], [1.0, 6215.0], [1.1, 6215.0], [1.2, 6215.0], [1.3, 6215.0], [1.4, 6215.0], [1.5, 6215.0], [1.6, 6216.0], [1.7, 6216.0], [1.8, 6216.0], [1.9, 6216.0], [2.0, 6216.0], [2.1, 6216.0], [2.2, 6216.0], [2.3, 6216.0], [2.4, 6216.0], [2.5, 6216.0], [2.6, 6217.0], [2.7, 6217.0], [2.8, 6217.0], [2.9, 6217.0], [3.0, 6217.0], [3.1, 6217.0], [3.2, 6217.0], [3.3, 6217.0], [3.4, 6217.0], [3.5, 6217.0], [3.6, 6217.0], [3.7, 6217.0], [3.8, 6217.0], [3.9, 6217.0], [4.0, 6218.0], [4.1, 6218.0], [4.2, 6218.0], [4.3, 6218.0], [4.4, 6218.0], [4.5, 6218.0], [4.6, 6218.0], [4.7, 6218.0], [4.8, 6218.0], [4.9, 6218.0], [5.0, 6218.0], [5.1, 6218.0], [5.2, 6219.0], [5.3, 6219.0], [5.4, 6220.0], [5.5, 6220.0], [5.6, 6220.0], [5.7, 6220.0], [5.8, 6220.0], [5.9, 6220.0], [6.0, 6220.0], [6.1, 6220.0], [6.2, 6221.0], [6.3, 6221.0], [6.4, 6221.0], [6.5, 6221.0], [6.6, 6221.0], [6.7, 6222.0], [6.8, 6222.0], [6.9, 6222.0], [7.0, 6222.0], [7.1, 6224.0], [7.2, 6224.0], [7.3, 6224.0], [7.4, 6224.0], [7.5, 6225.0], [7.6, 6225.0], [7.7, 6225.0], [7.8, 6225.0], [7.9, 6225.0], [8.0, 6225.0], [8.1, 6226.0], [8.2, 6226.0], [8.3, 6226.0], [8.4, 6226.0], [8.5, 6227.0], [8.6, 6227.0], [8.7, 6228.0], [8.8, 6228.0], [8.9, 6228.0], [9.0, 6228.0], [9.1, 6228.0], [9.2, 6228.0], [9.3, 6228.0], [9.4, 6228.0], [9.5, 6229.0], [9.6, 6229.0], [9.7, 6229.0], [9.8, 6229.0], [9.9, 6229.0], [10.0, 6229.0], [10.1, 6230.0], [10.2, 6230.0], [10.3, 6230.0], [10.4, 6230.0], [10.5, 6230.0], [10.6, 6230.0], [10.7, 6231.0], [10.8, 6231.0], [10.9, 6231.0], [11.0, 6231.0], [11.1, 6231.0], [11.2, 6231.0], [11.3, 6232.0], [11.4, 6232.0], [11.5, 6232.0], [11.6, 6232.0], [11.7, 6233.0], [11.8, 6233.0], [11.9, 6233.0], [12.0, 6233.0], [12.1, 6233.0], [12.2, 6233.0], [12.3, 6233.0], [12.4, 6233.0], [12.5, 6233.0], [12.6, 6233.0], [12.7, 6233.0], [12.8, 6234.0], [12.9, 6234.0], [13.0, 6234.0], [13.1, 6234.0], [13.2, 6234.0], [13.3, 6235.0], [13.4, 6235.0], [13.5, 6235.0], [13.6, 6235.0], [13.7, 6235.0], [13.8, 6235.0], [13.9, 6235.0], [14.0, 6235.0], [14.1, 6236.0], [14.2, 6236.0], [14.3, 6236.0], [14.4, 6236.0], [14.5, 6237.0], [14.6, 6237.0], [14.7, 6237.0], [14.8, 6237.0], [14.9, 6237.0], [15.0, 6237.0], [15.1, 6238.0], [15.2, 6238.0], [15.3, 6238.0], [15.4, 6238.0], [15.5, 6239.0], [15.6, 6239.0], [15.7, 6240.0], [15.8, 6240.0], [15.9, 6240.0], [16.0, 6240.0], [16.1, 6240.0], [16.2, 6240.0], [16.3, 6240.0], [16.4, 6240.0], [16.5, 6240.0], [16.6, 6240.0], [16.7, 6240.0], [16.8, 6241.0], [16.9, 6241.0], [17.0, 6241.0], [17.1, 6241.0], [17.2, 6241.0], [17.3, 6241.0], [17.4, 6241.0], [17.5, 6241.0], [17.6, 6241.0], [17.7, 6241.0], [17.8, 6241.0], [17.9, 6241.0], [18.0, 6241.0], [18.1, 6241.0], [18.2, 6242.0], [18.3, 6242.0], [18.4, 6242.0], [18.5, 6242.0], [18.6, 6242.0], [18.7, 6242.0], [18.8, 6243.0], [18.9, 6243.0], [19.0, 6243.0], [19.1, 6243.0], [19.2, 6243.0], [19.3, 6243.0], [19.4, 6243.0], [19.5, 6244.0], [19.6, 6244.0], [19.7, 6244.0], [19.8, 6244.0], [19.9, 6244.0], [20.0, 6244.0], [20.1, 6244.0], [20.2, 6244.0], [20.3, 6244.0], [20.4, 6244.0], [20.5, 6244.0], [20.6, 6245.0], [20.7, 6245.0], [20.8, 6245.0], [20.9, 6245.0], [21.0, 6245.0], [21.1, 6245.0], [21.2, 6245.0], [21.3, 6245.0], [21.4, 6245.0], [21.5, 6245.0], [21.6, 6245.0], [21.7, 6245.0], [21.8, 6245.0], [21.9, 6245.0], [22.0, 6245.0], [22.1, 6245.0], [22.2, 6245.0], [22.3, 6245.0], [22.4, 6245.0], [22.5, 6246.0], [22.6, 6246.0], [22.7, 6246.0], [22.8, 6246.0], [22.9, 6246.0], [23.0, 6246.0], [23.1, 6246.0], [23.2, 6246.0], [23.3, 6246.0], [23.4, 6246.0], [23.5, 6246.0], [23.6, 6246.0], [23.7, 6246.0], [23.8, 6246.0], [23.9, 6246.0], [24.0, 6246.0], [24.1, 6246.0], [24.2, 6246.0], [24.3, 6247.0], [24.4, 6247.0], [24.5, 6247.0], [24.6, 6247.0], [24.7, 6247.0], [24.8, 6247.0], [24.9, 6247.0], [25.0, 6247.0], [25.1, 6247.0], [25.2, 6247.0], [25.3, 6247.0], [25.4, 6247.0], [25.5, 6247.0], [25.6, 6248.0], [25.7, 6248.0], [25.8, 6248.0], [25.9, 6248.0], [26.0, 6248.0], [26.1, 6248.0], [26.2, 6248.0], [26.3, 6248.0], [26.4, 6248.0], [26.5, 6248.0], [26.6, 6248.0], [26.7, 6248.0], [26.8, 6249.0], [26.9, 6249.0], [27.0, 6249.0], [27.1, 6249.0], [27.2, 6249.0], [27.3, 6249.0], [27.4, 6249.0], [27.5, 6249.0], [27.6, 6249.0], [27.7, 6249.0], [27.8, 6249.0], [27.9, 6249.0], [28.0, 6249.0], [28.1, 6249.0], [28.2, 6250.0], [28.3, 6250.0], [28.4, 6250.0], [28.5, 6250.0], [28.6, 6250.0], [28.7, 6250.0], [28.8, 6250.0], [28.9, 6250.0], [29.0, 6250.0], [29.1, 6250.0], [29.2, 6250.0], [29.3, 6250.0], [29.4, 6250.0], [29.5, 6250.0], [29.6, 6250.0], [29.7, 6250.0], [29.8, 6250.0], [29.9, 6250.0], [30.0, 6250.0], [30.1, 6250.0], [30.2, 6251.0], [30.3, 6251.0], [30.4, 6251.0], [30.5, 6251.0], [30.6, 6252.0], [30.7, 6252.0], [30.8, 6252.0], [30.9, 6252.0], [31.0, 6252.0], [31.1, 6252.0], [31.2, 6253.0], [31.3, 6253.0], [31.4, 6253.0], [31.5, 6253.0], [31.6, 6253.0], [31.7, 6253.0], [31.8, 6253.0], [31.9, 6253.0], [32.0, 6254.0], [32.1, 6254.0], [32.2, 6254.0], [32.3, 6254.0], [32.4, 6254.0], [32.5, 6254.0], [32.6, 6255.0], [32.7, 6255.0], [32.8, 6255.0], [32.9, 6255.0], [33.0, 6256.0], [33.1, 6256.0], [33.2, 6256.0], [33.3, 6256.0], [33.4, 6256.0], [33.5, 6256.0], [33.6, 6256.0], [33.7, 6256.0], [33.8, 6256.0], [33.9, 6256.0], [34.0, 6257.0], [34.1, 6257.0], [34.2, 6257.0], [34.3, 6257.0], [34.4, 6257.0], [34.5, 6257.0], [34.6, 6257.0], [34.7, 6257.0], [34.8, 6258.0], [34.9, 6258.0], [35.0, 6258.0], [35.1, 6258.0], [35.2, 6258.0], [35.3, 6258.0], [35.4, 6258.0], [35.5, 6258.0], [35.6, 6258.0], [35.7, 6258.0], [35.8, 6258.0], [35.9, 6258.0], [36.0, 6258.0], [36.1, 6258.0], [36.2, 6258.0], [36.3, 6258.0], [36.4, 6259.0], [36.5, 6259.0], [36.6, 6259.0], [36.7, 6259.0], [36.8, 6259.0], [36.9, 6259.0], [37.0, 6259.0], [37.1, 6259.0], [37.2, 6259.0], [37.3, 6259.0], [37.4, 6259.0], [37.5, 6259.0], [37.6, 6260.0], [37.7, 6260.0], [37.8, 6260.0], [37.9, 6260.0], [38.0, 6261.0], [38.1, 6261.0], [38.2, 6261.0], [38.3, 6261.0], [38.4, 6261.0], [38.5, 6261.0], [38.6, 6261.0], [38.7, 6261.0], [38.8, 6261.0], [38.9, 6261.0], [39.0, 6262.0], [39.1, 6262.0], [39.2, 6262.0], [39.3, 6262.0], [39.4, 6262.0], [39.5, 6262.0], [39.6, 6262.0], [39.7, 6262.0], [39.8, 6262.0], [39.9, 6262.0], [40.0, 6262.0], [40.1, 6262.0], [40.2, 6262.0], [40.3, 6262.0], [40.4, 6262.0], [40.5, 6262.0], [40.6, 6262.0], [40.7, 6262.0], [40.8, 6262.0], [40.9, 6262.0], [41.0, 6262.0], [41.1, 6262.0], [41.2, 6262.0], [41.3, 6262.0], [41.4, 6262.0], [41.5, 6262.0], [41.6, 6263.0], [41.7, 6263.0], [41.8, 6263.0], [41.9, 6263.0], [42.0, 6263.0], [42.1, 6263.0], [42.2, 6263.0], [42.3, 6263.0], [42.4, 6263.0], [42.5, 6263.0], [42.6, 6263.0], [42.7, 6263.0], [42.8, 6263.0], [42.9, 6264.0], [43.0, 6264.0], [43.1, 6264.0], [43.2, 6265.0], [43.3, 6265.0], [43.4, 6265.0], [43.5, 6265.0], [43.6, 6265.0], [43.7, 6265.0], [43.8, 6265.0], [43.9, 6265.0], [44.0, 6266.0], [44.1, 6266.0], [44.2, 6266.0], [44.3, 6266.0], [44.4, 6266.0], [44.5, 6266.0], [44.6, 6266.0], [44.7, 6266.0], [44.8, 6266.0], [44.9, 6266.0], [45.0, 6267.0], [45.1, 6267.0], [45.2, 6267.0], [45.3, 6267.0], [45.4, 6267.0], [45.5, 6267.0], [45.6, 6267.0], [45.7, 6267.0], [45.8, 6267.0], [45.9, 6267.0], [46.0, 6267.0], [46.1, 6267.0], [46.2, 6268.0], [46.3, 6268.0], [46.4, 6268.0], [46.5, 6268.0], [46.6, 6268.0], [46.7, 6268.0], [46.8, 6268.0], [46.9, 6269.0], [47.0, 6269.0], [47.1, 6269.0], [47.2, 6269.0], [47.3, 6269.0], [47.4, 6269.0], [47.5, 6269.0], [47.6, 6269.0], [47.7, 6269.0], [47.8, 6269.0], [47.9, 6269.0], [48.0, 6269.0], [48.1, 6269.0], [48.2, 6270.0], [48.3, 6270.0], [48.4, 6270.0], [48.5, 6270.0], [48.6, 6270.0], [48.7, 6270.0], [48.8, 6270.0], [48.9, 6270.0], [49.0, 6271.0], [49.1, 6271.0], [49.2, 6271.0], [49.3, 6271.0], [49.4, 6271.0], [49.5, 6271.0], [49.6, 6271.0], [49.7, 6271.0], [49.8, 6271.0], [49.9, 6271.0], [50.0, 6271.0], [50.1, 6271.0], [50.2, 6271.0], [50.3, 6271.0], [50.4, 6272.0], [50.5, 6272.0], [50.6, 6272.0], [50.7, 6272.0], [50.8, 6272.0], [50.9, 6272.0], [51.0, 6272.0], [51.1, 6272.0], [51.2, 6272.0], [51.3, 6272.0], [51.4, 6273.0], [51.5, 6273.0], [51.6, 6273.0], [51.7, 6273.0], [51.8, 6273.0], [51.9, 6273.0], [52.0, 6273.0], [52.1, 6273.0], [52.2, 6274.0], [52.3, 6274.0], [52.4, 6275.0], [52.5, 6275.0], [52.6, 6276.0], [52.7, 6276.0], [52.8, 6276.0], [52.9, 6277.0], [53.0, 6277.0], [53.1, 6278.0], [53.2, 6278.0], [53.3, 6278.0], [53.4, 6278.0], [53.5, 6278.0], [53.6, 6278.0], [53.7, 6281.0], [53.8, 6281.0], [53.9, 6281.0], [54.0, 6281.0], [54.1, 6281.0], [54.2, 6281.0], [54.3, 6281.0], [54.4, 6281.0], [54.5, 6282.0], [54.6, 6282.0], [54.7, 6284.0], [54.8, 6284.0], [54.9, 6284.0], [55.0, 6284.0], [55.1, 6285.0], [55.2, 6285.0], [55.3, 6287.0], [55.4, 6287.0], [55.5, 6288.0], [55.6, 6288.0], [55.7, 6289.0], [55.8, 6289.0], [55.9, 6298.0], [56.0, 6298.0], [56.1, 6309.0], [56.2, 6309.0], [56.3, 6310.0], [56.4, 6310.0], [56.5, 6316.0], [56.6, 6316.0], [56.7, 6316.0], [56.8, 6316.0], [56.9, 6319.0], [57.0, 6319.0], [57.1, 6323.0], [57.2, 6323.0], [57.3, 6338.0], [57.4, 6338.0], [57.5, 6365.0], [57.6, 6365.0], [57.7, 6374.0], [57.8, 6374.0], [57.9, 6379.0], [58.0, 6379.0], [58.1, 6380.0], [58.2, 6380.0], [58.3, 6381.0], [58.4, 6381.0], [58.5, 6391.0], [58.6, 6391.0], [58.7, 6392.0], [58.8, 6392.0], [58.9, 6393.0], [59.0, 6393.0], [59.1, 6394.0], [59.2, 6394.0], [59.3, 6394.0], [59.4, 6394.0], [59.5, 6396.0], [59.6, 6396.0], [59.7, 6399.0], [59.8, 6399.0], [59.9, 6402.0], [60.0, 6402.0], [60.1, 6405.0], [60.2, 6405.0], [60.3, 6409.0], [60.4, 6409.0], [60.5, 6409.0], [60.6, 6409.0], [60.7, 6409.0], [60.8, 6409.0], [60.9, 6415.0], [61.0, 6415.0], [61.1, 6418.0], [61.2, 6418.0], [61.3, 6418.0], [61.4, 6418.0], [61.5, 6422.0], [61.6, 6422.0], [61.7, 6423.0], [61.8, 6423.0], [61.9, 6425.0], [62.0, 6425.0], [62.1, 6426.0], [62.2, 6426.0], [62.3, 6430.0], [62.4, 6430.0], [62.5, 6432.0], [62.6, 6432.0], [62.7, 6436.0], [62.8, 6436.0], [62.9, 6438.0], [63.0, 6438.0], [63.1, 6443.0], [63.2, 6443.0], [63.3, 6446.0], [63.4, 6446.0], [63.5, 6447.0], [63.6, 6447.0], [63.7, 6455.0], [63.8, 6455.0], [63.9, 6458.0], [64.0, 6458.0], [64.1, 6459.0], [64.2, 6459.0], [64.3, 6463.0], [64.4, 6463.0], [64.5, 6467.0], [64.6, 6467.0], [64.7, 6468.0], [64.8, 6468.0], [64.9, 6468.0], [65.0, 6468.0], [65.1, 6468.0], [65.2, 6468.0], [65.3, 6470.0], [65.4, 6470.0], [65.5, 6472.0], [65.6, 6472.0], [65.7, 6472.0], [65.8, 6472.0], [65.9, 6473.0], [66.0, 6473.0], [66.1, 6473.0], [66.2, 6473.0], [66.3, 6474.0], [66.4, 6474.0], [66.5, 6475.0], [66.6, 6475.0], [66.7, 6476.0], [66.8, 6476.0], [66.9, 6478.0], [67.0, 6478.0], [67.1, 6479.0], [67.2, 6479.0], [67.3, 6479.0], [67.4, 6479.0], [67.5, 6481.0], [67.6, 6481.0], [67.7, 6484.0], [67.8, 6484.0], [67.9, 6487.0], [68.0, 6487.0], [68.1, 6487.0], [68.2, 6487.0], [68.3, 6487.0], [68.4, 6487.0], [68.5, 6487.0], [68.6, 6487.0], [68.7, 6488.0], [68.8, 6488.0], [68.9, 6489.0], [69.0, 6489.0], [69.1, 6489.0], [69.2, 6489.0], [69.3, 6489.0], [69.4, 6489.0], [69.5, 6491.0], [69.6, 6491.0], [69.7, 6493.0], [69.8, 6493.0], [69.9, 6494.0], [70.0, 6494.0], [70.1, 6494.0], [70.2, 6494.0], [70.3, 6495.0], [70.4, 6495.0], [70.5, 6496.0], [70.6, 6496.0], [70.7, 6496.0], [70.8, 6496.0], [70.9, 6498.0], [71.0, 6498.0], [71.1, 6498.0], [71.2, 6498.0], [71.3, 6498.0], [71.4, 6498.0], [71.5, 6499.0], [71.6, 6499.0], [71.7, 6500.0], [71.8, 6500.0], [71.9, 6501.0], [72.0, 6501.0], [72.1, 6504.0], [72.2, 6504.0], [72.3, 6504.0], [72.4, 6504.0], [72.5, 6505.0], [72.6, 6505.0], [72.7, 6505.0], [72.8, 6505.0], [72.9, 6505.0], [73.0, 6505.0], [73.1, 6507.0], [73.2, 6507.0], [73.3, 6508.0], [73.4, 6508.0], [73.5, 6508.0], [73.6, 6508.0], [73.7, 6509.0], [73.8, 6509.0], [73.9, 6509.0], [74.0, 6509.0], [74.1, 6509.0], [74.2, 6509.0], [74.3, 6509.0], [74.4, 6509.0], [74.5, 6510.0], [74.6, 6510.0], [74.7, 6511.0], [74.8, 6511.0], [74.9, 6511.0], [75.0, 6511.0], [75.1, 6512.0], [75.2, 6512.0], [75.3, 6512.0], [75.4, 6512.0], [75.5, 6513.0], [75.6, 6513.0], [75.7, 6514.0], [75.8, 6514.0], [75.9, 6515.0], [76.0, 6515.0], [76.1, 6517.0], [76.2, 6517.0], [76.3, 6519.0], [76.4, 6519.0], [76.5, 6520.0], [76.6, 6520.0], [76.7, 6520.0], [76.8, 6520.0], [76.9, 6522.0], [77.0, 6522.0], [77.1, 6523.0], [77.2, 6523.0], [77.3, 6527.0], [77.4, 6527.0], [77.5, 6527.0], [77.6, 6527.0], [77.7, 6527.0], [77.8, 6527.0], [77.9, 6529.0], [78.0, 6529.0], [78.1, 6529.0], [78.2, 6529.0], [78.3, 6529.0], [78.4, 6529.0], [78.5, 6530.0], [78.6, 6530.0], [78.7, 6530.0], [78.8, 6530.0], [78.9, 6532.0], [79.0, 6532.0], [79.1, 6534.0], [79.2, 6534.0], [79.3, 6535.0], [79.4, 6535.0], [79.5, 6536.0], [79.6, 6536.0], [79.7, 6538.0], [79.8, 6538.0], [79.9, 6538.0], [80.0, 6538.0], [80.1, 6539.0], [80.2, 6539.0], [80.3, 6541.0], [80.4, 6541.0], [80.5, 6640.0], [80.6, 6640.0], [80.7, 6651.0], [80.8, 6651.0], [80.9, 6698.0], [81.0, 6698.0], [81.1, 6701.0], [81.2, 6701.0], [81.3, 6720.0], [81.4, 6720.0], [81.5, 6729.0], [81.6, 6729.0], [81.7, 6733.0], [81.8, 6733.0], [81.9, 6734.0], [82.0, 6734.0], [82.1, 6736.0], [82.2, 6736.0], [82.3, 6736.0], [82.4, 6736.0], [82.5, 6738.0], [82.6, 6738.0], [82.7, 6760.0], [82.8, 6760.0], [82.9, 6760.0], [83.0, 6760.0], [83.1, 6760.0], [83.2, 6760.0], [83.3, 6765.0], [83.4, 6765.0], [83.5, 6766.0], [83.6, 6766.0], [83.7, 6767.0], [83.8, 6767.0], [83.9, 6770.0], [84.0, 6770.0], [84.1, 6775.0], [84.2, 6775.0], [84.3, 6780.0], [84.4, 6780.0], [84.5, 6785.0], [84.6, 6785.0], [84.7, 6786.0], [84.8, 6786.0], [84.9, 6942.0], [85.0, 6942.0], [85.1, 6946.0], [85.2, 6946.0], [85.3, 6986.0], [85.4, 6986.0], [85.5, 7001.0], [85.6, 7001.0], [85.7, 7015.0], [85.8, 7015.0], [85.9, 7015.0], [86.0, 7015.0], [86.1, 7027.0], [86.2, 7027.0], [86.3, 7041.0], [86.4, 7041.0], [86.5, 7046.0], [86.6, 7046.0], [86.7, 7054.0], [86.8, 7054.0], [86.9, 7057.0], [87.0, 7057.0], [87.1, 7058.0], [87.2, 7058.0], [87.3, 7071.0], [87.4, 7071.0], [87.5, 7076.0], [87.6, 7076.0], [87.7, 7080.0], [87.8, 7080.0], [87.9, 7081.0], [88.0, 7081.0], [88.1, 7086.0], [88.2, 7086.0], [88.3, 7088.0], [88.4, 7088.0], [88.5, 7094.0], [88.6, 7094.0], [88.7, 7095.0], [88.8, 7095.0], [88.9, 7096.0], [89.0, 7096.0], [89.1, 7098.0], [89.2, 7098.0], [89.3, 7100.0], [89.4, 7100.0], [89.5, 7100.0], [89.6, 7100.0], [89.7, 7102.0], [89.8, 7102.0], [89.9, 7107.0], [90.0, 7107.0], [90.1, 7111.0], [90.2, 7111.0], [90.3, 7120.0], [90.4, 7120.0], [90.5, 7121.0], [90.6, 7121.0], [90.7, 7124.0], [90.8, 7124.0], [90.9, 7129.0], [91.0, 7129.0], [91.1, 7135.0], [91.2, 7135.0], [91.3, 7135.0], [91.4, 7135.0], [91.5, 7138.0], [91.6, 7138.0], [91.7, 7140.0], [91.8, 7140.0], [91.9, 7141.0], [92.0, 7141.0], [92.1, 7143.0], [92.2, 7143.0], [92.3, 7146.0], [92.4, 7146.0], [92.5, 7150.0], [92.6, 7150.0], [92.7, 7150.0], [92.8, 7150.0], [92.9, 7151.0], [93.0, 7151.0], [93.1, 7151.0], [93.2, 7151.0], [93.3, 7151.0], [93.4, 7151.0], [93.5, 7152.0], [93.6, 7152.0], [93.7, 7158.0], [93.8, 7158.0], [93.9, 7160.0], [94.0, 7160.0], [94.1, 7168.0], [94.2, 7168.0], [94.3, 7173.0], [94.4, 7173.0], [94.5, 7177.0], [94.6, 7177.0], [94.7, 7179.0], [94.8, 7179.0], [94.9, 7184.0], [95.0, 7184.0], [95.1, 7188.0], [95.2, 7188.0], [95.3, 7192.0], [95.4, 7192.0], [95.5, 7195.0], [95.6, 7195.0], [95.7, 7198.0], [95.8, 7198.0], [95.9, 7209.0], [96.0, 7209.0], [96.1, 7211.0], [96.2, 7211.0], [96.3, 7216.0], [96.4, 7216.0], [96.5, 7217.0], [96.6, 7217.0], [96.7, 7218.0], [96.8, 7218.0], [96.9, 7226.0], [97.0, 7226.0], [97.1, 7228.0], [97.2, 7228.0], [97.3, 7231.0], [97.4, 7231.0], [97.5, 7233.0], [97.6, 7233.0], [97.7, 7233.0], [97.8, 7233.0], [97.9, 7235.0], [98.0, 7235.0], [98.1, 7238.0], [98.2, 7238.0], [98.3, 7240.0], [98.4, 7240.0], [98.5, 7240.0], [98.6, 7240.0], [98.7, 7243.0], [98.8, 7243.0], [98.9, 7246.0], [99.0, 7246.0], [99.1, 7247.0], [99.2, 7247.0], [99.3, 7247.0], [99.4, 7247.0], [99.5, 7269.0], [99.6, 7269.0], [99.7, 7271.0], [99.8, 7271.0], [99.9, 7271.0], [100.0, 7271.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 33775.0, "series": [{"data": [[3100.0, 7.0], [200.0, 304.0], [1100.0, 500.0], [300.0, 127.0], [1200.0, 5.0], [21000.0, 2.0], [1300.0, 3.0], [1400.0, 3.0], [1500.0, 1.0], [6300.0, 25.0], [6500.0, 12.0], [6600.0, 8.0], [6400.0, 1.0], [100.0, 33775.0], [400.0, 157.0], [6800.0, 8.0], [7100.0, 6.0], [7200.0, 7.0], [7300.0, 4.0], [500.0, 45.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[6200.0, 280.0], [6300.0, 19.0], [6400.0, 59.0], [6600.0, 3.0], [6500.0, 44.0], [6900.0, 3.0], [6700.0, 19.0], [7100.0, 33.0], [7000.0, 19.0], [7200.0, 21.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 100ms"], [1, "Requests having \nresponse time > 100ms and <= 1,000ms"], [2, "Requests having \nresponse time > 1,000ms"], [3, "Requests in error"]], "maxY": 34408.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 100ms", "isController": false}, {"data": [[1.0, 34408.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 100ms and <= 1,000ms", "isController": false}, {"data": [[2.0, 1090.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.833572453371595, "minX": 1.61637942E12, "maxY": 255.76800000000028, "series": [{"data": [[1.61637948E12, 69.41410186836207], [1.61637942E12, 70.0], [1.61637954E12, 18.833572453371595]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61637942E12, 255.76800000000028]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61637954E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 136.0, "minX": 1.0, "maxY": 7269.0, "series": [{"data": [[2.0, 150.9999999999999], [3.0, 458.49999999999994], [4.0, 139.0], [6.0, 138.0], [7.0, 229.1818181818182], [8.0, 942.0], [9.0, 137.5], [10.0, 319.0], [11.0, 136.0], [12.0, 163.0], [13.0, 296.42105263157896], [14.0, 205.03225806451613], [15.0, 229.57575757575762], [16.0, 139.0], [17.0, 138.75], [18.0, 263.25], [20.0, 137.45454545454547], [21.0, 200.3125], [22.0, 352.7142857142856], [23.0, 137.0], [25.0, 263.375], [26.0, 313.6521739130435], [27.0, 263.56249999999994], [28.0, 137.0], [29.0, 175.0], [30.0, 192.42105263157893], [31.0, 306.5], [33.0, 165.80555555555557], [32.0, 154.4117647058823], [35.0, 244.26315789473682], [34.0, 223.88571428571433], [37.0, 252.3076923076923], [36.0, 237.55], [39.0, 228.63636363636365], [38.0, 262.875], [41.0, 250.88888888888889], [40.0, 330.33333333333337], [43.0, 238.8], [42.0, 138.0], [45.0, 321.4545454545455], [44.0, 147.3846153846154], [47.0, 142.55555555555554], [46.0, 138.0], [49.0, 160.61666666666667], [48.0, 138.91666666666666], [53.0, 191.48780487804876], [52.0, 237.04878048780483], [55.0, 162.4588235294117], [54.0, 188.00952380952376], [59.0, 191.82758620689657], [58.0, 198.3033707865168], [61.0, 140.92307692307696], [60.0, 139.54285714285723], [63.0, 140.0], [62.0, 151.25], [67.0, 144.11538461538467], [66.0, 138.61240310077525], [65.0, 136.79640718562868], [64.0, 139.50000000000003], [70.0, 172.1124545815405], [69.0, 156.64971751412418], [68.0, 137.0], [1.0, 139.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[68.54919999999981, 172.71317142857256]], "isOverall": false, "label": "JoinRoom-Aggregated", "isController": false}, {"data": [[74.0, 6592.75], [79.0, 6271.0], [78.0, 6746.25], [83.0, 6273.666666666667], [87.0, 6489.0], [86.0, 6271.0], [84.0, 6535.0], [91.0, 6509.0], [89.0, 6271.0], [88.0, 6698.0], [94.0, 6717.0], [93.0, 6775.0], [99.0, 6270.0], [97.0, 6448.0], [96.0, 6269.0], [103.0, 6676.5], [101.0, 6269.0], [100.0, 6538.0], [106.0, 6277.0], [105.0, 6432.0], [104.0, 6269.0], [108.0, 6275.0], [114.0, 6272.0], [119.0, 6326.333333333333], [117.0, 6399.5], [116.0, 6494.8], [121.0, 6269.5], [126.0, 6718.5], [124.0, 6298.0], [133.0, 6785.0], [132.0, 6505.5], [131.0, 6322.666666666667], [129.0, 6338.0], [128.0, 6381.0], [143.0, 7246.0], [142.0, 6268.0], [139.0, 6666.666666666667], [138.0, 6538.0], [137.0, 6527.0], [151.0, 6275.5], [149.0, 6680.5], [147.0, 6701.0], [146.0, 6266.5], [145.0, 6268.0], [159.0, 6740.0], [158.0, 6765.0], [154.0, 6377.0], [156.0, 6262.0], [167.0, 6266.0], [166.0, 6478.0], [165.0, 6262.0], [164.0, 6266.0], [162.0, 6429.2], [172.0, 6394.5], [171.0, 6266.0], [170.0, 6846.0], [169.0, 6261.0], [183.0, 6915.0], [179.0, 6967.0], [178.0, 6261.0], [177.0, 6263.0], [176.0, 6869.5], [191.0, 6405.0], [190.0, 6430.5], [189.0, 6273.0], [188.0, 6529.0], [187.0, 6264.0], [185.0, 7240.0], [184.0, 6472.0], [199.0, 6263.0], [196.0, 6403.0], [194.0, 6264.0], [193.0, 6402.0], [207.0, 6752.5], [206.0, 6259.0], [205.0, 6429.666666666667], [204.0, 6259.0], [203.0, 6351.5], [200.0, 6263.0], [215.0, 6520.0], [214.0, 6262.0], [211.0, 7269.0], [210.0, 7151.0], [221.0, 6300.5], [219.0, 6657.666666666667], [217.0, 6259.0], [216.0, 6682.0], [231.0, 6256.0], [228.0, 7128.0], [225.0, 6503.0], [238.0, 6260.0], [237.0, 6258.0], [236.0, 6255.0], [234.0, 6258.0], [233.0, 6262.0], [232.0, 6388.0], [246.0, 6257.5], [245.0, 6566.0], [244.0, 6261.0], [243.0, 6399.0], [240.0, 6388.0], [253.0, 6261.333333333333], [250.0, 6624.333333333333], [249.0, 6713.5], [259.0, 6267.5], [269.0, 6784.333333333333], [268.0, 7121.0], [267.0, 6455.0], [264.0, 6256.0], [263.0, 6360.5], [261.0, 6253.0], [258.0, 6307.0], [257.0, 6258.0], [284.0, 6318.0], [281.0, 6736.0], [280.0, 6281.0], [278.0, 6738.25], [274.0, 6647.0], [272.0, 6403.5], [291.0, 6508.0], [303.0, 6247.0], [301.0, 6382.5], [299.0, 6767.0], [297.0, 6248.0], [295.0, 6250.0], [294.0, 7046.0], [293.0, 6458.0], [292.0, 6250.0], [289.0, 6535.0], [288.0, 6942.0], [306.0, 6392.0], [319.0, 6249.5], [317.0, 7247.0], [314.0, 6380.0], [311.0, 6248.5], [310.0, 6512.0], [309.0, 6249.0], [308.0, 7152.0], [305.0, 6380.0], [304.0, 6274.0], [322.0, 6250.0], [333.0, 6244.0], [335.0, 6342.0], [332.0, 6396.0], [329.0, 6247.0], [328.0, 6246.0], [327.0, 6247.0], [326.0, 6245.0], [325.0, 6247.5], [321.0, 6693.0], [320.0, 6655.666666666667], [348.0, 6640.0], [347.0, 6651.333333333333], [344.0, 6248.0], [343.0, 6476.0], [342.0, 6258.5], [340.0, 6630.0], [339.0, 6245.0], [336.0, 6248.0], [366.0, 6573.0], [363.0, 6693.75], [362.0, 6512.5], [361.0, 6463.0], [356.0, 6436.0], [355.0, 6244.0], [354.0, 7071.0], [353.0, 6243.0], [382.0, 6245.0], [380.0, 7150.0], [379.0, 6240.0], [378.0, 6240.0], [377.0, 6496.666666666667], [375.0, 6509.0], [374.0, 6470.0], [372.0, 6884.333333333333], [371.0, 6243.0], [370.0, 6241.0], [397.0, 6501.0], [396.0, 6239.5], [394.0, 6617.0], [393.0, 6377.0], [389.0, 6315.666666666667], [386.0, 6408.5], [388.0, 6262.0], [384.0, 6241.0], [415.0, 6438.0], [411.0, 6720.5], [409.0, 6310.0], [405.0, 6238.0], [406.0, 6499.0], [402.0, 6504.0], [401.0, 6241.0], [400.0, 6498.0], [431.0, 6487.0], [430.0, 6507.0], [424.0, 6488.333333333333], [425.0, 6381.0], [421.0, 6237.0], [420.0, 6241.0], [419.0, 6237.0], [416.0, 6240.0], [446.0, 6504.0], [442.0, 6350.0], [441.0, 6503.5], [440.0, 6237.0], [438.0, 6236.0], [434.0, 6235.0], [432.0, 6251.0], [459.0, 6233.0], [458.0, 7001.0], [457.0, 6235.0], [453.0, 6233.0], [478.0, 6446.228571428572], [474.0, 6366.5], [470.0, 6605.0], [465.0, 6354.0], [464.0, 6494.0], [494.0, 6299.0], [495.0, 6224.0], [493.0, 6226.0], [488.0, 6302.25], [487.0, 6230.0], [485.0, 6246.0], [484.0, 6225.0], [481.0, 6544.666666666667], [480.0, 6432.0], [511.0, 6435.25], [508.0, 6218.0], [506.0, 6711.0], [503.0, 7107.0], [500.0, 7143.0], [499.0, 6487.0], [498.0, 6531.333333333333], [496.0, 6677.5], [531.0, 6246.0], [542.0, 6553.333333333333], [540.0, 6218.5], [537.0, 6365.0], [536.0, 6354.0], [526.0, 6479.0], [514.0, 6316.0], [513.0, 7015.0], [516.0, 6222.0], [515.0, 6219.0], [519.0, 6603.0], [518.0, 6494.0], [525.0, 6217.0], [523.0, 6218.333333333333], [520.0, 6220.0], [534.0, 6701.0], [533.0, 6600.666666666667], [532.0, 6218.0], [529.0, 6227.0], [528.0, 6222.0], [570.0, 6464.055555555556], [568.0, 6217.0], [567.0, 6698.0], [566.0, 6219.5], [564.0, 6217.0], [560.0, 6345.5], [559.0, 6436.0], [553.0, 6217.0], [544.0, 6479.0]], "isOverall": false, "label": "CreateRoom", "isController": false}, {"data": [[325.75399999999985, 6459.858]], "isOverall": false, "label": "CreateRoom-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 570.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.61637942E12, "maxY": 4.9E-324, "series": [{"data": [[1.61637948E12, 0.0], [1.61637942E12, 0.0], [1.61637954E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61637948E12, 0.0], [1.61637942E12, 0.0], [1.61637954E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61637954E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 160.77064113497127, "minX": 1.61637942E12, "maxY": 6459.858, "series": [{"data": [[1.61637948E12, 160.77064113497127], [1.61637942E12, 205.27877718988836], [1.61637954E12, 217.3658536585365]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61637942E12, 6459.858]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61637954E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61637942E12, "maxY": 4.9E-324, "series": [{"data": [[1.61637948E12, 0.0], [1.61637942E12, 0.0], [1.61637954E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61637942E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61637954E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.61637942E12, "maxY": 4.9E-324, "series": [{"data": [[1.61637948E12, 0.0], [1.61637942E12, 0.0], [1.61637954E12, 0.0]], "isOverall": false, "label": "JoinRoom", "isController": false}, {"data": [[1.61637942E12, 0.0]], "isOverall": false, "label": "CreateRoom", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61637954E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 126.0, "minX": 1.61637942E12, "maxY": 7371.0, "series": [{"data": [[1.61637948E12, 3155.0], [1.61637942E12, 7371.0], [1.61637954E12, 7161.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61637948E12, 144.0], [1.61637942E12, 180.0], [1.61637954E12, 153.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61637948E12, 1148.0], [1.61637942E12, 6983.60000000002], [1.61637954E12, 1149.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61637948E12, 154.0], [1.61637942E12, 6246.0], [1.61637954E12, 1140.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61637948E12, 126.0], [1.61637942E12, 134.0], [1.61637954E12, 134.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61637948E12, 139.0], [1.61637942E12, 138.0], [1.61637954E12, 138.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61637954E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 137.0, "minX": 8.0, "maxY": 21059.0, "series": [{"data": [[518.0, 138.0], [513.0, 138.0], [520.0, 138.0], [525.0, 139.0], [515.0, 139.0], [528.0, 138.0], [516.0, 139.0], [780.0, 6258.0], [8.0, 139.0], [10.0, 140.0], [11.0, 139.0], [13.0, 140.0], [14.0, 138.0], [15.0, 139.0], [16.0, 139.0], [19.0, 139.0], [44.0, 138.0], [47.0, 138.0], [83.0, 137.0], [131.0, 138.0], [179.0, 137.0], [192.0, 138.0], [223.0, 139.0], [234.0, 138.0], [254.0, 139.0], [271.0, 139.0], [256.0, 139.0], [300.0, 138.0], [294.0, 138.0], [298.0, 138.0], [310.0, 138.0], [325.0, 140.0], [328.0, 139.0], [330.0, 138.5], [331.0, 139.0], [345.0, 138.0], [341.0, 138.0], [354.0, 138.0], [360.0, 138.0], [380.0, 139.0], [381.0, 138.0], [384.0, 137.0], [388.0, 138.0], [387.0, 138.0], [425.0, 139.0], [426.0, 139.0], [419.0, 138.0], [457.0, 139.0], [456.0, 139.0], [449.0, 137.0], [455.0, 139.0], [469.0, 138.0], [474.0, 138.0], [473.0, 138.0], [471.0, 138.0], [468.0, 138.0], [483.0, 138.0], [494.0, 139.0], [490.0, 139.0], [492.0, 139.0], [488.0, 139.0], [481.0, 138.0], [482.0, 138.0], [484.0, 138.0], [493.0, 139.0], [487.0, 139.0], [502.0, 138.0], [501.0, 138.0], [498.0, 138.0], [507.0, 139.0], [497.0, 139.0], [499.0, 139.0], [505.0, 139.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[484.0, 21035.0], [490.0, 21059.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 780.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 8.0, "maxY": 4.9E-324, "series": [{"data": [[518.0, 0.0], [513.0, 0.0], [520.0, 0.0], [525.0, 0.0], [515.0, 0.0], [528.0, 0.0], [516.0, 0.0], [780.0, 0.0], [8.0, 0.0], [10.0, 0.0], [11.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [19.0, 0.0], [44.0, 0.0], [47.0, 0.0], [83.0, 0.0], [131.0, 0.0], [179.0, 0.0], [192.0, 0.0], [223.0, 0.0], [234.0, 0.0], [254.0, 0.0], [271.0, 0.0], [256.0, 0.0], [300.0, 0.0], [294.0, 0.0], [298.0, 0.0], [310.0, 0.0], [325.0, 0.0], [328.0, 0.0], [330.0, 0.0], [331.0, 0.0], [345.0, 0.0], [341.0, 0.0], [354.0, 0.0], [360.0, 0.0], [380.0, 0.0], [381.0, 0.0], [384.0, 0.0], [388.0, 0.0], [387.0, 0.0], [425.0, 0.0], [426.0, 0.0], [419.0, 0.0], [457.0, 0.0], [456.0, 0.0], [449.0, 0.0], [455.0, 0.0], [469.0, 0.0], [474.0, 0.0], [473.0, 0.0], [471.0, 0.0], [468.0, 0.0], [483.0, 0.0], [494.0, 0.0], [490.0, 0.0], [492.0, 0.0], [488.0, 0.0], [481.0, 0.0], [482.0, 0.0], [484.0, 0.0], [493.0, 0.0], [487.0, 0.0], [502.0, 0.0], [501.0, 0.0], [498.0, 0.0], [507.0, 0.0], [497.0, 0.0], [499.0, 0.0], [505.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[484.0, 0.0], [490.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 780.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.61637942E12, "maxY": 429.4166666666667, "series": [{"data": [[1.61637948E12, 429.4166666666667], [1.61637942E12, 151.25], [1.61637954E12, 11.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61637954E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61637942E12, "maxY": 429.93333333333334, "series": [{"data": [[1.61637948E12, 429.93333333333334], [1.61637942E12, 150.08333333333334], [1.61637954E12, 11.616666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61637948E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61637954E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61637942E12, "maxY": 429.93333333333334, "series": [{"data": [[1.61637942E12, 8.333333333333334]], "isOverall": false, "label": "CreateRoom-success", "isController": false}, {"data": [[1.61637948E12, 429.93333333333334], [1.61637942E12, 141.75], [1.61637954E12, 11.616666666666667]], "isOverall": false, "label": "JoinRoom-success", "isController": false}, {"data": [[1.61637948E12, 0.03333333333333333]], "isOverall": false, "label": "JoinRoom-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61637954E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.61637942E12, "maxY": 429.93333333333334, "series": [{"data": [[1.61637948E12, 429.93333333333334], [1.61637942E12, 150.08333333333334], [1.61637954E12, 11.616666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61637948E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61637954E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

